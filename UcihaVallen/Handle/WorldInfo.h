#pragma once
#pragma warning(push)
#pragma warning(disable: 26812)
#pragma warning(disable: 6054)
#pragma warning(disable: 6385)
#pragma warning(disable: 4267)
#pragma warning(disable: 4244)
#pragma warning(disable: 4267)
#define _CRT_SECURE_NO_WARNINGS
#ifdef _WIN32
#include <windows.h>
#elif defined(__linux__)
#include <cstring>
#include <stdlib.h>
#include <stdio.h>
#define Sleep(x) sleep(x)
#define __int64 int64_t
#define __int32 int32_t
#define __int16 int16_t
#define __int8 int8_t
#endif
#include <regex>
#include <chrono>
#include <filesystem>
#include <random>
#include <string>
#include <ctime>
#include <future>
#include <climits>
#include <curl/curl.h>
#include "UcihaVallen/Handle/LoginHandler.h"

using namespace chrono;
namespace fs = std::filesystem;
#define HOME_TIME (15 * 1000)

void SendTileUpdate(ENetPeer* peer, int x, int y, int fg, int bg) {
	GameUpdatePacket pkt{};
	pkt.type = 0x14;
	pkt.tileX = x;
	pkt.tileY = y;
	pkt.tileFg = fg;
	pkt.tileBg = bg;

	ENetPacket* ep = enet_packet_create(nullptr, sizeof(GameUpdatePacket), ENET_PACKET_FLAG_RELIABLE);
	memcpy(ep->data, &pkt, sizeof(GameUpdatePacket));
	enet_peer_send(peer, 0, ep);
}
struct {
	std::uint8_t weather = 0;
	std::uint16_t fg = 2, bg = 14, rock = 10, lava = 4;
} WorldDefault;
struct {
	std::vector<std::string> clist;
} C_List;
struct {
	std::vector<int> id;
} Disable_Item;
struct {
	int16_t param1 = 0, param2 = 0, param3 = 0, param4 = 0, param5 = 0, param6 = 0;
} DaylightDragon;
struct {
	long long  last_honors_reset = 0, last_old_honors = 0;
	std::vector<std::pair<std::string, std::string>> world_honors;
} Honors_Update;
struct WorldRate {
	std::string name = "", category = "";
	std::vector<int> rating;
};
void to_json(json& j, const WorldRate& p) {
	j = json{{"n", p.name}, {"c", p.category}, {"r", p.rating}};
}
void from_json(const json& j, WorldRate& p) {
	j["n"].get_to(p.name);
	j["c"].get_to(p.category);
	j["r"].get_to(p.rating);
}
std::vector<WorldRate> world_rating;
struct Position2D {
	int x, y;
};
struct Newbie_Get {
	std::vector<std::pair<int, int>> items;
	int Gemss = 0, Coin = 0, Seasonals_Token = 0;
};
void to_json(json& j, const Newbie_Get& p) {
	j = json{ {"items", p.items}, {"Gemss", p.Gemss},{"Coin", p.Coin},{"Seasonals_Token", p.Seasonals_Token} };
}
void from_json(const json& j, Newbie_Get& p) {
	j["items"].get_to(p.items);
	j["Gemss"].get_to(p.Gemss);
	j["Coin"].get_to(p.Coin);
	j["Seasonals_Token"].get_to(p.Seasonals_Token);
}
std::vector<int> blocked_item_ids;

void load_blocked_items() {
	std::ifstream file("blockdroptrash.json");
	if (!file.is_open()) return;
	nlohmann::json j;
	file >> j;
	blocked_item_ids.clear();
	for (auto& id : j) blocked_item_ids.push_back(id);
}

void save_blocked_items() {
	nlohmann::json j = blocked_item_ids;
	std::ofstream file("blockdroptrash.json");
	file << j.dump(4);
}

bool is_item_blocked(int item_id) {
	return std::find(blocked_item_ids.begin(), blocked_item_ids.end(), item_id) != blocked_item_ids.end();
}
struct Redeem_Code {
	std::vector<std::pair<int, int>> items;
	std::vector<std::string> Player_Rid, UserHasClaim;
	bool GrowPass = false, RoadToGlory = false;
	int RequiringLvl = 0, MaximumEnter = 0, PoepleEnter = 0, Levell = 0, Gemss = 0, Coin = 0, Seasonals_Token = 0, Player_Role = 0;
	std::string code = "";
	long long time = 0;
};
void to_json(json& j, const Redeem_Code& p) {
	j = json{ {"GrowPass", p.GrowPass}, {"RoadToGlory", p.RoadToGlory}, {"Player_Role", p.Player_Role}, {"Player_Rid", p.Player_Rid}, {"UserHasClaim", p.UserHasClaim}, {"items", p.items}, {"Gemss", p.Gemss}, {"Levell", p.Levell}, {"Coin", p.Coin},{"Seasonals_Token", p.Seasonals_Token},{"RequiringLvl", p.RequiringLvl}, {"PoepleEnter", p.PoepleEnter}, {"MaximumEnter", p.MaximumEnter}, {"time", p.time}, {"code", p.code} };
}
void from_json(const json& j, Redeem_Code& p) {
	j["Player_Role"].get_to(p.Player_Role);
	j["Player_Rid"].get_to(p.Player_Rid);
	j["UserHasClaim"].get_to(p.UserHasClaim);
	j["items"].get_to(p.items);
	j["Gemss"].get_to(p.Gemss);
	j["Levell"].get_to(p.Levell);
	j["Coin"].get_to(p.Coin);
	j["Seasonals_Token"].get_to(p.Seasonals_Token);
	j["PoepleEnter"].get_to(p.PoepleEnter);
	j["RequiringLvl"].get_to(p.RequiringLvl);
	j["MaximumEnter"].get_to(p.MaximumEnter);
	j["GrowPass"].get_to(p.GrowPass);
	j["RoadToGlory"].get_to(p.RoadToGlory);
	j["time"].get_to(p.time);
	j["code"].get_to(p.code);
}
//void harvest_seed(World* world_, WorldBlock* block_, int x_, int y_, int drop_count, int net_id = -1, ENetPeer* p_ = NULL);
struct {
	std::vector<Redeem_Code> redeemcode{};
} redeem_codev2;
struct {
	std::vector<Newbie_Get> list{};
} new_get;
struct giveawaySetting {
	std::vector<std::pair<int, int>> Items;
	bool doRandom = false;
	int randomItem = 0;
};
giveawaySetting giveaway;
struct Portrait {
	std::uint32_t c_skin = 0;
	std::uint16_t c_face = 0;
	std::uint16_t c_head = 0;
	std::uint16_t c_hair = 0;
	std::uint32_t c_expression = 1;
	std::uint32_t c_hair_colour = 0;
};
void to_json(json& j, const Portrait& p) {
	j = json{{"c_expression", p.c_expression}, {"c_hair_colour", p.c_hair_colour}, {"c_skin", p.c_skin}, {"c_face", p.c_face}, {"c_head", p.c_head}, {"c_hair", p.c_hair}};
}
void from_json(const json& j, Portrait& p) {
	j["c_skin"].get_to(p.c_skin);
	j["c_face"].get_to(p.c_face);
	j["c_head"].get_to(p.c_head);
	j["c_hair"].get_to(p.c_hair);
	j["c_expression"].get_to(p.c_expression);
	j["c_hair_colour"].get_to(p.c_hair_colour);
}
struct Mannequin {
	uint16_t c_head = 0,c_feet = 0,c_mask = 0,c_hand = 0,c_back = 0,c_hair = 0,c_neck = 0,c_shirt = 0,c_pants = 0;
};
void to_json(json& j, const Mannequin& p) {
	j = json{{"c_head", p.c_head}, {"c_shirt", p.c_shirt}, {"c_pants", p.c_pants}, {"c_feet", p.c_feet}, {"c_mask", p.c_mask}, {"c_hand", p.c_hand}, {"c_back", p.c_back}, {"c_hair", p.c_hair}, {"c_neck", p.c_neck}};
}
void from_json(const json& j, Mannequin& p) {
	j["c_head"].get_to(p.c_head);
	j["c_feet"].get_to(p.c_feet);
	j["c_mask"].get_to(p.c_mask);
	j["c_hand"].get_to(p.c_hand);
	j["c_back"].get_to(p.c_back);
	j["c_hair"].get_to(p.c_hair);
	j["c_neck"].get_to(p.c_neck);
	j["c_shirt"].get_to(p.c_shirt);
	j["c_pants"].get_to(p.c_pants);
}
struct Phonebooth {
	std::uint16_t c_head = 0,c_feet = 0,c_mask = 0,c_hand = 0,c_back = 0,c_hair = 0,c_neck = 0,c_shirt = 0,c_pants = 0,c_ances = 0;
};
void to_json(json& j, const Phonebooth& p) {
	j = json{ {"c_ances", p.c_ances},{"c_head", p.c_head}, {"c_shirt", p.c_shirt}, {"c_pants", p.c_pants}, {"c_feet", p.c_feet}, {"c_mask", p.c_mask}, {"c_hand", p.c_hand}, {"c_back", p.c_back}, {"c_hair", p.c_hair}, {"c_neck", p.c_neck} };
}
void from_json(const json& j, Phonebooth& p) {
	j["c_head"].get_to(p.c_head);
	j["c_feet"].get_to(p.c_feet);
	j["c_mask"].get_to(p.c_mask);
	j["c_hand"].get_to(p.c_hand);
	j["c_back"].get_to(p.c_back);
	j["c_hair"].get_to(p.c_hair);
	j["c_neck"].get_to(p.c_neck);
	j["c_shirt"].get_to(p.c_shirt);
	j["c_pants"].get_to(p.c_pants);
	j["c_ances"].get_to(p.c_ances);
}
struct Donate {
	int item = 0, count = 0;
	std::string name = "", text = "";
};
void to_json(json& j, const Donate& p) {
	j = json{{"item", p.item}, {"count", p.count}, {"name", p.name}, {"text", p.text}};
}
void from_json(const json& j, Donate& p) {
	j["item"].get_to(p.item);
	j["name"].get_to(p.name);
	j["text"].get_to(p.text);
	j["count"].get_to(p.count);
}
struct WorldDrop {
	long long int time = 0;
	int fromx = 0, fromy = 0, id = 0, count = 0, uid = 0, x = 0, y = 0, flag = 0;
};
struct GameGenerator {
	std::string Game_Name = "";
	long long int GameTime = 0;
	bool Respawn = false, Reset = false, Owner = false, Late = false, Smash1 = false, Smash2 = false, NoMusic = false, NoLog = false, AutoStart = false;
	int Punch = 0, Block = 0, Teams = 0, Lives = 0, Time = 0, Score = 0, MinSize = 0, MaxSize = 0, Kill = 0, Last = 0, Goal = 0, Flag = 0, Smash = 0, Die = 0;
};
void to_json(json& j, const GameGenerator& p) {
	j = json{{"Game_Name", p.Game_Name}, {"Teams", p.Teams}, {"Lives", p.Lives}, {"Time", p.Time}, {"Score", p.Score}, {"MinSize", p.MinSize}, {"MaxSize", p.MaxSize}, {"GameTime", p.GameTime}, {"Kill", p.Kill}, {"Last", p.Last}, {"Goal", p.Goal}, {"Flag", p.Flag}, {"Smash", p.Smash}, {"Die", p.Die}, {"Respawn", p.Respawn}, {"Reset", p.Reset}, {"Owner", p.Owner}, {"Late", p.Late}, {"Smash1", p.Smash1}, {"Smash2", p.Smash2}, {"NoMusic", p.NoMusic}, {"NoLog", p.NoLog}, {"AutoStart", p.AutoStart}, {"Punch", p.Punch}, {"Block", p.Block}};
}
void from_json(const json& j, GameGenerator& p) {
	j["Die"].get_to(p.Die);
	j["Late"].get_to(p.Late);
	j["Time"].get_to(p.Time);
	j["Kill"].get_to(p.Kill);
	j["Last"].get_to(p.Last);
	j["Goal"].get_to(p.Goal);
	j["Flag"].get_to(p.Flag);
	j["NoLog"].get_to(p.NoLog);
	j["Teams"].get_to(p.Teams);
	j["Lives"].get_to(p.Lives);
	j["Score"].get_to(p.Score);
	j["Smash"].get_to(p.Smash);
	j["Reset"].get_to(p.Reset);
	j["Owner"].get_to(p.Owner);
	j["Punch"].get_to(p.Punch);
	j["Block"].get_to(p.Block);
	j["Smash1"].get_to(p.Smash1);
	j["Smash2"].get_to(p.Smash2);
	j["MinSize"].get_to(p.MinSize);
	j["MaxSize"].get_to(p.MaxSize);
	j["Respawn"].get_to(p.Respawn);
	j["NoMusic"].get_to(p.NoMusic);
	j["GameTime"].get_to(p.GameTime);
	j["Game_Name"].get_to(p.Game_Name);
	j["AutoStart"].get_to(p.AutoStart);
}
struct FoodType {
	int id, time;
};
struct WorldBlock {
	std::uint8_t b = 64;
	std::uint8_t roll = 0;
	std::uint8_t open = 1;
	std::uint8_t fruit = 0;
	int starttime = 0;
	float local = 0.0f;
	float global = 0.0f;
	int path_parent = -1;
	bool visited = false;
	Phonebooth phoneb{};
	Portrait portrait{};
	uint16_t gravity = 50;
	std::vector<std::string> admins;
	Mannequin mannequin{};
	GameGenerator GameGen{};
	std::vector<FoodType> food{};
	std::vector<int> spices{};
	std::vector<Donate> donates{};
	std::vector<int> offering_items;
	std::uint8_t kranken_pattern = 0;
	std::uint16_t r = 255, g = 128;
	std::vector<std::vector<int>> crystals{};
	std::vector<std::string> gate_dest{ "","","","","" };
	std::vector<std::pair<long long int, std::string>> Admin_Bfg;
	std::uint16_t shelf_1 = 0, shelf_2 = 0, shelf_3 = 0, shelf_4 = 0;
	long long lp = 0, planted = 0, epoch_cycle = 0, infinity_cycle = 10;
	std::pair<std::vector<uint16_t>, string> battle_pet{ {0, 0, 0}, "" };
	std::pair<std::vector<bool>, int> epoch_state{ {true,false,false}, 10 };
	std::vector<std::pair<std::string, std::string>> gate_options{ {"",""},{"",""},{"",""},{"",""},{"",""} };
	std::uint16_t fg = 0, bg = 0;
	std::string txt = "", door_destination = "", door_id = "", owner_name = "", owner_named = "", heart_monitor = "", block_day = "";
	int rate_of_fire = 10, projectile_speed = 100, fire_try = 0, pr = 0, wl = 0, id = 0, c_ = 0, hp = -1, flags = 0x00000000, lock_origin = -1;
	bool applied_fire = false, scanned = false, spin = false, invert = false, locked = false, build_only = false, limit_admins = false, enabled = false;
	std::string story1 = "", story2 = "", story3 = "", story4 = "", story5 = "", button1 = "", button2 = "", button3 = "", button4 = "", button5 = "", destWorld1 = "", destWorld2 = "", destWorld3 = "", destWorld4 = "", destWorld5 = "", destId1 = "", destId2 = "", destId3 = "", destId4 = "", destId5 = "";
	bool btp_def(int state = 1) {
		if (this->battle_pet.first[0] == 0 && this->battle_pet.first[1] == 0 && this->battle_pet.first[2] == 0 && this->battle_pet.second == "" && state == 1) return true;
		else if (state == 2 && this->battle_pet.first[0] == 0 && this->battle_pet.first[1] == 0 && this->battle_pet.first[2] == 0) return true;
		return false;
	}
	bool ep_def() {
		if (this->epoch_state.first[0] == true && this->epoch_state.first[1] == false && this->epoch_state.first[2] == false && this->epoch_state.second == 10) return true;
		return false;
	}
	bool go_def() {
		if (this->gate_options[0].first == "" && this->gate_options[1].first == "" && this->gate_options[2].first == "" && this->gate_options[3].first == "" && this->gate_options[4].first == "" && this->gate_options[0].second == "" && this->gate_options[1].second == "" && this->gate_options[2].second == "" && this->gate_options[3].second == "" && this->gate_options[4].second == "") return true;
		return false;
	}
	bool gd_def() {
		if (this->gate_dest[0] == "" && this->gate_dest[1] == "" && this->gate_dest[2] == "" && this->gate_dest[3] == "" && this->gate_dest[4] == "") return true;
		return false;
	}
	std::uint8_t times = 0, lives = 0;
};
struct WorldMachines {
	long long last_ = 0;
	bool enabled = false, buildmode = false;
	std::uint16_t id = 0, x = 0, y = 0, target_item = 0;
};
struct WorldBulletin {
	int x = 0, y = 0;
	std::string name = "", text = "";
};
struct WorldCCTV {
	std::string logs;
	int x = 0, y = 0;
};
struct WorldSBOX1 {
	int id = 0, count = 0, x = 0, y = 0;
};
struct WorldNPC {
	int uid = 0;
	float kryptis = 0;
	bool enabled = false;
	long long last_ = 0, started_moving = 0;
	std::uint16_t id = 0, x = 0, y = 0, rate_of_fire = 10, projectile_speed = 100;
};
void to_json(json& j, const WorldNPC& p) {
	j = json{{"i", p.id}, {"x", p.x}, {"y", p.y}, {"ps", p.projectile_speed}, {"rf", p.rate_of_fire}, {"kr", p.kryptis}, {"en", p.enabled}, {"l", p.last_}, {"sm", p.started_moving}};
}
void to_json(json& j, const WorldSBOX1& p) {
	j = json{{"i", p.id}, {"c", p.count}, {"x", p.x}, {"y", p.y}};
}
void to_json(json& j, const WorldCCTV& p) {
	j = json{{"x", p.x}, {"y", p.y}, {"l", p.logs}};
}
void to_json(json& j, const WorldBulletin& p) {
	j = json{{"x", p.x}, {"y", p.y}, {"n", p.name}, {"t", p.text}};
}
void to_json(json& j, const WorldMachines& p) {
	j = json{ {"i", p.id}, {"x", p.x}, {"y", p.y}, {"ti", p.target_item}, {"en", p.enabled}, {"bm", p.buildmode}, {"l", p.last_} };
}
void from_json(const json& j, WorldNPC& p) {
	j["x"].get_to(p.x);
	j["y"].get_to(p.y);
	j["i"].get_to(p.id);
	j["l"].get_to(p.last_);
	j["kr"].get_to(p.kryptis);
	j["en"].get_to(p.enabled);
	j["rf"].get_to(p.rate_of_fire);
	j["sm"].get_to(p.started_moving);
	j["ps"].get_to(p.projectile_speed);
}
void from_json(const json& j, WorldSBOX1& p) {
	j["x"].get_to(p.x);
	j["y"].get_to(p.y);
	j["i"].get_to(p.id);
	j["c"].get_to(p.count);
}
void from_json(const json& j, WorldCCTV& p) {
	j["x"].get_to(p.x);
	j["y"].get_to(p.y);
	j["l"].get_to(p.logs);
}
void from_json(const json& j, WorldBulletin& p) {
	j["x"].get_to(p.x);
	j["y"].get_to(p.y);
	j["n"].get_to(p.name);
	j["t"].get_to(p.text);
}
void from_json(const json& j, WorldMachines& p) {
	j["x"].get_to(p.x);
	j["y"].get_to(p.y);
	j["i"].get_to(p.id);
	j["l"].get_to(p.last_);
	j["en"].get_to(p.enabled);
	j["bm"].get_to(p.buildmode);
	j["ti"].get_to(p.target_item);
}
struct World {
	int cycle_ke = 0;
	uint8_t b = 64;
	long long int kickall = 0;
	std::vector<int> infinity{};
	std::vector<WorldNPC> npc{};
	std::vector<WorldCCTV> cctv{};
	uint16_t r = 255, g = 128;
	std::vector<WorldSBOX1> sbox1{};
	std::pair<int, int> s4tb{ 0, 0 };
	std::vector<WorldBlock> blocks{};
	std::string special_event_name = "";
	std::vector<std::string> admins, whitelist;
	std::vector<WorldBulletin> bulletin{};
	std::vector<WorldMachines> machines{};
	uint8_t weather = 0, d_weather = 0;
	std::vector<std::pair<std::string, int>>Game_Score;
	std::vector<ENetPeer*> joinedPlayers;
	std::vector<std::vector<int>> drop_new, cctv_settings;
	std::vector<int> active_jammers, world_event_items;
	bool fresh_world = false, special_event = false;
	std::vector<std::pair<std::string, long long int>> bannedPlayers{};
	long long last_special_event = 0, last_comet_spawn = 0;
	std::string nuked_by = "", text = "", honors = "", name = "", owner_name = "", owner_named = "", category = "";
	int last_lock = 0, special_event_item = 0, special_event_item_taken = 0,  total_drop_uid = 0, npc_uid = 0, guild_id = 0, xenonite = 0, world_settings = 0, fire_try = 0, total_fires = 0, music_bpm = 100, entry_level = 1, World_Time = 0, max_x = 0, max_y = 0, gems = 1, gems_lvl = 0;
};
std::vector<World> worlds;
std::map<std::string, std::vector<WorldNPC>> active_npc;
std::map<std::string, std::vector<WorldMachines>> active_machines;
class Gtps_Shop {
public:
	static bool Disable_Items(int id) {
		for (int c_ = 0; c_ < Disable_Item.id.size(); c_++) {
			if (id == Disable_Item.id[c_]) {
				return true;
			}
			else return false;
		}
	}
	static void Save() {
		std::ofstream file("database/text/buy_price.txt");
		if (!file.is_open()) {
			Logger::Info("ERROR", "Failed to open File missing or empty : database/text/buy_price.txt");
			return;
		}
		for (const auto& pair : Environment()->shop_data) file << pair.first << "|" << pair.second << "\n";
		file.close();
	}
	static bool Already_Created(int32_t item_id) {
		auto iter = Environment()->shop_data.find(item_id);
		return iter != Environment()->shop_data.end();
	}
	static void Load() {
		std::ifstream file("database/text/buy_price.txt");
		if (!file.is_open()) {
			Logger::Info("ERROR", "Failed to open File missing or empty : database/text/buy_price.txt");
			return;
		}
		std::string line;
		while (std::getline(file, line)) { std::istringstream iss(line); std::string token; if (std::getline(iss, token, '|')) { int key = std::atoi(token.c_str()); if (std::getline(iss, token)) { Environment()->shop_data[key] = std::atoi(token.c_str()); } } }
		for (auto item : items) {
			if (Already_Created(item.id)) continue;
			if (item.blockType == BlockTypes::DOOR) Environment()->shop_data[item.id] = 50; //default door 500 per item
			else if (item.blockType == BlockTypes::CLOTHING && item.clothingType == ClothTypes::HAND && item.name.find("Sword") != std::string::npos) Environment()->shop_data[item.id] = 15000; //all sword 15k
			else if (item.id == 5000 || item.id == 3832) Environment()->shop_data[item.id] = 150000; //stuf and background
			else if (item.id == 1796) Environment()->shop_data[item.id] = 300000;
			else if (item.blockType == BlockTypes::WEATHER) Environment()->shop_data[item.id] = 50000; //all weather 50k
			else if (item.blockType == BlockTypes::CRYSTAL) Environment()->shop_data[item.id] = 2000;
			else if (item.id == 156 or item.id == 678 or item.id == 1574) Environment()->shop_data[item.id] = 3000;
			else if (item.id == 362) Environment()->shop_data[item.id] = 40000;
			else if (item.id == 10424) Environment()->shop_data[item.id] = 15000000;
			else if (item.id == 11478) Environment()->shop_data[item.id] = 25000000;
			else if (item.id == 678) Environment()->shop_data[item.id] = 3000;
			else if (item.id == 8188 or item.id == 6862) Environment()->shop_data[item.id] = 300000;
			else if (item.id == 6860 or item.id == 8186) Environment()->shop_data[item.id] = 100000;
			else if (item.id == 9266) Environment()->shop_data[item.id] = 10000;
			else if (item.id == 6856) Environment()->shop_data[item.id] = 25000;
			else if (item.id == 6858) Environment()->shop_data[item.id] = 40000;
			else if (item.id == 5078 or item.id == 5080 or item.id == 5082 or item.id == 5084 or item.id == 7166) Environment()->shop_data[item.id] = 200000;
			else if (item.id == 9770 or item.id == 9780 or item.id == 5172 or item.id == 5174 or item.id == 5158 or item.id == 5160 or item.id == 5136 or item.id == 5140 or item.id == 5156 or item.id == 6280 or item.id == 8552) Environment()->shop_data[item.id] = 0;
		}
		Logger::Info("INFO", "Succesfully loaded - Shop Data | Size: " + to_string(Environment()->shop_data.size()) + "");
	}
	static int Get_Price(int32_t item_id) {
		auto iter = Environment()->shop_data.find(item_id);
		if (iter != Environment()->shop_data.end()) return iter->second;
		else return 0;
	}
};
class Ancient_Goddess {
public:
	static int Ances(ENetPeer* peer, int c) {
		switch (c) {
		case 0:
			return pInfo(peer)->ances = 0;
		case 5080:
			return 5144;
		case 5078:
			return 5126;
		case 5082:
			return 5162;
		case 5084:
			return 5180;
		case 7166:
			return 7168;
		case 5144:
			return 5146;
		case 5126:
			return 5128;
		case 5162:
			return 5164;
		case 5180:
			return 5182;
		case 7168:
			return 7170;
		case 5146:
			return 5148;
		case 5128:
			return 5130;
		case 5164:
			return 5168;
		case 5182:
			return 5184;
		case 7170:
			return 7172;
		case 5148:
			return 5150;
		case 5130:
			return 5132;
		case 5168:
			return 5170;
		case 5184:
			return 5186;
		case 7172:
			return 7174;
		case 5150:
			return 5152;
		case 5132:
			return 5134;
		case 5170:
			return 5172;
		case 5186:
			return 5188;
		case 7174:
			return 9212;
		default:
			return 0;
		}
	}
};
class Role {
public:
	static std::string Prefix(ENetPeer* peer) {
		std::string colorName = "`w";
		try {
			colorName = (pInfo(peer)->Role.Owner_Server ? "`b@" : pInfo(peer)->Role.Unlimited ? "`8@" : pInfo(peer)->Role.God ? "`9@" : pInfo(peer)->Role.Developer ? "`6@" : pInfo(peer)->Role.Administrator ? "`e@" : pInfo(peer)->Role.Moderator ? "`#@" : pInfo(peer)->Role.Vip ? "`w[`1VIP`w] " : "`w");
		}
		catch (std::out_of_range&) {
			return colorName;
		}
		return colorName;
	}
	static std::string Prefix2(ENetPeer* peer, World world_) {
		std::string colorName = "`w";
		try {
			colorName = (pInfo(peer)->Role.Owner_Server ? "`b@" : pInfo(peer)->Role.Unlimited ? "`8@" : pInfo(peer)->Role.God ? "`9@" : pInfo(peer)->Role.Developer ? "`6@" : pInfo(peer)->Role.Administrator ? "`e@" : pInfo(peer)->Role.Moderator ? "`#@" : pInfo(peer)->Role.Vip ? "`w[`1VIP`w] " : (to_lower(pInfo(peer)->tankIDName)) == to_lower(world_.owner_name) ? "`2" : find(world_.admins.begin(), world_.admins.end(), to_lower(pInfo(peer)->tankIDName)) != world_.admins.end() ? "`^" : "`w");
		}
		catch (std::out_of_range&) {
			return colorName;
		}
		return colorName;
	}
	static bool Clist(string name) {
		auto it = std::find(C_List.clist.begin(), C_List.clist.end(), name);
		if (it != C_List.clist.end()) return true;
		return false;
	}
	static bool Owner(ENetPeer* peer) {
		if (pInfo(peer)->Role.Owner_Server) return true;
		return false;
	}
	static bool Unlimited(ENetPeer* peer) {
		if (pInfo(peer)->Role.Unlimited) return true;
		return false;
	}
	static bool God(ENetPeer* peer) {
		if (pInfo(peer)->Role.God) return true;
		return false;
	}
	static bool Developer(ENetPeer* peer) {
		if (pInfo(peer)->Role.Developer) return true;
		return false;
	}
	static bool Administrator(ENetPeer* peer) {
		if (pInfo(peer)->Role.Administrator) return true;
		return false;
	}
	static bool Moderator(ENetPeer* peer) {
		if (pInfo(peer)->Role.Moderator) return true;
		return false;
	}
	static bool Vip(ENetPeer* peer) {
		if (pInfo(peer)->Role.Vip) return true;
		return false;
	}
	static bool Cheater(ENetPeer* peer) {
		if (pInfo(peer)->Role.Cheats) return true;
		return false;
	}
	static int GetLevel(ENetPeer* peer) {
		if (to_lower(pInfo(peer)->tankIDName) == "Ocho") return 10;
		else if (Role::Clist(pInfo(peer)->tankIDName)) return 9;
		else if (Role::Owner(peer)) return 8;
		else if (Role::Unlimited(peer)) return 7;
		else if (Role::God(peer)) return 6;
		else if (Role::Developer(peer)) return 5;
		else if (Role::Administrator(peer)) return 4;
		else if (Role::Moderator(peer)) return 3;
		else if (Role::Vip(peer)) return 2;
		else if (Role::Cheater(peer)) return 1;
		else return 0;
	}
};
int percent(int a, int b) {
	float result = 0;
	result = ((b - a) * 100) / a;
	return abs(result);
}
string item_average(vector<int> const& v, int offer_price = 0) {
	if (v.size() == 0) return " `2relatively close`` to the current average.";
	else {
		int average_price = 1.0 * accumulate(v.begin(), v.end(), 0LL) / v.size();
		if (percent(average_price, offer_price) == 0) return " `2relatively close`` to the current average.";
		if (average_price > offer_price) return " at roughly `2" + to_string(percent(average_price, offer_price)) + "% cheaper`` than the current average.";
		else if (average_price < offer_price) return " at roughly `8" + to_string(percent(average_price, offer_price)) + "% more`` than the current average.";
		else return " `2relatively close`` to the current average.";
	}
}
string xenonite_text(int xenonite) {
	return "Xenonite has changed everyone's powers!" + a + (xenonite & SETTINGS::XENONITE_FORCE_DOUBLE_JUMP ? " `2Double Jump granted!``" : xenonite & SETTINGS::XENONITE_BLOCK_DOUBLE_JUMP ? " `6Double Jump blocked!``" : "") + (xenonite & SETTINGS::XENONITE_FORCE_HIGH_JUMP ? " `2High Jump granted!``" : xenonite & SETTINGS::XENONITE_BLOCK_HIGH_JUMP ? " `6High Jump blocked!``" : "") + (xenonite & SETTINGS::XENONITE_FORCE_STRONG_PUNCH ? " `2Strong Punch granted!`` " : xenonite & SETTINGS::XENONITE_BLOCK_STRONG_PUNCH ? " `6Strong Punch blocked!``" : "") + (xenonite & SETTINGS::XENONITE_FORCE_SPEEDY ? " `2Super Speed granted!``" : xenonite & SETTINGS::XENONITE_BLOCK_SPEEDY ? " `6Super Speed blocked!``" : "") + (xenonite & SETTINGS::XENONITE_FORCE_LONG_PUNCH ? " `2Long Punch granted!``" : xenonite & SETTINGS::XENONITE_BLOCK_LONG_PUNCH ? " `6Long Punch blocked!``" : "") + (xenonite & SETTINGS::XENONITE_FORCE_LONG_BUILD ? " `2Long Build granted!``" : xenonite & SETTINGS::XENONITE_BLOCK_LONG_BUILD ? " `6Long Build blocked!``" : "");
}
void punch_tile(ENetPeer* peer, int x, int y, int t_, int n_, int net_, int state_, bool tree_ = false, int count_ = 1, bool every_ = true) {
	PlayerMoving data{ net_, 0, t_, state_, n_, x, y, 0, (float)x, (float)y, 0, 0 };
	BYTE* p_ = packPlayerMoving(&data);
	p_[2] = 0, p_[3] = tree_ ? count_ : 0;
	*(__int16*)(p_ + 8) = pInfo(peer)->hand;
	if (every_) {
		for (ENetPeer* cp_ = server->peers; cp_ < &server->peers[server->peerCount]; ++cp_) {
			if (cp_->state != ENET_PEER_STATE_CONNECTED or cp_->data == NULL or pInfo(cp_)->world != pInfo(peer)->world) continue;
			send_raw(cp_, 4, p_, 56, ENET_PACKET_FLAG_RELIABLE);
		}
	}
	else {
		send_raw(peer, 4, p_, 56, ENET_PACKET_FLAG_RELIABLE);
	}
	delete[]p_;
}
void update_tile(ENetPeer* peer, int16_t x, int16_t y, int16_t n_, bool add = false, bool everyone = false) {
	PlayerMoving data{ 0, 0, 3, 0, n_, x, y, 0, (float)x, (float)y, 0, 0 };
	BYTE* p_ = packPlayerMoving(&data);
	if (everyone or peer == NULL) {
		for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
			if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL or pInfo(currentPeer)->world != pInfo(peer)->world) continue;
			send_raw(currentPeer, 4, p_, 56, ENET_PACKET_FLAG_RELIABLE);
		}
	}
	else send_raw(peer, 4, p_, 56, ENET_PACKET_FLAG_RELIABLE);
	delete[] p_;
}
void create_world(World* world_, int width, int height) {
	world_->fresh_world = true;

	if (width > 255) width = 255;
	if (width < 30) width = 30;
	if (height > 255) height = 255;
	if (height < 30) height = 30;

	world_->max_x = width;
	world_->max_y = height;
	world_->blocks.clear();

	const int size = width * height;
	const int main_door_x = (rand() % (width - 4)) + 2;

	int fg_values[] = { 0, 2, 4, 6, 8, 10 };
	int bg_value = 14;

	for (int index = 0; index < size; ++index) {
		CL_Vec2i pos(index % width, index / width);
		WorldBlock block_{ 0, 0, 0 };

		if (pos.y >= height / 2) {
			if (pos.y >= height - 6) {
				block_.fg = fg_values[4];
				block_.bg = bg_value;
			}
			else if (pos.y == height / 2 && pos.x == main_door_x) {
				block_.fg = fg_values[4];
				block_.bg = bg_value;
			}
			else if (pos.y <= height - 6 && pos.y >= height - 10) {
				int rnd = rand() % 76;
				block_.fg = (rnd > 20 ? fg_values[1] : (rnd > 4 ? fg_values[2] : fg_values[5]));
				block_.bg = bg_value;
			}
			else {
				block_.fg = fg_values[1];
				block_.bg = bg_value;
				if (pos.y >= (height / 2) + 2)
					block_.fg = ((rand() % 51) > 1 ? fg_values[1] : fg_values[5]);
			}
		}
		else if (pos.y == height / 2 - 1 && pos.x == main_door_x) {
			block_.fg = fg_values[3];
			block_.bg = bg_value;
		}

		world_->blocks.push_back(block_);
	}
}
void sendArrow(ENetPeer* peer, std::
	uint16_t itemid, bool droppeditem) {
	PlayerMoving pmov;
	memset(&pmov, 0, sizeof(PlayerMoving));
	*(uint32_t*)(&pmov) = 37 | (droppeditem << 8);
	pmov.netID = itemid;
	uint8_t* pmovpacked = packPlayerMoving(&pmov);
	uint8_t* packet = new uint8_t[4 + 56];
	memset(packet, 0, 4 + 56);
	packet[0] = 4;
	memcpy(packet + 4, pmovpacked, sizeof(PlayerMoving));
	ENetPacket* epacket = enet_packet_create(packet, 4 + 56, ENET_PACKET_FLAG_RELIABLE);
	enet_peer_send(peer, 0, epacket);
	delete pmovpacked;
	delete[] packet;
}
World create_world(const std::string& name_, int s_) {
	World world_;
	world_.name = name_;
	world_.fresh_world = true;
	world_.weather = WorldDefault.weather;
	int d_ = rand() % (s_ / (s_ / 100) - 4) + 2;
	for (int i_ = 0; i_ < s_; i_++) {
		WorldBlock block_{ 0, 0, 0 };
		if (i_ >= 3800 && i_ < 5400 && !(rand() % 50)) block_.fg = WorldDefault.rock;
		else if (i_ >= 3700 && i_ < 5400) {
			if (i_ > 5000) {
				if (rand() % 8 < 3) block_.fg = WorldDefault.lava;
				else block_.fg = WorldDefault.fg;
			}
			else block_.fg = WorldDefault.fg;
		}
		else if (i_ >= 5400) block_.fg = 8;
		if (i_ == 3600 + d_) block_.fg = 6;
		if (i_ == 3700 + d_) block_.fg = 8;
		if (i_ >= 3700) block_.bg = WorldDefault.bg;
		world_.blocks.push_back(block_);
	}
	world_.max_y = world_.blocks.size() / 100;
	world_.max_x = world_.blocks.size() / world_.max_y;
	worlds.push_back(world_);
	world_ = {};
	return worlds[worlds.size() - 1];
}
World get_world(const std::string& name_, int huge_size = 0) {
	std::vector<World>::iterator p = find_if(worlds.begin(), worlds.end(), [name_](const World& a) { return a.name == name_; });
	if (p != worlds.end()) return worlds[p - worlds.begin()];
	std::string path_ = "database/worlds/" + name_ + "_.json";
	if (std::filesystem::exists(path_)) {
		World world_;
		bool add_tworld = false;
		try {
			json world_read;
			std::ifstream world_file(path_, std::ifstream::binary);
			world_file >> world_read;
			world_file.close();
			world_.name = name_;
			world_.entry_level = (!(world_read.find("entry_level") != world_read.end()) ? world_.entry_level : world_read["entry_level"].get<int>());
			world_.nuked_by = (!(world_read.find("n_b") != world_read.end()) ? world_.nuked_by : world_read["n_b"].get<std::string>());
			world_.owner_name = (!(world_read.find("owner") != world_read.end()) ? world_.owner_name : world_read["owner"].get<std::string>());
			world_.music_bpm = (!(world_read.find("music_bpm") != world_read.end()) ? world_.music_bpm : world_read["music_bpm"].get<int>());
			world_.gems = (!(world_read.find("c_gems") != world_read.end()) ? world_.gems : world_read["c_gems"].get<int>());
			world_.gems_lvl = (!(world_read.find("gems_lvl") != world_read.end()) ? world_.gems_lvl : world_read["gems_lvl"].get<int>());
			world_.guild_id = (!(world_read.find("guild_world_id") != world_read.end()) ? world_.guild_id : world_read["guild_world_id"].get<int>());
			world_.world_settings = (!(world_read.find("w_s") != world_read.end()) ? world_.world_settings : world_read["w_s"].get<int>());
			world_.World_Time = (!(world_read.find("wt") != world_read.end()) ? world_.World_Time : world_read["wt"].get<int>());
			world_.last_lock = (!(world_read.find("last_lock") != world_read.end()) ? world_.last_lock : world_read["last_lock"].get<int>());
			world_.r = (!(world_read.find("r") != world_read.end()) ? world_.r : world_read["r"].get<std::uint16_t>());
			world_.g = (!(world_read.find("g") != world_read.end()) ? world_.g : world_read["g"].get<std::uint16_t>());
			world_.b = (!(world_read.find("b") != world_read.end()) ? world_.b : world_read["b"].get<std::uint8_t>());
			world_.category = (!(world_read.find("ct") != world_read.end()) ? world_.category : world_read["ct"].get<std::string>());
			world_.whitelist = (!(world_read.find("whitelist") != world_read.end()) ? world_.whitelist : world_read["whitelist"].get<std::vector<std::string>>());
			world_.admins = (!(world_read.find("admins") != world_read.end()) ? world_.admins : world_read["admins"].get<std::vector<std::string>>());
			world_.xenonite = (!(world_read.find("xeno") != world_read.end()) ? world_.xenonite : world_read["xeno"].get<int>());
			world_.owner_named = (!(world_read.find("o2") != world_read.end()) ? world_.owner_named : world_read["o2"].get<std::string>());
			world_.weather = (!(world_read.find("weather") != world_read.end()) ? world_.weather : world_read["weather"].get<std::uint8_t>());
			world_.d_weather = (!(world_read.find("d_weather") != world_read.end()) ? world_.d_weather : world_read["d_weather"].get<std::uint8_t>());
			world_.cycle_ke = (!(world_read.find("cycle_ke") != world_read.end()) ? world_.cycle_ke : world_read["cycle_ke"].get<int>());
			world_.infinity = (!(world_read.find("infinity") != world_read.end()) ? world_.infinity : world_read["infinity"].get<std::vector<int>>());
			world_.s4tb = (!(world_read.find("s4tb") != world_read.end()) ? world_.s4tb : world_read["s4tb"].get<std::pair<int, int>>());
			json  p_ = world_read["blocks"].get<json>();
			for (int i_ = 0; i_ < p_.size(); i_++) {
				WorldBlock b_{};
				if (p_[i_].find("f") != p_[i_].end()) {
					b_.fg = p_[i_]["f"].get<uint16_t>();
					if (b_.fg == 5814 && world_.guild_id == 0) b_.fg = 242;
					if (items[b_.fg].name.find("null") != std::string::npos or items[b_.fg].name.find("null_item") != std::string::npos) b_.fg = 0;
					if (items[b_.fg].blocked_place) b_.fg = 0;
				}
				if (p_[i_].find("p") != p_[i_].end()) b_.planted = p_[i_]["p"].get<long long>();
				if (p_[i_].find("fc") != p_[i_].end()) b_.fruit = p_[i_]["fc"].get<std::uint8_t>();
				if (p_[i_].find("t") != p_[i_].end()) b_.txt = p_[i_]["t"].get<std::string>();
				if (p_[i_].find("wl") != p_[i_].end()) b_.wl = p_[i_]["wl"].get<std::uint32_t>();
				if (p_[i_].find("dd") != p_[i_].end()) b_.door_destination = p_[i_]["dd"].get<std::string>();
				if (p_[i_].find("di") != p_[i_].end()) b_.door_id = p_[i_]["di"].get<std::string>();
				if (p_[i_].find("mq") != p_[i_].end()) b_.mannequin = p_[i_]["mq"].get<Mannequin>();
				if (p_[i_].find("pbooth") != p_[i_].end()) b_.phoneb = p_[i_]["pbooth"].get<Phonebooth>();
				if (p_[i_].find("cr") != p_[i_].end()) b_.crystals = p_[i_]["cr"].get<std::vector<vector<int>>>();
				if (p_[i_].find("dnt") != p_[i_].end()) b_.donates = p_[i_]["dnt"].get<std::vector<Donate>>();
				if (p_[i_].find("r1") != p_[i_].end()) b_.r = p_[i_]["r1"].get<int>();
				if (p_[i_].find("g1") != p_[i_].end()) b_.g = p_[i_]["g1"].get<int>();
				if (p_[i_].find("b1") != p_[i_].end()) b_.b = p_[i_]["b1"].get<int>();
				if (p_[i_].find("prs") != p_[i_].end()) b_.portrait = p_[i_]["prs"].get<Portrait>();
				if (p_[i_].find("bep") != p_[i_].end()) b_.shelf_1 = p_[i_]["bep"].get<std::uint32_t>();
				if (p_[i_].find("hm") != p_[i_].end()) b_.heart_monitor = p_[i_]["hm"].get<std::string>();
				if (p_[i_].find("sh2") != p_[i_].end()) b_.shelf_2 = p_[i_]["sh2"].get<std::uint32_t>();
				if (p_[i_].find("sh3") != p_[i_].end()) b_.shelf_3 = p_[i_]["sh3"].get<std::uint32_t>();
				if (p_[i_].find("sh4") != p_[i_].end()) b_.shelf_4 = p_[i_]["sh4"].get<std::uint32_t>();
				if (p_[i_].find("ps") != p_[i_].end()) b_.projectile_speed = p_[i_]["ps"].get<int>();
				if (p_[i_].find("rf") != p_[i_].end()) b_.rate_of_fire = p_[i_]["rf"].get<int>();
				if (p_[i_].find("tm") != p_[i_].end()) b_.times = p_[i_]["tm"].get<std::uint8_t>();
				if (p_[i_].find("ls") != p_[i_].end()) b_.lives = p_[i_]["ls"].get<std::uint8_t>();
				if (p_[i_].find("ep_c") != p_[i_].end()) b_.epoch_cycle = p_[i_]["ep_c"].get<int>();
				if (p_[i_].find("ep_s") != p_[i_].end()) b_.epoch_state = p_[i_]["ep_s"].get<std::pair<std::vector<bool>, int>>();
				if (p_[i_].find("if_c") != p_[i_].end()) b_.infinity_cycle = p_[i_]["if_c"].get<int>();
				if (p_[i_].find("btp") != p_[i_].end()) b_.battle_pet = p_[i_]["btp"].get<std::pair<std::vector<uint16_t>, std::string>>();
				if (p_[i_].find("b") != p_[i_].end()) b_.bg = p_[i_]["b"].get<std::uint16_t>();
				if (p_[i_].find("n") != p_[i_].end()) b_.roll = p_[i_]["n"].get<std::uint8_t>();
				if (p_[i_].find("id") != p_[i_].end()) b_.id = p_[i_]["id"].get<int>();
				if (p_[i_].find("c") != p_[i_].end()) b_.c_ = p_[i_]["c"].get<int>();
				if (p_[i_].find("pr") != p_[i_].end()) b_.pr = p_[i_]["pr"].get<int>();
				if (p_[i_].find("o") != p_[i_].end()) b_.open = p_[i_]["o"].get<std::uint8_t>();
				if (p_[i_].find("g_d") != p_[i_].end()) b_.gate_dest = p_[i_]["g_d"].get<std::vector<std::string>>();
				if (p_[i_].find("g_o") != p_[i_].end()) b_.gate_options = p_[i_]["g_o"].get<std::vector<std::pair<std::string, std::string>>>();
				if (p_[i_].find("fl") != p_[i_].end()) {
					b_.flags = p_[i_]["fl"].get<int>();
					if (b_.flags & 0x00100000) world_.total_fires++;
					if (b_.flags & 0x00400000 && (b_.fg == 4992 || b_.fg == 226 or b_.fg == 3616 or b_.fg == 1276 or b_.fg == 1278 or b_.fg == 4758 or b_.fg == 3750 or b_.fg == 4992 or b_.fg == 3072 or b_.fg == 4884)) world_.active_jammers.push_back(b_.fg);
					if (b_.flags & 0x00400000) if (items[b_.fg].blockType == BlockTypes::TRICKSTER) add_tworld = true;
				}
				if (p_[i_].find("food") != p_[i_].end()) {
					json read_block_donation_ = p_[i_]["food"].get<json>();
					for (int i_2 = 0; i_2 < read_block_donation_.size(); i_2++) {
						FoodType new_donate;
						new_donate.id = read_block_donation_[i_2]["id"].get<int>();
						new_donate.time = read_block_donation_[i_2]["time"].get<int>();
						b_.food.push_back(new_donate);
					}
				}
				if (p_[i_].find("spices") != p_[i_].end()) b_.spices = p_[i_]["spices"].get<std::vector<int>>();
				if (p_[i_].find("starttime") != p_[i_].end()) b_.starttime = p_[i_]["starttime"].get<int>();
				if (p_[i_].find("en") != p_[i_].end()) b_.enabled = p_[i_]["en"].get<bool>();
				if (p_[i_].find("in") != p_[i_].end()) b_.invert = p_[i_]["in"].get<bool>();
				if (p_[i_].find("sn") != p_[i_].end()) b_.spin = p_[i_]["sn"].get<bool>();
				if (p_[i_].find("g") != p_[i_].end()) b_.gravity = p_[i_]["g"].get<int>();
				if (p_[i_].find("l") != p_[i_].end()) b_.locked = p_[i_]["l"].get<bool>();
				if (p_[i_].find("lq") != p_[i_].end()) b_.lock_origin = p_[i_]["lq"].get<int>();
				if (p_[i_].find("lo") != p_[i_].end()) b_.owner_name = p_[i_]["lo"].get<std::string>();
				if (p_[i_].find("a") != p_[i_].end()) b_.admins = p_[i_]["a"].get<std::vector<std::string>>();
				if (p_[i_].find("bo") != p_[i_].end()) b_.build_only = p_[i_]["bo"].get<bool>();
				if (p_[i_].find("la") != p_[i_].end()) b_.limit_admins = p_[i_]["la"].get<bool>();
				if (p_[i_].find("atmin") != p_[i_].end()) b_.Admin_Bfg = p_[i_]["atmin"].get<std::vector<std::pair<long long int, string>>>();
				world_.blocks.push_back(b_);
			}
			world_.drop_new = (!(world_read.find("drop_new") != world_read.end()) ? world_.drop_new : world_read["drop_new"].get<std::vector<vector<int>>>());
			world_.sbox1 = (!(world_read.find("sbox1") != world_read.end()) ? world_.sbox1 : world_read["sbox1"].get<std::vector<WorldSBOX1>>());
			world_.cctv_settings = (!(world_read.find("cc_s") != world_read.end()) ? world_.cctv_settings : world_read["cc_s"].get<std::vector<vector<int>>>());
			world_.cctv = (!(world_read.find("cctv") != world_read.end()) ? world_.cctv : world_read["cctv"].get<std::vector<WorldCCTV>>());
			world_.bulletin = (!(world_read.find("bulletin") != world_read.end()) ? world_.bulletin : world_read["bulletin"].get<std::vector<WorldBulletin>>());
			world_.npc = (!(world_read.find("npc") != world_read.end()) ? world_.npc : world_read["npc"].get<std::vector<WorldNPC>>());
			world_.machines = (!(world_read.find("machines") != world_read.end()) ? world_.machines : world_read["machines"].get<std::vector<WorldMachines>>());
			world_.max_y = world_.blocks.size() / 100;
			world_.max_x = world_.blocks.size() / world_.max_y;
			if (world_.drop_new.size() == 0) world_.total_drop_uid = 0;
			else world_.total_drop_uid = world_.drop_new[world_.drop_new.size() - 1][2];
		}
		catch (exception err) {
			Logger::Info("ERROR", "world load error name: " + name_);
			world_ = create_world(name_, 6000);
		}
		worlds.push_back(world_);
		if (world_.npc.size() != 0 or world_.machines.size() != 0 or add_tworld) {
			if (find(Environment()->Another_Worlds.begin(), Environment()->Another_Worlds.end(), world_.name) == Environment()->Another_Worlds.end()) 	Environment()->Another_Worlds.push_back(world_.name);
		}
		return world_;
	}
	return create_world(name_, 6000);
}
World create_world_blast(ENetPeer* peer, const string& name_, int blast) {
	std::vector<std::uint16_t> id;
	World world_;
	if (blast == 9164 || blast == 1402 || blast == 1060 || blast == 8738 || blast == 8556 || blast == 6420) {
		if (blast == 1060) world_.d_weather = 6;
		if (blast == 8738) world_.d_weather = 46;
		int sign = 4;
		vector<string> sign_text = { "Enjoy your rewards, then combine `2Root Cuttings`` in a `2Chemical Combiner`` to get better bountiful seeds and other items!", "First, you'll need to find some bountiful seeds. Plant these in `2Fertile Soil Blocks``.", "Bountiful trees will grow `2Roots``. When you harvest the tree, its root will remain.", "Plant the `2SAME type of bountiful seed`` on old roots to continue growing the roots!" };
		int d_ = rand() % (6000 / (6000 / 100) - 4) + 2;
		for (int i_ = 0; i_ < 6000; i_++) {
			WorldBlock block_{ 0, 0, 0 };
			if (blast == 9164) {
				if (i_ >= 1800 && i_ < 5400 && !(rand() % 50)) block_.fg = 8532;
				else if (i_ > 1600 && i_ < 1700 && !(rand() % 2)) block_.fg = 8532;
				else if (i_ >= 1700 && i_ < 5400) {
					if (i_ > 5000) {
						if (rand() % 8 < 3) block_.fg = 9162;
						else block_.fg = 8532;
					}
					else block_.fg = 8532;
				}
				else if (i_ >= 5400) block_.fg = 8;
				if (i_ == 1600 + d_) block_.fg = 6;
				if (i_ == 1700 + d_) block_.fg = 8;
				if (i_ >= 1700) block_.bg = 14;
			}
			else if (blast == 1402) {
				if (i_ >= 5400) block_.fg = 8;
				if (i_ == 5200) block_.fg = 6;
				if (i_ == 5300)block_.fg = 8;
			}
			else if (blast == 1060) {
				if (i_ >= 3800 && i_ < 5400 && !(rand() % 50)) block_.fg = 10;
				else if (i_ >= 3600 && i_ < 3700) {
					id = Environment()->small_seeds;
					block_.fg = id[rand() % id.size()], block_.fruit = items[block_.fg].rarity == 999 ? 1 : (rand() % 4) + 1, block_.planted = time(nullptr) - (items[block_.fg].growTime);
				}
				else if (i_ >= 3700 && i_ < 5400) {
					if (i_ > 5000) {
						if (rand() % 8 < 3) block_.fg = 4;
						else block_.fg = 2;
					}
					else block_.fg = 2;
				}
				else if (i_ >= 5400) block_.fg = 8;
				if (i_ == 3600 + d_) block_.fg = 6;
				if (i_ == 3700 + d_) block_.fg = 8;
				if (i_ >= 3700) block_.bg = 14;
			}
			else if (blast == 8556) {
				if (i_ > 3499 && i_ < 5400) block_.fg = 8560;
				if (i_ > 3499 && i_ < 5400) block_.bg = 8562;
				if (i_ > 5000 && i_ < 5400 && !(rand() % 20)) block_.fg = 8564;
				if (i_ > 2535 && i_ < 2565) block_.fg = 8560;
				if (i_ > 3025 && i_ < 3075) block_.fg = 8560;
				if (i_ == 3440 or i_ == 3460 or i_ == 2950) {
					block_.fg = 20;
					block_.txt = "Hello, welcome to Hospital blast `9 " + Environment()->server_name + "``! You can Surg-E player on bed hospital or use Train-E.";
				}
				if (i_ == 3434 or i_ == 3436 or i_ == 3464 or i_ == 3466) block_.fg = 1294;
				if (i_ == 2944 or i_ == 2946 or i_ == 2954 or i_ == 2956) block_.fg = 1294;
				if (i_ == 3447 or i_ == 3453) block_.fg = 8558;
				if (i_ == 3429 or i_ == 3431 or i_ == 3469 or i_ == 3471) block_.fg = 1256;
				if (i_ == 3430 or i_ == 3432 or i_ == 3470 or i_ == 3472) block_.fg = 1288;
				if (i_ == 2939 or i_ == 2941 or i_ == 2959 or i_ == 2961) block_.fg = 1256;
				if (i_ == 2940) block_.fg = 1288;
				if (i_ == 2942) block_.fg = 1288;
				if (i_ == 2960) block_.fg = 1288;
				if (i_ == 2962) block_.fg = 1288;
				if (i_ == 2636) block_.fg = 2794;
				if (i_ == 2637) block_.fg = 2794;
				if (i_ == 2663) block_.fg = 2794;
				if (i_ == 2664) block_.fg = 2794;
				if (i_ == 3355) block_.fg = 8560;
				if (i_ == 3255) block_.fg = 8560;
				if (i_ == 3155) block_.fg = 8560;
				if (i_ == 3055) block_.fg = 8560;
				if (i_ == 2955) block_.fg = 8560;
				if (i_ == 2855) block_.fg = 8560;
				if (i_ == 2755) block_.fg = 8560;
				if (i_ == 2655) block_.fg = 8560;
				if (i_ == 2555) block_.fg = 8560;
				if (i_ == 3465) block_.fg = 8560;
				if (i_ == 3365) block_.fg = 8560;
				if (i_ == 3265) block_.fg = 8560;
				if (i_ == 3165) block_.fg = 8560;
				if (i_ == 3065) block_.fg = 8560;
				if (i_ == 2965) block_.fg = 8560;
				if (i_ == 2865) block_.fg = 8560;
				if (i_ == 2765) block_.fg = 8560;
				if (i_ == 2665) block_.fg = 8560;
				if (i_ == 2565) block_.fg = 8560;
				if (i_ == 3475) block_.fg = 8560;
				if (i_ == 3375) block_.fg = 8560;
				if (i_ == 3275) block_.fg = 8560;
				if (i_ == 3175) block_.fg = 8560;
				if (i_ == 3075) block_.fg = 8560;
				if (i_ == 3345) block_.fg = 8560;
				if (i_ == 3245) block_.fg = 8560;
				if (i_ == 3145) block_.fg = 8560;
				if (i_ == 3045) block_.fg = 8560;
				if (i_ == 2945) block_.fg = 8560;
				if (i_ == 2845) block_.fg = 8560;
				if (i_ == 2745) block_.fg = 8560;
				if (i_ == 2645) block_.fg = 8560;
				if (i_ == 2545) block_.fg = 8560;
				if (i_ == 3435) block_.fg = 8560;
				if (i_ == 3335) block_.fg = 8560;
				if (i_ == 3235) block_.fg = 8560;
				if (i_ == 3135) block_.fg = 8560;
				if (i_ == 3035) block_.fg = 8560;
				if (i_ == 2935) block_.fg = 8560;
				if (i_ == 2835) block_.fg = 8560;
				if (i_ == 2735) block_.fg = 8560;
				if (i_ == 2635) block_.fg = 8560;
				if (i_ == 2535) block_.fg = 8560;
				if (i_ == 3425) block_.fg = 8560;
				if (i_ == 3325) block_.fg = 8560;
				if (i_ == 3225) block_.fg = 8560;
				if (i_ == 3125) block_.fg = 8560;
				if (i_ == 3025) block_.fg = 8560;
				if (i_ > 3425 && i_ < 3475) block_.bg = 1290;
				if (i_ > 3324 && i_ < 3327) block_.bg = 1290;
				if (i_ > 3328 && i_ < 3332) block_.bg = 1290;
				if (i_ > 3333 && i_ < 3342) block_.bg = 1290;
				if (i_ > 3343 && i_ < 3357) block_.bg = 1290;
				if (i_ > 3358 && i_ < 3362) block_.bg = 1290;
				if (i_ > 3363 && i_ < 3367) block_.bg = 1290;
				if (i_ > 3368 && i_ < 3372) block_.bg = 1290;
				if (i_ > 3373 && i_ < 3376) block_.bg = 1290;
				if (i_ > 3225 && i_ < 3275) block_.bg = 1290;
				if (i_ > 3125 && i_ < 3175) block_.bg = 1290;
				if (i_ > 3025 && i_ < 3075) block_.bg = 1290;
				if (i_ > 2935 && i_ < 2965) block_.bg = 1290;
				if (i_ > 2835 && i_ < 2865) block_.bg = 1290;
				if (i_ > 2735 && i_ < 2765) block_.bg = 1290;
				if (i_ > 2635 && i_ < 2665) block_.bg = 1290;
				if (i_ > 2535 && i_ < 2565) block_.bg = 1290;
				if (i_ == 3342) block_.bg = 1292;
				if (i_ == 3343) block_.bg = 1292;
				if (i_ == 3337) block_.bg = 1292;
				if (i_ == 3338) block_.bg = 1292;
				if (i_ == 3332) block_.bg = 1292;
				if (i_ == 3333) block_.bg = 1292;
				if (i_ == 3327) block_.bg = 1292;
				if (i_ == 3328) block_.bg = 1292;
				if (i_ == 3357) block_.bg = 1292;
				if (i_ == 3358) block_.bg = 1292;
				if (i_ == 3362) block_.bg = 1292;
				if (i_ == 3363) block_.bg = 1292;
				if (i_ == 3367) block_.bg = 1292;
				if (i_ == 3368) block_.bg = 1292;
				if (i_ == 3372) block_.bg = 1292;
				if (i_ == 3373) block_.bg = 1292;
				if (i_ == 3450) block_.fg = 6;
				if (i_ == 3550) block_.fg = 8;
				if (i_ >= 5400) block_.fg = 8;
				world_.d_weather = 45;
			}
			else if (blast == 6420) {
				if (i_ > 3545 && i_ < 3555) block_.fg = 6550;
				if (i_ > 2746 && i_ < 2755) block_.fg = 6550;
				if (i_ == 3454 or i_ == 3354 or i_ == 3355 or i_ == 3255 or i_ == 3256 or i_ == 3257 or i_ == 3258 or i_ == 3158 or i_ == 3058 or i_ == 2958 or i_ == 2858) block_.fg = 6550;
				if (i_ > 2853 && i_ < 2859) block_.fg = 6550;
				if (i_ == 3446 or i_ == 3346 or i_ == 3246 or i_ == 3146 or i_ == 3046 or i_ == 2946 or i_ == 2846 or i_ == 2847) block_.fg = 6554;
				if (i_ == 3545 or i_ == 3445 or i_ == 3345 or i_ == 3245 or i_ == 3145 or i_ == 3045 or i_ == 2945 or i_ == 2845) block_.fg = 6576;
				if (i_ == 3444 or i_ == 3344 or i_ == 3244 or i_ == 3144 or i_ == 3044 or i_ == 2944) block_.fg = 6570;
				if (i_ == 3544) block_.fg = 6574;
				if (i_ == 2844) block_.fg = 6572;
				if (i_ == 3645) block_.fg = 6582;
				if (i_ == 3646 or i_ == 3653) block_.fg = 6584;
				if (i_ == 2760 or i_ == 2655) block_.fg = 6566;
				if (i_ == 2647 or i_ == 2648 or i_ == 2649 or i_ == 2650 or i_ == 2651 or i_ == 2652 or i_ == 2653 or i_ == 2654 or i_ == 2755 or i_ == 2756 or i_ == 2757 or i_ == 2758 or i_ == 2759) block_.fg = 6564;
				if (i_ == 2646 or i_ == 2745) block_.fg = 6596;
				if (i_ == 2746) block_.fg = 6578;
				if (i_ == 3647 or i_ == 3648 or i_ == 3649 or i_ == 3650 or i_ == 3651 or i_ == 3652) block_.fg == 6580;
				if (i_ == 3654 or i_ == 3456 or i_ == 3359) block_.fg = 6586;
				if (i_ == 3655 or i_ == 3360) block_.fg = 6590;
				if (i_ == 3555 or i_ == 3455 or i_ == 3259 or i_ == 3159 or i_ == 3059 or i_ == 2959 or i_ == 2859) block_.fg = 6576;
				if (i_ == 3358) block_.fg = 6592;
				if (i_ == 3357 or i_ == 3356) block_.fg = 6580;
				if (i_ == 3260 or i_ == 3160 or i_ == 3060 or i_ == 2960 or i_ == 2860) block_.fg = 6594;
				if (i_ == 3157) block_.fg = 6440;
				if (i_ == 3447) block_.fg = 6434;
				if (i_ > 3445 && i_ < 3455) block_.bg = 6388;
				if (i_ > 3345 && i_ < 3355) block_.bg = 6388;
				if (i_ > 3245 && i_ < 3256) block_.bg = 6388;
				if (i_ > 3145 && i_ < 3159) block_.bg = 6388;
				if (i_ > 3045 && i_ < 3059) block_.bg = 6388;
				if (i_ > 2945 && i_ < 2959) block_.bg = 6388;
				if (i_ > 2845 && i_ < 2859) block_.bg = 6388;
				if (i_ >= 5400) block_.fg = 8;
				if (i_ == 3449) block_.fg = 6548;
				if (i_ == 3549) block_.fg = 8;
				if (i_ >= 5400) block_.bg = 9722;
				world_.d_weather = 15;
			}
			else if (blast == 8738) {
				if (i_ >= 3800 && i_ < 5400 && !(rand() % 30)) {
					if (rand() % 10 < 7) block_.fg = 8772;
					else block_.fg = 10;
				}
				else if (i_ >= 3500 && i_ < 3600) {
					if (rand() % 4 < 1) block_.fg = 2;
				}
				else if (i_ >= 3600 && i_ < 3700) {
					int timas = rand() % 5;
					if (timas < 3) {
						id = Environment()->bountiful_seeds;
						block_.fg = id[rand() % id.size()], block_.fruit = items[block_.fg].rarity == 999 ? 1 : (rand() % 4) + 1, block_.planted = time(nullptr) - (items[block_.fg].growTime);
					}
					else if (i_ > 3630 && timas < 4 && timas > 3 && sign != 0) {
						sign -= 1;
						block_.fg = 20;
						block_.txt = sign_text[rand() % sign_text.size()];
					}
					else {
						if (rand() % 2 < 1) block_.fg = 2;
					}
				}
				else if (i_ >= 3700 && i_ < 5400) {
					if (i_ >= 3700 && rand() % 2 < 1 && i_ <= 3800 && world_.blocks[3600 + (i_ - 3700)].fg == 0) {
						if (rand() % 2 < 1) {
							id = Environment()->bountiful_seeds;
							block_.fg = id[rand() % id.size()], block_.fruit = items[block_.fg].rarity == 999 ? 1 : (rand() % 4) + 1, block_.planted = time(nullptr) - (items[block_.fg].growTime);
						}
						else block_.fg = 0;
					}
					else {
						if (i_ > 5000) {
							if (rand() % 8 < 3) block_.fg = 4;
							else block_.fg = 2;
						}
						else block_.fg = 2;
					}
				}
				else if (i_ >= 5400) block_.fg = 8;
				if (i_ == 3600 + d_) block_.fg = 6;
				if (i_ == 3600 + d_ + 1 && i_ == 3600 + d_ + 1 < 3700) {
					block_.fg = 20;
					block_.txt = "Welcome to Roots! These signs will help you your underground empire!";
				}
				if (i_ == 3700 + d_) block_.fg = 8;
				if (i_ >= 3700) block_.bg = 14;
			}
			world_.blocks.push_back(block_);
		}
	}
	else if (blast == 14896) {
		world_ = get_world("GENERATED_CANDYLAND_BLAST");
		world_.d_weather = 78;
	}
	else if (blast == 1532) {
		world_ = get_world("GENERATED_UNDERSEA_BLAST99971");
		world_.d_weather = 14;
	}
	else if (blast == 830) {
		world_ = get_world("GENERATED_SUMMER_BLAST464");
		world_.d_weather = 1;
		id = { 836, 836, 836, 836, 836,834 ,834 ,834 ,834 ,834 ,13626 };
		int give_ = 1, id_ = id[rand() % id.size()];
		if (id_ == 834) give_ = 25;
		world_.drop_new.push_back({ {id_}, {give_}, {world_.total_drop_uid += 1}, {3077}, {1482} });
	}
	else if (blast == 9602) {
		world_ = get_world("GENERATED_FARM_BLAST111");
		if (pInfo(peer)->name_color != "`0" or Role::Moderator(peer) || Role::Developer(peer) && pInfo(peer)->name_color != "`2")  world_.owner_named = pInfo(peer)->name_color + pInfo(peer)->tankIDName;
		else world_.owner_named = pInfo(peer)->tankIDName;
		if (!special_char(world_.name)) pInfo(peer)->worlds_owned.push_back(world_.name);
		world_.owner_name = pInfo(peer)->tankIDName;
	}
	else if (blast == 830) {
		world_ = get_world("GENERATED_SUMMER_BLAST464");
		world_.d_weather = 1;
	}
	else if (blast == 1136) {
		world_ = get_world("GENERATED_MARS_BLAST_15");
		world_.d_weather = 7;
	}
	else if (blast == 3562) {
		world_ = get_world("GENERATED_CAVE_BLAST_1554");
		world_.blocks[5000 - rand() % 700].fg = 3604;
		world_.blocks[5300 - rand() % 700].fg = 3604;
	}
	else if (blast == 9582) {
		int random_door = rand() % 95 + 1;
		world_ = get_world("GENERATED_MINECRAFT_WORLD_1647");
		world_.d_weather = 255;
		world_.blocks[5400 - rand() % 600].fg = 9568;
		world_.blocks[5400 - rand() % 600].fg = 9566;
		world_.blocks[5400 - rand() % 600].fg = 9566;
		world_.blocks[5400 - rand() % 600].fg = 9568;
		world_.blocks[5400 - rand() % 600].fg = 9566;
		if (rand() % 50 < 1) world_.blocks[5400 - rand() % 600].fg = 9566;
		for (int i_ = 3700; i_ < 5400; i_++) {
			if (i_ >= 3700 && i_ < 5400) {
				if (i_ > 5000) {
					if (rand() % 8 < 3) world_.blocks[i_].fg = 9892;
				}
			}
		}
		world_.blocks[3600 + random_door].fg = 6;
		world_.blocks[3700 + random_door].fg = 9570;
	}
	else if (blast == 7588) {
		world_ = get_world("GENERATED_TREASURE_BLAST_156");
		world_.d_weather = 44;
	}
	else if (blast == 942) {
		world_ = get_world("GENERATED_DESRT_BLAST");
		world_.d_weather = 3;
		if (rand() % 100 < 10) {
			id = { 12292 , 12294 };
			world_.drop_new.push_back({ {id[rand() % id.size()]}, {1}, {world_.total_drop_uid += 1}, {1536}, {544} });
		}
	}
	else if (blast == 4774) {
		id = { 4778, 4714,4778, 4714, 10066, 11188 };
		world_ = get_world("GENERATE_JUNGLE_BLAST_156");
		world_.d_weather = 32;
		world_.drop_new.push_back({ {id[rand() % id.size()]}, {1}, {world_.total_drop_uid += 1}, {835}, {1485} });
	}
	else if (blast == 7380) {
		world_ = get_world("GENERATE_MONOCHROME_BL_15");
		world_.d_weather = 43;
	}
	else {
		world_ = get_world("GENERATED_DESRT_BLAST");
		world_.d_weather = 3;
	}
	world_.name = name_;
	world_.fresh_world = true;
	world_.max_y = world_.blocks.size() / 100;
	world_.max_x = world_.blocks.size() / world_.max_y;
	worlds.push_back(world_);
	world_ = {};
	return worlds[worlds.size() - 1];
}
class Create {
public:
	static World Mining_World1(ENetPeer* peer, const string& name_) {
		World world_;
		world_ = get_world("GENERATE_MINING_WORLD1");
		world_.name = name_;
		world_.fresh_world = true;
		world_.max_y = world_.blocks.size() / 100;
		world_.max_x = world_.blocks.size() / world_.max_y;
		worlds.push_back(world_);
		world_ = {};
		return worlds[worlds.size() - 1];
	}
	static World Mining_World2(ENetPeer* peer, const string& name_) {
		World world_;
		world_ = get_world("GENERATE_MINING_WORLD2");
		world_.name = name_;
		world_.fresh_world = true;
		world_.max_y = world_.blocks.size() / 100;
		world_.max_x = world_.blocks.size() / world_.max_y;
		worlds.push_back(world_);
		world_ = {};
		return worlds[worlds.size() - 1];
	}
	static World Mining_World3(ENetPeer* peer, const string& name_) {
		World world_;
		world_ = get_world("GENERATE_MINING_WORLD3");
		world_.name = name_;
		world_.fresh_world = true;
		world_.max_y = world_.blocks.size() / 100;
		world_.max_x = world_.blocks.size() / world_.max_y;
		worlds.push_back(world_);
		world_ = {};
		return worlds[worlds.size() - 1];
	}
	static World Mining_World4(ENetPeer* peer, const string& name_) {
		World world_;
		world_ = get_world("GENERATE_MINING_WORLD4");
		world_.name = name_;
		world_.fresh_world = true;
		world_.max_y = world_.blocks.size() / 100;
		world_.max_x = world_.blocks.size() / world_.max_y;
		worlds.push_back(world_);
		world_ = {};
		return worlds[worlds.size() - 1];
	}
	static World Mining_World5(ENetPeer* peer, const string& name_) {
		World world_;
		world_ = get_world("GENERATE_MINING_WORLD5");
		world_.name = name_;
		world_.fresh_world = true;
		world_.max_y = world_.blocks.size() / 100;
		world_.max_x = world_.blocks.size() / world_.max_y;
		worlds.push_back(world_);
		world_ = {};
		return worlds[worlds.size() - 1];
	}
};
void save_world(const std::string& name_, bool erase = true) {
	std::vector<World>::iterator p = find_if(worlds.begin(), worlds.end(), [name_](const World& a) { return a.name == name_; });
	if (p != worlds.end()) {
		World* world_ = &worlds[p - worlds.begin()];
		if (world_->fresh_world == false && erase and name_ != "CARNIVAL") {
			Environment()->Another_Worlds.erase(remove(Environment()->Another_Worlds.begin(), Environment()->Another_Worlds.end(), world_->name), Environment()->Another_Worlds.end());
			worlds.erase(p);
			return;
		}
		json save_, blocks_ = json::array();
		if (find(Environment()->Wotd_Worlds.begin(), Environment()->Wotd_Worlds.end(), name_) != Environment()->Wotd_Worlds.end()) {
			world_->world_settings &= ~SETTINGS::SETTINGS_1;
		}
		save_["entry_level"] = world_->entry_level;
		save_["n_b"] = world_->nuked_by;
		save_["music_bpm"] = world_->music_bpm;
		save_["weather"] = world_->weather;
		save_["owner"] = world_->owner_name;
		save_["guild_world_id"] = world_->guild_id;
		save_["d_weather"] = world_->d_weather;
		save_["o2"] = world_->owner_named;
		save_["xeno"] = world_->xenonite;
		save_["w_s"] = world_->world_settings;
		save_["wt"] = world_->World_Time;
		save_["r"] = world_->r;
		save_["g"] = world_->g;
		save_["b"] = world_->b;
		save_["admins"] = world_->admins;
		save_["ct"] = world_->category;
		save_["cycle_ke"] = world_->cycle_ke;
		save_["infinity"] = world_->infinity;
		save_["c_gems"] = world_->gems;
		save_["gems_lvl"] = world_->gems_lvl;
		save_["whitelist"] = world_->whitelist;
		save_["s4tb"] = world_->s4tb;
		for (int i_ = 0; i_ < world_->blocks.size(); i_++) {
			json block_ = {};
			if (not world_->blocks[i_].btp_def()) block_["btp"] = world_->blocks[i_].battle_pet;
			if (not world_->blocks[i_].go_def()) block_["g_o"] = world_->blocks[i_].gate_options;
			if (not world_->blocks[i_].gd_def()) block_["g_d"] = world_->blocks[i_].gate_dest;
			if (not world_->blocks[i_].ep_def()) block_["ep_s"] = world_->blocks[i_].epoch_state;
			if (items[world_->blocks[i_].fg].fossil_rock && rand() % 500 < 1) block_["f"] = items[world_->blocks[i_].fg].fossil_rock;
			else if (world_->blocks[i_].fg != 0) block_["f"] = world_->blocks[i_].fg;
			if (world_->blocks[i_].fg != 0) block_["f"] = world_->blocks[i_].fg;
			if (world_->blocks[i_].bg != 0) block_["b"] = world_->blocks[i_].bg;
			if (world_->blocks[i_].planted != 0) block_["p"] = world_->blocks[i_].planted;
			if (world_->blocks[i_].fruit > 0 and world_->blocks[i_].fruit < 8) block_["fc"] = world_->blocks[i_].fruit;
			if (not world_->blocks[i_].txt.empty()) block_["t"] = world_->blocks[i_].txt;
			if (world_->blocks[i_].roll != 0) block_["n"] = world_->blocks[i_].roll;
			if (world_->blocks[i_].epoch_cycle != 0) block_["ep_c"] = world_->blocks[i_].epoch_cycle;
			if (world_->blocks[i_].infinity_cycle != 0) block_["if_c"] = world_->blocks[i_].infinity_cycle;
			if (world_->blocks[i_].id != 0) block_["id"] = world_->blocks[i_].id;
			if (world_->blocks[i_].c_ != 0) block_["c"] = world_->blocks[i_].c_;
			if (world_->blocks[i_].wl != 0) block_["wl"] = world_->blocks[i_].wl;
			if (world_->blocks[i_].pr != 0) block_["pr"] = world_->blocks[i_].pr;
			if (world_->blocks[i_].open != 1) block_["o"] = (world_->blocks[i_].open ? 1 : 0);
			if (not world_->blocks[i_].door_destination.empty()) block_["dd"] = world_->blocks[i_].door_destination;
			if (not world_->blocks[i_].door_id.empty()) block_["di"] = world_->blocks[i_].door_id;
			if (world_->blocks[i_].flags != 0x00000000) block_["fl"] = world_->blocks[i_].flags;
			if (world_->blocks[i_].rate_of_fire != 10) block_["rf"] = world_->blocks[i_].rate_of_fire;
			if (world_->blocks[i_].projectile_speed != 100) block_["ps"] = world_->blocks[i_].projectile_speed;
			if (world_->blocks[i_].enabled != false) block_["en"] = world_->blocks[i_].enabled;
			if (world_->blocks[i_].invert != false) block_["in"] = world_->blocks[i_].invert;
			if (world_->blocks[i_].spin != false) block_["sn"] = world_->blocks[i_].spin;
			if (world_->blocks[i_].gravity != 50) block_["g"] = world_->blocks[i_].gravity;
			if (world_->blocks[i_].locked != false) block_["l"] = world_->blocks[i_].locked;
			if (world_->blocks[i_].lock_origin != -1) block_["lq"] = world_->blocks[i_].lock_origin;
			if (not world_->blocks[i_].owner_name.empty()) block_["lo"] = world_->blocks[i_].owner_name;
			if (world_->blocks[i_].admins.size() != 0) block_["a"] = world_->blocks[i_].admins;
			if (world_->blocks[i_].Admin_Bfg.size() != 0) block_["atmin"] = world_->blocks[i_].Admin_Bfg;
			if (world_->blocks[i_].build_only != false) block_["bo"] = world_->blocks[i_].build_only;
			if (world_->blocks[i_].limit_admins != false) block_["la"] = world_->blocks[i_].limit_admins;
			if (world_->blocks[i_].crystals.size() != 0) block_["cr"] = world_->blocks[i_].crystals;
			if (world_->blocks[i_].mannequin.c_head != 0 or world_->blocks[i_].mannequin.c_shirt != 0 or world_->blocks[i_].mannequin.c_pants != 0 or world_->blocks[i_].mannequin.c_feet != 0 or world_->blocks[i_].mannequin.c_mask != 0 or world_->blocks[i_].mannequin.c_hand != 0 or world_->blocks[i_].mannequin.c_back != 0 or world_->blocks[i_].mannequin.c_hair != 0 or world_->blocks[i_].mannequin.c_neck != 0) {
				block_["mq"] = world_->blocks[i_].mannequin;
			}
			if (world_->blocks[i_].phoneb.c_head != 0 or world_->blocks[i_].phoneb.c_shirt != 0 or world_->blocks[i_].phoneb.c_pants != 0 or world_->blocks[i_].phoneb.c_feet != 0 or world_->blocks[i_].phoneb.c_mask != 0 or world_->blocks[i_].phoneb.c_hand != 0 or world_->blocks[i_].phoneb.c_back != 0 or world_->blocks[i_].phoneb.c_hair != 0 or world_->blocks[i_].phoneb.c_neck != 0) {
				block_["pbooth"] = world_->blocks[i_].phoneb;
			}
			if (world_->blocks[i_].times != 0) block_["tm"] = world_->blocks[i_].times;
			if (world_->blocks[i_].lives != 0) block_["ls"] = world_->blocks[i_].lives;
			if (world_->blocks[i_].donates.size() != 0) block_["dnt"] = world_->blocks[i_].donates;
			if (world_->blocks[i_].r != 255) block_["r1"] = world_->blocks[i_].r;
			if (world_->blocks[i_].g != 128) block_["g1"] = world_->blocks[i_].g;
			if (world_->blocks[i_].b != 64) block_["b1"] = world_->blocks[i_].b;
			if (world_->blocks[i_].portrait.c_expression != 1 or world_->blocks[i_].portrait.c_hair_colour != 0 or world_->blocks[i_].portrait.c_skin != 0 or world_->blocks[i_].portrait.c_face != 0 or world_->blocks[i_].portrait.c_head != 0 or world_->blocks[i_].portrait.c_hair != 0) {
				block_["prs"] = world_->blocks[i_].portrait;
			}
			if (world_->blocks[i_].starttime != 0) block_["starttime"] = world_->blocks[i_].starttime;
			if (not world_->blocks[i_].spices.empty()) block_["spices"] = world_->blocks[i_].spices;
			if (world_->blocks[i_].food.size() != 0) {
				json oven_fd = json::array();
				for (int i_2 = 0; i_2 < world_->blocks[i_].food.size(); i_2++) {
					json j;
					j["id"] = world_->blocks[i_].food[i_2].id;
					j["time"] = world_->blocks[i_].food[i_2].time;
					oven_fd.push_back(j);
				}
				block_["food"] = oven_fd;
			}
			if (world_->blocks[i_].shelf_1 != 0) block_["bep"] = world_->blocks[i_].shelf_1;
			if (not world_->blocks[i_].heart_monitor.empty()) block_["hm"] = world_->blocks[i_].heart_monitor;
			if (world_->blocks[i_].shelf_2 != 0)block_["sh2"] = world_->blocks[i_].shelf_2;
			if (world_->blocks[i_].shelf_3 != 0)block_["sh3"] = world_->blocks[i_].shelf_3;
			if (world_->blocks[i_].shelf_4 != 0)block_["sh4"] = world_->blocks[i_].shelf_4;
			blocks_.push_back(block_);
		}
		save_["drop_new"] = world_->drop_new;
		save_["cc_s"] = world_->cctv_settings;
		save_["sbox1"] = world_->sbox1;
		save_["cctv"] = world_->cctv;
		save_["bulletin"] = world_->bulletin;
		save_["npc"] = world_->npc;
		save_["machine"] = world_->machines;
		save_["blocks"] = blocks_;
		std::ofstream w_("database/worlds/" + name_ + "_.json");
		if (w_.fail()) {
			Logger::Info("ERROR", "World saving failed for World [" + name_ + "]");
			return;
		}
		w_ << save_ << endl;
		w_.close();
		save_.clear();
		if (erase and name_ != "CARNIVAL") {
			Environment()->Another_Worlds.erase(remove(Environment()->Another_Worlds.begin(), Environment()->Another_Worlds.end(), world_->name), Environment()->Another_Worlds.end());
			worlds.erase(p);
		}
	}
}
std::string get_player_nick(ENetPeer* peer, std::string nick = "") {
	std::string name = "";
	if (nick.empty()) {
		if (not pInfo(peer)->d_name.empty()) name += pInfo(peer)->d_name;
		else {
			if (pInfo(peer)->black_color)name += "`b";
			if (pInfo(peer)->drt && name.empty()) name += "`4";
			if (pInfo(peer)->is_legend && name.empty())name += "`9";
			if (pInfo(peer)->black_color || pInfo(peer)->drt || pInfo(peer)->is_legend) {
				if (pInfo(peer)->tmod == 0) name += fixchar2(pInfo(peer)->name_color);
			}
			else {
				if (pInfo(peer)->tmod == 0) name += pInfo(peer)->name_color;
				else name += "`0";
			}
			if (pInfo(peer)->drt) name += "Dr.";
			name += pInfo(peer)->tankIDName;
			if (Role::Unlimited(peer)) name += " [UNLIMITED]";
			if (Role::God(peer)) name += " [GOD]";
			if (pInfo(peer)->Role.BOOST and pInfo(peer)->Role.BOOST_TIME != 0) name += " [BOOST]";
			if (pInfo(peer)->Role.SUPER_BOOST and pInfo(peer)->Role.SUPER_BOOST_TIME != 0) name += " [SUPER-BOOST]";
			if (pInfo(peer)->lives != 0) name += pInfo(peer)->lives == 1 ? " (last life!)" : " (" + to_string(pInfo(peer)->lives) + " lives)";
			if (pInfo(peer)->is_legend) name += " of Legend";
		}
	}
	else name += nick;
	string::difference_type count_of_symbol = std::count(name.begin(), name.end(), '`');
	for (int i = 0; i < count_of_symbol; i++) name += "``";
	return name;
}
class Kit_Server {
public:
	static void Add_Xp(ENetPeer* peer, int amount, std::string name) {
		bool levelup = false;
		int required = 0, nowlevel = 0;
		if (name == "kit") {
			if (pInfo(peer)->lvlKit == 100) return;
			pInfo(peer)->xpKit += amount;
			required = 125 * ((pInfo(peer)->lvlKit * pInfo(peer)->lvlKit) + 2);
			if (pInfo(peer)->xpKit >= 125 * ((pInfo(peer)->lvlKit * pInfo(peer)->lvlKit) + 2)) {
				pInfo(peer)->lvlKit++;
				nowlevel = pInfo(peer)->lvlKit;
				pInfo(peer)->xpKit -= required;
				levelup = true;
			}
		}
		if (levelup) {
			if (pInfo(peer)->gp) pInfo(peer)->growpass_points += 20;
			VarList::OnBuxGems(peer, 500);
			for (ENetPeer* cp_ = server->peers; cp_ < &server->peers[server->peerCount]; ++cp_) {
				if (cp_->state != ENET_PEER_STATE_CONNECTED or cp_->data == NULL) continue;
				if (pInfo(cp_)->world == pInfo(peer)->world) {
					CAction::Effect(cp_, 46, (float)pInfo(peer)->x + 16, (float)pInfo(peer)->y + 16);
					VarList::OnConsoleMessage(cp_, get_player_nick(peer) + " " + name + " quest is now level " + to_string(nowlevel) + "!");
					VarList::OnTalkBubble(cp_, pInfo(peer)->netID, get_player_nick(peer) + " " + name + " quest is now level " + to_string(nowlevel) + "!", 0, 0);
				}
			}
		}
	}
};
bool check_name(std::string& name_) {
	if (name_ == "EXIT") {
		name_ = "Exit from what? Press back if you're done playing.";
		return false;
	}
	if (name_.find("DUNGEON_") == string::npos) {
		for (char c : name_) if ((c < 'A' || c>'Z') && (c < '0' || c>'9')) {
			name_ = "Sorry, spaces and special characters are not allowed in world or door names.  Try again.";
			return false;
		}
	}
	for (int i = 0; i < Environment()->swear_words.size(); i++) {
		if (name_.find(Environment()->swear_words[i]) != string::npos) {
			name_ = "DISNEYLAND";
			break;
		}
	}
	if (name_.size() < 1 || name_.size() >= 24) {
		name_ = "`4To reduce confusion, that is not a valid world name.``  Try another?";
		return false;
	} 
	if (name_.empty()) {
		name_ = "START";
	}
	return true;
}
bool check_blast(std::string& name_) {
	if (name_ == "EXIT" || name_.empty() || name_.size() < 1 || name_.size() >= 24) {
		return false;
	}
	for (char c : name_) if ((c < 'A' || c>'Z') && (c < '0' || c>'9')) {
		return false;
	}
	for (int i = 0; i < Environment()->swear_words.size(); i++) {
		if (name_.find(Environment()->swear_words[i]) != string::npos) return false;
	}
	return true;
}
bool check_password(string& name_) {
	if (name_.empty() || name_.size() < 1 || name_.size() >= 24) {
		return false;
	}
	return true;
}
void form_emoji(ENetPeer* peer, bool notification = false, int timeout = 0) {
	if (notification) {
		gamepacket_t p(timeout);
		p.Insert("OnAddNotification");
		p.Insert("interface/large/friend_button.rttex");
		p.Insert("You've unlocked some new `$Growmojis``!");
		p.Insert("audio/hub_open.wav");
		p.Insert(0);
		p.CreatePacket(peer);
	}
	{
		gamepacket_t p;
		p.Insert("OnEmoticonDataChanged");
		p.Insert(0);
		p.Insert(pInfo(peer)->growmoji + "(yes)|Ă|" + (pInfo(peer)->supp == 2 ? "1" : "0") + "&(no)|ă|" + (pInfo(peer)->supp != 0 ? "1" : "0") + "&" + (pInfo(peer)->supp == 2 ? "(love)|Ą|1" : "(love)|Ą|0") + "&" + (pInfo(peer)->supp != 0 ? "(shy)|Ć|1&(wink)|ć|1" : "(shy)|Ć|0&(wink)|ć|0") + "&(tongue)|Ĉ|" + (pInfo(peer)->level >= 5 ? "1" : "0") + "&(agree)|ĉ|" + (pInfo(peer)->friends.size() >= 20 ? "1" : "0") + "&(music)|Č|" + (pInfo(peer)->supp != 0 ? "1" : "0") + "&(build)|č|" + (pInfo(peer)->friends.size() >= 50 ? "1" : "0") + "&(megaphone)|Ď|" + (pInfo(peer)->supp == 2 ? "1" : "0") + "&" + (pInfo(peer)->level >= 5 ? "(sigh)|ď|1&(mad)|Đ|1&(wow)|đ|1" : "(sigh)|ď|0&(mad)|Đ|0&(wow)|đ|0") + "&(dance)|Ē|" + (pInfo(peer)->friends.size() >= 40 ? "1" : "0") + "&(see-no-evil)|ē|" + (pInfo(peer)->friends.size() >= 30 ? "1" : "0") + "&(heart)|ĕ|" + (pInfo(peer)->supp == 2 ? "1" : "0") + "&(kiss)|Ę|" + (pInfo(peer)->friends.size() >= 10 ? "1" : "0") + "&(lol)|Ě|" + (pInfo(peer)->supp != 0 ? "1" : "1") + "&(smile)|Ā|" + (pInfo(peer)->level >= 5 ? "1" : "0") + "&(cool)|Ĝ|" + (pInfo(peer)->supp == 2 ? "1" : "0"));
		p.CreatePacket(peer);
	}
}
string get_quest_item(std::string text, int quest = 0) {
	if (text == "Quest For Honor" or quest == 1) return "Legendary Title";
	else if (text == "Quest For Fire" or quest == 2) return "Dragon of Legend";
	else if (text == "Quest Of Steel" or quest == 3) return "Legendbot-009";
	else if (text == "Quest Of The Heavens" or quest == 4) return "Legendary Wings";
	else if (text == "Quest For The Blade" or quest == 5) return "Legendary Katana";
	else if (text == "Quest For Candour" or quest == 6) return "Whip of Truth";
	else if (text == "Quest For The Sky" or quest == 7) return "Legendary Dragon Knight's Wings";
	else if (text == "Quest Of The Owl" or quest == 8) return "Legendary Owl";
	else if (text == "Quest Of The Mech" or quest == 9) return "Legendary Destroyer";
	else if (text == "Quest Of The Dark" or quest == 10) return "Quest Of The Dark";
	else return "";
}
void add_lwiz_points(ENetPeer* peer, int points) {
	pInfo(peer)->legendary_quest[pInfo(peer)->lwiz_step - 1][0] += points;
	if (pInfo(peer)->legendary_quest[pInfo(peer)->lwiz_step - 1][0] >= pInfo(peer)->legendary_quest[pInfo(peer)->lwiz_step - 1][1]) {
		pInfo(peer)->legendary_quest[pInfo(peer)->lwiz_step - 1][0] = pInfo(peer)->legendary_quest[pInfo(peer)->lwiz_step - 1][1];
		if (pInfo(peer)->lwiz_notification == 0) pInfo(peer)->lwiz_notification = 1;
	}
	if (pInfo(peer)->lwiz_notification == 1) {
		pInfo(peer)->lwiz_notification = 2;
		VarList::OnConsoleMessage(peer, "`9Legendary Quest step complete! I'm off to see a Wizard!``");
		gamepacket_t p;
		p.Insert("OnTalkBubble");
		p.Insert(pInfo(peer)->netID);
		p.Insert("`9Legendary Quest step complete! I'm off to see a Wizard!``");
		p.Insert(0), p.Insert(0);
		p.CreatePacket(peer);
	}
}
string get_quest_name(ENetPeer* peer, int quest, int step) {
	if (peer != nullptr) {
		if (pInfo(peer)->legendary_quest[pInfo(peer)->lwiz_step - 1].size() == 3) {
			std::string item = items[pInfo(peer)->legendary_quest[pInfo(peer)->lwiz_step - 1][2]].ori_name;
			if (pInfo(peer)->lwiz_step == 20)  return "And finally, I dare you to ascend to the peak of LEGENDARYMOUNTAIN and collect a Legendary Orb. This is the final challenge in any truly legendary quest.";
			else return "I challenge you to bring me " + Set_Count(pInfo(peer)->legendary_quest[pInfo(peer)->lwiz_step - 1][1]) + " of those " + item + " thingies!";
		}
		else if (step == 2) {
			return "Look, it's not cheap being a Legendary Wizard. These aren't just purple robes, they're `9Legendary Purple Robes``! So if you could just spot me like " + Set_Count(pInfo(peer)->legendary_quest[pInfo(peer)->lwiz_step - 1][1]) + " Gems, I swear I'll think about paying you back. I'll think hard. Whaddya say?";
		}
		else if (step == 3) {
			return "You must defeat " + Set_Count(pInfo(peer)->legendary_quest[pInfo(peer)->lwiz_step - 1][1]) + " blocks in battle! Smash them!";
		}
		else if (step == 5) {
			return "You must plant " + Set_Count(pInfo(peer)->legendary_quest[pInfo(peer)->lwiz_step - 1][1]) + " rarity worth of trees! Bring life to this land!";
		}
		else if (step == 6) {
			return "Prove your skill! Earn " + Set_Count(pInfo(peer)->legendary_quest[pInfo(peer)->lwiz_step - 1][1]) + " Growtokens in whatever way you want! You can keep the Growtokens, I'm not a greedy wizard.";
		}
		else if (step == 8) {
			return "Here's a freeform quest for you - I don't care what you do, just earn " + Set_Count(pInfo(peer)->legendary_quest[pInfo(peer)->lwiz_step - 1][1]) + " XP doing it!";
		}
		else if (step == 10) {
			return "Look, it's not cheap being a Legendary Wizard. These aren't just purple robes, they're `9Legendary Purple Robes``! So if you could just spot me like " + Set_Count(pInfo(peer)->legendary_quest[pInfo(peer)->lwiz_step - 1][1]) + " Gems, I swear I'll think about paying you back. I'll think hard. Whaddya say?";
		}
		else if (step == 11) {
			return "You must crush " + Set_Count(pInfo(peer)->legendary_quest[pInfo(peer)->lwiz_step - 1][1]) + " rarity worth of blocks! Destroy!";
		}
		else if (step == 12) {
			return "Save Growtopia by completeting " + Set_Count(pInfo(peer)->legendary_quest[pInfo(peer)->lwiz_step - 1][1]) + " successful surgeries!";
		}
		else if (step == 13) {
			return "" + (pInfo(peer)->lwiz_quest == 5 || pInfo(peer)->lwiz_quest == 6 || pInfo(peer)->lwiz_quest == 7 || pInfo(peer)->lwiz_quest == 8 ? "I seem to have lost some mystical energy. Could you go find " + Set_Count(pInfo(peer)->legendary_quest[pInfo(peer)->lwiz_step - 1][1]) + " radioactive items with a Geiger Counter? You can keep them, I just want the energy." : "I need you to go pick up some groceries for me. Collect " + Set_Count(pInfo(peer)->legendary_quest[pInfo(peer)->lwiz_step - 1][1]) + " items from Providers.") + ".";
		}
		else if (step == 15) {
			return "You must pluck " + Set_Count(pInfo(peer)->legendary_quest[pInfo(peer)->lwiz_step - 1][1]) + " rarity worth of delicious fruit from any tree! I don't want the fruit, I'm just mad that it's up there!";
		}
		else return "";
	}
}
class Gacha {
private:
	enum ItemType { COMMON, RARE, LEGENDARY };
public:
	class Event {
	public:
		static bool Rare_Item(int id) {
			if (id == 5480 || id == 9774 || id == 10364 || id == 2722 || id == 5020 || id == 9428 || id == 7412 || id == 9422 || id == 4996 || id == 6006 || id == 9554 || id == 9998 || id == 1738 || id == 3144 || id == 5738 || id == 9322 || id == 8194 || id == 11300 || id == 13198 || id == 13432) {
				return true;
			}
			else return false;
		}
		static bool Legendary_Item(int id) {
			if (id == 9772 || id == 0) {
				return true;
			}
			else return false;
		}
		static int Single(ENetPeer* peer, bool multi = false) {
			const int PROB_COMMON = 85, PROB_RARE = 10, PROB_LEGENDARY = 1;
			std::random_device rd;
			std::mt19937 gen(rd());
			std::uniform_int_distribution<> dist(1, 100);
			int draw = dist(gen); 
			std::vector<int> Common = { 4676, 4678, 4680, 4682, 5902, 5652, 4534, 40, 78, 538, 1116, 8830, 7356, 2642, 2158, 2160, 2162, 2164, 2166, 4506, 12132, 12562, 13482, 3966, 3998, 4030, 156, 678, 1574, 1672, 362, 1936, 818 };
			std::vector<int> Rare = { 5480, 2722, 5020, 9428, 7412, 9422, 4996, 6006, 9554, 9998, 1738, 3144, 5738, 9322, 8194, 11300, 13198, 13432 };
			std::vector<int> Legendary_PityOff = { 9772, 0 };
			ItemType itemType;
			if (draw <= PROB_COMMON) itemType = COMMON;
			else if (draw <= PROB_COMMON + PROB_RARE) itemType = RARE;
			else if (draw <= PROB_LEGENDARY) itemType = LEGENDARY;
			else itemType = COMMON;
			std::vector<int> pool;
			switch (itemType) {
			case COMMON:
				pool = Common;
				break;
			case RARE:
				pool = Rare;
				break;
			case LEGENDARY:
				pool = Legendary_PityOff;
				break;
			}
			if (multi) {
				pool.push_back(Rare[std::uniform_int_distribution<>(0, Rare.size() - 1)(gen)]);
			}
			if (pInfo(peer)->Pity == 90) {
				if (itemType == COMMON && !pInfo(peer)->Pity_On) {
					pool.push_back(Legendary_PityOff[std::uniform_int_distribution<>(0, Legendary_PityOff.size() - 1)(gen)]);
				}
				else if (itemType == LEGENDARY) {
					pool.push_back(9908);
				}
			}
			int finalResult = pool[std::uniform_int_distribution<>(0, pool.size() - 1)(gen)];
			if (Gacha::Event::Legendary_Item(finalResult)) {
				pInfo(peer)->Pity = 0;
				if (pInfo(peer)->Pity_On) pInfo(peer)->Pity_On = false;
				else if (not pInfo(peer)->Pity_On) pInfo(peer)->Pity_On = true;
			}
			else {
				pInfo(peer)->Pity = multi ? pInfo(peer)->Pity + 10 : pInfo(peer)->Pity + 1;
				pInfo(peer)->Pity_On = false;
			}
			if (Gacha::Event::Legendary_Item(finalResult)) CAction::Effect(peer, 90, (float)pInfo(peer)->x + 16, (float)pInfo(peer)->y + 16);
			if (Gacha::Event::Rare_Item(finalResult)) CAction::Effect(peer, 46, (float)pInfo(peer)->x + 16, (float)pInfo(peer)->y + 16);
			return finalResult;
		}
		static std::vector<int> Multi(ENetPeer* peer) {
			std::vector<int> results;
			for (int i = 0; i < 10; ++i) {
				results.push_back(Gacha::Event::Single(peer, true));
			}
			return results;
		}
	};
	class Standar {
	public:
		static bool Rare_Item(int id) {
			if (id == 10654 || id == 10366 || id == 2722 || id == 5020 || id == 9428 || id == 7412 || id == 9422 || id == 4996 || id == 6006 || id == 9554 || id == 9998 || id == 1738 || id == 3144 || id == 5738 || id == 9322 || id == 8194 || id == 11300 || id == 13198 || id == 13432) {
				return true;
			}
			else return false;
		}
		static bool Legendary_Item(int id) {
			if (id == 0) {
				return true;
			}
			else return false;
		}
		static int Single(ENetPeer* peer, bool multi = false) {
			const int PROB_COMMON = 85, PROB_RARE = 10, PROB_LEGENDARY = 1;
			std::random_device rd;
			std::mt19937 gen(rd());
			std::uniform_int_distribution<> dist(1, 100);
			int draw = dist(gen);
			std::vector<int> Common = { 4676, 4678, 4680, 4682, 5902, 5652, 4534, 40, 78, 538, 1116, 8830, 7356, 2642, 2158, 2160, 2162, 2164, 2166, 4506, 12132, 12562, 13482, 3966, 3998, 4030, 156, 678, 1574, 1672, 362, 1936, 818 };
			std::vector<int> Rare = { 5480, 9918, 2722, 5020, 9428, 7412, 9422, 4996, 6006, 9554, 9998, 1738, 3144, 5738, 9322, 8194, 11300, 13198, 13432 };
			std::vector<int> Legendary_PityOff = { 0 };
			ItemType itemType;
			if (draw <= PROB_COMMON) itemType = COMMON;
			else if (draw <= PROB_COMMON + PROB_RARE) itemType = RARE;
			else if (draw <= PROB_LEGENDARY) itemType = LEGENDARY;
			else itemType = COMMON;
			std::vector<int> pool;
			switch (itemType) {
			case COMMON:
				pool = Common;
				break;
			case RARE:
				pool = Rare;
				break;
			case LEGENDARY:
				pool = Legendary_PityOff;
				break;
			}
			if (multi) {
				pool.push_back(Rare[std::uniform_int_distribution<>(0, Rare.size() - 1)(gen)]);
			}
			if (pInfo(peer)->Pity == 90) {
				if (itemType == COMMON && !pInfo(peer)->Pity_On) {
					pool.push_back(Legendary_PityOff[std::uniform_int_distribution<>(0, Legendary_PityOff.size() - 1)(gen)]);
				}
				else if (itemType == LEGENDARY) {
					pool.push_back(9908);
				}
			}
			int finalResult = pool[std::uniform_int_distribution<>(0, pool.size() - 1)(gen)];
			if (Gacha::Event::Legendary_Item(finalResult)) {
				pInfo(peer)->Pity = 0;
				if (pInfo(peer)->Pity_On) pInfo(peer)->Pity_On = false;
				else if (not pInfo(peer)->Pity_On) pInfo(peer)->Pity_On = true;
			}
			else {
				pInfo(peer)->Pity = multi ? pInfo(peer)->Pity + 10 : pInfo(peer)->Pity + 1;
				pInfo(peer)->Pity_On = false;
			}
			if (Gacha::Standar::Legendary_Item(finalResult)) CAction::Effect(peer, 90, (float)pInfo(peer)->x + 16, (float)pInfo(peer)->y + 16);
			if (Gacha::Standar::Rare_Item(finalResult)) CAction::Effect(peer, 46, (float)pInfo(peer)->x + 16, (float)pInfo(peer)->y + 16);
			return finalResult;
		}
		static std::vector<int> Multi(ENetPeer* peer) {
			std::vector<int> results;
			for (int i = 0; i < 10; ++i) {
				results.push_back(Gacha::Standar::Single(peer, true));
			}
			return results;
		}
	};
};
bool Vip_Bfg(WorldBlock* block_, std::string find) {
	std::vector<std::pair<long long int, std::string>>::iterator lb = find_if(block_->Admin_Bfg.begin(), block_->Admin_Bfg.end(), [find](const pair <long long int, string>& element) { return element.second == find; });
	if (lb != block_->Admin_Bfg.end()) {
		return true;
	}
	return false;
}
class NewbieGet {
public:
	static void updateGems(int cnt, bool add = false, int value = 0) {
		for (int c_ = 0; c_ < new_get.list.size(); c_++) {
			if (c_ == cnt) {
				if (add) {
					new_get.list[c_].Gemss = value;
				}
				else {
					new_get.list[c_].Gemss = 0;
				}
			}
		}
	}
	static void updateCoin(int cnt, bool add = false, int value = 0) {
		for (int c_ = 0; c_ < new_get.list.size(); c_++) {
			if (c_ == cnt) {
				if (add) {
					new_get.list[c_].Coin = value;
				}
				else {
					new_get.list[c_].Coin = 0;
				}
			}
		}
	}
	static void updateToken(int cnt, bool add = false, int value = 0) {
		for (int c_ = 0; c_ < new_get.list.size(); c_++) {
			if (c_ == cnt) {
				if (add) {
					new_get.list[c_].Seasonals_Token = value;
				}
				else {
					new_get.list[c_].Seasonals_Token = 0;
				}
			}
		}
	}
};
class RedeemCode {
public:
	static bool Has_Code(std::string code, int time_ = 0) {
		std::vector<Redeem_Code>::iterator p = find_if(redeem_codev2.redeemcode.begin(), redeem_codev2.redeemcode.end(), [&](const Redeem_Code& a) { return a.code == code; });
		if (p != redeem_codev2.redeemcode.end()) {
			if (time_ != 0) redeem_codev2.redeemcode[p - redeem_codev2.redeemcode.begin()].time = time(nullptr) + time_;
			return true;
		}
		else return false;
	}
	static void Add_Code(ENetPeer* peer, std::string code_, int time_s = 0, int lvl = 0, int max = 0, int gems = 0, int wls = 0, int token = 0, int role_id = 0, int levell = 0, bool gp = false, bool glo = false) {
		if (not Has_Code(code_, time_s)) {
			Redeem_Code code{};
			code.code = code_, code.time = time(nullptr) + time_s;
			code.RequiringLvl = lvl, code.MaximumEnter = max;
			code.Gemss = gems, code.Coin = wls, code.Seasonals_Token = token, code.Player_Role = role_id, code.Levell = levell, code.GrowPass = gp, code.RoadToGlory = glo;
			for (int i_ = 0; i_ < pInfo(peer)->r_items.size();) {
				int cc_ = pInfo(peer)->r_items.at(i_).second, id_ = pInfo(peer)->r_items.at(i_).first;
				code.items.push_back({ id_, cc_ });
				pInfo(peer)->r_items.erase(pInfo(peer)->r_items.begin() + i_);
			}
			redeem_codev2.redeemcode.push_back(code);
		}
	}
	static bool Remove_Code(std::string code) {
		std::vector<Redeem_Code>::iterator p = find_if(redeem_codev2.redeemcode.begin(), redeem_codev2.redeemcode.end(), [&](const Redeem_Code& a) { return a.code == code; });
		if (p != redeem_codev2.redeemcode.end()) {
			redeem_codev2.redeemcode.erase(p);
			return true;
		}
		else return false;
	}
	static void updateGems(int cnt, bool add = false, int value = 0) {
		for (int c_ = 0; c_ < redeem_codev2.redeemcode.size(); c_++) {
			if (c_ == cnt) {
				if (add) {
					redeem_codev2.redeemcode[c_].Gemss = value;
				}
				else {
					redeem_codev2.redeemcode[c_].Gemss = 0;
				}
			}
		}
	}
	static void updateLevel(int cnt, bool add = false, int value = 0) {
		for (int c_ = 0; c_ < redeem_codev2.redeemcode.size(); c_++) {
			if (c_ == cnt) {
				if (add) {
					redeem_codev2.redeemcode[c_].Levell = value;
				}
				else {
					redeem_codev2.redeemcode[c_].Levell = 0;
				}
			}
		}
	}
	static void updateCoin(int cnt, bool add = false, int value = 0) {
		for (int c_ = 0; c_ < redeem_codev2.redeemcode.size(); c_++) {
			if (c_ == cnt) {
				if (add) {
					redeem_codev2.redeemcode[c_].Coin = value;
				}
				else {
					redeem_codev2.redeemcode[c_].Coin = 0;
				}
			}
		}
	}
	static void updateToken(int cnt, bool add = false, int value = 0) {
		for (int c_ = 0; c_ < redeem_codev2.redeemcode.size(); c_++) {
			if (c_ == cnt) {
				if (add) {
					redeem_codev2.redeemcode[c_].Seasonals_Token = value;
				}
				else {
					redeem_codev2.redeemcode[c_].Seasonals_Token = 0;
				}
			}
		}
	}
	static void updateRole(int cnt, bool add = false, int value = 0) {
		for (int c_ = 0; c_ < redeem_codev2.redeemcode.size(); c_++) {
			if (c_ == cnt) {
				if (add) {
					redeem_codev2.redeemcode[c_].Player_Role = value;
				}
				else {
					redeem_codev2.redeemcode[c_].Player_Role = 0;
				}
			}
		}
	}
};
class Daily_Challenge {
public:
	static std::string Get_Next() {
		if (Event()->dailyc_name == "Fish Frenzy") return "Crimewave";
		else if (Event()->dailyc_name == "Crimewave") return "Surgeon";
		else if (Event()->dailyc_name == "Surgeon") return "Geiger";
		else if (Event()->dailyc_name == "Geiger") return "Mining";
		else if (Event()->dailyc_name == "Mining") return "Fish Frenzy";
		else return "Fish Frenzy";
	}
	static void DailyChallengeRequest(ENetPeer* peer) {
		int point = 0;
		auto it = std::find_if(Event()->top_dailyc.begin(), Event()->top_dailyc.end(),
			[&](const std::pair<long long int, std::string>& element) { return element.second == pInfo(peer)->tankIDName; });
		if (it != Event()->top_dailyc.end()) {
			point = it->first;
		}
		else {
			point = 0;
		}
		gamepacket_t p1;
		p1.Insert("OnDailyChallengeRequest"), p1.Insert((Event()->DailyChallenge ? "1|" + to_string(point) + "" : "0|0") + "|" + (not Event()->DailyChallenge ? to_string(Event()->daily_wait_time - time(nullptr)) : to_string(Event()->daily_current_time - time(nullptr))) + "|" + a + (not Event()->DailyChallenge ? "3142" : Event()->dailyc_name == "Fish Frenzy" ? "7072" : Event()->dailyc_name == "Surgeon" ? "7068" : Event()->dailyc_name == "Geiger" ? "2204" : Event()->dailyc_name == "Crimewave" ? "2302" : Event()->dailyc_name == "Wolf World" ? "2992" : Event()->dailyc_name == "Mining" ? "14526" : "3142")), p1.CreatePacket(peer);
	}
	static void Add_Points(ENetPeer* peer, int point) {
		if (not Event()->DailyChallenge or pInfo(peer)->supp == 0) return;
		auto it = std::find_if(Event()->top_dailyc.begin(), Event()->top_dailyc.end(),
			[&](const std::pair<long long int, std::string>& element) { return element.second == pInfo(peer)->tankIDName; });
		if (it != Event()->top_dailyc.end()) {
			if (it->first < 0) {
				it->first = 0;
			}
			it->first += point;
		}
		else {
			Event()->top_dailyc.emplace_back(point, pInfo(peer)->tankIDName);
		}
		DailyChallengeRequest(peer);
	}
};
bool find_phoenix_item(std::uint16_t item) {
	if (find(Environment()->phoenix_items_all.begin(), Environment()->phoenix_items_all.end(), item) != Environment()->phoenix_items_all.end()) return false;
	else return true;
}
int get_next_event() {
	if (event_item == 6238) return 6828;
	else if (event_item == 6828) return 6256;
	else if (event_item == 6256) return 6244;
	else if (event_item == 6244) return 6834;
	else if (event_item == 6834) return 6250;
	else return 6238;
}
void guild_flag_dialog(ENetPeer* peer, std::string error = "") {
	bool taken_ = false;
	if (pInfo(peer)->set_guild_fg != 0 && pInfo(peer)->set_guild_bg != 0) {
		for (Guild check_guild_name : guilds) {
			if (check_guild_name.guild_mascot[0] == pInfo(peer)->set_guild_fg && check_guild_name.guild_mascot[1] == pInfo(peer)->set_guild_bg) {
				taken_ = true;
				break;
			}
		}
	}
	int price = 100000, guild_fg = 0, guild_bg = 0, total_members = 0;
	std::uint32_t guild_id = pInfo(peer)->guild_id;
	std::vector<Guild>::iterator px = find_if(guilds.begin(), guilds.end(), [guild_id](const Guild& a) { return a.guild_id == guild_id; });
	if (px != guilds.end()) {
		Guild* guild_information = &guilds[px - guilds.begin()];
		if (guild_information->guild_mascot[0] == 0 && guild_information->guild_mascot[1] == 0) price = 100000;
		else price = 250000;
		total_members = guild_information->guild_members.size();
		guild_fg = guild_information->guild_mascot[0];
		guild_bg = guild_information->guild_mascot[1];
	}
	if (not error.empty()) error = "\nadd_spacer|small|\nadd_smalltext|`4"+ error +"``|left|";
	VarList::OnDialogRequest(peer, SetColor(peer) + "set_default_color|`o" + (guild_fg == 0 and guild_bg == 0 and pInfo(peer)->set_guild_bg == 0 and pInfo(peer)->set_guild_fg == 0 ? "\nadd_label_with_icon|big|`wGrow Guild Mascot Editor``|left|5814|" : "\nadd_dual_layer_icon_label|big|`wGrow Guild Mascot Editor``|left|" + (pInfo(peer)->set_guild_bg != 0 or pInfo(peer)->set_guild_fg != 0 ? to_string(pInfo(peer)->set_guild_bg) : to_string(guild_bg)) + "|" + (pInfo(peer)->set_guild_fg != 0 or pInfo(peer)->set_guild_bg != 0 ? to_string(pInfo(peer)->set_guild_fg) : to_string(guild_fg)) + "|1.2|0|") + "\nadd_spacer|small|\nadd_smalltext|Create a unique Guild Mascot for your guild! Only `9"+Set_Count(price) + " Gems!``|left|\nadd_smalltext|Choose items from your inventory to use as your Guild Mascot.|left|" + error + "\nadd_spacer|small|\nadd_item_picker|select_bg|`wChoose Background Item``|Choose the mascot background item!|\nadd_item_picker|select_fg|`wChoose Foreground Item``|Choose the mascot foreground item!|" + (pInfo(peer)->set_guild_fg + pInfo(peer)->set_guild_bg != 0 ? "\nadd_spacer|small|\nadd_dual_layer_icon_label|small|`wGuild Mascot Preview:``|left|" + to_string(pInfo(peer)->set_guild_bg) + "|" + to_string(pInfo(peer)->set_guild_fg) + "|5.0|1|" : guild_fg + guild_bg != 0 ? "\nadd_dual_layer_icon_label|small|`wGuild Mascot Preview:``|left|" + to_string(guild_bg) + "|" + to_string(guild_fg) + "|5.0|1|" : "") + "\nadd_spacer|small|" + (total_members < 30 ? "\nadd_smalltext|Increase your membership to `030`` or more for access exclusive foreground only mascots!|left|" : "\nadd_textbox|`6Exclusive``: Mascot Foreground Only - uses a foreground item only! `6200.000 Gems`` additional cost (250.000 Gems in total).|left|") + (pInfo(peer)->set_guild_fg + pInfo(peer)->set_guild_bg == 0 ? "\nadd_textbox|You have not yet changed your Guild Mascot!|left|" : (taken_ ? "\nadd_smalltext|Sorry that Guild Mascot is already taken, please try a different combination!|left|" : "\nadd_button|create|`oConfirm Guild Mascot``|noflags|0|0|")) + "\nend_dialog|create_guild_mascot|Cancel||\nadd_quick_exit|");
}
void set_Guilds(ENetPeer* peer) {
	std::string name_ = pInfo(peer)->world;
	std::vector<World>::iterator p = find_if(worlds.begin(), worlds.end(), [name_](const World& a) { return a.name == name_; });
	if (p != worlds.end()) {
		World* world_ = &worlds[p - worlds.begin()];
		if (world_->guild_id != 0) 	pInfo(peer)->guild_id = world_->guild_id;
		else pInfo(peer)->guild_id = 0;
	}
}
void autofarm_status(ENetPeer* peer) {
	if (pInfo(peer)->cheater_settings & SETTINGS::SETTINGS_0) {
		pInfo(peer)->cheater_settings &= ~SETTINGS::SETTINGS_0;
		VarList::OnConsoleMessage(peer, "`oCheat Disabled: Autofarm (`$Cheat Active: Autofarm (cool) -> " + items[pInfo(peer)->last_used_block].ori_name + " ``mod removed)");
		pInfo(peer)->autofarm_x = -1;
		pInfo(peer)->autofarm_y = -1;
		pInfo(peer)->last_used_block = 0;
		pInfo(peer)->autofarm = false;
	}
}
string world_category(int category_id) {
	if (category_id == 1) return "Adventure";
	else if (category_id == 2) return "Art";
	else if (category_id == 3) return "Farm";
	else if (category_id == 4) return "Game";
	else if (category_id == 5) return "Information";
	else if (category_id == 6) return "Parkour";
	else if (category_id == 7) return "Roleplay";
	else if (category_id == 8) return "Shop";
	else if (category_id == 9) return "Social";
	else if (category_id == 10) return "Storage";
	else if (category_id == 11) return "Story";
	else if (category_id == 12) return "Trade";
	else if (category_id == 13) return "Guild";
	else if (category_id == 14) return "Puzzle";
	else if (category_id == 15) return "Music";
	else if (category_id == 16) return "Casino";
	else return "";
}
int world_category_id(std::string category) {
	if (category == "Adventure") return 1;
	else if (category == "Art") return 2;
	else if (category == "Farm") return 3;
	else if (category == "Game") return 4;
	else if (category == "Information") return 5;
	else if (category == "Parkour") return 6;
	else if (category == "Roleplay") return 7;
	else if (category == "Shop") return 8;
	else if (category == "Social") return 9;
	else if (category == "Storage") return 10;
	else if (category == "Story") return 11;
	else if (category == "Trade") return 12;
	else if (category == "Guild") return 13;
	else if (category == "Puzzle") return 14;
	else if (category == "Music") return 15;
	else if (category == "Casino") return 16;
	else return 1;
}
void shop_tab(ENetPeer* peer, std::string tab) {
	std::string extra_tab = "", item_ = "";
	if (tab.length() > 5) {
		extra_tab = "_" + a + tab.substr(5, tab.length() - 5).c_str();
		item_ = tab.substr(5, tab.length() - 5).c_str();
	}
	gamepacket_t p(0);
	p.Insert("OnStoreRequest");
	if (tab == "tab1" + extra_tab) {
		struct tm newtime;
		time_t now = time(0);
#ifdef _WIN32
		localtime_s(&newtime, &now);
#elif defined(__linux__)
		localtime_r(&now, &newtime);
#endif
		std::string banner = "", token_btn = "";
		if (guild_event_type == "Spring Clash") {
			token_btn = "\nadd_button|Spring_150|" + items[7844].name + "|interface/large/store_buttons/store_tokens.rttex|`2You Get:`` 150 " + items[7844].name + "<CR><CR>`5Description:`` " + items[7844].description + "``|2|1|150000|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|Spring_350|" + items[7844].name + "|interface/large/store_buttons/store_tokens.rttex|`2You Get:`` 350 " + items[7844].name + "<CR><CR>`5Description:`` " + items[7844].description + "``|3|1|300000|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|Spring_500|" + items[7844].name + "|interface/large/store_buttons/store_tokens.rttex|`2You Get:`` 500 " + items[7844].name + "<CR><CR>`5Description:`` " + items[7844].description + "``|0|2|500000|0|||-1|-1||-1|-1||1||||||0|0|";
			if (items[event_item].hand_scythe_text == "Block Bashers") banner = "interface/large/tianvan/spring/block_basher.rttex";
			else if (items[event_item].hand_scythe_text == "Fishing Fanatics") banner = "interface/large/tianvan/spring/fishing_fanatics.rttex";
			else if (items[event_item].hand_scythe_text == "Surgery Stars") banner = "interface/large/tianvan/spring/surgery_stars.rttex";
			else if (items[event_item].hand_scythe_text == "Harvest Heroes") banner = "interface/large/tianvan/spring/harvest_heroes.rttex";
			else if (items[event_item].hand_scythe_text == "Speedy Splicers") banner = "interface/large/tianvan/spring/speedy_splicers.rttex";
			else if (items[event_item].hand_scythe_text == "Block Builders") banner = "interface/large/tianvan/spring/block_builders.rttex";
		}
		if (guild_event_type == "Winter Clash") {
			token_btn = "\nadd_button|Winter_150|" + items[7328].name + "|interface/large/store_buttons/store_tokens.rttex|`2You Get:`` 150 " + items[7328].name + "<CR><CR>`5Description:`` " + items[7328].description + "``|3|0|150000|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|Winter_350|" + items[7328].name + "|interface/large/store_buttons/store_tokens.rttex|`2You Get:`` 350 " + items[7328].name + "<CR><CR>`5Description:`` " + items[7328].description + "``|0|1|300000|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|Winter_500|" + items[7328].name + "|interface/large/store_buttons/store_tokens.rttex|`2You Get:`` 500 " + items[7328].name + "<CR><CR>`5Description:`` " + items[7328].description + "``|1|1|500000|0|||-1|-1||-1|-1||1||||||0|0|";
			if (items[event_item].hand_scythe_text == "Block Bashers") banner = "interface/large/tianvan/winter/block_basher.rttex";
			else if (items[event_item].hand_scythe_text == "Fishing Fanatics") banner = "interface/large/tianvan/winter/fishing_fanatics.rttex";
			else if (items[event_item].hand_scythe_text == "Surgery Stars") banner = "interface/large/tianvan/winter/surgery_stars.rttex";
			else if (items[event_item].hand_scythe_text == "Harvest Heroes") banner = "interface/large/tianvan/winter/harvest_heroes.rttex";
			else if (items[event_item].hand_scythe_text == "Speedy Splicers") banner = "interface/large/tianvan/winter/speedy_splicers.rttex";
			else if (items[event_item].hand_scythe_text == "Block Builders") banner = "interface/large/tianvan/winter/block_builders.rttex";
		}
		if (guild_event_type == "Summer Clash") {
			token_btn = "\nadd_button|Summer_150|" + items[6198].name + "|interface/large/store_buttons/store_tokens.rttex|`2You Get:`` 150 " + items[6198].name + "<CR><CR>`5Description:`` " + items[6198].description + "``|0|0|150000|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|Summer_350|" + items[6198].name + "|interface/large/store_buttons/store_tokens.rttex|`2You Get:`` 350 " + items[6198].name + "<CR><CR>`5Description:`` " + items[6198].description + "``|1|0|300000|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|Summer_500|" + items[6198].name + "|interface/large/store_buttons/store_tokens.rttex|`2You Get:`` 500 " + items[6198].name + "<CR><CR>`5Description:`` " + items[6198].description + "``|2|0|500000|0|||-1|-1||-1|-1||1||||||0|0|";
			if (items[event_item].hand_scythe_text == "Block Bashers") banner = "interface/large/tianvan/summer/block_basher.rttex";
			else if (items[event_item].hand_scythe_text == "Fishing Fanatics") banner = "interface/large/tianvan/summer/fishing_fanatics.rttex";
			else if (items[event_item].hand_scythe_text == "Surgery Stars") banner = "interface/large/tianvan/summer/surgery_stars.rttex";
			else if (items[event_item].hand_scythe_text == "Harvest Heroes") banner = "interface/large/tianvan/summer/harvest_heroes.rttex";
			else if (items[event_item].hand_scythe_text == "Speedy Splicers") banner = "interface/large/tianvan/summer/speedy_splicers.rttex";
			else if (items[event_item].hand_scythe_text == "Block Builders") banner = "interface/large/tianvan/summer/block_builders.rttex";
		}
		int percent_calendar = (WinterFest.Calendar_Stock - WinterFest.Calendar_Sold) * 0.1, percent_bonanza = (WinterFest.Bonanza_Stock - WinterFest.Bonanza_Sold) * 0.1;
		std::string featured = (Event()->Anniversary ? "\nadd_banner|interface/large/gtps_overlays.rttex|0|9|\nadd_image_button||interface/large/gui_anniversary_banner.rttex|bannerlayout|||\nadd_button|party_box|`oParty-In-A-Box``|interface/large/store_buttons/store_buttons12.rttex|`2You Get:`` 1 Party-In-A-Box.<CR><CR>`5Description:`` Keep missing the party? Start your own with this handy box! This causes the Anniversary Party event to occur in your world instantly, and is consumed when used. `8Only available during Anniversary Week!``|0|3|10000|0|||-1|-1||-1|-1||1||||||0|0|CustomParams:|\nadd_button|mega_party_pack|`oMega Party Pack``|interface/large/store_buttons/store_buttons37.rttex|`2You Get:`` 5 Party-In-A-Box.<CR><CR>`5Description:`` The ultimate way to get you party started. Turn any world into a party world with the mega party pack. Each box will cause the Anniversary Party event to occur in your world instantly, and is consumed when used. `8Only available during Anniversary Week!``<CR><CR>`5BONUS: With every purchase there is a chance that 1 Party-In-A-Box will be a `2Golden Party-In-A-Box``!``|0|6|50000|0|||-1|-1||-1|-1||1||||||0|0|CustomParams:|" : "") + a + (Event()->Halloween ? "\nadd_banner|interface/large/gtps_overlays.rttex|0|9|\nadd_image_button|image_button|interface/large/gui_halloween_banner3.rttex|bannerlayout|OPENDIALOG|halloweenquestpopup|\nadd_button|fist_of_vengeance|`oFist of Vengeance``|interface/large/store_buttons/store_buttons39.rttex|`2You Get:`` 1 Fist of Vengeance.<CR><CR>`5Description:`` Become the knight of the darkness and strike down your foes with the Fist of Vengeance!|0|4|1000000|0|||0|0|interface/large/gui_shop_buybanner2.rttex|1|7||1||||||0|0|\nadd_button|rt_grope_gem_halloween_bundle||interface/large/store_buttons/store_buttons39.rttex|OPENDIALOG&rt_grope_gem_halloween_bundle|0|3|0|0|ĳ 600 Coin||-1|-1||-1|-1||1||||||0|0|\nadd_button|growganoth|`oGift of Growganoth Pack``|interface/large/store_buttons/store_buttons7.rttex|`2You Get:`` 10 Gifts of Growganoth.<CR><CR>`5Description:`` `4Available only during Halloween!`` Would you like to donate to the cause?  Give Growganoth a few gems, and it will reward you with vast power beyond imagining!  Or, perhaps, a box containing a random Halloween item.  Opening each is equivalent to feeding 1 item of rarity 75 into the Maw of Growganoth.  What you will get is random, so don't buy this unless you're ready to be surprised! Each gift has the chance of getting `#Dark King's Offering`` or any of it's Components, including the `#Rare Spooky Gift``! Only available for purchase during `2Halloween Week.`` This item is `#Untradeable.``|0|1|15000|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|mega_sigil|`oElder Sigil Pack``|interface/large/store_buttons/store_buttons41.rttex|`2You Get:`` 5 Elder Sigils.<CR><CR>`5Description:`` This mystical item will teleport you directly into the gaping maw of Growganoth as many times you want for a short period. You must be in the GROWGANOTH world in order to use this item!|2|1|10000|0|||-1|-1||-1|-1||1||||||0|0|CustomParams:|\nadd_button|halloween_dummy|`oGo To Growganoth!``|interface/large/store_buttons/store_buttons42.rttex|OPENDIALOG&warp_player_into_halloween_world|4|2|0|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|dark_ticket|`oDark Ticket``|interface/large/store_buttons/store_buttons27.rttex|`2You Get:`` 1 Dark Ticket.<CR><CR>`5Description:`` Enter the Tomb of Growganoth at your own peril! Find the `5Sacrificial Wells`` to earn `5Corrupted Souls`` and locate the `5Corruption Altar`` to get rewards... beware of the darkness!|0|6|6000|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|dark_mountains|`oDark Mountains``|interface/large/store_buttons/store_buttons39.rttex|`2You Get:`` 1 Weather Machine - Dark Mountains.<CR><CR>`5Description:`` Bring some terror to your world with these mountains!|2|3|50000|0|||-1|-1|interface/large/gui_shop_buybanner2.rttex|0|7||1||||||0|0|\nadd_button|riding_raven|`oRiding Raven``|interface/large/store_buttons/store_buttons16.rttex|`2You Get:`` 1 Riding Raven.<CR><CR>`5Description:`` Only the darkest magic could breed a raven so massive that you could ride on it. And Growganoth only permits such magic during `2Halloween Week``, so buy this now before Halloween is over! Riding on this bird gives you the ability to double-jump. Only available for purchase during `2Halloween Week``!|0|1|150000|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|spirit_hat|`oSpiritual Resonator``|interface/large/store_buttons/store_buttons7.rttex|`2You Get:`` 1 Spiritual Resonator.<CR><CR>`5Description:`` `4Available only during Halloween!`` This fantabulous contraption is worn on the head, where it sends out signals into the great beyond, attracting friendly spirits.  The ghost that follows you around when you wear this has a special ability - if you wear a pet leash on your wrist at the same time, the ghost will replace the pet, but imitate its abilities (such as breathing fire if you wear a Dragon Hand).|0|0|40000|0|||-1|-1||-1|-1||1||||||0|0|" : "") + (WinterFest.Active ? "\nadd_banner|interface/large/gtps_overlays.rttex|0|9|\nadd_image_button|image_button|interface/large/gui_shop_winter_seals.rttex|bannerlayout|OPENDIALOG|royalwinterseals|\nadd_button|winter_bingo_ui||interface/large/store_buttons/store_buttons41.rttex|OPENDIALOG&winter_bingo_ui|4|3|0|0|||-1|-1||-1|-1||1||||||0|0|CustomParams:|\nadd_button|5402|`o" + items[5402].name + "``|interface/large/store_buttons/store_buttons17.rttex|`2You Get:`` 10 " + items[5402].name + ".<CR><CR>`5Description:`` Contains 10 Winterfest Crackers.Fun holidays crackers loaded with Winterfest cheer and -hopefully - awesome gifts.What will you find ? Pop one and see!|0|5|12500|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|1364|`o" + items[1364].name + "``|interface/large/store_buttons/store_buttons8.rttex|`2You Get:`` 1 " + items[1364].name + ".<CR><CR>`5Description:`` " + items[1364].description + "|0|2|10000|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|15010|`o" + items[15010].name + "``|interface/large/store_buttons/store_buttons34.rttex|`2You Get:`` 1 " + items[15010].name + ".<CR><CR>`5Description:`` A wonderful Winterfest Calendar for 2024, jam-packed with joy and gifts to celebrate the holidays. Make sure to check back each day to get a new gift! ...or just wait and open them all in one go! Either way, it's a blast! WARNING! DO NOT BREAK! The Winterfest Calendar will not return to your backpack if broken!|0|0|65000|0||interface/large/gui_store_button_overlays1.rttex|0|0||-1|-1||" + a + (WinterFest.Calendar_Sold <= WinterFest.Calendar_Stock ? "1||-1|-1||" + to_string((WinterFest.Calendar_Stock / 10) - percent_calendar) + "% Remaining" : "0|interface/large/store_buttons/store_buttons34.rttex|1|0||Out Of Stock") + "||0|0| |1|0|Out of Stock||0|0|\nadd_button|10450|`o" + items[10450].name + "``|interface/large/store_buttons/store_buttons34.rttex|`2You Get:`` 1 " + items[10450].name + ".<CR><CR>`5Description:`` " + items[10450].description + "|0|1|45000|0||interface/large/gui_store_button_overlays1.rttex|0|0||-1|-1||" + a + (WinterFest.Bonanza_Sold <= WinterFest.Bonanza_Stock ? "1||-1|-1||" + to_string((WinterFest.Bonanza_Stock / 10) - percent_bonanza) + "% Remaining" : "0|interface/large/store_buttons/store_buttons34.rttex|1|1||Out Of Stock") + "||0|0| |1|0|Out of Stock||0|0|\nadd_button|winterfest_eventpack||interface/large/store_buttons/store_buttons41.rttex|OPENDIALOG&winterfest_eventpack|2|4|0|0|$ 700 Coin|interface/large/gui_store_button_overlays5.rttex|0|1||-1|-1||1||||||0|0|\nadd_button|7430|`o" + items[7430].name + "``|interface/large/store_buttons/store_buttons25.rttex|`2You Get:`` 1 " + items[7430].name + ".<CR><CR>`5Description:`` " + items[7430].description + "|0|5|25000|0|||-1|-1||-1|-1||1||||||0|0|" : "") + (Event()->Summerfest ? "\nadd_banner|interface/large/gtps_overlays.rttex|0|9|\nadd_image_button|image_button|interface/large/gui_shop_summerfest1.rttex|bannerlayout|OPENDIALOG|showphoenixreturns|\nadd_button|phoenix_dummy||interface/large/store_buttons/store_buttons38.rttex|OPENDIALOG&showphoenixreturns|0|6|0|0|`6" + to_string(24 - newtime.tm_hour) + " hours, " + to_string(60 - newtime.tm_min) + " mins``||-1|-1||-1|-1||1||||||0|0|\nadd_spacer|small|\nadd_label|`6" + to_string(6 - Environment()->phoenix_items_all.size()) + "/6 Found``|target:phoenix_dummy;size:small;top:0.28;left:0.5|\nadd_button|beach_bingo|`oBeach Blast Bingo!``|interface/large/store_buttons/store_buttons4.rttex|`2You Get:`` 1 Beach Blast, 1 Summer Surprise, 100 Fireworks. <CR><CR>`5Description:`` It's hot out there! Don't you want to go to the beach? Now you can make your own beach with a Beach Blast device and the 100 Fireworks needed to power it. The Beach Blast creates a brand new world set up as a beach, full of cool new Summer items. As a bonus, you'll get a Summer Surprise and a chance of a Ultra White Fragment or Ultra Purple Fragment too! (available during Summerfest week only!|0|7|15000|0|||-1|-1||-1|-1||1||||||0|0|" : "") + (Event()->Valentine ? "\nadd_banner|interface/large/gtps_overlays.rttex|0|9|\nadd_image_button||interface/large/gui_valentine_banner.rttex|bannerlayout|||\nadd_button|valentines|`oValentine's Goodies``|interface/large/store_buttons/store_buttons2.rttex|`2You Get:`` 5 Golden Booty Chests and 1 Valentine's Card.<CR><CR>`5Description:`` Contains 5 Golden Booty Chests and a bonus Valentine's Card to share the love. Smash the Golden Booty Chests to find a random assortment of Valentine's surprises.|0|4|7500|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|wishing_well|`oWell of Love``|interface/large/store_buttons/store_buttons35.rttex|`2You Get:`` 1 Well of Love.<CR><CR>`5Description:`` This Well of Love grants you the one best item out of a stack of Golden Booty Chests. Once the well is full it will provide Pure Love Essence that increases the chance of getting a Golden Heart Crystal when opening Golden Booty Chests, Super Golden Booty Chests and Heartstones.|0|0|5000|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|valentines_weather|`oWeather Machine - Valentine's``|interface/large/store_buttons/store_buttons18.rttex|`2You Get:``1 Weather Machine - Valentine's.<CR><CR>`5Description:`` Love is in the air! Send hearts sailing through pink and fluffy skies with this adorable weather machine and everyone will know what a romantic you are! `5It's a perma-item, is never lost when destroyed.``|0|5|10000|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|valentine_starterpack||interface/large/store_buttons/store_buttons39.rttex|OPENDIALOG&valentine_starterpack|1|7|0|0|$ 900 Coin|interface/large/gui_store_button_overlays5.rttex|0|3||-1|-1||1||||||0|0|\nadd_button|valentine_valuepack||interface/large/store_buttons/store_buttons39.rttex|OPENDIALOG&valentine_valuepack|0|7|0|0|$ 250 Coin|interface/large/gui_store_button_overlays5.rttex|1|2||-1|-1||1||||||0|0|" : "") + (Event()->Harvest_Festival ? "\nadd_banner|interface/large/gtps_overlays.rttex|0|9|\nadd_image_button||interface/large/gui_harvest_banner.rttex|bannerlayout|||\nadd_button|mooncake_mag|`oMooncake Magnificence``|interface/large/store_buttons/store_buttons32.rttex|`2You Get:`` 1 Mooncake Magnificence.<CR><CR>`5Description:`` A Magnificent Mooncake Pendant! When equipped, this VallenSasuke pendant emits a balanced glow that responds in harmony with Balance Mooncakes. Whenever a Balance Mooncake is found, there is a chance of dropping up to X3 of them but also the item breaking. The item will only break when 2 or more Balance Mooncakes are dropped at a time. However, it repels Peace, Harmony, Prosperity and Longevity Mooncakes making them less likely to be found when harvesting trees.|0|7|5000|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|mooncake_sale|`oMooncake Magnificence Sale!``|interface/large/store_buttons/store_buttons30.rttex|`2You Get:`` 3 Mooncake Magnificence.<CR><CR>`5Description:`` Congratulations! It's community sale time! A Pack of 3 Magnificent Mooncake Pendants! When equipped, this VallenSasuke pendant emits a balanced glow that responds in harmony with Balance Mooncakes. Whenever a Balance Mooncake is found, there is a chance of dropping up to X3 of them but also the item breaking. The item will only break when 2 or more Balance Mooncakes are dropped at a time. However, it repels Peace, Harmony, Prosperity and Longevity Mooncakes making them less likely to be found when harvesting trees.|0|6|12500|0|||-1|-1||-1|-1||0|interface/large/store_buttons/store_buttons30.rttex|0|7|    0% achieved    ||0|0|\nadd_button|mystical_lanten_hoa|`oMystical Lantern``|interface/large/store_buttons/store_buttons39.rttex|`2You Get:`` 1 Mystical Lantern.<CR><CR>`5Description:`` Light the way on your journey.<CR><CR>`#This item is only available during Harvest Festival.``|2|1|300000|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|offering_alter_hoa|`oOffering Table``|interface/large/store_buttons/store_buttons39.rttex|`2You Get:`` 1 Offering Table.<CR><CR>`5Description:`` Offer 10 mooncakes on the table to receive 1 random reward from the Harvest Moon!<CR><CR>`#This item is only available during Harvest Festival.``|1|1|5000|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|solar_collector|`oSolar Collector``|interface/large/store_buttons/store_buttons14.rttex|`2You Get:`` 1 Solar Collector.<CR><CR>`5Description:`` Stick these amazing devices in your world. They take 24 hours to charge, and then the next seed you plant will be infused with solar energy, growing 25% instantly! They can be turned on and off with the wrench (or set to only affect splicing, or only affect planting, whatever you need!). `#Only available during Harvest Fest!`` `8Note: These items don't return to your backpack when broken, so place them carefully!``|0|3|8000|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|harvest_pack|`oHarvest Blast``|interface/large/store_buttons/store_buttons32.rttex|`2You Get:`` A Harvest Moon Blast.<CR><CR>`5Description:`` Celebrate the harvest with a new `2Harvest Moon Blast`` to create a world with a unique harvest moon sky, filled with random trees that are fully grown and ready to harvest!``)|0|6|10000|0|||-1|-1||-1|-1||1||||||0|0|" : "") + "\nadd_banner|interface/large/gtps_overlays.rttex|0|1|\nadd_button|assets_shop||interface/large/store_buttons/tianvan_store.rttex|OPENDIALOG&assets_shop|3|0|0|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|marketplace||interface/large/store_buttons/tianvan_store.rttex|OPENDIALOG&marketplace|1|0|0|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|iotm_shop||interface/large/store_buttons/tianvan_store.rttex|OPENDIALOG&iotm_shop|0|0|0|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|opc_shop||interface/large/store_buttons/tianvan_store.rttex|OPENDIALOG&opc_shop|2|0|0|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|redeem_code|Redeem Code|interface/large/store_buttons/store_buttons40.rttex|OPENDIALOG&showredeemcodewindow|1|5|0|0|||-1|-1||-1|-1||1||||||0|0|CustomParams:|\nadd_button|rt_grope_loyalty_bundle02|`oPiggy Bank``|interface/large/store_buttons/store_buttons41.rttex|rt_grope_loyalty_bundle02|4|7|0|0|||-1|-1||-1|-1|OPENDIALOG&openPiggyBank|1||||||0|0|CustomParams:|\nadd_button|earn_free_gems|`oEarn Free Gems``|interface/large/store_buttons/store_buttons41.rttex|earn_free_gems|0|4|0|0|||-1|-1||-1|-1|OPENDIALOG&openPageFreeGems|1||||||0|0|CustomParams:|\nadd_spacer|small|\nadd_label|`w" + Set_Count(pInfo(peer)->Banked_Piggy) + " / 350,000``|target:rt_grope_loyalty_bundle02;size:tiny;top:0.26;left:0.5|\nadd_banner|interface/large/gtps_overlays.rttex|0|8|\nadd_button|8188|" + items[8188].name + "|interface/large/store_buttons/store_buttons28.rttex|`2You Get:`` 1 " + items[8188].name + "<CR><CR>`5Description:``" + items[8188].description + " ``|0|0|1000000|0|||-1|-1||-1|-1||1||||||0|\nadd_button|8186|" + items[8186].name + "|interface/large/store_buttons/store_buttons28.rttex|`2You Get:`` 1 " + items[8186].name + "<CR><CR>`5Description:``" + items[8186].description + " ``|0|1|300000|0|||-1|-1||-1|-1||1||||||0|\nadd_button|9266|" + items[9266].name + "|interface/large/store_buttons/store_buttons33.rttex|`2You Get:`` 1 " + items[9266].name + "<CR><CR>`5Description:``" + items[9266].description + " ``|0|5|10000|0|||-1|-1||-1|-1||1||||||0|" + (Event()->Can_Event ? "" : "\nadd_banner|interface/large/gtps_overlays.rttex|0|3|\nadd_button|||interface/large/store_buttons/tianvan_store.rttex|OPENDIALOG&|10|3|0|0|||-1|-1||-1|-1||1|||||Guild: " + best_guild + "|0|0|\nadd_button|" + to_string(event_item) + "|`o" + items[event_item].ori_name + "``|interface/large/store_buttons/" + items[event_item].texture_name + "|`2You Get:`` 1 " + items[event_item].ori_name + ".<CR><CR>`5Description:`` " + items[event_item].description + " |0|" + to_string(items[event_item].texture_y) + "|5000|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|7190|`wGuild Name Changer``|interface/large/store_buttons/store_buttons23.rttex|`2You Get:`` 1 Guild Name Changer.<CR><CR>`5Description:`` Fancy a change? Bored of your guild name or made a mistake when creating it? Fear not you can use up one of these to change your Guild's name! The usual name checks will be initiated to check if your new guild name is valid. Only usable by the guild leader!|0|6|200000|0|||-1|-1||-1|-1||1||||||0|0|") + "\nadd_banner|interface/large/gtps_overlays.rttex|0|2|\nadd_image_button|image_button|interface/large/gui_shop_grow_pass.rttex|bannerlayout|OPENDIALOG|growpass|\nadd_button|||interface/large/store_buttons/tianvan_store.rttex|OPENDIALOG&|9|3|0|0|||-1|-1||-1|-1||1|||||" + a + (pInfo(peer)->gp == 0 ? "OBTAIN ROYAL GROW PASS" : "" + to_string(pInfo(peer)->growpass_points > 5400 ? 5400 : pInfo(peer)->growpass_points) + "/5400 POINTS") + "|0|0|" + (pInfo(peer)->gp ? "" : "\nadd_button|buy_growpass||interface/large/store_buttons/store_buttons37.rttex|OPENDIALOG&buy_growpass|4|2|0|0|BUY GROW PASS||0|1||-1|-1||1||||||0|0|") + "";
		p.Insert("set_description_text|Welcome to the `2Growtopia Store``! Select the item you'd like more info on.`o `wWant to get `5Supporter`` status? Any Gem purchase (or `520000`` Gems earned with free `5Tapjoy`` offers) will make you one. You'll get new skin colors, the `5Recycle`` tool to convert unwanted items into Gems, and more bonuses!\nenable_tabs|1|\nadd_tab_button|main_menu|Home|interface/large/gtps_shop_btn.rttex|sw|1|0|0|0|sw|sw|sw|-1|-1|sw|sw|0|0|\nadd_tab_button|locks_menu|Locks And Stuff|interface/large/gtps_shop_btn.rttex||0|1|0|0||||-1|-1|||0|0|\nadd_tab_button|bigiitems_menu|Custom Items|interface/large/gtps_shop_btn.rttex||0|4|0|0||||-1|-1|||0|0|\nadd_tab_button|itempack_menu|Item Packs|interface/large/gtps_shop_btn.rttex||0|3|0|0||||-1|-1|||0|0|\nadd_tab_button|weather_menu|Weather Machines|interface/large/gtps_shop_btn.rttex|Tired of the same sunny sky?  We offer alternatives within...|0|5|0|0||||-1|-1|||0|0|\nadd_tab_button|token_menu|Growtoken Items|interface/large/gtps_shop_btn.rttex||0|2|0|0||||-1|-1|||0|0|\nadd_big_banner|interface/large/gui_store_alert.rttex|0|0|`5Notice:`` Get `2" + Environment()->server_name + " Coin`` by depositing `2Growtopia World Locks`` or purchasing via `2Money``. For more info, use `#/deposit`` or visit `#" + Environment()->server_name + " Website``.|\nadd_banner|interface/large/gtps_overlays.rttex|0|10|\nadd_image_button|image_button|interface/large/iotm_banner.rttex|bannerlayout|OPENDIALOG|iotm_shop|\nadd_banner|interface/large/gtps_overlays.rttex|0|0|\nadd_image_button|image_button|interface/large/gtps_store_gacha.rttex|bannerlayout|OPENDIALOG|opengachasystem|\nadd_banner|interface/large/gtps_overlays.rttex|0|6|\nadd_image_button|image_button|" + banner + "|bannerlayout|OPENDIALOG|openeventmenu|" + token_btn + "\nadd_banner|interface/large/gtps_overlays.rttex|0|7|" + (pInfo(peer)->LiyueHtouFly ? "\nadd_button|||interface/large/store_buttons/tianvan_store.rttex|OPENDIALOG&|7|0|0|0|||-1|-1||-1|-1||1||||||0|0|" : "\nadd_button|9502|Liyue H-Tou Pet|interface/large/store_buttons/tianvan_store.rttex|`2You Get:`` 1 Liyue H-Tou Pet<CR><CR>`5Description:``" + items[9502].description + " If you have reached the required level, you will get this ability from Pet-Ai, and this ability will continuously to increase to the maximum limit. ``|6|0|150000000|0|||-1|-1||-1|-1||1||||||0|") + (pInfo(peer)->AbyssMageFly ? "\nadd_button|||interface/large/store_buttons/tianvan_store.rttex|OPENDIALOG&|4|0|0|0|||-1|-1||-1|-1||1||||||0|0|" : "\nadd_button|9504|Hydro Abyss Mage Pet|interface/large/store_buttons/tianvan_store.rttex|`2You Get:`` 1 Hydro Abyss Mage Pet<CR><CR>`5Description:`` If you have reached the required level, you will get this ability from Pet-Ai, and this ability will continuously to increase to the maximum limit. ``|5|0|200000000|0|||-1|-1||-1|-1||1||||||0|") + featured + (extra_tab.empty() ? "" : "\nselect_item|" + item_));
	}
	else if (tab == "tab2" + extra_tab) {
		std::string second = "\nadd_button|signal_jammer|`oSignal Jammer``|interface/large/store_buttons/store_buttons.rttex|`2You Get:`` 1 Signal Jammer.<CR><CR>`5Description:`` Get off the grid! Install a `$Signal Jammer``! A single punch will cause it to whir to life, tireless hiding your world and its population from pesky snoopers - only those who know the world name will be able to enter. `5It's a perma-item, is never lost when destroyed.``|1|6|2000|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|8878|`oSafe Vault``|interface/large/store_buttons/store_buttons27.rttex|`2You Get:`` 1 Safe Vault. <CR><CR>`5Description:`` Protect your items with a password with GrowTech's new Safe Vault!|0|4|10000|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|punch_jammer|`oPunch Jammer``|interface/large/store_buttons/store_buttons7.rttex|`2You Get:`` 1 Punch Jammer.<CR><CR>`5Description:`` Tired of getting bashed around? Set up a Punch Jammer in your world, and people won't be able to punch each other! Can be turned on and off as needed. `5It's a perma-item, is never lost when destroyed.``|0|4|15000|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|zombie_jammer|`oZombie Jammer``|interface/large/store_buttons/store_buttons7.rttex|`2You Get:`` 1 Zombie Jammer.<CR><CR>`5Description:`` Got a parkour or race that you don't want slowed down? Turn this on and nobody can be infected by zombie bites in your world. It does not prevent direct infection by the g-Virus itself though. `5It's a perma-item, is never lost when destroyed.``|0|5|15000|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|3798|" + items[3798].ori_name + "|interface/large/store_buttons/tianvan_store.rttex|`2You Get:`` 1 " + items[3798].ori_name + "<CR><CR>`5Description:`` " + items[3798].description + "|9|5|100000|0|||-1|-1||-1|-1||1||||||0|\nadd_button|1402|`oThermonuclear Blast``|interface/large/store_buttons/store_buttons8.rttex|`2You Get:`` 1 Thermonuclear Blast.<CR><CR>`5Description:`` This supervillainous device will blast you to a new world that has been scoured completely empty - it contains nothing but Bedrock and a White Door. Remember: When using this, you are creating a NEW world by typing in a new name. It would be irresponsible to let you blow up an entire existing world.|0|5|15000|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|antigravity_generator|`oAntigravity Generator``|interface/large/store_buttons/store_buttons17.rttex|`2You Get:`` 1 Antigravity Generator.<CR><CR>`5Description:`` Disables gravity in your world when activated! Well, it reduces gravity, and lets everybody jump as much as they want! `5It's a perma-item - never lost when destroyed! `4Not available any other way!````|0|3|450000|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|builders_lock|`oBuilder's Lock``|interface/large/store_buttons/store_buttons17.rttex|`2You Get:`` 1 Builders Lock.<CR><CR>`5Description:`` Protect up to `$200`` tiles. Wrench the lock to limit it - it can either only allow building, or only allow breaking! `5It's a perma-item, is never lost when destroyed.``|0|2|50000|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|weather_sunny|`oWeather Machine - Sunny``|interface/large/store_buttons/store_buttons5.rttex|`2You Get:`` 1 Weather Machine - Sunny.<CR><CR>`5Description:`` You probably don't need this one... but if you ever have a desire to turn a sunset or desert world back to normal, grab a Sunny Weather Machine to restore the default Growtopia sky! `5It's a perma-item, is never lost when destroyed.``|0|5|1000|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|weather_night|`oWeather Machine - Night``|interface/large/store_buttons/store_buttons5.rttex|`2You Get:`` 1 Weather Machine - Night.<CR><CR>`5Description:`` You might not call it weather, but we do! This will turn the background of your world into a lovely night scene with stars and moon. `5It's a perma-item, is never lost when destroyed.``|0|6|10000|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|weather_arid|`oWeather Machine - Arid``|interface/large/store_buttons/store_buttons5.rttex|`2You Get:`` 1 Weather Machine - Arid.<CR><CR>`5Description:`` Want your world to look like a cartoon desert? This will turn the background of your world into a desert scene with all the trimmings. `5It's a perma-item, is never lost when destroyed.``|0|7|10000|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|weather_rainy|`oWeather Machine - Rainy City``|interface/large/store_buttons/store_buttons6.rttex|`2You Get:`` 1 Weather Machine - Rainy City.<CR><CR>`5Description:`` This will turn the background of your world into a dark, rainy city scene complete with sound effects. `5It's a perma-item, is never lost when destroyed.``|0|5|10000|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|weather_warp|`oWeather Machine - Warp Speed``|interface/large/store_buttons/store_buttons11.rttex|`2You Get:`` 1 Weather Machine - Warp Speed.<CR><CR>`5Description:`` This Weather Machine will launch your world through space at relativistic speeds, which will cause you to age more slowly, as well as see stars flying by rapidly in the background. `5It's a perma-item, is never lost when destroyed.``|0|3|10000|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|mars_blast|`oMars Blast``|interface/large/store_buttons/store_buttons6.rttex|`2You Get:`` 1 Mars Blast.<CR><CR>`5Description:`` Blast off to Mars!  This powerful rocket ship will launch you to a new world set up like the surface of Mars, with a special martian sky background, and unique terrain not found elsewhere in the solar system. Mars even has lower gravity than Growtopia normally does! Remember: When using this, you are creating a NEW world by typing in a new name. You can't convert an existing world to Mars, that would be dangerous.|0|7|15000|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|undersea_blast|`oUndersea Blast``|interface/large/store_buttons/store_buttons9.rttex|`2You Get:`` 1 Undersea Blast.<CR><CR>`5Description:`` Explore the ocean!  This advanced device will terraform a new world set up like the bottom of the ocean, with a special ocean background, and special blocks like Seaweed, Coral, Jellyfish, Sharks, and maybe a special surprise... Remember, by using this you are creating a NEW world by typing in a new name. You can't convert an existing world to an ocean, that would be dangerous.|0|7|15000|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|cave_blast|`oCave Blast``|interface/large/store_buttons/store_buttons15.rttex|`2You Get:`` 1 Cave Blast.<CR><CR>`5Description:`` This explosive device will punch a hole in the ground, giving you a dark cavern to explore. There are even rumors of treasure and the entrance to ancient mines, hidden deep in the caves... but make sure you bring a World Lock. The blasted world is not locked when it's created, so lock it before somebody shows up! Remember: When using this, you are creating a NEW world by typing in a new name. You can't convert an existing world to a cave, that would be dangerous.|0|2|30000|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|weather_stuff|`oWeather Machine - Stuff``|interface/large/store_buttons/store_buttons15.rttex|`2You Get:`` 1 Weather Machine - Stuff.<CR><CR>`5Description:`` This is the most fun weather imaginable - Choose any item from your inventory, adjust some settings, and watch it rain down from the sky! Or up, if you prefer reversing the gravity. `5It's a perma-item, is never lost when destroyed.``|0|6|50000|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|4774|`oJungle Blast``|interface/large/store_buttons/store_buttons16.rttex|`2You Get:`` 1 Jungle Blast.<CR><CR>`5Description:`` Use this astounding device to create an entirely new jungle world. One free ziggurat included.``|0|5|20000|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|weather_backgd|`oWeather Machine - Background``|interface/large/store_buttons/store_buttons17.rttex|`2You Get:`` 1 Weather Machine - Background.<CR><CR>`5Description:`` This amazing device can scan any Background Block, and will make your entire world look like it's been filled with that block. Also handy for hiding music notes! `5It's a perma-item, is never lost when destroyed.``|0|1|150000|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|digital_rain_weather|`oWeather Machine - Digital Rain``|interface/large/store_buttons/store_buttons22.rttex|`2You Get:`` 1 Weather Machine - Digital Rain.<CR><CR>`5Description:`` Take the grow pill, and we'll show you how deep the rabbit hole goes! Splash the scrolling code of creation across the skies of your worlds. They say you learn to understand it after a while... Note: You can only have one of these per world. `5It's a perma-item, is never lost when destroyed.``|0|6|30000|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|treasure_blast|`oTreasure Blast``|interface/large/store_buttons/store_buttons26.rttex|`2You Get:`` 1 Treasure Blast.<CR><CR>`5Description:`` Enter a world of snow-capped peaks and long-forgotten mysteries! Riddles and secrets - and a ton of treasure - await those who brave this blast's blocks! Remember, when you use this, it'll create a new world by typing in a new name! No sense in searching for clues to great treasures in well-trod worlds, is there?|0|6|10000|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|7380|`oMonochrome Blast``|interface/large/store_buttons/store_buttons24.rttex|`2You Get:`` 1 Monochrome Blast.<CR><CR>`5Description:`` Who needs colour when you have black and white? This advanced device will terraform a new world into a monochromatic marvel, with a special monochrome background, and special monochrome blocks! Includes Rare Onyx Blocks! Remember, by using this you are creating a NEW world by typing in a new name. You can't convert an existing world to a monochrome one, that would be too desaturating.|0|0|25000|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|surg_blast|`oSurgWorld Blast``|interface/large/store_buttons/store_buttons27.rttex|`2You Get:`` 1 SurgWorld Blast and 1 Caduceaxe.<CR><CR>`5Description:`` Your gateway to a world of medical wonders! SurgWorld is a place of care and healing, with all kinds of interesting blocks, top tips on how to treat people with surgery, and an increased chance of getting maladies while you work! Also comes with 1 Caduceaxe to extract Vaccine Drops from blocks. `6Warning:`` May break when extracting vaccine.|0|2|10000|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|9164|`oDeadly Blast``|interface/large/store_buttons/tianvan_store.rttex|`2You Get:`` `#1`` `2Deadly Blast``.<CR><CR>`5Description:`` `#1`` `2Deadly Blast`` that has dangerous deadly mushrooms and other cool stuff!|9|4|15000|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|9602|Farm Blast|interface/large/store_buttons/tianvan_store.rttex|`2You Get:`` 1 Farm Blast<CR><CR>`5Description:`` Create awesome farm using this blast!``|10|5|70000|0|||-1|-1||-1|-1||1||||||0|"/*"\nadd_button|infinity_weather_machine|`oInfinity Weather Machine``|interface/large/store_buttons/store_buttons32.rttex|`2You Get:`` 1 Infinity Weather Machine.<CR><CR>`5Description:`` Imagine being able to predict the weather?! Well, with the Infinity Weather Machine you can! Add multiple Weather Machines to this machine and have them play on a loop, like a weather mix tape, kind of!|0|3|25000|0|||-1|-1||-1|-1||1||||||0|0|"*/"\nadd_button|snowy|`oSnowy``|interface/large/store_buttons/store_buttons8.rttex|`2You Get:`` 1 Weather Machine - Snowy. <CR><CR>`5Description:`` Winter is coming. This will turn the background of your world into a snowy mountain scene with snowflakes constantly drifting down. Only available for purchase during WinterFest! It's a perma-item, is never lost when destroyed.|0|2|10000|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|valentines_weather|`oValentine's ``|interface/large/store_buttons/store_buttons18.rttex|`2You Get:`` 1 Weather Machine - Valentine's. <CR><CR>`5Description:`` Love is in the air! Send hearts sailing through pink and fluffy skies with this adorable weather machine and everyone will know what a romantic you are! It's a perma-item, is never lost when destroyed.|0|5|10000|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|paddy|`oWeather Machine - St. Paddy's Day``|interface/large/store_buttons/store_buttons18.rttex|`2You Get:`` 1 Weather Machine - St. Paddy's Day. <CR><CR>`5Description:`` It's Paddy Day here in Growtopia! Celebrate in style with fiddle music, floating shamrocks, rainbows, and a pot o' gold over emerald hills. This Weather Machine will let everyone know how lucky you are!|0|7|20000|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|10286|`oWeather Machine - Celebrity Hills``|interface/large/store_buttons/store_buttons33.rttex|`2You Get:`` 1 Weather Machine - Celebrity Hills. <CR><CR>`5Description:`` It's Thanksgiving in Growtopia! Celebrate in Celebrity Hills where dreams are made! This weather machine will let everyone know how glamorous you are! It's a perma-item, is never lost when destroyed.|1|4|30000|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|4486|`oWeather Machine - Apocalypse``|interface/large/store_buttons/store_buttons16.rttex|`2You Get:`` 1 Weather Machine - Apocalypse. <CR><CR>`5Description:`` Feeling nostalgic for the end of the world? Let's bring it back! With this weather active, somebody in your world will get infected with the g-Virus every hour, and players can kill zombies in your world, with the appropriate weapon. This sensitive technology will not function while damaged.|0|2|150000|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|11880|`oWeather Machine - Plaza``|interface/large/store_buttons/store_buttons38.rttex|`2You Get:`` 1 Weather Machine - Plaza.<CR><CR>`5Description:`` Bring all your friends to the plaza and let the celebrations never end!|4|3|50000|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|3694|Weather Machine - Heatwave|interface/large/store_buttons/tianvan_store.rttex|`2You Get:`` 1 Weather Machine - Heatwave<CR><CR>`5Description:`` This amazing new weather machine emits a vortex of howling flame, but if you wrench it, you'll find adjustable settings to control the color of the flames! You can only have one of these per world.``|3|4|500000|0|||-1|-1||-1|-1||1||||||0|\nadd_button|4242|Weather Machine - Pagoda|interface/large/store_buttons/tianvan_store.rttex|`2You Get:`` 1 Weather Machine - Pagoda<CR><CR>`5Description:`` Wow, it's pagoda season already? They're sprouting up everywhere! This sensitive technology will not function while damaged.``|4|4|250000|0|||-1|-1||-1|-1||1||||||0|\nadd_button|2284|Weather Machine - Party|interface/large/store_buttons/tianvan_store.rttex|`2You Get:`` 1 Weather Machine - Party<CR><CR>`5Description:`` Bring the party with you everywhere you go! This sensitive will not function while damaged.``|8|5|500000|0|||-1|-1||-1|-1||1||||||0|\nadd_button|12054|Weather Machine - Nebula|interface/large/store_buttons/tianvan_store.rttex|`2You Get:`` 1 Weather Machine - Nebula<CR><CR>`5Description:`` As a weather machine, this item can be can be toggled on or off via punching. When toggled on, it will change its appearance, showing a 2-frame animation, and transform the world's background weather into a galactic scenery.``|7|4|1000000|0|||-1|-1||-1|-1||1||||||0|\nadd_button|12056|Protostar Landing|interface/large/store_buttons/tianvan_store.rttex|`2You Get:`` 1 Weather Machine - Protostar Landing<CR><CR>`5Description:`` As a weather machine, this item can be toggled on or off via punching. When toggled on, it will change its appearance, showing a 2-frame animation, and transform the world's background weather into a otherworldly nature scenery with a giant landed spaceship.``|8|4|500000|0|||-1|-1||-1|-1||1||||||0|\nadd_button|crack_in_reality|`oWeather Machine - Crack in Reality``|interface/large/store_buttons/store_buttons39.rttex|`2You Get:`` 1 Weather Machine - Crack in Reality.<CR><CR>`5Description:`` The multiverse is real! Stare into the different realities and ponder the question... what if?!|4|5|150000|0|||-1|-1|interface/large/gui_shop_buybanner2.rttex|1|9||1||||||0|0|" + (extra_tab.empty() ? "" : "\nselect_item|" + item_);
		p.Insert("set_description_text|`2Item Packs!``  Select the item you'd like more info on, or BACK to go back.\nenable_tabs|1\nadd_tab_button|main_menu|Home|interface/large/gtps_shop_btn.rttex||0|0|0|0||||-1|-1|||0|0|\nadd_tab_button|locks_menu|Locks And Stuff|interface/large/gtps_shop_btn.rttex||0|1|0|0||||-1|-1|||0|0|\nadd_tab_button|bigiitems_menu|Custom Items|interface/large/gtps_shop_btn.rttex||0|4|0|0||||-1|-1|||0|0|\nadd_tab_button|itempack_menu|Item Packs|interface/large/gtps_shop_btn.rttex||1|3|0|0||||-1|-1|||0|0|\nadd_tab_button|weather_menu|Weather Machines|interface/large/gtps_shop_btn.rttex|Tired of the same sunny sky?  We offer alternatives within...|0|5|0|0||||-1|-1|||0|0|\nadd_tab_button|token_menu|Growtoken Items|interface/large/gtps_shop_btn.rttex||0|2|0|0||||-1|-1|||0|0|\nadd_button|world_lock|`oWorld Lock``|interface/large/store_buttons/store_buttons.rttex|`2You Get:`` 1 World Lock.<CR><CR>`5Description:`` Become the undisputed ruler of your domain with one of these babies.  It works like a normal lock except it locks the `$entire world``!  Won't work on worlds that other people already have locks on. You can even add additional normal locks to give access to certain areas to friends. `5It's a perma-item, is never lost when destroyed.``  `wRecycles for 150 Gems.``|0|7|3000|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|world_lock_10_pack|`oWorld Lock Pack``|interface/large/store_buttons/store_buttons18.rttex|`2You Get:`` 10 World Locks.<CR><CR>`5Description:`` 10-pack of World Locks. Become the undisputed ruler of up to TEN kingdoms with these babies. Each works like a normal lock except it locks the `$entire world``!  Won't work on worlds that other people already have locks on. You can even add additional normal locks to give access to certain areas to friends. `5It's a perma-item, is never lost when destroyed.`` `wEach recycles for 200 Gems.``|0|3|30000|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|1796|`oDiamond Lock``|interface/large/store_buttons/tianvan_store.rttex|`2You Get:`` 1 Diamond Lock.<CR><CR>`5Description:`` Become the undisputed ruler of your domain with one of these babies.  It works like a normal lock except it locks the `$entire world``!  Won't work on worlds that other people already have locks on. You can even add additional normal locks to give access to certain areas to friends. `5It's a perma-item, is never lost when destroyed.``  `wRecycles for 30000 Gems.``|8|3|300000|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|7188|`oPlatinum Gem Lock``|interface/large/store_buttons/tianvan_store.rttex|`2You Get:`` 1 Platinum Gem Lock.<CR><CR>`5Description:`` " + items[7188].description + "|7|1|30000000|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|11902|Radical City Lock|interface/large/store_buttons/store_buttons38.rttex|`2You Get:`` 1 Radical City Lock<CR><CR>`5Description:`` Light up your world with this totally Radical Lock!!``<CR>|4|4|500000|0|||0|0|interface/large/gui_shop_buybanner2.rttex|3|3||1||||||0|\nadd_button|small_lock|`oSmall Lock``|interface/large/store_buttons/store_buttons.rttex|`2You Get:`` 1 Small Lock.<CR><CR>`5Description:`` Protect up to `$10`` tiles.  Can add friends to the lock so others can edit that area as well. `5It's a perma-item, is never lost when destroyed.``|1|3|50|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|big_lock|`oBig Lock``|interface/large/store_buttons/store_buttons.rttex|`2You Get:`` 1 Big Lock.<CR><CR>`5Description:`` Protect up to `$48`` tiles.  Can add friends to the lock so others can edit that area as well. `5It's a perma-item, is never lost when destroyed.``|1|1|200|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|huge_lock|`oHuge Lock``|interface/large/store_buttons/store_buttons.rttex|`2You Get:`` 1 Huge Lock.<CR><CR>`5Description:`` Protect up to `$200`` tiles.  Can add friends to the lock so others can edit that area as well. `5It's a perma-item, is never lost when destroyed.``|0|4|500|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|door_pack|`oDoor And Sign Hello Pack``|interface/large/store_buttons/store_buttons.rttex|`2You Get:`` 1 Door and 1 Sign.<CR><CR>`5Description:`` Own your very own door and sign! This pack comes with one of each. Leave cryptic messages and create a door that can open to, well, anywhere.|0|3|15|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|door_mover|`oDoor Mover``|interface/large/store_buttons/store_buttons8.rttex|`2You Get:`` 1 Door Mover.<CR><CR>`5Description:`` Unsatisfied with your world's layout?  This one-use device can be used to move the White Door to any new location in your world, provided there are 2 empty spaces for it to fit in. Disappears when used. `2Only usable on a world you have World Locked.``|0|6|5000|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|lock_mover|" + items[3560].ori_name + "|interface/large/store_buttons/tianvan_store.rttex|`2You Get:`` 1 " + items[3560].ori_name + "<CR><CR>`5Description:`` " + items[3560].description + "|7|5|50000|0|||-1|-1||-1|-1||1||||||0|\nadd_button|vending_machine|`oVending Machine``|interface/large/store_buttons/store_buttons13.rttex|`2You Get:`` 1 Vending Machine.<CR><CR>`5Description:`` Tired of interacting with human beings? Try a Vending Machine! You can put a stack of items inside it, set a price in World Locks, and people can buy from the machine while you sit back and rake in the profits! `5It's a perma-item, is never lost when destroyed, and it is not available any other way.``|0|6|8000|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|digivend_machine|`oDigiVend Machine``|interface/large/store_buttons/store_buttons29.rttex|`2You Get:`` 1 DigiVend Machine.<CR><CR>`5Description:`` " + items[9268].description + "``|0|2|16000|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|vendhub|`oVending Hub - Checkout Counter``|interface/large/store_buttons/store_buttons29.rttex|`2You Get:`` 1 " + items[9270].name + ".<CR><CR>`5Description:`` " + items[9270].description + "``|0|3|50000|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|1280|`oBirth Certificate``|interface/large/store_buttons/store_buttons7.rttex|`2You Get:`` 1 Birth Certificate.<CR><CR>`5Description:`` A little white-out, a little scribbling, and voila, you'll have a new name! Use this item to change your GrowID permanently. Can only be used once every 60 days. Requires a GrowID. Is consumed when used.|0|6|20000|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|2580|`oChange of Address``|interface/large/store_buttons/store_buttons12.rttex|`2You Get:`` 1 Change of Address.<CR><CR>`5Description:`` Don't like the name of your world? You can use up one of these to trade your world's name with the name of any other world that you own. You must have a `2World Lock`` in both worlds. Go lock up that empty world with the new name you want and swap away!|0|6|20000|0|||-1|-1||-1|-1||1||||||0|0|" + second);
	}
	else if (tab == "tab3" + extra_tab) {
		p.Insert("set_description_text|`2Awesome Items!``  Select the item you'd like more info on, or BACK to go back.\nenable_tabs|1\nadd_tab_button|main_menu|Home|interface/large/gtps_shop_btn.rttex||0|0|0|0||||-1|-1|||0|0|\nadd_tab_button|locks_menu|Locks And Stuff|interface/large/gtps_shop_btn.rttex||0|1|0|0||||-1|-1|||0|0|\nadd_tab_button|bigiitems_menu|Custom Items|interface/large/gtps_shop_btn.rttex||0|4|0|0||||-1|-1|||0|0|\nadd_tab_button|itempack_menu|Item Packs|interface/large/gtps_shop_btn.rttex||0|3|0|0||||-1|-1|||0|0|\nadd_tab_button|weather_menu|Weather Machines|interface/large/gtps_shop_btn.rttex|Tired of the same sunny sky?  We offer alternatives within...|1|5|0|0||||-1|-1|||0|0|\nadd_tab_button|token_menu|Growtoken Items|interface/large/gtps_shop_btn.rttex||0|2|0|0||||-1|-1|||0|0|\nadd_button|5seed|`oSmall Seed Pack``|interface/large/store_buttons/store_buttons.rttex|`2You Get:`` 1 Small Seed Pack.<CR><CR>`5Description:`` Contains one Small Seed Pack. Open it for `$5`` randomly chosen seeds, including 1 rare seed! Who knows what you'll get?!|1|4|100|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|ssp_10_pack|`oSmall Seed Pack Collection``|interface/large/store_buttons/store_buttons18.rttex|`2You Get:`` 10 Small Seed Packs.<CR><CR>`5Description:`` Open each one for `$5`` randomly chosen seeds apiece, including 1 rare seed per pack! Who knows what you'll get?!|0|4|1000|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|rare_seed|`oRare Seed Pack``|interface/large/store_buttons/store_buttons.rttex|`2You Get:`` 5 Randomly Chosen Rare Seeds.<CR><CR>`5Description:`` Expect some wondrous crops with these!|1|7|1000|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|farmable_pack|`oFarmable Pack``|interface/large/store_buttons/tianvan_store.rttex|`2You Get:`` 50 Chandelier, 50 Laser Grid, 50 Pepper Tree.<CR><CR>`5Description:`` Get cheap farmables for a fair price, why not?...|6|5|10000|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|grow_spray|`o5-pack of Grow Spray Fertilizer``|interface/large/store_buttons/store_buttons.rttex|`2You Get:`` 5 Grow Spray Fertilizers.<CR><CR>`5Description:`` Why wait?!  Treat yourself to a `$5-pack`` of amazing `wGrow Spray Fertilizer`` by GrowTech Corp.  Each bottle instantly ages a tree by `$1 hour``.|0|6|200|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|7962|`oProvider Spray``|interface/large/store_buttons/tianvan_store.rttex|`2You Get:`` `#1`` `2Provider Spray``.<CR><CR>`5Description:`` `#1`` `2Provider Spray`` that can speed up any provider by 6 hours!|1|4|400|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|deluxe_grow_spray|`oDeluxe Grow Spray``|interface/large/store_buttons/store_buttons11.rttex|`2You Get:`` 1 Deluxe Grow Spray.<CR><CR>`5Description:`` GrowTech's new `$Deluxe`` `wGrow Spray`` instantly ages a tree by `$24 hours`` per bottle! That's somewhere around 25 times as much as regular Grow Spray!|0|2|900|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|5764|`oOriental Spice Spray``|interface/large/store_buttons/store_buttons19.rttex|`2You Get:`` 1 Oriental Spice Spray. <CR><CR>`5Description:`` Packed with rich spices and wholesome powers, this spray will speed up the growth of one tree from the Chinese New Year event by 72 hours!|0|0|2500|0|||-1|-1||-1|-1||1||||||0|\nadd_button|12600|`oUltra World Spray``|interface/large/store_buttons/store_buttons39.rttex|`2You Get:`` 1 Ultra World Spray.<CR><CR>`5Description:`` A shocking display of power!``|0|1|10000000|0|||-1|-1|interface/large/gui_shop_buybanner2.rttex|2|5||1||||||0|0|\nadd_button|surg_starter_pack|`oSurgery Starter Pack``|interface/large/store_buttons/store_buttons39.rttex|`2You Get:`` 1 `#Rare Heart Monitor``, 1 Hospital Bed, 5 Train-E bots, 1 Scrub Cap, 1 Scrub Mask, 1 Scrub Top, and 1 Scrub Pants. <CR><CR>`5Description:`` Get all the furniture you need to start up your own private surgery practice! `#Rare`` Heart Monitor that lets people know when you are online, Hospital Bed that lets you perform surgery on anybody laying (or standing) on it, 5 Train-E bot to practice on, and a full set of scrubs to look the part.|1|0|5000|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|surg|`oSurgical Kit``|interface/large/store_buttons/store_buttons7.rttex|`2You Get:`` 5 of each of the 13 different Surgical Tools and 1 Surg-E.<CR><CR>`5Description:`` Get all the tools you need to become Chief of Surgery at Growtopia General Hospital! `#Rare`` Heart Monitor that lets people know when you are online, Hospital Bed that lets you perform surgery on anybody laying (or standing) on it, Med-a-Checks to identify patients with maladies, The Train-E bot to practice on, and 5 each of the thirteen different Surgical Tools you'll need to do that surgery!|0|2|12000|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|fishin_pack|`oFishin' Pack``|interface/large/store_buttons/store_buttons14.rttex|`2You Get:`` 1 Fishing Rod, 5 Wiggly Worms, 1 Hand Drill, 1 `#Rare Tackle Box``, 10 Fish Tanks and 1 `#Rare Fish Tank Port`` .<CR><CR>`5Description:`` Relax and sit by the shore... this pack includes a Fishing Rod, Wiggly Worms for bait, Hand Drill, Nuclear Detonator, and a `#Rare`` Tackle Box which provides you with more free bait every two days, Fish Tanks, and a `#Rare`` Fish Tank Port to put the fish you catch into your fish tank!|0|0|10000|0|||-1|-1||-1|-1||1||||||0|0|"/*"\nadd_button|bountiful_seed_pack|`oBountiful Seed Pack``|interface/large/store_buttons/store_buttons28.rttex|`2You Get:`` 1 Bountiful Seed Pack.<CR><CR>`5Description:`` Contains `$5`` randomly chosen bountiful seeds, including 1 rare seed! Who knows what you'll get?!|0|4|1000|0|||-1|-1||-1|-1||1||||||0|0|"*/"\nadd_button|basic_splice|`oBasic Splicing Kit``|interface/large/store_buttons/store_buttons2.rttex|`2You Get:`` 10 Rock Seeds and 10 Random Seeds of Rarity 2.<CR><CR>`5Description:`` The basic seeds every farmer needs.|0|3|200|0|||-1|-1||-1|-1||1||||||0|0|"/*"\nadd_button|surgical_kit|`oSurgical Kit``|interface/large/store_buttons/store_buttons7.rttex|`2You Get:`` 1 `#Rare Heart Monitor``, 1 Hospital Bed, 1 Train-E Bot, 5 of each of the 13 different Surical Tools and 10 Med-a-Checks.<CR><CR>`5Description:`` Get all the tools you need to become Chief of Surgery at Growtopia General Hospital! `#Rare`` Heart Monitor that lets people know when you are online, Hospital Bed that lets you perform surgery on anybody laying (or standing) on it, Med-a-Checks to identify patients with maladies, The Train-E bot to practice on, and 5 each of the thirteen different Surgical Tools you'll need to do that surgery!|0|2|12000|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|star_supplies|`oGalactic Goodies``|interface/large/store_buttons/store_buttons21.rttex|`2You Get:`` 60 Star Tools and 25 Star Fuel.<CR><CR>`5Description:`` Get all the Star Tools you need to boldly go where no Growtopian has gone! Use these to help you command a starship and seek victory in the Galactic Nexus! You'll get 5 each of the 12 Star Tools you'll need to complete missions and some bonus Star Fuel to help power a Starship!|0|0|15000|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|fishin_pack|`oFishin' Pack``|interface/large/store_buttons/store_buttons14.rttex|`2You Get:`` 1 Fishing Rod, 5 Wiggly Worms, 1 Hand Drill, 1 Nuclear Detonator,  1 `#Rare Tackle Box``, 10 Fish Tanks and 1 `#Rare Fish Tank Port`` .<CR><CR>`5Description:`` Relax and sit by the shore... this pack includes a Fishing Rod, Wiggly Worms for bait, Hand Drill, Nuclear Detonator, and a `#Rare`` Tackle Box which provides you with more free bait every two days, Fish Tanks, and a `#Rare`` Fish Tank Port to put the fish you catch into your fish tank!|0|0|10000|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|fish_training_pack|`oFish Trainin' Pack``|interface/large/store_buttons/store_buttons17.rttex|`2You Get:`` 2 Fish Flakes, 2 Fish Medicine, AND 1 `#Rare Training Port``.<CR><CR>`5Description:`` Get ready to train your favorite fish! Use the Training Port to put a perfect fish into your fish tank for training!|0|7|10000|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|fish_flakes|`oFish Flakes``|interface/large/store_buttons/store_buttons18.rttex|`2You Get:`` 5 Fish Flakes.<CR><CR>`5Description:`` Every fish adores these tasty flakes! Give a pinch to your Training Fish and fill their scaly bellies with aquatic goodness! Take the guesswork out of finnicky feedings with a treat you know they'll love!|0|2|7500|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|fish_medicine|`oFish Medicine``|interface/large/store_buttons/store_buttons18.rttex|`2You Get:`` 1 Fish Medicine.<CR><CR>`5Description:`` Make a sick Training Fish bright and healthy with this healing potion. One dose is enough to make even the sickest fish all better!|0|0|1500|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|fish_reviver|`oFish Reviver``|interface/large/store_buttons/store_buttons18.rttex|`2You Get:`` 1 `#Rare Fish Reviver``.<CR><CR>`5Description:`` Resurrect a dead Training Fish with a revivifying zap from this `#Rare`` Fish Reviver! One dose is enough to reach beyond the veil and bring a fish back from the dead! Comes with a 100% zombie-free guarantee!|0|1|5000|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|crime_wave|`oCrime Wave``|interface/large/store_buttons/store_buttons12.rttex|`2You Get:`` 5 Random Superpower Cards and 1 `#Rare Crime Wave``.<CR><CR>`5Description:`` Get powered up with random Superpower Cards, and what good would that be without a `#Rare`` Crime Wave to use them on? A Crime Wave is a one-use item that calls four villains to your world for you to battle. `6Beware:`` Villains only stick around for 24 hours once they appear.|0|5|5000|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|silkworm|`oSilkworm``|interface/large/store_buttons/store_buttons14.rttex|`2You Get:`` 1 Silk Worm.<CR><CR>`5Description:`` It's the newest cuddly pet from Growtech Pharma! Thanks to genetic engineering, you can now raise your own giant mutant silkworm. They'll eat almost any food, but don't forget to give them water too! And if they get sick, you'll need to have some Antidotes on hand. `6Warning:`` `9Silkworms are living creatures. They will not live forever! Take good care of them, and enjoy them while you can.`` `4Not available any other way``.|0|7|7000|0|||-1|-1||-1|-1||1||||||0|0|"*/"\nadd_button|geiger|`oGeiger Counter``|interface/large/store_buttons/store_buttons12.rttex|`2You Get:`` 1 Geiger Counter.<CR><CR>`5Description:`` With this fantabulous device, you can detect radiation around you. It bleeps red, then yellow, then green as you get closer to the source. Who knows what you might find? `4Not available any other way!``|0|1|25000|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|zombie_pack|`oZombie Defense Pack``|interface/large/store_buttons/store_buttons4.rttex|`2You Get:`` 1 `#Rare Sawed-Off Shotgun``, 1 Combat Vest, 1 Zombie Stompin' Boots, 3 Traffic Barricades, 1 Military Radio, 1 Antidote, 3 Toxic Waste Barrels, 3 Biohazard Signs, 3 Tombstones and 1 `#Rare Deadly G-Virus``!.<CR><CR>`5Description:`` The zombie invasion has come! Protect yourself with all the esential zombie fighting gear and best of all, you get an Antidote to cure yourself! Also includes the deadly g-Virus itself to infect your friends with!|0|4|10000|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|ssp200|`oSmall Seed Collection Pack``|interface/large/store_buttons/store_buttons35.rttex|`2You Get:`` 200 Small Seed Pack. <CR><CR>`5Description:`` Open each one for 5 randomly chosen seed apiece, including 1 rare seed per pack! Who knows what you'll get?!|1|3|9000|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|arm_guy|`oWaving Inflatable Arm Guy``|interface/large/store_buttons/store_buttons35.rttex|`2You Get:`` Waving Inflatable Arm Guy. <CR><CR>`5Description:`` Great for showing everyone all the amazing things you have to offer! Also just great fun to be around.|1|2|5000|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|pegasus_chest|`oPegasus Chest``|interface/large/store_buttons/store_buttons36.rttex|`2You Get:`` 1 Pegasus Chest. <CR><CR>`5Description:`` A chest of feathery delights! What might be inside, my fair feathered friend? Use it on yourself to find out!|1|7|25000|0|||-1|-1||-1|-1||1||||||0|\nadd_button|race_pack|`oRacing Action Pack``|interface/large/store_buttons/store_buttons2.rttex|`2You Get:`` 1 Racing Start Flag, 1 Racing End Flag, 2 Checkpoints, 2 Big Old Sideways Arrows, 1 Big Old Up Arrow, 1 Big Old Down Arrow, 1 WristBand, 1 HeadBand, 1 Sports Ball Jersey and 1 Air Robinsons.<CR><CR>`5Description:`` Get all you need to host races in your worlds! You'll win the races too, with new Air Robinsons that make you run faster!|0|7|3500|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|music_pack|`oComposer's Pack``|interface/large/store_buttons/store_buttons3.rttex|`2You Get:`` 20 Sheet Music: Blank, 20 Sheet Music: Piano Note, 20 Sheet Music: Bass Note, 20 Sheet Music Drums, 5 Sheet Music: Sharp Piano, 5 Sheet Music: Flat Piano, 5 Sheet Music: Flat Bass and 5 Sheet Music: Sharp Bass .<CR><CR>`5Description:`` With these handy blocks, you'll be able to compose your own music, using your World-Locked world as a sheet of music. Requires a World Lock (sold separately!).|0|0|5000|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|school_pack|`oEducation Pack``|interface/large/store_buttons/store_buttons4.rttex|`2You Get:`` 10 ChalkBoards, 3 School Desks, 20 Red Bricks, 1 Bulletin Board, 10 Pencils, 1 Growtopia Lunchbox, 1 Grey Hair Bun, 1 Apple and 1 Random School Uniform Item.<CR><CR>`5Description:`` If you want to build a school in Growtopia, here's what you need!|0|0|5000|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|dungeon_pack|`oDungeon Pack``|interface/large/store_buttons/store_buttons4.rttex|`2You Get:`` 20 Grimstone, 20 Blackrock Wall, 20 Iron Bars, 3 Jail Doors, 3 Skeletons, 1 Headsman's Axe, 1 Worthless Rags. 5 Torches and a `#Rare Iron Mask!``.<CR><CR>`5Description:`` Lock up your enemies in a dank dungeon! Of course they can still leave whenever they want. But they won't want to, because it looks so cool! Iron Mask muffles your speech!|0|1|10000|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|fantasy_pack|`oFantasy Pack``|interface/large/store_buttons/store_buttons3.rttex|`2You Get:`` 1 Mystical Wizard Hat Seed, 1 Wizards Robe, 1 Golden Sword, 1 Elvish Longbow, 10 Barrels, 3 Tavern Signs, 3 Treasure Chests and 3 Dragon Gates.<CR><CR>`5Description:`` Hear ye, hear ye! It's a pack of VallenSasuke wonders!|0|6|5000|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|vegas_pack|`oVegas Pack``|interface/large/store_buttons/store_buttons4.rttex|`2You Get:`` 10 Neon Lights, 1 Card Block Seed, 1 `#Rare Pink Cadillac`` 4 Flipping Coins, 1 Dice Block, 1 Gamblers Visor, 1 Slot Machine, 1 Roulette Wheel and 1 Showgirl Hat, 1 Showgirl top and 1 Showgirl Leggins.<CR><CR>`5Description:`` What happens in Growtopia stays in Growtopia!|0|5|20000|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|farm_pack|`oFarm Pack``|interface/large/store_buttons/store_buttons5.rttex|`2You Get:`` 1 Cow, 1 Chicken, 10 Wheat, 10 Barn Block, 10 Red Wood Walls, 1 Barn Door, 1 Straw Hat, 1 Overalls, 1 Pitchfork, 1 Farmgirl Hair, 1 `#Rare`` `2Dear John Tractor``.<CR><CR>`5Description:`` Put the `2Grow`` in Growtopia with this pack, including a Cow you can milk, a Chicken that lays eggs and a farmer's outfit. Best of all? You get a `#Rare`` `2Dear John Tractor`` you can ride that will mow down trees!|0|0|15000|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|science_pack|`oMad Science Kit``|interface/large/store_buttons/store_buttons5.rttex|`2You Get:`` 1 Science Station, 1 Laboratory, 1 LabCoat, 1 Combover Hair, 1 Goggles, 5 Chemical R, 10 Chemical G, 5 Chemical Y, 5 Chemical B, 5 Chemical P and 1 `#Rare`` `2Death Ray``.<CR><CR>`5Description:`` It's SCIENCE! Defy the natural order with a Science Station that produces chemicals, a Laboratory in which to mix them and a full outfit to do so safely! You'll also get a starter pack of assorted chemicals. Mix them up! Special bonus: A `#Rare`` `2Death Ray`` to make your science truly mad!|0|3|5000|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|city_pack|`oCity Pack``|interface/large/store_buttons/store_buttons6.rttex|`2You Get:`` 10 Sidewalks, 3 Street Signs, 3 Streetlamps, 10 Gothic Building tiles, 10 Tenement Building tiles, 10 Fire Escapes, 3 Gargoyles, 10 Hedges, 1 Blue Mailbox, 1 Fire Hydrant and A `#Rare`` `2ATM Machine``.<CR><CR>`5Description:`` Life in the big city is rough but a `#Rare`` `2ATM Machine`` that dishes out gems once a day is very nice!|0|0|12000|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|west_pack|`oWild West Pack``|interface/large/store_buttons/store_buttons6.rttex|`2You Get:`` 1 Cowboy Hat, 1 Cowboy Boots, 1 War Paint, 1 Face Bandana, 1 Sheriff Vest, 1 Layer Cake Dress,  1 Corset, 1 Kansas Curls, 10 Western Building 1 Saloon Doors, 5 Western Banners, 1 Buffalo, 10 Rustic Fences, 1 Campfire and 1 Parasol.<CR><CR>`5Description:`` Yippee-kai-yay! This pack includes everything you need to have wild time in the wild west! The Campfire plays cowboy music, and the `#Parasol`` lets you drift down slowly. Special bonus: A `#Rare`` `2Six Shooter`` to blast criminals with!|0|2|8000|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|astro_pack|`oAstro Pack``|interface/large/store_buttons/store_buttons6.rttex|`2You Get:`` 1 Astronaut Helmet, 1 Space Suit, 1 Space Pants, 1 Moon Boots, 1 Rocket Thruster, 1 Solar Panel, 6 Space Connectors, 1 Porthole, 1 Compu Panel, 1 Forcefield and 1 `#Rare`` `2Zorbnik DNA``.<CR><CR>`5Description:`` Boldly go where no Growtopian has gone before with an entire Astronaut outfit. As a special bonus, you can have this `#Rare`` `2Zorbnik DNA`` we found on a distant planet. It doesn't do anything by itself, but by trading with your friends, you can collect 10 of them, and then... well, who knows?|0|6|5000|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|prehistoric_pack|`oPrehistoric Pack``|interface/large/store_buttons/store_buttons8.rttex|`2You Get:`` 1 Caveman Club, 1 Cave Woman Hair, 1 Caveman Hair, 1 Sabertooth Toga, 1 Fuzzy Bikini Top, 1 Fuzzy Bikni Bottom, 1 Cavewoman Outfit, 10 Cliffside, 5 Rock Platforms, 1 Cave Entrance, 3 Prehistoric Palms and 1 `#Rare Sabertooth Growtopian``.<CR><CR>`5Description:`` Travel way back in time with this pack, including full Caveman and Cavewoman outfits and `#Rare Sabertooth Growtopian`` (that's a mask of sorts). Unleash your inner monster!|0|0|5000|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|shop_pack|`oShop Pack``|interface/large/store_buttons/store_buttons8.rttex|`2You Get:`` 4 Display Boxes, 1 For Sale Sign, 1 Gem Sign, 1 Exclamation Sign, 1 Shop Sign, 1 Open Sign, 1 Cash Register, 1 Mannequin and 1 Security Camera.<CR><CR>`5Description:`` Run a fancy shop with these new items! Advertise your wares with an Open/Closed Sign you can switch with a punch, a Cash Register, a Mannequin you can dress up to show off clothing, and a `#Rare`` Security Camera, which reports when people enter and take items!|0|7|10000|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|home_pack|`oHome Pack``|interface/large/store_buttons/store_buttons9.rttex|`2You Get:`` 1 Television, 4 Couches, 2 Curtains, 1 Wall Clock, 1 Microwave, 1 Meaty Apron, 1 Ducky Pants, 1 Ducky top and 1 Eggs Benedict.<CR><CR>`5Description:`` Welcome home to Growtopia! Decorate with a Television, Window Curtains, Couches, a `#Rare`` Wall Clock that actually tells time, and a Microwave to cook in. Then dress up in a Meaty Apron and Ducky Pajamas to sit down and eat Eggs Benedict, which increases the amount of XP you earn!|0|6|5000|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|cinema_pack|`oCinema Pack``|interface/large/store_buttons/store_buttons10.rttex|`2You Get:`` 1 Clapboard, 1 Black Beret, 1 3D Glasses, 6 Theater Curtains, 6 Marquee Blocks, 1 Director's Chair, 4 Theater Seats, 6 Movie Screens, 1 Movie Camera and 1 `#Rare GHX Speaker``.<CR><CR>`5Description:`` It's movie time! Everything you need for the big screen experience including a `#Rare GHX Speaker`` that plays the score from Growtopia: The Movie.|0|2|6000|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|adventure_pack|`oAdventure Pack``|interface/large/store_buttons/store_buttons10.rttex|`2You Get:`` 4 Gateways to Adventure, 4 Path Markers, 1 Lazy Cobra, 1 Adventure Brazier, 4 Adventure Barriers, 1 Rope, 1 Torch, 1 Key, 1 Golden Idol, 1 `#Rare Adventuring Mustache``, 1 Explorer's Ponytail and 1 Sling Bag .<CR><CR>`5Description:`` Join Dr. Exploro and her father (also technically Dr. Exploro) as they seek out adventure! You can make your own adventure maps with the tools in this pack.|0|7|20000|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|rockin_pack|`oRockin' Pack``|interface/large/store_buttons/store_buttons11.rttex|`2You Get:`` 3 `#Rare Musical Instruments`` Including A Keytar, a Bass Guitar and Tambourine, 1 Starchild Make Up, 1 Rockin' Headband, 1 Leopard Leggings, 1 Shredded Ts-Shirt, 1 Drumkit, 6 Stage Supports, 6 Mega Rock Speakers and 6 Rock n' Roll Wallpaper.<CR><CR>`5Description:`` ROCK N' ROLL!!! Play live music in-game! We Formed a Band! Growtopia makes me want to rock out.|0|0|9999|0|||-1|-1||-1|-1||1||||||0|0|"/*"\nadd_button|game_pack|`oGame Pack``|interface/large/store_buttons/store_buttons10.rttex|`2You Get:`` 1 `#Rare Game Generator``,  4 Game Blocks, 4 Game Flags, 4 Game Graves and 4 Game Goals.<CR><CR>`5Description:`` Growtopia's not all trading and socializing! Create games for your friends with the Game Pack (and a lot of elbow grease).|0|6|50000|0|||-1|-1||-1|-1||1||||||0|0|"*/"\nadd_button|superhero|`oSuperhero Pack``|interface/large/store_buttons/store_buttons12.rttex|`2You Get:`` 1 Mask, 1 Shirt, 1 Boots, 1 Tights, 1 Cape, `#Rare Super Logos`` or `#Rare Utility Belt`` and 1 `2Phone Booth``.<CR><CR>`5Description:`` Battle the criminal element in Growtopia with a complete random superhero outfit including a cape that lets you double jump. Each of these items comes in one of six random colors. You also get one of 5 `#Rare`` Super Logos, which automatically match the color of any shirt you wear or a `#Rare`` Utility Belt... of course use the `2Phone Booth`` to change into your secret identity!|0|0|10000|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|fashion_pack|`oFashion Pack``|interface/large/store_buttons/store_buttons13.rttex|`2You Get:`` 3 Random Clothing Items, 3 Jade Blocks and 1 `#Rare Spotlight``.<CR><CR>`5Description:`` The hottest new looks for the season are here now with 3 random Fashion Clothing (dress, shoes, or purse), Jade Blocks to pose on, and a `#Rare`` Spotlight to shine on your fabulousness.|0|0|6000|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|sportsball_pack|`oSportsball Pack``|interface/large/store_buttons/store_buttons13.rttex|`2You Get:`` 2 Basketball Hoops, 2 Sporty Goals, 5 Stadiums, 5 Crowded Stadiums, 10 Field Grass, 1 Football Helmet, 1 Growies Cap, 1 Ref's Jersey, 1 World Cup Jersey, 1 `#Rare Sports Item`` or `#Rare Growmoji!``.<CR><CR>`5Description:`` We like sports and we don't care who knows! This pack includes everything you need to get sporty! Use the Sports Items to launch Sportsballs at each other.|0|1|20000|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|firefighter|`oFirefighter Pack``|interface/large/store_buttons/store_buttons14.rttex|`2You Get:`` 1 Yellow Helmet, 1 Yellow Jacket, 1 Yellow Pants, 1 Firemans Boots, 1 Fire Hose, and 1 `#Rare Firehouse`` .<CR><CR>`5Description:`` Rescue Growtopians from the fire! Includes a full Yellow Firefighter Outfit, Fire Hose and a `#Rare Firehouse``, which will protect your own world from fires.|0|1|10000|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|steampack|`oSteampack``|interface/large/store_buttons/store_buttons14.rttex|`2You Get:`` 10 Steam Tubes, 2 Steam Stompers, 2 Steam Organs, 2 Steam Vents, 2 Steam Valves and 1 `#Rare Steampunk Top Hat``.<CR><CR>`5Description:`` Steam! It's a wondrous new technology that lets you create paths of Steam Blocks, then jump on a Steam Stomper to launch a jet of steam through the path, triggering steam-powered devices. Build puzzles, songs, parkour challenges, and more!|0|6|20000|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|paintbrush|`oPainter's Pack``|interface/large/store_buttons/store_buttons15.rttex|`2You Get:`` 1 `#Rare Paintbrush``, 1 `#Rare Painting Easel`` and 20 Random Colored Paint Buckets.<CR><CR>`5Description:`` Want to paint your world? This pack includes 20 buckets of random paint colors (may include Varnish, to clean up your messes)! You can paint any block in your world different colors to personalize it.|0|1|20000|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|paleo_kit|`oPaleontologist's Kit``|interface/large/store_buttons/store_buttons16.rttex|`2You Get:`` 5 Fossil Brushes, 1 Rock Hammer, 1 Rock Chisel, 1 Blue Hardhat and 1 `#Rare Fossil Prep Station``.<CR><CR>`5Description:`` If you want to dig up fossils, this is the kit for you! Includes everything you need! Use the prepstation to get your fossils ready for display.|0|0|20000|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|gang_pack|`oGangland Style``|interface/large/store_buttons/store_buttons2.rttex|`2You Get:`` 1 Fedora, 1 Dames Fedora, 1 Pinstripe Suit with Pants, 1 Flapper Headband with Dress, 1 Cigar, 1 Tommy Gun, 1 Victola and 10 Art Deco Blocks .<CR><CR>`5Description:`` Step into the 1920's with a Complete Outfit, a Tommygun, a Victrola that plays jazz music, and 10 Art Deco Blocks. It's the whole package!|0|6|5000|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|zombie_pack|`oZombie Defense Pack``|interface/large/store_buttons/store_buttons4.rttex|`2You Get:`` 1 `#Rare Sawed-Off Shotgun``, 1 Combat Vest, 1 Zombie Stompin' Boots, 3 Traffic Barricades, 1 Military Radio, 1 Antidote, 3 Toxic Waste Barrels, 3 Biohazard Signs, 3 Tombstones and 1 `#Rare Deadly G-Virus``!.<CR><CR>`5Description:`` The zombie invasion has come! Protect yourself with all the esential zombie fighting gear and best of all, you get an Antidote to cure yourself! Also includes the deadly g-Virus itself to infect your friends with!|0|4|10000|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|boo_pack|`oB.O.O. Training Pack``|interface/large/store_buttons/store_buttons15.rttex|`2You Get:`` 1 `#Rare Spectral Goggles``, 1 Neutron Gun, 1 Neutron Pack and 10 Ghost Jars <CR><CR>`5Description:`` It looks like Growtopia is under siege by ghosts! Well, the `9Battlers Of the Otherworldly`` are hiring! You'll have to earn your uniform, but this pack includes all the tools you need to actually capture ghosts! Including `#Rare`` Spectral Goggles (all the better to see them with!)and a Neutron Pack to corral the ghosts, of course 10 Ghost Jars to catch them in.|0|4|10000|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|ectojuicer|`oEctoJuicer``|interface/large/store_buttons/store_buttons20.rttex|`2You Get:`` 1 EctoJuicer.<CR><CR>`5Description:`` Infuse your muscles with the unearthly might of the Other Side! This spectral potion gives you the strength to wring every last drop of ectoplasm from a defeated Boss Ghost, granting you an EXTRA Boss Goo after a successful banishing!|0|0|30000|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|chemsynth|`oChemsynth Pack``|interface/large/store_buttons/store_buttons16.rttex|`2You Get:`` 1 `#Rare Chemsynth Processor``, 10 Chemsynth Tanks and 1 Chemsynth Replicator, 1 Chemsynth Catalyst, 1 Chemsynth Solvent, 1 Chemsynth Centrifuge, 1 Chemsynth Stirrer.<CR><CR>`5Description:`` Tired of the lousy chemicals nature has to offer? Create new synthetic ones! With a `#Rare`` Chemsynth Processor, Chemsynth Tanks, and one each of the five Chemsynth tools, you can be whipping up Synthetic Chemicals in no time. `6Warning:`` Chemsynth solving is a pretty tricky puzzle, and it costs a whole bunch of the five basic chemicals (R, G, B, P, and Y) to complete.|0|4|10000|0|||-1|-1||-1|-1||1||||||0|0|" + (extra_tab.empty() ? "" : "\nselect_item|" + item_));
	}
	else if (tab == "tab4" + extra_tab) {
		std::string extra = "\nadd_button|fairy_light_wings|`oFairy Light Wings``|interface/large/store_buttons/store_buttons37.rttex|`2You Get:`` Fairy Light Wings. <CR><CR>`5Description:`` Not only do these wings let you fly, they also light up as your make your way across town!|2|5|250000|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|11700|`oEnchanted Broomstick``|interface/large/store_buttons/store_buttons38.rttex|`2You Get:`` `0Enchanted Broomstick``.<CR><CR>`5Description:`` Soar through the skies leaving a trail of VallenSasuke mist!|4|0|250000|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|radical|`oRadical Rider``|interface/large/store_buttons/store_buttons35.rttex|`2You Get:`` 1 Radical Rider. <CR><CR>`5Description:`` Totally Radical! Scoot across worlds with ease while looking stylish and ever so slightyl smug! Great for a /dance|0|3|50000|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|11708|`oSuperstar Sneakers``|interface/large/store_buttons/store_buttons38.rttex|`2You Get:`` `0Superstar Sneakers``.<CR><CR>`5Description:`` Walk down the red carpet with these super special shining shoes!|0|2|750000|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|11814|`oRabbit Top Hat``|interface/large/store_buttons/store_buttons38.rttex|`2You Get:`` `0Rabbit Top Hat``.<CR><CR>`5Description:`` And now for his next trick, the rabbit will fire an endless supply of cards!|0|3|500000|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|11626|`oMythic Tiger Crown``|interface/large/store_buttons/store_buttons38.rttex|`2You Get:`` 1 Mythic Tiger Crown.<CR><CR>`5Description:`` Summon the power of the White Tiger of the West with this glorious crown!|3|0|350000|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|11818|`oEquinox Scarf ``|interface/large/store_buttons/store_buttons33.rttex|`2You Get:`` 1 Equinox Scarf.<CR><CR>`5Description:`` Summon the elements of the Equinox! You can customise this item from the wrench menu.|1|0|750000|0|||-1|-1|interface/large/gui_shop_buybanner2.rttex|1|1||1||||||0|0|\nadd_button|hooves|`oHooves of Cernunnos``|interface/large/store_buttons/store_buttons29.rttex|`2You Get:`` 1 Hooves of Cernunnos. <CR><CR>`5Description:`` Will the wild in every step you take! Roots form and wither at your command!|0|4|100000|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|pegasus_lance|`oPegasus Lance``|interface/large/store_buttons/store_buttons36.rttex|`2You Get:`` 1 Pegasus Lance. <CR><CR>`5Description:`` A fine, feathery, lance. Made from the finest... checks notes... Horse feathers! To avoid refund fraud, this item has been made untradeble until November 3rd, 2021.|0|0|500000|0|||-1|-1||-1|-1||1||||||0|\nadd_button|one_winged_angel|`oOne Winged Angel``|interface/large/store_buttons/store_buttons38.rttex|`2You Get:`` One Winged Angel. <CR><CR>`5Description:`` This single wing is a symbol for all those who strive to overcome adversity, no matter what the odds|2|3|190000|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|zombie_horse|`oZombie Horse``|interface/large/store_buttons/store_buttons33.rttex|`2You Get:`` 1 Zombie Horse. <CR><CR>`5Description:`` A zombified flaming horse to terrorize the town with! With hooves of flame, this fiery steed is perfect for the spooky season! Only available for purchase during Halloween Week.|1|3|150000|0|||-1|-1||-1|-1||1||||||0|\nadd_button|1180|`oSpiritual Resonator``|interface/large/store_buttons/store_buttons7.rttex|`2You Get:`` 1 Spiritual Resonator. <CR><CR>`5Description:`` Worm on the head, where it sends out signals into the great beyond, attracting friendly spirits. The ghost that follows you around when you wear this has a special ability - if you wear a pet leash on your wrist at the same time, the ghost will replace the pet, but imitate its abilities|0|0|40000|0|||-1|-1||-1|-1||1||||||0|\nadd_button|apocalypse_scythe|`oApocalypse Scythe``|interface/large/store_buttons/store_buttons23.rttex|`2You Get:`` 1 Apocalypse Scythe. <CR><CR>`5Description:`` Stolen from one of the four riders of the Apocalypse, this deadly blade is able to slice open the veil between life and death.|0|4|250000|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|bumblebee|`oRiding Bumblebee``|interface/large/store_buttons/store_buttons15.rttex|`2You Get:`` 1 Riding Bumblebee. <CR><CR>`5Description:`` Bumblebees are very large. Probably not so large that you can ride them, but this is a video game! Riding on this bee gives you the ability to double-jump. Only available for purchase during Easter Week!|0|0|150000|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|balloon_bunny|`oBalloon Bunny``|interface/large/store_buttons/store_buttons26.rttex|`2You Get:`` 1 Balloon Bunny. <CR><CR>`5Description:`` Bunny bunny bunny balloon balloon balloon bunny balloon bunny balloon bunny bunny balloon balloon! You may have guessed it... this is a Balloon Bunny! With a great balloon, comes great reasons to throw balloon bunny hats at fellow Growtopians! Only available for purchase during Easter Week!|0|5|250000|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|ouroboros_charm|`oOuroboros Charm``|interface/large/store_buttons/store_buttons16.rttex|`2You Get:`` Ouroboros Charm. <CR><CR>`5Description:`` The endless loop of life and death, personified and celebrated. Is it a charm or is it a curse?|0|3|350000|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|ponytail|`oPowerful Ponytail Hair ``|interface/large/store_buttons/store_buttons30.rttex|`2You Get:`` 1 Powerful Ponytail Hair. <CR><CR>`5Description:``  powerful hairstyle that's punching above its weight! Bleached platinum white for perfect preparation to apply hair dye and personalise to you heart's desire.|0|3|100000|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|zraei|`oZraei's Dragoscarf``|interface/large/store_buttons/store_buttons27.rttex|`2You Get:`` 1 Zraei's Dragoscarf. <CR><CR>`5Description:`` April 2017: Dragoscarf! This dragon clings to you, granting extra punch damage, but only if you don't have it from another source. This item can only be purchased this month! It will never return, and cannot be obtained any other way! It is tradeable, though. There is a link in the /news if you'd like to see a short clip of the item in action before purchasing.|0|5|200000|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|2214|`oIce Horse``|interface/large/store_buttons/store_buttons12.rttex|`2You Get:`` 1  Ice Horse. <CR><CR>`5Description:`` You're probably gonna wish you had spent extra for the seat heater option with this particular ride. But it's faster than walking. Sponsored by @Aimster.|0|2|40000|0|||-1|-1||-1|-1||1||||||0|\nadd_button|snow_husky|`oSnow Husky``|interface/large/store_buttons/store_buttons25.rttex|`2You Get:`` 1 Snow Husky. <CR><CR>`5Description:`` Who wouldn't want this adorable ball of snuggly goodness following them around! This Snow Husky will be your friend forever!|0|5|25000|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|polar_bear|`oPolar Bear Leash``|interface/large/store_buttons/store_buttons8.rttex|`2You Get:`` 1 Polar Bear Leash. <CR><CR>`5Description:`` If you look out your window and see this guy, you are looking south. Or at a zoo. Or at somebody playing Growtopia.|0|3|40000|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|10170|`oAqua Wings``|interface/large/store_buttons/store_buttons33.rttex|`2You Get:`` 1 Aqua Wings. <CR><CR>`5Description:`` Cause a splash with these Aqua Wings! They are so realistic, even a few fish have managed ro sneak into them... they are flying fish now!|0|0|200000|0|||-1|-1||-1|-1||1||||||0|\nadd_button|10182|`oMusical Wings``|interface/large/store_buttons/store_buttons33.rttex|`2You Get:`` 1 Musical Wings. <CR><CR>`5Description:`` Musical wings for marauding Maestros! Wrench yourself to set a tune with these equipped, then walk along to play back the tune! It's how Beethoven would have composed music if Growtopia had existed all those years ago... probably.|0|2|200000|0|||-1|-1||-1|-1||1||||||0|\nadd_button|10180|`oParty Plume Wings``|interface/large/store_buttons/store_buttons33.rttex|`2You Get:`` 1 Party Plume Wings. <CR><CR>`5Description:`` A wing with some serious plumage! Surprise and dazzle Growtopians with this vibrant display of color and feathers. The Peacock has to be one of nature's biggest show offs, now you can be as well as you take to the dancefloor with your party plume!|0|3|200000|0|||-1|-1||-1|-1||1||||||0|\nadd_button|10178|`oGrowtopia Fried Wings``|interface/large/store_buttons/store_buttons33.rttex|`2You Get:`` 1 Growtopia Fried Wings. <CR><CR>`5Description:`` Wings to make your tummy rumble! These deep fried wings are literally straight from the oven! Covered in a golden breadcrumb made with a secret mix of Growtopia herbs and spices, cooked to create the perfect balance between flavor and aerodynamics!|0|1|200000|0|||-1|-1||-1|-1||1||||||0|\nadd_button|10188|`oGhoulish Wings``|interface/large/store_buttons/store_buttons33.rttex|`2You Get:`` 1 Ghoulish Wings. <CR><CR>`5Description:`` Get your Ghoul on! A mystery gas surrounds you and elevates you skyward... not sure where this gas comes from and it's probably best not to know!|1|1|200000|0|||-1|-1||-1|-1||1||||||0|\nadd_button|neon_wings|`oNeon Wings``|interface/large/store_buttons/store_buttons33.rttex|`2You Get:`` 1 Neon Wings. <CR><CR>`5Description:`` Light up the town in style! Don’t question how neon lights make you fly, just go with the glow and touch the sky!|1|2|200000|0|||-1|-1||-1|-1||1||||||0|\nadd_button|11158|`oZodiac Ring``|interface/large/store_buttons/store_buttons37.rttex|`2You Get:`` 1  Zodiac Ring. <CR><CR>`5Description:`` Harness the power of the Zodiac! This ring pulls galaxies into its core. It use that galactic power to summon Zodiac symbols, which change depending on the current Zodiac sign.|3|0|300000|0|||-1|-1||-1|-1||1||||||0|\nadd_button|zodiac|`oZodiac Wings``|interface/large/store_buttons/store_buttons32.rttex|`2You Get:`` 1 Zodiac Wings. <CR><CR>`5Description:`` The power of the Zodiac fills your body. The 12 signs align perfectly and allow you to not only reach for the stars but jump amongst them as well! When jumping a Zodiac sign bursts onto the screen, these change with the actual Zodiac Calendar. Note: These are only available until the end of PAW Week.|0|4|300000|0|||-1|-1||-1|-1||1||||||0|0|";
		p.Insert("set_description_text|`2Locks And Stuff!``  Select the item you'd like more info on, or BACK to go back.\nenable_tabs|1|\nadd_tab_button|main_menu|Home|interface/large/gtps_shop_btn.rttex||0|0|0|0||||-1|-1|||0|0|\nadd_tab_button|locks_menu|Locks And Stuff|interface/large/gtps_shop_btn.rttex||1|1|0|0||||-1|-1|||0|0|\nadd_tab_button|bigiitems_menu|Custom Items|interface/large/gtps_shop_btn.rttex||0|4|0|0||||-1|-1|||0|0|\nadd_tab_button|itempack_menu|Item Packs|interface/large/gtps_shop_btn.rttex||0|3|0|0||||-1|-1|||0|0|\nadd_tab_button|weather_menu|Weather Machines|interface/large/gtps_shop_btn.rttex|Tired of the same sunny sky?  We offer alternatives within...|0|5|0|0||||-1|-1|||0|0|\nadd_tab_button|token_menu|Growtoken Items|interface/large/gtps_shop_btn.rttex||0|2|0|0||||-1|-1|||0|0|" + (pInfo(peer)->inv.size() < 476 ? "\nadd_button|upgrade_backpack|`0Upgrade Backpack`` (`w10 Slots``)|interface/large/store_buttons/store_buttons.rttex|`2You Get:`` 10 Additional Backpack Slots.<CR><CR>`5Description:`` Sewing an extra pocket onto your backpack will allow you to store `$10`` additional item types.  How else are you going to fit all those toilets and doors?|0|1|" + to_string((100 * ((((pInfo(peer)->inv.size() - 17) / 10) * ((pInfo(peer)->inv.size() - 17) / 10)) + 1)) * 2) + "|0|||-1|-1||-1|-1||1||||||0|0|" : "") + "\nadd_button|clothes|`oClothes Pack``|interface/large/store_buttons/store_buttons2.rttex|`2You Get:`` 3 Randomly Wearble Items.<CR><CR>`5Description:`` Why not look the part? Some may even have special powers...|0|0|25|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|rare_clothes|`oRare Clothes Pack``|interface/large/store_buttons/store_buttons2.rttex|`2You Get:`` 3 Randomly Chosen Wearbale Items.<CR><CR>`5Description:`` Enjoy the garb of kings! Some may even have special powers...|0|1|250|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|12474|`oInfernal Shades``|interface/large/store_buttons/store_buttons38.rttex|`2You Get:`` 1 Infernal Shades.<CR><CR>`5Description:`` Head into town with hottest shades out right now... literally. `4Not available any other way!``|0|7|25000|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|12476|`oTidal Shades``|interface/large/store_buttons/store_buttons38.rttex|`2You Get:`` 1 Tidal Shades.<CR><CR>`5Description:`` Make waves with these tidal shades. `4Not available any other way!``|1|7|25000|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|12478|`oVerdant Shades``|interface/large/store_buttons/store_buttons38.rttex|`2You Get:`` 1 Verdant Shades.<CR><CR>`5Description:`` Go green and support the environment with these verdant shades. `4Not available any other way!``|2|7|25000|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|contact_lenses|`oContact Lens Pack``|interface/large/store_buttons/store_buttons22.rttex|`2You Get:`` 20 Contact Lens Colors and 5 Contact Lens Cleaning Solution.<CR><CR>`5Description:`` Need a colorful new look? This pack includes 20 Contact Lens colors (and includes 5 Contact Lens Cleaning Solution, to return to your natural eye color)!|0|7|15000|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|hairdye|`oHair Dye Pack``|interface/large/store_buttons/tianvan_store.rttex|`2You Get:`` 5 Red Hair Dye, 5 Green Hair Dye, 5 Blue Hair Dye and 5 Black Hair Dye.<CR><CR>`5Description:`` Want to paint your hair? This pack includes 20 dye of hair dye. Consuming one while standing on the same tile as Bathtub will give a stacking light of the color.|2|4|15000|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|eye_drops|`oEye Drop Pack``|interface/large/store_buttons/store_buttons17.rttex|`2You Get:`` 1 `#Rare Bathroom Mirror``, 20 Eye Drop Colors and 5 Eye Cleaning Solution.<CR><CR>`5Description:`` Need a fresh new look?  This pack includes a 20 Eye Drop Colors (includes 5 Eye Cleaning Solution, to leave your eyes sparkly clean)!|0|6|30000|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|nyan_hat|`oTurtle Hat``|interface/large/store_buttons/store_buttons3.rttex|`2You Get:`` 1 Turtle Hat.<CR><CR>`5Description:`` It's the greatest hat ever. It bloops out bubbles as you run! `4Not available any other way!``|0|2|12500|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|tiny_horsie|`oTiny Horsie``|interface/large/store_buttons/store_buttons3.rttex|`2You Get:`` 1 Tiny Horsie.<CR><CR>`5Description:`` Tired of wearing shoes? Wear a Tiny Horsie instead! Or possibly a large dachshund, we're not sure. Regardless, it lets you run around faster than normal, plus you're on a horse! `4Not available any other way!``|0|5|12500|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|star_ship|`oPleiadian Star Ship``|interface/large/store_buttons/store_buttons4.rttex|`2You Get:`` 1 Pleiadian Star Ship.<CR><CR>`5Description:`` Float on, my brother. It's all groovy. This star ship can't fly, but you can still zoom around in it, leaving a trail of energy rings and moving at enhanced speed. Sponsored by Pleiadian. `4Not available any other way!``|0|3|12500|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|dragon_hand|`oDragon Hand``|interface/large/store_buttons/store_buttons5.rttex|`2You Get:`` 1 Dragon Hand.<CR><CR>`5Description:`` Call forth the dragons of legend!  With the Dragon Hand, you will command your own pet dragon. Instead of punching blocks or players, you can order your dragon to incinerate them! In addition to just being awesome, this also does increased damage, and pushes other players farther. `4Not available any other way!``|0|1|25000|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|corvette|`oLittle Red Corvette``|interface/large/store_buttons/store_buttons6.rttex|`2You Get:`` 1 Little Red Corvette.<CR><CR>`5Description:`` Cruise around the neighborhood in style with this sweet convertible. It moves at enhanced speed and leaves other Growtopians in your dust. `4Not available any other way!``|0|1|12500|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|stick_horse|`oStick Horse``|interface/large/store_buttons/store_buttons6.rttex|`2You Get:`` 1 Stick Horse.<CR><CR>`5Description:`` Nobody looks cooler than a person bouncing along on a stick with a fake horse head attached. NOBODY. `4Not available any other way!``|0|3|12500|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|ambulance|`oAmbulance``|interface/large/store_buttons/store_buttons7.rttex|`2You Get:`` 1 Ambulance.<CR><CR>`5Description:`` Rush to the scene of an accident while lawyers chase you in this speedy rescue vehicle. `4Not available any other way!``|0|3|12500|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|raptor|`oRiding Raptor``|interface/large/store_buttons/store_buttons7.rttex|`2You Get:`` 1 Riding Raptor.<CR><CR>`5Description:`` Long thought to be extinct, it turns out that these dinosaurs are actually alive and easily tamed. And riding one lets you run around faster than normal! `4Not available any other way!``|0|7|12500|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|owl|`oMid-Pacific Owl``|interface/large/store_buttons/store_buttons10.rttex|`2You Get:`` 1 Mid-Pacific Owl.<CR><CR>`5Description:`` This owl is a bit lazy - if you stop moving around, he'll land on your head and fall asleep. Dedicated to the students of the Mid-Pacific Institute. `4Not available any other way!``|0|1|15000|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|unicorn|`oUnicorn Garland``|interface/large/store_buttons/store_buttons10.rttex|`2You Get:`` 1 Unicorn Garland.<CR><CR>`5Description:`` Prance about in the fields with your very own pet unicorn! It shoots `1R`2A`3I`4N`5B`6O`7W`8S``. `4Not available any other way!``|0|4|25000|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|starboard|`oStarBoard``|interface/large/store_buttons/store_buttons11.rttex|`2You Get:`` 1 StarBoard.<CR><CR>`5Description:`` Hoverboards are here at last! Zoom around Growtopia on this brand new model, which is powered by fusion energy (that means stars spit out of the bottom). Moves faster than walking. Sponsored by Miwsky, Chudy, and Dawid. `4Not available any other way!``|0|1|15000|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|motorcycle|`oGrowley Motorcycle``|interface/large/store_buttons/store_buttons11.rttex|`2You Get:`` 1 Growley Motorcycle.<CR><CR>`5Description:`` The coolest motorcycles available are Growley Dennisons. Get a sporty blue one today! It even moves faster than walking, which is pretty good for a motorcycle. `4Not available any other way!``|0|6|25000|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|monkey_on_back|`oMonkey On Your Back``|interface/large/store_buttons/store_buttons13.rttex|`2You Get:`` 1 Monkey On Your Back.<CR><CR>`5Description:`` Most people work really hard to get rid of these, but hey, if you want one, it's available! `4But not available any other way!`` Sponsored by SweGamerHD's subscribers, Kizashi, and Inforced. `#Note: This is a neck item, not a back item. He's grabbing your neck!``|0|2|25000|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|carrot_sword|`oCarrot Sword``|interface/large/store_buttons/store_buttons13.rttex|`2You Get:`` 1 Carrot Sword.<CR><CR>`5Description:`` Razor sharp, yet oddly tasty. This can carve bunny symbols into your foes! `4Not available any other way!`` Sponsored by MrMehMeh.|0|3|7500|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|red_bicycle|`oRed Bicycle``|interface/large/store_buttons/store_buttons13.rttex|`2You Get:`` 1 Red Bicycle.<CR><CR>`5Description:`` It's the environmentally friendly way to get around! Ride this bicycle at high speed hither and zither throughout Growtopia. `4Not available any other way!``|0|5|15000|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|fire_truck|`oFire Truck``|interface/large/store_buttons/store_buttons14.rttex|`2You Get:`` 1 Fire Truck.<CR><CR>`5Description:`` Race to the scene of the fire in this speedy vehicle! `4Not available any other way!``|0|2|25000|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|pet_slime|`oPet Slime``|interface/large/store_buttons/store_buttons14.rttex|`2You Get:`` 1 Pet Slime.<CR><CR>`5Description:`` What could be better than a blob of greasy slime that follows you around? How about a blob of greasy slime that follows you around and spits corrosive acid, melting blocks more quickly than a normal punch? `4Not available any other way!``|0|4|50000|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|dabstep_shoes|`oDabstep Low Top Sneakers``|interface/large/store_buttons/store_buttons21.rttex|`2You Get:`` 1 Dabstep Low Top Sneakers.<CR><CR>`5Description:`` Light up every footfall and move to a better beat with these dabulous shoes! When you're wearing these, the world is your dance floor! `4Not available any other way!``|0|2|15000|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|dark|`oDark Assassin's Pack``|interface/large/store_buttons/store_buttons36.rttex|`2You Get:`` Dark Assassin's Pack. <CR><CR>`5Description:`` This pack contains The Brother Hood item, previously exclusive to the console versions of Growtopia. Also included are Dark Assassin's Vest, Cape, Trousers, Boots and Armguards!|0|3|1000000|0|||-1|-1||-1|-1||1||||||0|\nadd_button|11546|`oMood Mask``|interface/large/store_buttons/store_buttons37.rttex|`2You Get:`` 1 Mood Mask. <CR><CR>`5Description:`` Happy? Angry? Curious? Wear this super advanced mask to tell the world how you're feeling!|1|6|500000|0|||-1|-1||-1|-1||1||||||0|\nadd_button|11132|`oNoodle Bowl Hat``|interface/large/store_buttons/store_buttons37.rttex|`2You Get:`` 1 Noodle Bowl Hat. <CR><CR>`5Description:`` A fine bowl of steaming hot noodles to wear on your head. Caution though, these are delicious so everyone might want a slurp from it!|1|0|150000|0|||-1|-1||-1|-1||1||||||0|\nadd_button|11284|`oPaper Wasp Pet``|interface/large/store_buttons/store_buttons37.rttex|`2You Get:`` 1 Paper Wasp Pet. <CR><CR>`5Description:`` Folded and creased to paper perfection. This wasp packs a very unique sting in its tail.|0|1|150000|0|||-1|-1||-1|-1||1||||||0|\nadd_button|11162|`oFinger Gun``|interface/large/store_buttons/store_buttons37.rttex|`2You Get:`` 1 Finger Gun. <CR><CR>`5Description:`` To wield the finger gun, you must first become the gun. Old Growtopian Proverb|2|0|200000|0|||-1|-1||-1|-1||1||||||0|" + extra + (extra_tab.empty() ? "" : "\nselect_item|" + item_));
	}
	else if (tab == "tab5" + extra_tab) p.Insert("set_description_text|`2Spend your Growtokens!`` (You have `50``) You earn Growtokens from Crazy Jim and Sales-Man. Select the item you'd like more info on, or BACK to go back.\nenable_tabs|1\nadd_tab_button|main_menu|Home|interface/large/gtps_shop_btn.rttex||0|0|0|0||||-1|-1|||0|0|\nadd_tab_button|locks_menu|Locks And Stuff|interface/large/gtps_shop_btn.rttex||0|1|0|0||||-1|-1|||0|0|\nadd_tab_button|bigiitems_menu|Custom Items|interface/large/gtps_shop_btn.rttex||0|4|0|0||||-1|-1|||0|0|\nadd_tab_button|itempack_menu|Item Packs|interface/large/gtps_shop_btn.rttex||0|3|0|0||||-1|-1|||0|0|\nadd_tab_button|weather_menu|Weather Machines|interface/large/gtps_shop_btn.rttex|Tired of the same sunny sky?  We offer alternatives within...|0|5|0|0||||-1|-1|||0|0|\nadd_tab_button|token_menu|Growtoken Items|interface/large/gtps_shop_btn.rttex||1|2|0|0||||-1|-1|||0|0|"/*"\nadd_button|challenge_timer|`oChallenge Timer``|interface/large/store_buttons/store_buttons15.rttex|`2You Get:`` 1 Challenge Timer.<CR><CR>`5Description:`` Get more people playing your parkours with this secure prize system. You'll need a `#Challenge Start Flag`` and `#Challenge End Flag`` as well (not included). Stock prizes into the Challenge Timer, set a time limit, and watch as players race from start to end. If they make it in time, they win a prize!|0|5|-2|0|||-1|-1||-1|-1||1||||||0|0|"*/"\nadd_button|megaphone|`oMegaphone``|interface/large/store_buttons/store_buttons15.rttex|`2You Get:`` 1 Megaphone.<CR><CR>`5Description:`` You like broadcasting messages, but you're not so big on spending gems? Buy a Megaphone with Growtokens! Each Megaphone can be used once to send a super broadcast to all players in the game.|0|7|-5|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|xp_potion|`oExperience Potion``|interface/large/store_buttons/store_buttons9.rttex|`2You Get:`` 1 Experience Potion.<CR><CR>`5Description:`` This `#Untradeable`` delicious fizzy drink will make you smarter! 10,000 XP smarter instantly, to be exact.|0|2|-10|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|i_love_dirt_shirt|`oI love Dirt Shirt``|interface/large/store_buttons/store_buttons37.rttex|`2You Get:`` 1 I love Dirt Shirt.<CR><CR>`5Description:`` Some people like things to be clean, you're not one of them are you? This item is `#Untradeable``.|4|0|-10|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|growmoji_pack|`oGrowmoji Mystery Box``|interface/large/store_buttons/store_buttons19.rttex|`2You Get:`` 1 Growmoji.<CR><CR>`5Description:`` Express yourself! This mysterious box contains one of five fun growmojis you can use to spice up your chat! Which will you get?|0|1|-15|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|rollback|`oRollback Pack``|interface/large/store_buttons/tianvan_store.rttex|`2You Get:`` 1 Rollback Plaque, 1 Rollback Plaque II, 1 Rollback Plaque III.<CR><CR>`5Description:`` Get rollback blocks!|5|5|-20|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|mini_mod|`oMini-Mod``|interface/large/store_buttons/store_buttons17.rttex|`2You Get:`` 1 Mini-Mod.<CR><CR>`5Description:`` Oh no, it's a Mini-Mod! Punch him to activate (you'll want to punch him!). When activated, he won't allow anyone to drop items in your world.|0|0|-20|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|derpy_star|`oDerpy Star Block``|interface/large/store_buttons/store_buttons10.rttex|`2You Get:`` 1 Derpy Star Block.<CR><CR>`5Description:`` DER IM A SUPERSTAR. This is a fairly ordinary block, except for the derpy star on it. Note: it is not permanent, and it doesn't drop seeds. So use it wisely!|0|3|-30|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|2218|`oMighty Snow Rod``|interface/large/store_buttons/store_buttons12.rttex|`2You Get:`` 1 Mighty Snow Rod.<CR><CR>`5Description:`` Become the living embodiment of the winter with this deadly weapon! It blasts bricks with frost, smashing them more easily than a punch. Buy it today, before WinterFest ends and you can't get it for another year! Sponsored by iiStyloMilo, Bambam46, and MartinMan007's Subscribers.|0|4|-30|0|||-1|-1||-1|-1||1||||||0|0|rttex\nadd_button|saeedru_ghutra|`oSaeedRu's Ghutra``|interface/large/store_buttons/store_buttons39.rttex|`2You Get:`` 1 SaeedRu's Ghutra.<CR><CR>`5Description:`` A traditional headwear worn in the Middle East! Sponsored by SaeedRu for completing all epic quests!|4|2|-40|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|dirt_gun|`oBLYoshi's Free Dirt``|interface/large/store_buttons/store_buttons13.rttex|`2You Get:`` 1 BLYoshi's Free Dirt.<CR><CR>`5Description:`` \"Free\" might be stretching it, but hey, once you buy this deadly rifle, you can spew out all the dirt you want for free! Note: the dirt is launched at high velocity and explodes on impact. Sponsored by BLYoshi.|0|4|-40|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|nothingness|`oWeather Machine - Nothingness``|interface/large/store_buttons/store_buttons9.rttex|`2You Get:`` 1 Weather Machine - Nothingness.<CR><CR>`5Description:`` Tired of all that fancy weather?  This machine will turn your world completely black. Yup, that's it. Not a single pixel in the background except pure blackness.|0|3|-50|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|spike_juice|`oSpike Juice``|interface/large/store_buttons/store_buttons10.rttex|`2You Get:`` 1 Spike Juice.<CR><CR>`5Description:`` It's fresh squeezed, with little bits of spikes still in it! Drinking this `#Untradeable`` one-use potion will make you immune to Death Spikes and Lava for 5 seconds.|0|5|-60|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|doodad|`oDoodad``|interface/large/store_buttons/store_buttons9.rttex|`2You Get:`` 1 Doodad.<CR><CR>`5Description:`` I have no idea what this thing does. It's something electronic? Maybe?|0|5|-75|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|crystal_cape|`oCrystal Cape``|interface/large/store_buttons/store_buttons11.rttex|`2You Get:`` 1 Crystal Cape.<CR><CR>`5Description:`` This cape is woven of pure crystal, which makes it pretty uncomfortable. But it also makes it VallenSasuke! It lets you double-jump off of an imaginary Crystal Block in mid-air. Sponsored by Edvoid20, HemeTems, and Aboge.|0|5|-90|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|focused_eyes|`oFocused Eyes``|interface/large/store_buttons/store_buttons9.rttex|`2You Get:`` 1 Focused Eyes.<CR><CR>`5Description:`` This `#Untradeable`` item lets you shoot electricity from your eyes! Wear them with pride, and creepiness.|0|4|-100|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|grip_tape|`oGrip Tape``|interface/large/store_buttons/store_buttons14.rttex|`2You Get:`` 1 Grip Tape.<CR><CR>`5Description:`` This is handy for wrapping around the handle of a weapon or tool. It can improve your grip, as well as protect you from cold metal handles. If you aren't planning to craft a weapon that requires Grip Tape, this does you no good at all!|0|5|-100|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|cat_eyes|`oCat Eyes``|interface/large/store_buttons/store_buttons23.rttex|`2You Get:`` 1 Cat Eyes.<CR><CR>`5Description:`` Wow, pawesome! These new eyes are the cat's meow, and the purrfect addition to any style.|0|5|-100|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|riding_cloud|`oRiding Cloud``|interface/large/store_buttons/store_buttons37.rttex|`2You Get:`` 1 Riding Cloud.<CR><CR>`5Description:`` Bringing the sky to the ground! This item is `#Untradeable``.|3|1|-100|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|grow_boy|`oGrowBoy``|interface/large/store_buttons/store_buttons32.rttex|`2You Get:`` 1 Growboy.<CR><CR>`5Description:`` Bask in the nostalgic green screened goodness of the Growboy! A portable gaming device that packs a punch. Now you're playing with GrowPower! Note: The Growboy is `#UNTRADEABLE``.|0|2|-100|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|typewriter_hat|`oTypewriter Hat``|interface/large/store_buttons/store_buttons38.rttex|`2You Get:`` 1 Typewriter Hat.<CR><CR>`5Description:`` This hat is connected to your mind writing your story as you go about your day! Note: This hat is `#UNTRADEABLE``.|4|7|-100|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|night_vision|`oNight Vision Goggles``|interface/large/store_buttons/store_buttons15.rttex|`2You Get:`` 1 Night Vision Goggles.<CR><CR>`5Description:`` Scared of the dark? We have a solution. You can wear these goggles just to look cool, but if you also happen to have a D Battery (`4batteries not included``) on you, you will be able to see through darkness like it's not even there! Each D Battery can power your goggles for 1 minute. `2If you are in a world you own, the goggles will not require batteries!`` Note: you can't turn the goggles off without removing them, so you'll be wasting your battery if you wear them in daylight while carrying D Batteries.|0|3|-110|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|muddy_pants|`oMuddy Pants``|interface/large/store_buttons/store_buttons12.rttex|`2You Get:`` 1 Muddy Pants.<CR><CR>`5Description:`` Well, this is just a pair of muddy pants. But it does come with a super secret bonus surprise that is sure to blow your mind!|0|7|-125|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|piranha|`oCuddly Piranha``|interface/large/store_buttons/store_buttons10.rttex|`2You Get:`` 1 Cuddly Piranha.<CR><CR>`5Description:`` This friendly pet piranha won't stay in its bowl!  It just wants to snuggle with your face!|0|0|-150|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|tsed|`oTactical Stealth Espionage Device``|interface/large/store_buttons/store_buttons32.rttex|`2You Get:`` 1 Tactical Stealth Espionage Device.<CR><CR>`5Description:`` This is Growtech's latest innovation on tactical espionage! Using the latest in scientific breakthroughs this device allows you to seamlessly disguise yourself as... a cardboard box! Note: The Tactical Stealth Espionage Device is `#UNTRADEABLE``.|0|1|-150|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|puddy_leash|`oPuddy Leash``|interface/large/store_buttons/store_buttons11.rttex|`2You Get:`` 1 Puddy Leash.<CR><CR>`5Description:`` Puddy is a friendly little kitten who will follow you around forever.|0|7|-180|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|anime_action_hair|`oAnime Action Hair``|interface/large/store_buttons/store_buttons37.rttex|`2You Get:`` 1 Anime Action Hair.<CR><CR>`5Description:`` Lights, camera, ANIME ACTION HAIR! Feel the power from root to tip every time you punch! This item is `#Untradeable``.|4|1|-200|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|golden_axe|`oGolden Pickaxe``|interface/large/store_buttons/store_buttons9.rttex|`2You Get:`` 1 Golden Pickaxe.<CR><CR>`5Description:`` Get your own sparkly pickaxe! This `#Untradeable`` item is a status symbol! Oh sure, it isn't any more effective than a normal pickaxe, but it sparkles!|0|1|-200|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|puppy_leash|`oPuppy Leash``|interface/large/store_buttons/store_buttons11.rttex|`2You Get:`` 1 Puppy Leash.<CR><CR>`5Description:`` Get your own pet puppy! This little dog will follow you around forever, never wavering in her loyalty, thus making her `#Untradeable``.|0|4|-200|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|diggers_spade|`oDigger's Spade``|interface/large/store_buttons/store_buttons13.rttex|`2You Get:`` 1 Digger's Spade.<CR><CR>`5Description:`` This may appear to be a humble shovel, but in fact it is enchanted with the greatest magic in Growtopia. It can smash Dirt or Cave Background in a single hit! Unfortunately, it's worthless at digging through anything else. Note: The spade is `#UNTRADEABLE``.|0|7|-200|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|meow_ears|`oMeow Ears``|interface/large/store_buttons/store_buttons22.rttex|`2You Get:`` 1 Meow Ears.<CR><CR>`5Description:`` Meow's super special ears that everyone can now get! Note: These ears are `#UNTRADEABLE``.|0|0|-200|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|frosty_hair|`oFrosty Hair``|interface/large/store_buttons/store_buttons23.rttex|`2You Get:`` 1 Frosty Hair.<CR><CR>`5Description:`` Coldplay is cold, but you can be freezing! Note: The frosty hair is `#UNTRADEABLE``.|0|0|-200|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|zerkon_helmet|`oEvil Space Helmet``|interface/large/store_buttons/store_buttons21.rttex|`2You Get:`` 1 Evil Space Helmet.<CR><CR>`5Description:`` Zerkon commands a starship too small to actually board - pah, time to rule the galaxy properly! Note: The evil space helmet is `#UNTRADEABLE``.|0|6|-200|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|seils_magic_orb|`oSeil's Magic Orbs``|interface/large/store_buttons/store_buttons21.rttex|`2You Get:`` 1 Seil's Magic Orbs.<CR><CR>`5Description:`` Seil is some kind of evil wizard, now you can be too! Note: These magic orbs are `#UNTRADEABLE``.|0|7|-200|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|atomic_shadow_scythe|`oAtomic Shadow Scythe``|interface/large/store_buttons/store_buttons21.rttex|`2You Get:`` 1 Atomic Shadow Scythe.<CR><CR>`5Description:`` AtomicShadow might actually be evil, now you can try it out! Note: The shadow scythe is `#UNTRADEABLE``.|0|5|-200|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|poseidon_diggers_trident|`oPoseidon's Digger's Trident``|interface/large/store_buttons/store_buttons25.rttex|`2You Get:`` 1 Poseidon's Digger's Trident.<CR><CR>`5Description:`` A gift from the gods. This may appear to be a humble trident, but in fact it has the power of Poseidon himself. It can smash `8Deep Sand`` or `8Ocean Rock`` in a single hit. Unfortunately, you don't get to wield the full might of Poseidon... the trident is worthless at smashing anything else. Note: The trident is `#UNTRADEABLE``.|0|6|-200|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|really_dangerous_pet_llama|`oReally Dangerous Pet Llama``|interface/large/store_buttons/store_buttons32.rttex|`2You Get:`` 1 Really Dangerous Pet Llama.<CR><CR>`5Description:`` This Llama is ready for anything Growtopia throws at it! Armed with a silo of Growtech Missiles, experimental Growtech hardened steel armor and a rather snazzy helmet (Llama's own) this Llama is Dangerous with a capital D! Note: This Really Dangerous Pet Llama is `#UNTRADEABLE``.|0|0|-200|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|leopard_shawl|`oSnow Leopard Shawl``|interface/large/store_buttons/store_buttons34.rttex|`2You Get:`` 1 Snow Leopard Shawl.<CR><CR>`5Description:`` Made of the finest Faux Snow Leopard Fur. This Shawl is infused with the spirit of a mighty Snow Leopard!|1|4|-200|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|9808|`oJinx Intergalactic Hair``|interface/large/store_buttons/tianvan_store.rttex|`2You Get:`` 1 Jinx Intergalactic Hair.<CR><CR>`5Description:`` A manic and impulsive criminal from Zaun Crest, Jinx Jinx lives to wreak havoc without care for the consequences. With an arsenal of deadly weapons, she unleashes the loudest blasts and brightest explosions to leave a trail of mayhem and panic in her wake. Note: The intergalactic hair is `#UNTRADEABLE``.|4|5|-200|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|9804|`oNightmare Eyes``|interface/large/store_buttons/tianvan_store.rttex|`2You Get:`` 1 Nightmare Eyes.<CR><CR>`5Description:`` This `#Untradeable`` item lets you shoot fire from your eyes! With these Nightmare Eyes, it'll burn everything in its sight.|3|5|-200|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|9802|`oHell Demonic Scythe``|interface/large/store_buttons/tianvan_store.rttex|`2You Get:`` 1 Hell Demonic Scythe.<CR><CR>`5Description:`` This `#Untradeable`` scythe contains the fury of the hell!|2|5|-200|0|||-1|-1||-1|-1||1||||||0|0|" + (extra_tab.empty() ? "" : "\nselect_item|" + item_));
	else if (tab == "tab6" + extra_tab) {
		p.Insert("set_description_text|Welcome to the `2Growtopia Store``! Select the item you'd like more info on.`o `wWant to get `5Supporter`` status? Any Gem purchase (or `520000`` Gems earned with free `5Tapjoy`` offers) will make you one. You'll get new skin colors, the `5Recycle`` tool to convert unwanted items into Gems, and more bonuses!\nenable_tabs|1"
			"\nadd_tab_button|main_menu|Home|interface/large/gtps_shop_btn.rttex||0|0|0|0||||-1|-1|||0|0|"
			"\nadd_tab_button|locks_menu|Locks And Stuff|interface/large/gtps_shop_btn.rttex||0|1|0|0||||-1|-1|||0|0|"
			"\nadd_tab_button|bigiitems_menu|Custom Items|interface/large/gtps_shop_btn.rttex||1|4|0|0||||-1|-1|||0|0|"
			"\nadd_tab_button|itempack_menu|Item Packs|interface/large/gtps_shop_btn.rttex||0|3|0|0||||-1|-1|||0|0|"
			"\nadd_tab_button|weather_menu|Weather Machines|interface/large/gtps_shop_btn.rttex|Tired of the same sunny sky?  We offer alternatives within...|0|5|0|0||||-1|-1|||0|0|"
			"\nadd_tab_button|token_menu|Growtoken Items|interface/large/gtps_shop_btn.rttex||0|2|0|0||||-1|-1|||0|0|"
			"\nadd_banner|interface/large/gtps_overlays.rttex|0|5|"
			"\nadd_button|9928|`o200 Pot'o Gems``|interface/large/store_buttons/tianvan_store.rttex|`2You Get:`` 200 Pot'O Gems<CR><CR>`5Description:`` " + items[9928].description + "|10|0|150000|0|||-1|-1||-1|-1||1||||||0|"
			"\nadd_button|14526|`oMiner's License``|interface/large/store_buttons/tianvan_store.rttex|`2You Get:`` 1 Miner's License<CR><CR>`5Description:`` " + items[14526].description + "|9|1|50000|0|||-1|-1||-1|-1||1||||||0|"
			"\nadd_button|5930|`oLegendary Devil MAGPLANT``|interface/large/store_buttons/tianvan_store.rttex|`2You Get:`` 1 Legendary Devil MAGPLANT!<CR><CR>`2CURRENT STOCK: " + to_string(Environment()->Stock_Mag) + "<CR>`5Description:`` " + items[5638].description + "|6|1|100000000|0|||-1|-1||-1|-1||" + a + (Environment()->Stock_Mag != 0 ? "1||-1|-1||İ `2CURRENT STOCK: " + to_string(Environment()->Stock_Mag) + "" : "0|interface/large/store_buttons/tianvan_store.rttex|6|1||ĝ `2OUT OF STOCK!") + "||0|0| |1|0|ĝ `2OUT OF STOCK!||0|0|"
			"\nadd_button|9770|`oGolden Rayman's Fist|interface/large/store_buttons/tianvan_store.rttex|`2You Get:`` 1 Golden Rayman's Fist<CR><CR>`2CURRENT STOCK: " + to_string(Environment()->Stock_GRay) + "<CR>`5Description:`` " + items[5480].description + " and give you power 1 hit break, 7x far break and put, 5x Xp, and 25x Gems.|0|1|1500000000|0|||-1|-1||-1|-1||" + a + (Environment()->Stock_GRay != 0 ? "1||-1|-1||İ `2CURRENT STOCK: " + to_string(Environment()->Stock_GRay) + "" : "0|interface/large/store_buttons/tianvan_store.rttex|0|1||ĝ `2OUT OF STOCK!") + "||0|0| |1|0|ĝ `2OUT OF STOCK!||0|0|"
			"\nadd_button|9778|`oDark Evil Rayman's Fist|interface/large/store_buttons/tianvan_store.rttex|`2You Get:`` 1 Dark Evil Rayman's Fist<CR><CR>`2CURRENT STOCK: " + to_string(Environment()->Stock_ERay) + "<CR>`5Description:`` " + items[5480].description + " and give you power 1 hit break, 4x far break and put, 2x Xp, and 10x Gems.|1|1|500000000|0|||-1|-1||-1|-1||" + a + (Environment()->Stock_ERay != 0 ? "1||-1|-1||İ `2CURRENT STOCK: " + to_string(Environment()->Stock_ERay) + "" : "0|interface/large/store_buttons/tianvan_store.rttex|1|1||ĝ `2OUT OF STOCK!") + "||0|0| |1|0|ĝ `2OUT OF STOCK!||0|0|"
			"\nadd_button|9906|`oLegendary Infinity Rayman's Fist|interface/large/store_buttons/tianvan_store.rttex|`2You Get:`` 1 Legendary Infinity Rayman's Fist<CR><CR>`5Description:`` Nothing.|3|1|750000000|0|||-1|-1||-1|-1||1||||||0|0|"
			"\nadd_button|9908|`oMythical Infinity Rayman's Fist|interface/large/store_buttons/tianvan_store.rttex|`2You Get:`` 1 Mythical Infinity Rayman's Fist<CR><CR>`5Description:`` Nothing.|2|1|900000000|0|||-1|-1||-1|-1||1||||||0|0|"
			"\nadd_button|14574|`oRuby Aspirant Scythe|interface/large/store_buttons/tianvan_store.rttex|`2You Get:`` 1 Ruby Aspirant Scythe<CR><CR>`5Description:`` Nothing.|3|2|300000000|0|||-1|-1||-1|-1||1||||||0|0|"
			"\nadd_button|14572|`oSoul Blossom Katana|interface/large/store_buttons/tianvan_store.rttex|`2You Get:`` 1 Soul Blossom Katana<CR><CR>`5Description:`` Nothing.|0|2|25000000|0|||-1|-1||-1|-1||1||||||0|0|"
			"\nadd_button|14566|`oVoid DarkHearld Scythe|interface/large/store_buttons/tianvan_store.rttex|`2You Get:`` 1 Void DarkHearld Scythe<CR><CR>`5Description:`` Nothing.|2|2|30000000|0|||-1|-1||-1|-1||1||||||0|0|"
			"\nadd_button|14570|`oBlade Of Chaos|interface/large/store_buttons/tianvan_store.rttex|`2You Get:`` 1 Blade Of Chaos<CR><CR>`5Description:`` Nothing.|7|2|4500000|0|||-1|-1||-1|-1||1||||||0|0|"
			"\nadd_button|14568|`oAcid Apocalypse Katana|interface/large/store_buttons/tianvan_store.rttex|`2You Get:`` 1 Acid Apocalypse Katana<CR><CR>`5Description:`` Nothing.|1|2|6000000|0|||-1|-1||-1|-1||1||||||0|0|"
			"\nadd_button|14564|`oVoid Abductor Claymore|interface/large/store_buttons/tianvan_store.rttex|`2You Get:`` 1 Void Abductor Claymore<CR><CR>`5Description:`` Nothing.|6|2|6000000|0|||-1|-1||-1|-1||1||||||0|0|"			
			"\nadd_button|14576|`oKatzy|interface/large/store_buttons/tianvan_store.rttex|`2You Get:`` 1 Katzy<CR><CR>`5Description:`` Nothing.|5|2|7000000|0|||-1|-1||-1|-1||1||||||0|0|"			
			"\nadd_button|14376|`oSasuke Susano'o|interface/large/store_buttons/tianvan_store.rttex|`2You Get:`` 1 Sasuke Susano'o<CR><CR>`5Description:`` Nothing.|4|2|50000000|0|||-1|-1||-1|-1||1||||||0|0|"
			"\nadd_button|19992|`oWernate's Heirloom Wings|interface/large/store_buttons/tianvan_store.rttex|`2You Get:`` 1 Wernate's Heirloom Wings<CR><CR>`5Description:`` Nothing.|2|3|5000000|0|||-1|-1||-1|-1||1||||||0|0|"			
			"\nadd_button|venom_set|`oVenom's Set|interface/large/store_buttons/tianvan_store.rttex|`2You Get:`` 1 Venom's Mask, 1 Venom's Suit, 1 Venom's Bottoms, 1 Venom's Feet<CR><CR>`5Description:`` Nothing.|0|3|5000000|0|||-1|-1||-1|-1||1||||||0|0|"
			"\nadd_button|flash_set|`oFlash's Set|interface/large/store_buttons/tianvan_store.rttex|`2You Get:`` 1 Flash's Mask, 1 Flash's Suit, 1 Flash's Tights, 1 Flash's Speedy Soles, 1 Flash's Electric, 1 Flash's Aura<CR><CR>`5Description:`` Nothing.|10|2|15000000|0|||-1|-1||-1|-1||1||||||0|0|"
			"\nadd_button|spiderman_set|`oSpiderman's Set|interface/large/store_buttons/tianvan_store.rttex|`2You Get:`` 1 Spiderman's Mask, 1 Spiderman's Suit, 1 Spiderman's Tights, 1 Spiderman's Shoes, 1 Spiderman's Webshooters<CR><CR>`5Description:`` Nothing.|9|2|3000000|0|||-1|-1||-1|-1||1||||||0|0|"
			"\nadd_button|batman_set|`oBatman's Set|interface/large/store_buttons/tianvan_store.rttex|`2You Get:`` 1 Batman's Mask, 1 Batman's Suit, 1 Batman's Tights, 1 Batman's Sneaky Soles<CR><CR>`5Description:`` Nothing.|8|2|3000000|0|||-1|-1||-1|-1||1||||||0|0|"			
			"\nadd_button|vampire_set|`oVampire Pirate Set|interface/large/store_buttons/tianvan_store.rttex|`2You Get:`` 1 VampirePirate Hat, 1 VampirePirate Arsenal, 1 VampirePirate Hair, 1 VampirePirate Naval<CR><CR>`5Description:`` Nothing.|10|1|45000000|0|||-1|-1||-1|-1||1||||||0|0|"
			"\nadd_button|13710|`oDark Magic Katana|interface/large/store_buttons/tianvan_store.rttex|`2You Get:`` 1 Dark Magic Katana<CR><CR>`5Description:`` " + items[13710].description + ".|4|3|5000000|0|||-1|-1||-1|-1||1||||||0|0|"
			"\nadd_button|10936|`oEclipsebane Scepter|interface/large/store_buttons/tianvan_store.rttex|`2You Get:`` 1 Eclipsebane Scepter<CR><CR>`5Description:`` " + items[10936].description + ".|5|3|5000000|0|||-1|-1||-1|-1||1||||||0|0|"
			"\nadd_button|5924|`oFrozverden|interface/large/store_buttons/tianvan_store.rttex|`2You Get:`` 1 Frozverden<CR><CR>`5Description:`` " + items[5924].description + ".|3|3|6000000|0|||-1|-1||-1|-1||1||||||0|0|"
			"\nadd_button|10364|`oZeus' Lightning Crown|interface/large/store_buttons/tianvan_store.rttex|`2You Get:`` 1 Zeus' Lightning Crown<CR><CR>`5Description:`` " + items[10364].description + ".|6|3|3000000|0|||-1|-1||-1|-1||1||||||0|0|"
			"");
	}
	p.CreatePacket(peer);     
	pInfo(peer)->Is_In_Dialog = true;
}
class Playmods {
public:
	static bool HasByName(Player* p_, std::string name_, bool not_hand = false) {
		if (p_ == nullptr) return false;
		name_ = replace_str2(cleanup_(to_lower(name_)), " ", "_");
		std::vector<std::string> player_playmods{};
		player_playmods.push_back(items[p_->hair].playmod_total);
		player_playmods.push_back(items[p_->shirt].playmod_total);
		player_playmods.push_back(items[p_->pants].playmod_total);
		player_playmods.push_back(items[p_->feet].playmod_total);
		player_playmods.push_back(items[p_->face].playmod_total);
		if (not_hand == false) player_playmods.push_back(items[p_->hand].playmod_total);
		player_playmods.push_back(items[p_->back].playmod_total);
		player_playmods.push_back(items[p_->mask].playmod_total);
		player_playmods.push_back(items[p_->necklace].playmod_total);
		player_playmods.push_back(items[p_->ances].playmod_total);
		for (int i_ = 0; i_ < player_playmods.size(); i_++) {
			if (player_playmods[i_].empty()) continue;
			std::string playmod = replace_str2(cleanup_(to_lower(player_playmods[i_])), " ", "_");
			if (playmod.find(name_) != string::npos) return true;
		}
		return false;
	}
	static bool HasById(Player* p_, std::uint16_t id, int time_ = 0) {
		if (p_ == nullptr) return false;
		std::vector<PlayMods>::iterator p = find_if(p_->playmods.begin(), p_->playmods.end(), [&](const PlayMods& a) { return a.id == id; });
		if (p != p_->playmods.end()) {
			if (time_ != 0) p_->playmods[p - p_->playmods.begin()].time = time(nullptr) + time_;
			return true;
		}
		else return false;
	}
	static bool Remove(Player* p_, std::uint16_t id) {
		if (p_ == nullptr) return false;
		std::vector<PlayMods>::iterator p = find_if(p_->playmods.begin(), p_->playmods.end(), [&](const PlayMods& a) { return a.id == id; });
		if (p != p_->playmods.end()) {
			p_->playmods[p - p_->playmods.begin()].time = 1;
			return true;
		}
		else return false;
	}
	static void Add(ENetPeer* peer, int playmod, int time_s = 0) {
		if (time_s == 0) time_s = atoi(info_about_playmods[playmod - 1][2].c_str());
		if (not HasById(pInfo(peer), playmod, time_s)) {
			PlayMods new_playmod{};
			new_playmod.id = playmod, new_playmod.time = time(nullptr) + time_s;
			pInfo(peer)->playmods.push_back(new_playmod);
			VarList::OnConsoleMessage(peer, info_about_playmods[playmod - 1][4] + " (`$" + info_about_playmods[playmod - 1][3] + "!`` mod added, `$" + Time::Playmod(new_playmod.time - time(nullptr)) + "`` left)");
		}
	}
};
class DailyEvent_Task {
public:
	static void Halloween(ENetPeer* peer, std::string type = "", std::uint16_t count = 0) {
		std::uint16_t current_task_points = 0, need_for_task = 0;
		bool show_ = false;
		std::string task = "";
		if (type == "1") {
			show_ = true;
			pInfo(peer)->halloween_q1 += count;
			need_for_task = 1;
			current_task_points = pInfo(peer)->halloween_q1;
			task = "Sacrifice Dark King's Offering";
		}
		else if (type == "2") {
			show_ = true;
			pInfo(peer)->halloween_q2 += count;
			need_for_task = 1;
			current_task_points = pInfo(peer)->halloween_q2;
			task = "Purchase a Dark Ticket";
		}
		else if (type == "3") {
			show_ = true;
			pInfo(peer)->halloween_q3 += count;
			need_for_task = 1;
			current_task_points = pInfo(peer)->halloween_q3;
			task = "Purchase a Gift of Growganoth";
		}
		else if (type == "4") {
			show_ = true;
			pInfo(peer)->halloween_q4 += count;
			need_for_task = 1;
			current_task_points = pInfo(peer)->halloween_q4;
			task = "Purchase Weather Machine - Dark Mountains";
		}
		else if (type == "5") {
			need_for_task = 200;
			if (pInfo(peer)->halloween_q5 < need_for_task) {
				if (pInfo(peer)->halloween_q5 < need_for_task) pInfo(peer)->halloween_q5 += count, show_ = true;
				current_task_points = pInfo(peer)->halloween_q5;
				task = "Use 200 Gift Growganoth";
			}
		}
		else if (type == "6") {
			need_for_task = 2;
			if (pInfo(peer)->halloween_q6 < need_for_task) {
				if (pInfo(peer)->halloween_q6 < need_for_task) pInfo(peer)->halloween_q6 += count, show_ = true;
				current_task_points = pInfo(peer)->halloween_q6;
				task = "Use 2 Dark Ticket";
			}
		}
		else if (type == "7") {
			need_for_task = 100;
			if (pInfo(peer)->halloween_q7 < need_for_task) {
				if (pInfo(peer)->halloween_q7 < need_for_task) pInfo(peer)->halloween_q7 += count, show_ = true;
				if (pInfo(peer)->halloween_q7 >= 100) {
					current_task_points = 100;
					pInfo(peer)->halloween_q7 = 100;
				}
				else current_task_points = pInfo(peer)->halloween_q7;
				task = "Sacrifice 100 World Lock";
			}
		}
		else if (type == "8") {
			need_for_task = 1;
			if (pInfo(peer)->halloween_q8 < need_for_task) {
				if (pInfo(peer)->halloween_q8 < need_for_task) pInfo(peer)->halloween_q8 += count, show_ = true;
				current_task_points = pInfo(peer)->halloween_q8;
				task = "Purchase a Fists of Vengeance";
			}
		}
		else if (type == "9") {
			need_for_task = 5;
			if (pInfo(peer)->halloween_q9 < need_for_task) {
				if (pInfo(peer)->halloween_q9 < need_for_task) pInfo(peer)->halloween_q9 += count, show_ = true;
				current_task_points = pInfo(peer)->halloween_q9;
				task = "Get Nightmare Devil Wings from Growganoth";
			}
		}
		if (show_) {
			VarList::OnConsoleMessage(peer, "" + a + (current_task_points >= need_for_task ? "Congratulations, You have completed the task " + task + "." : "`5Halloween List Task: ```2" + task + " " + (current_task_points > need_for_task ? to_string(need_for_task) : to_string(current_task_points)) + "/" + to_string(need_for_task) + "``"));
			if (current_task_points >= need_for_task) VarList::OnTalkBubble(peer, pInfo(peer)->netID, "Congratulations, You have completed the task " + task + ".");
		}
	}
	static void WinterFest(ENetPeer* peer, string type = "", uint16_t count = 0) {
		uint16_t current_task_points = 0, need_for_task = 0, prize = 0;
		bool show_ = false;
		string task = "";
		if (type == "1") {
			need_for_task = 5;
			if (pInfo(peer)->winterfest_quest_1 < need_for_task) {
				if (pInfo(peer)->winterfest_quest_1 < need_for_task) pInfo(peer)->winterfest_quest_1 += count, show_ = true;
				current_task_points = pInfo(peer)->winterfest_quest_1;
				prize = 75;
				task = "Purchase Winterfest Cracker Packs";
				if (current_task_points >= need_for_task) pInfo(peer)->winterfest_wishes += prize;
			}
		}
		else if (type == "2") {
			need_for_task = 20;
			if (pInfo(peer)->winterfest_quest_2 < need_for_task) {
				if (pInfo(peer)->winterfest_quest_2 < need_for_task) pInfo(peer)->winterfest_quest_2 += count, show_ = true;
				current_task_points = pInfo(peer)->winterfest_quest_2;
				prize = 20;
				task = "Open Winterfest Crackers";
				if (current_task_points >= need_for_task) pInfo(peer)->winterfest_wishes += prize;
			}
		}
		else if (type == "3") {
			need_for_task = 1;
			if (pInfo(peer)->winterfest_quest_3 < need_for_task) {
				if (pInfo(peer)->winterfest_quest_3 < need_for_task) pInfo(peer)->winterfest_quest_3 += count, show_ = true;
				current_task_points = pInfo(peer)->winterfest_quest_3;
				prize = 50;
				task = "Open Deluxe Winterfest Crackers";
				if (current_task_points >= need_for_task) pInfo(peer)->winterfest_wishes += prize;
			}
		}
		else if (type == "4") {
			need_for_task = 1;
			if (pInfo(peer)->reset_winterfest_quest_1 < need_for_task) {
				if (pInfo(peer)->reset_winterfest_quest_1 < need_for_task) pInfo(peer)->reset_winterfest_quest_1 += count, show_ = true;
				current_task_points = pInfo(peer)->reset_winterfest_quest_1;
				prize = 30;
				task = "Claim an item from the Winterfest Calendar";
				if (current_task_points >= need_for_task) pInfo(peer)->winterfest_wishes += prize;
			}
		}
		else if (type == "5") {
			need_for_task = 1;
			if (pInfo(peer)->reset_winterfest_quest_2 < need_for_task) {
				if (pInfo(peer)->reset_winterfest_quest_2 < need_for_task) pInfo(peer)->reset_winterfest_quest_2 += count, show_ = true;
				current_task_points = pInfo(peer)->reset_winterfest_quest_2;
				prize = 20;
				task = "Claim an item from the Diamond Builder's Bonanza";
				if (current_task_points >= need_for_task) pInfo(peer)->winterfest_wishes += prize;
			}
		}
		else if (type == "6") {
			need_for_task = 1;
			if (pInfo(peer)->reset_winterfest_quest_3 < need_for_task) {
				if (pInfo(peer)->reset_winterfest_quest_3 < need_for_task) pInfo(peer)->reset_winterfest_quest_3 += count, show_ = true;
				current_task_points = pInfo(peer)->reset_winterfest_quest_3;
				prize = 10;
				task = "Collect an Icy Heart of Winter";
				if (current_task_points >= need_for_task) pInfo(peer)->winterfest_wishes += prize;
			}
		}
		else if (type == "7") {
			need_for_task = 200;
			if (pInfo(peer)->reset_winterfest_quest_4 < need_for_task) {
				if (pInfo(peer)->reset_winterfest_quest_4 < need_for_task) pInfo(peer)->reset_winterfest_quest_4 += count, show_ = true;
				current_task_points = pInfo(peer)->reset_winterfest_quest_4;
				prize = 10;
				task = "Give Winter Gifts to Growch";
				if (current_task_points >= need_for_task) pInfo(peer)->winterfest_wishes += prize;
			}
		}
		else if (type == "8") {
			need_for_task = 20000;
			if (pInfo(peer)->reset_winterfest_quest_5 < need_for_task) {
				if (pInfo(peer)->reset_winterfest_quest_5 < need_for_task) pInfo(peer)->reset_winterfest_quest_5 += count, show_ = true;
				current_task_points = pInfo(peer)->reset_winterfest_quest_5;
				prize = 10;
				task = "Donate Rarity to Stuff 4 Toys";
				if (current_task_points >= need_for_task) pInfo(peer)->winterfest_wishes += prize;
			}
		}
		else if (type == "9") {
			need_for_task = 50;
			if (pInfo(peer)->reset_winterfest_quest_6 < need_for_task) {
				if (pInfo(peer)->reset_winterfest_quest_6 < need_for_task) pInfo(peer)->reset_winterfest_quest_6 += count, show_ = true;
				current_task_points = pInfo(peer)->reset_winterfest_quest_6;
				prize = 10;
				task = "Give Winter Gifts to Growtopians";
				if (current_task_points >= need_for_task) pInfo(peer)->winterfest_wishes += prize;
			}
		}
		else if (type == "10") {
			need_for_task = 100;
			if (pInfo(peer)->reset_winterfest_quest_7 < need_for_task) {
				if (pInfo(peer)->reset_winterfest_quest_7 < need_for_task) pInfo(peer)->reset_winterfest_quest_7 += count, show_ = true;
				current_task_points = pInfo(peer)->reset_winterfest_quest_7;
				prize = 10;
				task = "Open gifts from under Giving Trees";
				if (current_task_points >= need_for_task) pInfo(peer)->winterfest_wishes += prize;
			}
		}
		else if (type == "11") {
			need_for_task = 100;
			if (pInfo(peer)->reset_winterfest_quest_8 < need_for_task) {
				if (pInfo(peer)->reset_winterfest_quest_8 < need_for_task) pInfo(peer)->reset_winterfest_quest_8 += count, show_ = true;
				current_task_points = pInfo(peer)->reset_winterfest_quest_8;
				prize = 10;
				task = "Cut Down Giving Trees";
				if (current_task_points >= need_for_task) pInfo(peer)->winterfest_wishes += prize;
			}
		}
		else if (type == "12") {
			need_for_task = 100;
			if (pInfo(peer)->reset_winterfest_quest_9 < need_for_task) {
				if (pInfo(peer)->reset_winterfest_quest_9 < need_for_task) pInfo(peer)->reset_winterfest_quest_9 += count, show_ = true;
				current_task_points = pInfo(peer)->reset_winterfest_quest_9;
				prize = 10;
				task = "Decorate Giving Trees";
				if (current_task_points >= need_for_task) pInfo(peer)->winterfest_wishes += prize;
			}
		}
		if (show_) {
			VarList::OnConsoleMessage(peer, "" + a + (current_task_points >= need_for_task ? "(`9COMPLETED!`` Received " + to_string(prize) + " wishes!``) " : "") + "`5Winter Wish List Task: ```2" + task + " " + (current_task_points > need_for_task ? to_string(need_for_task) : to_string(current_task_points)) + "/" + to_string(need_for_task) + "``");
			if (current_task_points >= need_for_task) VarList::OnTalkBubble(peer, pInfo(peer)->netID, "Congratulations, You have completed the task " + task + ", Received `5" + to_string(prize) + " wishes``.");
		}
	}
	static void MStarglitter(ENetPeer* peer, string type, int count) {
		int current_points = pInfo(peer)->starglitter_points;
		string completed = "";
		if (type == "surgery") {
			if (pInfo(peer)->starglitter_surgery < 5) {
				pInfo(peer)->starglitter_surgery += count;
				if (pInfo(peer)->starglitter_surgery >= 5) pInfo(peer)->starglitter_points += (pInfo(peer)->gp ? 200 : 100), completed = "You completed the `5Starglitter Task``: `2Complete Surgeries`` and Earned " + to_string(pInfo(peer)->starglitter_points - current_points) + " points.";
			}
		}
		else if (type == "break") {
			if (pInfo(peer)->starglitter_break < 1000) {
				pInfo(peer)->starglitter_break += count;
				if (pInfo(peer)->starglitter_break >= 1000) pInfo(peer)->starglitter_points += (pInfo(peer)->gp ? 100 : 50), completed = "You completed the `5Starglitter Task``: `2Break 1,000 blocks`` and Earned " + to_string(pInfo(peer)->starglitter_points - current_points) + " points.";
			}
		}
		else if (type == "place") {
			if (pInfo(peer)->starglitter_place < 1000) {
				pInfo(peer)->starglitter_place += count;
				if (pInfo(peer)->starglitter_place >= 1000) pInfo(peer)->starglitter_points += (pInfo(peer)->gp ? 100 : 50), completed = "You completed the `5Starglitter Task``: `2Place 1,000 blocks`` and Earned " + to_string(pInfo(peer)->starglitter_points - current_points) + " points.";
			}
		}
		else if (type == "trade") {
			if (pInfo(peer)->starglitter_trade < 10) {
				pInfo(peer)->starglitter_trade += count;
				if (pInfo(peer)->starglitter_trade >= 10) pInfo(peer)->starglitter_points += (pInfo(peer)->gp ? 30 : 15), completed = "You completed the `5Starglitter Task``: `2Trade 10 people`` and Earned " + to_string(pInfo(peer)->starglitter_points - current_points) + " points.";
			}
		}
		else if (type == "email") {
			if (pInfo(peer)->starglitter_email < 1) {
				pInfo(peer)->starglitter_email = 1;
				if (pInfo(peer)->starglitter_email >= 1) pInfo(peer)->starglitter_points += (pInfo(peer)->gp ? 300 : 250), completed = "You completed the `5Starglitter Task``: `2Change Email`` and Earned " + to_string(pInfo(peer)->starglitter_points - current_points) + " points.";
			}
		}
		else if (type == "sb") {
			if (pInfo(peer)->starglitter_sb < 10) {
				pInfo(peer)->starglitter_sb += count;
				if (pInfo(peer)->starglitter_sb >= 10) pInfo(peer)->starglitter_points += (pInfo(peer)->gp ? 60 : 30), completed = "You completed the `5Starglitter Task``: `2Broadcast 10 times`` and Earned " + to_string(pInfo(peer)->starglitter_points - current_points) + " points.";
			}
		}
		else if (type == "fish") {
			if (pInfo(peer)->starglitter_fish < 450) {
				pInfo(peer)->starglitter_fish += count;
				if (pInfo(peer)->starglitter_fish >= 450) pInfo(peer)->starglitter_points += (pInfo(peer)->gp ? 150 : 75), completed = "You completed the `5Starglitter Task``: `2Catch lbs of Fish`` and Earned " + to_string(pInfo(peer)->starglitter_points - current_points) + " points.";
			}
		}
		else if (type == "enter") {
			if (not pInfo(peer)->starglitter_enter) {
				pInfo(peer)->starglitter_enter = true;
				if (pInfo(peer)->starglitter_enter) pInfo(peer)->starglitter_points += (pInfo(peer)->gp ? 25 : 10), completed = "You completed the `5Starglitter Task``: `2Login once per day`` and Earned " + to_string(pInfo(peer)->starglitter_points - current_points) + " points.";
			}
		}
		else if (type == "provider") {
			if (pInfo(peer)->starglitter_provider < pInfo(peer)->starglitter_provider2) {
				pInfo(peer)->starglitter_provider += count;
				if (pInfo(peer)->starglitter_provider >= pInfo(peer)->starglitter_provider2) pInfo(peer)->starglitter_points += (pInfo(peer)->gp ? 85 : 35), completed = "You completed the `5Starglitter Task``: `2Harvest provider`` and Earned " + to_string(pInfo(peer)->starglitter_points - current_points) + " points.";
			}
		}
		else if (type == "geiger") {
			if (pInfo(peer)->starglitter_geiger < pInfo(peer)->starglitter_geiger2) {
				pInfo(peer)->starglitter_geiger += count;
				if (pInfo(peer)->starglitter_geiger >= pInfo(peer)->starglitter_geiger2) pInfo(peer)->starglitter_points += (pInfo(peer)->gp ? 150 : 50), completed = "You completed the `5Starglitter Task``: `2Geiger Hunting`` and Earned " + to_string(pInfo(peer)->starglitter_points - current_points) + " points.";
			}
		}
		else if (type == "seed") {
			if (pInfo(peer)->starglitter_seed2 < 100) {
				pInfo(peer)->starglitter_seed2 += count;
				if (pInfo(peer)->starglitter_seed2 >= 100) pInfo(peer)->starglitter_points += (pInfo(peer)->gp ? 300 : 250), completed = "You completed the `5Starglitter Task``: `2Plant 100 " + items[pInfo(peer)->starglitter_seed].ori_name + "`` and Earned " + to_string(pInfo(peer)->starglitter_points - current_points) + " points.";
			}
		}
		else if (type == "combine") {
			if (pInfo(peer)->starglitter_combine < 6) {
				pInfo(peer)->starglitter_combine += count;
				if (pInfo(peer)->starglitter_combine >= 6) pInfo(peer)->starglitter_points += (pInfo(peer)->gp ? 150 : 100), completed = "You completed the `5Starglitter Task``: `2Combine Items`` and Earned " + to_string(pInfo(peer)->starglitter_points - current_points) + " points.";
			}
		}
		else if (type == "crystal") {
			if (pInfo(peer)->starglitter_crystal < 4) {
				pInfo(peer)->starglitter_crystal += count;
				if (pInfo(peer)->starglitter_crystal >= 4) pInfo(peer)->starglitter_points += (pInfo(peer)->gp ? 300 : 250), completed = "You completed the `5Starglitter Task``: `2Harmonize Crystals`` and Earned " + to_string(pInfo(peer)->starglitter_points - current_points) + " points.";
			}
		}
		if (completed != "") {
			VarList::OnTalkBubble(peer, pInfo(peer)->netID, completed, 0, 0);
			VarList::OnConsoleMessage(peer, completed);
		}
	}
};
class Epic_Quest {
public:
	static void Add(ENetPeer* peer, string Name_EpicQ, int& Variable_EpicQ, int EpicQ_Requirement, int IncreaseBy) {
		if (Variable_EpicQ < EpicQ_Requirement) {
			Variable_EpicQ += IncreaseBy;
			if (Variable_EpicQ >= EpicQ_Requirement) {
				Variable_EpicQ = EpicQ_Requirement;
				pInfo(peer)->epic_quest_total++;
				PlayerMoving data_{};
				data_.packetType = 17, data_.netID = 46, data_.YSpeed = 46, data_.x = pInfo(peer)->x + 16, data_.y = pInfo(peer)->y + 16;
				BYTE* raw = packPlayerMoving(&data_);
				for (ENetPeer* cp_ = server->peers; cp_ < &server->peers[server->peerCount]; ++cp_) {
					if (cp_->state != ENET_PEER_STATE_CONNECTED or cp_->data == NULL or pInfo(peer)->world != pInfo(cp_)->world) continue;
					VarList::OnConsoleMessage(cp_, get_player_nick(peer) + " ``just completed the `9Epic Quest`` \"" + Name_EpicQ + "\"!!");
					VarList::OnAddNotification(peer, "COMPLETED: " + Name_EpicQ, "interface/large/epic.rttex", "audio/achievement.wav");
					send_raw(cp_, 4, raw, 56, ENET_PACKET_FLAG_RELIABLE);
				}
				delete[] raw;
			}
		}
	}
};
namespace world_::data {
	template<typename Func>
	void players(Func function) {
		for (ENetPeer* cp_ = server->peers; cp_ < &server->peers[server->peerCount]; cp_++) {
			if (cp_->state != ENET_PEER_STATE_CONNECTED) continue;
			function(cp_);
		}
	}
	void world(std::string const& world, std::function<void(ENetPeer*)> func) {
		world_::data::players([&](ENetPeer* cp_) {
			if (cp_ == nullptr || cp_->data == nullptr) return;
			if (pInfo(cp_)->world == world) func(cp_);
			});
	}
	int get(const std::string& nameWorld) {
		int defaults = 1;
		world_::data::world(nameWorld, [&](ENetPeer* peer) {
			if (pInfo(peer)->show_pets && pInfo(peer)->pet_type != -1) {
				if (pInfo(peer)->netID >= defaults) defaults = pInfo(peer)->netID + 1 + name_to_number(to_lower(pInfo(peer)->tankIDName));
				if (pInfo(peer)->pet_netID >= defaults) defaults = pInfo(peer)->pet_netID + 1 + name_to_number(to_lower(pInfo(peer)->tankIDName));
			}
			else if (pInfo(peer)->netID >= defaults) defaults = pInfo(peer)->netID + 1 + name_to_number(to_lower(pInfo(peer)->tankIDName));
			});
		return defaults;
	}
}
class Pet_Ai {
public:
	static bool Food(int id) {
		if (id == 196 or id == 712 or id == 868 or id == 874 or id == 950 or id == 3428 or id == 962 or id == 968 or id == 3836 or id == 4586 or id == 4602 or id == 4766) {
			return true;
		}
		else return false;
	}
	static void Update_Ability(ENetPeer* peer) {
		if (pInfo(peer)->pet_level == 10) {
			pInfo(peer)->ability_xgems = 1;
			pInfo(peer)->ability_xxp = 1;
		}
		if (pInfo(peer)->pet_level == 30) {
			pInfo(peer)->ability_xgems = 2;
			pInfo(peer)->ability_xxp = 2;
		}
		if (pInfo(peer)->pet_level == 50) {
			pInfo(peer)->ability_xgems = 3;
			pInfo(peer)->ability_xxp = 3;
		}
	}
	static void Dialog(ENetPeer* peer, string page = "") {
		string tabs = SetColor(peer) + "set_default_color|`o\nstart_custom_tabs|"
			"\nadd_custom_button|pet_info|image:interface/large/gui_button_tabs.rttex;image_size:228,92;frame:" + a + (page == "pet_info" or page == "" ? "1,5" : "0,5") + ";width:0.14;min_width:60;|"
			"\nadd_custom_button|pet_settings|image:interface/large/gui_button_tabs.rttex;image_size:228,92;frame:" + a + (page == "pet_settings" ? "1,6" : "0,6") + ";width:0.14;min_width:60;|"
			"\nadd_custom_button|pet_upgrade|image:interface/large/gui_button_tabs.rttex;image_size:228,92;frame:" + a + (page == "pet_upgrade" ? "1,8" : "0,8") + ";width:0.14;min_width:60;|"
			"\nadd_custom_button|pet_food|image:interface/large/gui_button_tabs.rttex;image_size:228,92;frame:" + a + (page == "pet_food" ? "1,7" : "0,7") + ";width:0.14;min_width:60;|"
			"\nadd_custom_button|pet_ability|image:interface/large/gui_button_tabs.rttex;image_size:228,92;frame:" + a + (page == "pet_ability" ? "1,9" : "0,9") + ";width:0.14;min_width:60;|"
			"\nend_custom_tabs|";
		string ability = "", ability_list = "", settings = "", change_name = "\nadd_inner_image_label_button|mypet_name|  `wPet's Name|game/tiles_page2.rttex|1.6|28|7|32|\nadd_smalltext|`oNote: You need 30,000 gems to change the name and it has time after you change it!|left|";
		int health = pInfo(peer)->Pets_health, hunger = pInfo(peer)->Pets_hunger;
		int maxhealth = 100, maxhunger = 150;
		if (health > maxhealth) health = maxhealth;
		if (hunger > maxhunger) hunger = maxhunger;
		if (pInfo(peer)->ability_xgems != 0) ability += "\nadd_custom_textbox|" + to_string(pInfo(peer)->ability_xgems) + "x Multiplier Gems|size:small;color:255,255,255,255;icon:112;|\n";
		if (pInfo(peer)->ability_xxp != 0) ability += "\nadd_custom_textbox|" + to_string(pInfo(peer)->ability_xxp) + "x Multiplier Xp|size:small;color:255,255,255,255;icon:1488;|\n";
		if (pInfo(peer)->pet_level >= 30) ability += "\nadd_custom_textbox|Change Drop Rubbles|size:small;color:255,255,255,255;icon:11402;|\n";
		if (pInfo(peer)->pet_level >= 40) ability += "\nadd_custom_textbox|5x Online Point Currency|size:small;color:255,255,255,255;icon:10668;|\n";
		if (pInfo(peer)->pet_level >= 50 and pInfo(peer)->active_bluename) ability += "\nadd_custom_textbox|Bluename|size:small;color:255,255,255,255;icon:546;|\n";	
		ability_list += "\nadd_smalltext|`$Level 10 ability:``|left|" +
			a + (pInfo(peer)->pet_level >= 10 ? "\nadd_custom_textbox|`r(Un-Locked) 1x Gems and 1x Xp|size:small;icon:6292|" : "\nadd_custom_textbox|`w(Locked) 1x Gems and 1x Xp|size:small;icon:6128|") +
			"\nadd_smalltext|`$Level 30 ability:``|left|" +
			(pInfo(peer)->pet_level >= 30 ? "\nadd_custom_textbox|`r(Un-Locked) 2x Gems, 2x Xp and Extra Rubble|size:small;icon:6292|" : "\nadd_custom_textbox|`w(Locked) 2x Gems, 2x Xp and Extra Rubble|size:small;icon:6128|") +
			"\nadd_smalltext|`$Level 40 ability:``|left|" +
			(pInfo(peer)->pet_level >= 40 ? "\nadd_custom_textbox|`r(Un-Locked) 5x Opc|size:small;icon:6292|" : "\nadd_custom_textbox|`w(Locked) 5x Opc|size:small;icon:6128|") +
			"\nadd_smalltext|`$Level 50 ability:``|left|" +
			(pInfo(peer)->pet_level >= 50 ? "\nadd_custom_textbox|`r(Un-Locked) 3x Gems, 3x Xp and BlueName|size:small;icon:6292|" : "\nadd_custom_textbox|`w(Locked) 3x Gems, 3x Xp and BlueName|size:small;icon:6128|") 
			;
		ability_list += "\nadd_spacer|small|\nadd_label_with_icon|small|`wMore Ability:|left|2328|" +
			a + (pInfo(peer)->Pets_Builder_Lvl != 0 ? "\nadd_custom_textbox|`r(Un-Locked) Frugal Framework: " + a + (pInfo(peer)->Pets_Builder_Lvl == 5 ? "5.0%" : pInfo(peer)->Pets_Builder_Lvl == 4 ? "4.5%" : pInfo(peer)->Pets_Builder_Lvl == 3 ? "3.0" : pInfo(peer)->Pets_Builder_Lvl == 2 ? "2.5%" : "0.5%") + " change of dropping double block when breaking blocks.|size:small;icon:7070|" : "\nadd_custom_textbox|`w(Locked) Frugal Framework: change of dropping double block when breaking blocks.|size:small;icon:7070|") + 
			"\nadd_spacer|small|" +
			(pInfo(peer)->Pets_Farmer_Lvl != 0 ? "\nadd_custom_textbox|`r(Un-Locked) Green Thumb: " + a + (pInfo(peer)->Pets_Farmer_Lvl == 5 ? "5.0%" : pInfo(peer)->Pets_Farmer_Lvl == 4 ? "4.5%" : pInfo(peer)->Pets_Farmer_Lvl == 3 ? "3.0" : pInfo(peer)->Pets_Farmer_Lvl == 2 ? "2.5%" : "0.5%") + " change of receiving bonus gems when harvesting trees.|size:small;icon:7064|" : "\nadd_custom_textbox|`w(Locked) Green Thumb: change of receiving bonus gems when harvesting trees.|size:small;icon:7064|") 
			;
		if (Playmods::HasById(pInfo(peer), 158)) {
			int time_ = 0;
			for (PlayMods peer_playmod : pInfo(peer)->playmods) {
				if (peer_playmod.id == 158) time_ = peer_playmod.time - time(nullptr);
				change_name = "\nadd_label_with_icon|small|`oRecently Pet Name-Changed ends in: `2" + Time::Subscription(time_) + "|left|1280|\n";
			}
		}
		if (page == "pet_ability") {
			VarList::OnDialogRequest(peer, tabs + "\nadd_label_with_icon|big|" + (pInfo(peer)->pet_ID == 9502 ? "`4@Liyue_HTouFly" : pInfo(peer)->pet_ID == 9504 ? "`e@AbyssMage_Fly" : "`b@Uuuzz_Fly") + " Ability|left|" + to_string(pInfo(peer)->pet_ID) + "|\nadd_spacer|small|\nadd_label_with_icon|small|`wActive Ability:|left|2292|" + ability + "|\nadd_spacer|small|\nadd_label_with_icon|small|`wAbility List:|left|2322|" + ability_list + "\nadd_spacer|small|\nend_dialog|My_PetAi|Continue||", 500);
		}
		if (page == "pet_upgrade") {
			VarList::OnDialogRequest(peer, tabs + "\nadd_label_with_icon|big|`wPet's Upgrade|left|9436|\nadd_spacer|small|\nadd_smalltext|`oDo you feel tired of increasing your pet's level manually? You can increase your pet's level instantly here by paying a predetermined price for each level increase and of course you will get an ability bonus for each specified level.|left|\nadd_spacer|small|"
				"\nadd_label_with_icon|small|`wBuilder " + a + (pInfo(peer)->Pets_Builder_Lvl == 5 ? "(MAX)" : "(Level " + to_string(pInfo(peer)->Pets_Builder_Lvl) + " to " + to_string(pInfo(peer)->Pets_Builder_Lvl + 1) + ")") + ":|left|7070|"
				+ a + (pInfo(peer)->Pets_Builder_Lvl < 5 ? "\nadd_smalltext|`oFrugal Framework: " + a + (pInfo(peer)->Pets_Builder_Lvl == 0 ? "0.5%" : pInfo(peer)->Pets_Builder_Lvl == 1 ? "2.5%" : pInfo(peer)->Pets_Builder_Lvl == 2 ? "3.0%" : pInfo(peer)->Pets_Builder_Lvl == 3 ? "4.5%" : "5.0%") + " change of dropping double block when breaking blocks.|left|"
				"\nadd_smalltext|`oCost : " + (pInfo(peer)->Pets_Builder_Lvl == 0 ? "1,500,000" : pInfo(peer)->Pets_Builder_Lvl == 1 ? "2,000,000" : pInfo(peer)->Pets_Builder_Lvl == 2 ? "2,500,000" : pInfo(peer)->Pets_Builder_Lvl == 3 ? "3,000,000" : pInfo(peer)->Pets_Builder_Lvl == 4 ? "4,500,000" : "") + " Gems|left|"
				"\nadd_smalltext|`oYour pet must be at least level 10 to upgrade.|left|"
				"\nadd_small_font_button|Pet_Upg_Builder|`2Upgrade|noflags|0|0|" : "\nadd_smalltext|`o- Level Master|left|") +
				"\nadd_spacer|small|"
				"\nadd_label_with_icon|small|`wFarmer " + a + (pInfo(peer)->Pets_Farmer_Lvl == 5 ? "(MAX)" : "(Level " + to_string(pInfo(peer)->Pets_Farmer_Lvl) + " to " + to_string(pInfo(peer)->Pets_Farmer_Lvl + 1) + ")") + ":|left|7064|"
				+ a + (pInfo(peer)->Pets_Farmer_Lvl < 5 ? "\nadd_smalltext|`oGreen Thumb: " + a + (pInfo(peer)->Pets_Farmer_Lvl == 0 ? "0.5%" : pInfo(peer)->Pets_Farmer_Lvl == 1 ? "2.5%" : pInfo(peer)->Pets_Farmer_Lvl == 2 ? "3.0%" : pInfo(peer)->Pets_Farmer_Lvl == 3 ? "4.5%" : "5.0%") + " receiving bonus gems when harvesting trees.|left|"
				"\nadd_smalltext|`oCost : " + (pInfo(peer)->Pets_Farmer_Lvl == 0 ? "2,000,000" : pInfo(peer)->Pets_Farmer_Lvl == 1 ? "2,500,000" : pInfo(peer)->Pets_Farmer_Lvl == 2 ? "3,000,000" : pInfo(peer)->Pets_Farmer_Lvl == 3 ? "3,500,000" : pInfo(peer)->Pets_Farmer_Lvl == 4 ? "5,000,000" : "") + " Gems|left|"
				"\nadd_smalltext|`oYour pet must be at least level 20 to upgrade.|left|"
				"\nadd_small_font_button|Pet_Upg_Farmer|`2Upgrade|noflags|0|0|" : "\nadd_smalltext|`o- Level Master|left|") +
				"\nadd_spacer|small|"
				"\nend_dialog|My_PetAi|Continue||", 500);
		}
		if (page == "pet_food") {
			VarList::OnDialogRequest(peer, tabs + "\nadd_label_with_icon|big|`wPet's Food|left|4604|\nadd_spacer|small|\nadd_smalltext|`oYou can feed your pet to avoid running out of energy. Because if you don't give it enough food, your pet can lose its life. If your pet runs out of life, you have to pay compensation to bring it back to life.|left|\nadd_spacer|small|\nadd_label_with_icon|small|`9You can feed your pet:|left|4582|\nadd_item_picker|foodid|`wFeed pet``|Choose and item to feed pet!|\nadd_spacer|small|\ntext_scaling_string|Subscribtions++++++++|\nadd_button_with_icon||`$Blueberry 5%|staticPurpleFrame|196||\nadd_button_with_icon||`$Hanabero Pepper 25%|staticPurpleFrame|712||\nadd_button_with_icon||`$Milk 1%|staticPurpleFrame|868||\nadd_button_with_icon||`$Egg 1%|staticPurpleFrame|874||\nadd_button_with_icon||`$Bread 50%|staticPurpleFrame|950||\nadd_button_with_icon||`$Potato 2%|staticPurpleFrame|3428||\nadd_button_with_icon||END_LIST|noflags|0||\nadd_button_with_icon||`$Honey 50%|staticPurpleFrame|3836||\nadd_button_with_icon||`$Bacon 25%|staticPurpleFrame|4586||\nadd_button_with_icon||`$Onion 2%|staticPurpleFrame|4602||\nadd_button_with_icon||`$Cherry 25%|staticPurpleFrame|4766||\nadd_button_with_icon||`$Tomato 2%|staticPurpleFrame|962||\nadd_button_with_icon||`$Burger 50%|staticPurpleFrame|968||\nadd_button_with_icon||END_LIST|noflags|0||\nadd_spacer|small|\nend_dialog|My_PetAi|Continue||", 500);
		}
		if (page == "pet_settings") {
			VarList::OnDialogRequest(peer, tabs + "\nadd_label_with_icon|big|`wPet's Settings|left|32|\nadd_spacer|small|\nadd_smalltext|`oCurrent Pet's Name: " + pInfo(peer)->pet_name + "|left|" + change_name + "\nadd_spacer|small|\nadd_smalltext|`7When activated around your pet something will appear|left|\nadd_checkbox|master_pet|`oActive Master|" + a + (pInfo(peer)->master_pet ? "1" : "0") + "||" + (pInfo(peer)->pet_level == 50 ? "\nadd_smalltext|`7When activated your pet's name will turn Blue|left|\nadd_checkbox|active_bluename|`oActive BlueName|" + a + (pInfo(peer)->active_bluename ? "1" : "0") + "|" : "") + "\nadd_spacer|small|\nend_dialog|My_PetAi|Continue|Update|", 500);
		}
		if (page == "" or page == "pet_info") {
			VarList::OnDialogRequest(peer, tabs + "\nadd_label_with_icon|big|" + (pInfo(peer)->pet_ID == 9502 ? "`4@Liyue_HTouFly" : pInfo(peer)->pet_ID == 9504 ? "`e@AbyssMage_Fly" : "`b@Uuuzz_Fly") + "|left|" + to_string(pInfo(peer)->pet_ID) + "|\nadd_progress_bar|`wPet Ai``|small|Pet Level " + to_string(pInfo(peer)->pet_level) + "|" + (pInfo(peer)->pet_level == 50 ? to_string(50 * ((pInfo(peer)->pet_level * pInfo(peer)->pet_level) + 2)) : to_string(pInfo(peer)->pet_xp)) + "|" + to_string(50 * ((pInfo(peer)->pet_level * pInfo(peer)->pet_level) + 2)) + "|" + (pInfo(peer)->pet_level == 50 ? "(MAX)" : "(" + to_string(pInfo(peer)->pet_xp) + "/" + to_string(50 * ((pInfo(peer)->pet_level * pInfo(peer)->pet_level) + 2)) + ")") + "|-3669761|\nadd_spacer|small|\nadd_custom_textbox|Pet Preview:|size:medium;color:255,255,0,255;icon:5468|\nadd_button_with_icon||`o" + pInfo(peer)->pet_name + "||" + to_string(pInfo(peer)->pet_ID) + "||\nadd_button_with_icon||END_LIST|noflags|0||\nadd_spacer|small|\nadd_custom_textbox|Pet Health:|size:medium;color:255,255,0,255;icon:384|\nadd_custom_textbox|You can feed your pet to increase it's health.|size:small;color:255,255,0,255;|\nadd_progress_bar|`#Health``:|small||" + to_string(health) + "|100|`o(" + (pInfo(peer)->Pets_health > 40 and pInfo(peer)->Pets_health <= 60 ? "`9" : pInfo(peer)->Pets_health > 0 and pInfo(peer)->Pets_health <= 40 or pInfo(peer)->Pets_health == 0 ? "`4" : "`2") + (pInfo(peer)->Pets_health >= maxhealth ? "FULL" : to_string(health) + "%") + "`o)|-7669761|\nadd_progress_bar|`9Hunger``:|small||" + to_string(hunger) + "|150|`o(" + (pInfo(peer)->Pets_hunger > 40 and pInfo(peer)->Pets_hunger <= 60 ? "`9" : pInfo(peer)->Pets_hunger > 0 and pInfo(peer)->Pets_hunger <= 40 or pInfo(peer)->Pets_hunger == 0 ? "`4" : "`2") + (pInfo(peer)->Pets_hunger >= maxhunger ? "FULL" : to_string(hunger) + "%") + "`o)|16777215|\nadd_spacer|small|\nadd_custom_textbox|Pet Death:|size:medium;color:255,255,0,255;icon:1968|\nadd_custom_textbox|Each time your pet dies you will have to pay way more gems for upgrades.|size:small;color:255,255,0,255;|\nadd_custom_textbox|`4Death times: " + to_string(pInfo(peer)->Pets_Death_Times) + "|size:medium|\nadd_spacer|small|\nadd_custom_textbox|Pet Visibility:|size:medium;color:255,255,0,255;icon:" + to_string(pInfo(peer)->pet_ID) + "|\nadd_custom_textbox|You can equip or unequip your pet, however pet effects work only when pet is equipped|size:small;color:255,255,0,255;|\nadd_inner_image_label_button|unequip_pet|  `wUnequip Pet|game/tiles_page14.rttex|1.6|30|23|32|\nadd_inner_image_label_button|change_pet|  `wChange Pet|game/tiles_page14.rttex|1.6|29|23|32|\nadd_spacer|small|\nadd_custom_textbox|Pet Random Sentences:|size:medium;color:255,255,0,255;icon:8028|\nadd_custom_textbox|Your pet will learn sentences from you that you write, and will write them randomly, and your pet is very smart because it is AI-based so you are free to ask anything. You can type !pet <text> to start a conversation|size:small;color:255,255,0,255;|" + (pInfo(peer)->RandomSentences ? "\nadd_inner_image_label_button|Enable_Sentences| `oEnable Random Sentences|game/tiles_page14.rttex|1.6|28|23|32|" : "\nadd_inner_image_label_button|Enable_Sentences| `oEnable Random Sentences|game/tiles_page14.rttex|1.6|30|23|32|") + "\nadd_spacer|small|\nend_dialog|My_PetAi|Continue||", 500);
		}
	}
	static void Add_Xp(ENetPeer* peer, int amount) {
		int required_ = 50 * ((pInfo(peer)->pet_level * pInfo(peer)->pet_level) + 2);
		if (pInfo(peer)->show_pets) {
			if (pInfo(peer)->pet_level <= 50) {
				if (pInfo(peer)->pet_level == 50) return;
				pInfo(peer)->pet_xp += (Event()->Xp_Event ? Event()->X_Xp * amount : amount);
				pInfo(peer)->pet_xp += (pInfo(peer)->ability_xxp > 0 ? pInfo(peer)->ability_xxp * amount : amount);
				int add_more = 0, timer = 0;
				for (add_more = 0; add_more < 1; add_more++) {
					if (pInfo(peer)->pet_xp >= 50 * ((pInfo(peer)->pet_level * pInfo(peer)->pet_level) + 2)) {
						pInfo(peer)->pet_level++;
						pInfo(peer)->pet_xp -= required_;
						if (pInfo(peer)->pet_level == 10) {
							pInfo(peer)->ability_xgems = 1;
							pInfo(peer)->ability_xxp = 1;
							VarList::OnConsoleMessage(peer, "You've unlocked `$Ability Pet Ai: 1x Gems and 1x Xp``!");
						}
						if (pInfo(peer)->pet_level == 30) {
							pInfo(peer)->ability_xgems = 2;
							pInfo(peer)->ability_xxp = 2;
							VarList::OnConsoleMessage(peer, "Congratulations, your ability of Pet Ai has increased to 2x Gems, 2x Xp and change drop Rubbles``!");
						}
						if (pInfo(peer)->pet_level == 40) {
							VarList::OnConsoleMessage(peer, "Congratulations, your ability of Pet Ai has increased to 5x Opc``!");
						}
						if (pInfo(peer)->pet_level == 50) {
							pInfo(peer)->ability_xgems = 3;
							pInfo(peer)->ability_xxp = 3;
							pInfo(peer)->active_bluename = true;
							VarList::OnConsoleMessage(peer, "Congratulations, your ability of Pet Ai has increased to 3x Gems, 3x Xp and Bluename``!");
						}
						for (ENetPeer* cp_ = server->peers; cp_ < &server->peers[server->peerCount]; cp_++) {
							if (cp_->state != ENET_PEER_STATE_CONNECTED or cp_->data == NULL) continue;
							if (pInfo(peer)->world == pInfo(cp_)->world) {
								VarList::OnConsoleMessage(cp_, "`o" + pInfo(peer)->pet_name + " is now level " + to_string(pInfo(peer)->pet_level) + "!", 0, timer);
								VarList::OnTalkBubble(cp_, pInfo(peer)->pet_netID, "`2" + pInfo(peer)->pet_name + " is now level " + to_string(pInfo(peer)->pet_level) + "!", 2, 0, timer);
								Pet_Ai::Update(cp_, pInfo(peer)->pet_netID, pInfo(peer)->pet_level, pInfo(peer)->master_pet, pInfo(peer)->active_bluename);
							}
						}
					}
					if (pInfo(peer)->pet_xp >= 50 * ((pInfo(peer)->pet_level * pInfo(peer)->pet_level) + 2)) add_more -= 1, timer += 500;
				}
			}
		}
	}
	static int State(Player* p_) {
		int state_ = 0;
		state_ |= true << 0;
		state_ |= true << 2;
		state_ |= true << 3;
		state_ |= true << 4;
		state_ |= true << 5;
		state_ |= true << 24;
		return state_;
	}
	static void Update(ENetPeer* peer, int& botId, int pet_level, bool master = false, bool active_bluename = false) {
		if (pInfo(peer)->world.empty() || pInfo(peer)->pet_netID == 0) return;
		int skinColor = 0x8295C3FF; string a = "";
		PlayerMoving data{ botId, 0, 0x14, 0, Pet_Ai::State(pInfo(peer)), 0, 0, 0, 1200, 0, 0, 0 };
		gamepacket_t p(0, botId);
		p.Insert("OnSetClothing");
		p.Insert(0, 0, 0);
		p.Insert(0, (float)pInfo(peer)->pet_ID, (pInfo(peer)->pet_ID == 9504 and master ? (float)2970 : 0)); //icon id
		p.Insert(0, 0, (pInfo(peer)->pet_ID == 9502 and master ? (float)12240 : 0));
		p.Insert(skinColor);
		if (master) {
			if (pInfo(peer)->pet_ID == 9502) p.Insert((float)11050, 0, 0);
			if (pInfo(peer)->pet_ID == 20088) p.Insert((float)12434, 0, 0);
		}
		else p.Insert(0, 0, 0);
		gamepacket_t p2c(0, botId);
		p2c.Insert("OnCountryState"), p2c.Insert(a + "|showGuild" + (active_bluename ? "|maxLevel" : "") + ("|ccBadge"));
		gamepacket_t p2(0, botId);
		p2.Insert("OnNameChanged");
		p2.Insert("`w" + pInfo(peer)->pet_name + " `4(" + (pet_level == 50 ? "MAX" : to_string(pet_level)) + ")");
		gamepacket_t pf(0, botId);
		pf.Insert("OnFlagMay2019"), pf.Insert(0);
		BYTE* raw = packPlayerMoving(&data);
		int e_ = 8421376 + (pInfo(peer)->pet_ID == 9502 ? 77 : pInfo(peer)->pet_ID == 20088 ? 44 : 148);//punch id
		Memory_Copy(raw + 1, &e_, 3);
		*(uint8_t*)(raw + 2) = 129;
		*(uint8_t*)(raw + 3) = 129;
		*(int*)(raw + 12) = 0;
		*(int*)(raw + 12) = 0;
		*(float*)(raw + 16) = 125;
		world_::data::world(pInfo(peer)->world, [&](ENetPeer* cp_) {
			pf.CreatePacket(cp_), p.CreatePacket(cp_), p2.CreatePacket(cp_), p2c.CreatePacket(cp_);
			send_raw(cp_, 4, raw, 56, ENET_PACKET_FLAG_RELIABLE);
		});
		delete[] raw;
	}
	static void Create(ENetPeer* peer) {
		if (pInfo(peer)->pet_type == -1 && !pInfo(peer)->show_pets) return;
		pInfo(peer)->pet_netID = world_::data::get(pInfo(peer)->world);
		world_::data::world(pInfo(peer)->world, [&](ENetPeer* cp_) {
			VarList::OnSpawn(cp_, "spawn|avatar\nnetID|" + to_string(pInfo(peer)->pet_netID) + "\nuserID|0\ncolrect|0|0|20|30\nposXY|" + to_string((pInfo(peer))->x) + "|" + to_string((pInfo(peer))->y) + "\nname|`w" + pInfo(peer)->pet_name + " `4(" + (pInfo(peer)->pet_level == 50 ? "MAX" : to_string(pInfo(peer)->pet_level)) + ")``\ntitleIcon|{\"PlayerWorldID\":" + to_string(pInfo(peer)->pet_netID) + ",\"WrenchCustomization\":{\"WrenchForegroundID\":-1,\"WrenchIconID\":14360}}\ncountry|ccBadge\ninvis|0\nmstate|1\nsmstate|1\nonlineID|");
			Pet_Ai::Update(cp_, pInfo(peer)->pet_netID, pInfo(peer)->master_pet, pInfo(peer)->active_bluename);
			});
	}
	static void Spawn(ENetPeer* peer) {
		if (not pInfo(peer)->show_pets) return;
		world_::data::world(pInfo(peer)->world, [&](ENetPeer* cp_) {
			VarList::OnSpawn(cp_, "spawn|avatar\nnetID|" + to_string(pInfo(peer)->pet_netID) + "\nuserID|0\ncolrect|0|0|20|30\nposXY|" + to_string((pInfo(peer))->x) + "|" + to_string((pInfo(peer))->y) + "\nname|`w" + pInfo(peer)->pet_name + " `4(" + (pInfo(peer)->pet_level == 50 ? "MAX" : to_string(pInfo(peer)->pet_level)) + ")``\ntitleIcon|{\"PlayerWorldID\":" + to_string(pInfo(peer)->pet_netID) + ",\"WrenchCustomization\":{\"WrenchForegroundID\":-1,\"WrenchIconID\":14360}}\ncountry|ccBadge\ninvis|0\nmstate|1\nsmstate|1\nonlineID|");
			Pet_Ai::Update(cp_, pInfo(peer)->pet_netID, pInfo(peer)->master_pet, pInfo(peer)->active_bluename);
			});
	}
	static void Move(ENetPeer* peer, PlayerMoving* data) {
		if (data->packetType == 18 || data->plantingTree != 0) return;
		float centerX = data->x;
		float centerY = data->y;
		float radius = 64.0f;
		float angle = pInfo(peer)->pet_move;
		const float angleIncrement = 0.1f;
		float newX = centerX + radius * cos(angle);
		float newY = centerY + radius * sin(angle);
		pInfo(peer)->pet_move += angleIncrement;
		data->netID = pInfo(peer)->pet_netID;
		data->x = newX;
		data->y = newY;
		BYTE* raw = packPlayerMoving(data);
		world_::data::world(pInfo(peer)->world, [&](ENetPeer* cp_) {
			send_raw(cp_, 4, raw, 56, ENET_PACKET_FLAG_RELIABLE);
			});
		delete[]raw;
	}
};
class VisualHandle {
public:
	static void Drop(World* world_, WorldDrop drop_, int net_id = -1, bool Flag = false) {
		world_->fresh_world = true;
		if (drop_.id == 745 || drop_.id == 747 || drop_.id == 749) drop_.id = 743;
		if (drop_.id == 629 || drop_.id == 631 || drop_.id == 633 || drop_.id == 635 || drop_.id == 637 || drop_.id == 639 || drop_.id == 641 || drop_.id == 643 || drop_.id == 645 || drop_.id == 647 || drop_.id == 649) drop_.id = 627;
		if (drop_.id == 112) {
			int c_ = 0;
			for (int i_ = 0; i_ < world_->drop_new.size(); i_++) if (abs(world_->drop_new[i_][4] - drop_.y) <= 17 and abs(world_->drop_new[i_][3] - drop_.x) <= 17 and world_->drop_new[i_][0] == 112) c_ += world_->drop_new[i_][1];
			if (c_ != 0) {
				int b_thousand_ = c_ >= 1000 ? c_ / 1000 : 0, b_purple_ = c_ - (b_thousand_ * 1000) >= 100 ? (c_ - (b_thousand_ * 1000)) / 100 : 0, b_green_ = c_ - ((b_thousand_ * 1000) + (b_purple_ * 100)) >= 50 ? (c_ - ((b_thousand_ * 1000) + (b_purple_ * 100))) / 50 : 0, b_red_ = c_ - ((b_thousand_ * 1000) + (b_purple_ * 100)) - (b_green_ * 50) >= 10 ? (c_ - ((b_thousand_ * 1000) + (b_purple_ * 100)) - (b_green_ * 50)) / 10 : 0, b_blue_ = c_ - (b_green_ * 50) - ((b_thousand_ * 1000) + (b_purple_ * 100)) - (b_red_ * 10) >= 5 ? (c_ - (b_green_ * 50) - ((b_thousand_ * 1000) + (b_purple_ * 100)) - (b_red_ * 10)) / 5 : 0, b_yellow_ = c_ - (b_red_ * 10) - (b_green_ * 50) - ((b_thousand_ * 1000) + (b_purple_ * 100)) - (b_blue_ * 5) > 0 ? (c_ - (b_red_ * 10) - (b_green_ * 50) - ((b_thousand_ * 1000) + (b_purple_ * 100)) - (b_blue_ * 5)) / 1 : 0;
				c_ += drop_.count;
				int thousand_ = c_ >= 1000 ? c_ / 1000 : 0, purple_ = c_ - (thousand_ * 1000) >= 100 ? (c_ - (thousand_ * 1000)) / 100 : 0, green_ = c_ - ((thousand_ * 1000) + (purple_ * 100)) >= 50 ? (c_ - ((thousand_ * 1000) + (purple_ * 100))) / 50 : 0, red_ = c_ - ((thousand_ * 1000) + (purple_ * 100)) - (green_ * 50) >= 10 ? (c_ - ((thousand_ * 1000) + (purple_ * 100)) - (green_ * 50)) / 10 : 0, blue_ = c_ - (green_ * 50) - ((thousand_ * 1000) + (purple_ * 100)) - (red_ * 10) >= 5 ? (c_ - (green_ * 50) - ((thousand_ * 1000) + (purple_ * 100)) - (red_ * 10)) / 5 : 0, yellow_ = c_ - (red_ * 10) - (green_ * 50) - ((thousand_ * 1000) + (purple_ * 100)) - (blue_ * 5) > 0 ? (c_ - (red_ * 10) - (green_ * 50) - ((thousand_ * 1000) + (purple_ * 100)) - (blue_ * 5)) / 1 : 0;
				vector<uint8_t> update_gem;
				if (blue_ > b_blue_ or blue_ == 0 and b_blue_ != 0) {
					drop_.count = 5;
					update_gem.push_back(1);
				}
				if (red_ > b_red_ or red_ == 0 and b_red_ != 0) {
					drop_.count = 10;
					update_gem.push_back(5);
				}
				if (green_ > b_green_ or green_ == 0 and b_green_ != 0) {
					drop_.count = 50;
					update_gem.push_back(10);
				}
				if (purple_ > b_purple_) {
					drop_.count = 100;
					update_gem.push_back(50);
				}
				if (thousand_ > b_thousand_) {
					drop_.id = 4490;
					drop_.count = 1;
					update_gem.push_back(100);
				}
				vector<BYTE*>blocks;
				for (int i = 0; i < update_gem.size(); i++) {
					for (int i_ = 0; i_ < world_->drop_new.size(); i_++) {
						if ((abs(world_->drop_new[i_][4] - drop_.y) <= 17 and abs(world_->drop_new[i_][3] - drop_.x) <= 17) and world_->drop_new[i_][0] == 112) {
							if (world_->drop_new[i_][1] == update_gem[i]) {
								PlayerMoving data_{};
								data_.packetType = 14, data_.netID = -2, data_.plantingTree = world_->drop_new[i_][2];
								blocks.push_back(packPlayerMoving(&data_));
								world_->drop_new.erase(world_->drop_new.begin() + i_);
							}
						}
					}
				}
				if (update_gem.size() != 0) {
					for (ENetPeer* cp_ = server->peers; cp_ < &server->peers[server->peerCount]; ++cp_) {
						if (cp_->state != ENET_PEER_STATE_CONNECTED or cp_->data == NULL or pInfo(cp_)->world != world_->name) continue;
						for (auto& b : blocks) send_raw(cp_, 4, b, 56, ENET_PACKET_FLAG_RELIABLE);
					}
					for (auto& b : blocks) free(b);
					blocks.clear();
				}
			}
		}
		if (drop_.id != 112 && items[drop_.id].blockType != BlockTypes::FISH) {
			for (int i_ = 0; i_ < world_->drop_new.size(); i_++) {
				if (world_->drop_new[i_][0] == 0) continue;
				if (abs(world_->drop_new[i_][4] - drop_.y) <= 16 and abs(world_->drop_new[i_][3] - drop_.x) <= 16 and world_->drop_new[i_][0] == drop_.id and world_->drop_new[i_][1] < 200) {
					int truksta_iki_200 = 200 - world_->drop_new[i_][1];
					if (drop_.count > truksta_iki_200 or world_->drop_new[i_][1] + drop_.count <= 200) {
						int drop_atskirai = drop_.count - truksta_iki_200;
						if (world_->drop_new[i_][1] + drop_.count <= 200) {
							world_->drop_new[i_][1] += drop_.count;
							drop_.count = 0;
							goto update;
						}
						drop_.count = drop_atskirai;
						world_->drop_new[i_][1] = 200;
					update:
						PlayerMoving data_{};
						data_.packetType = 14, data_.netID = -3, data_.plantingTree = world_->drop_new[i_][0];
						data_.x = world_->drop_new[i_][3], data_.y = world_->drop_new[i_][4];
						int32_t item = world_->drop_new[i_][2];
						float val = world_->drop_new[i_][1];
						BYTE* raw = packPlayerMoving(&data_);
						Memory_Copy(raw + 8, &item, 4);
						Memory_Copy(raw + 16, &val, 4);
						for (ENetPeer* cp_ = server->peers; cp_ < &server->peers[server->peerCount]; ++cp_) {
							if (cp_->state != ENET_PEER_STATE_CONNECTED or cp_->data == NULL) continue;
							if (pInfo(cp_)->world == world_->name) {
								send_raw(cp_, 4, raw, 56, ENET_PACKET_FLAG_RELIABLE);
							}
						}
						delete[]raw;
						break;
					}
				}
			}
		}
		if (drop_.count != 0) {
			world_->drop_new.push_back({ {drop_.id}, {drop_.count}, {world_->total_drop_uid += 1}, {drop_.x}, {drop_.y} });
			PlayerMoving data_{};
			data_.packetType = 14, data_.x = drop_.x, data_.y = drop_.y, data_.netID = -1, data_.plantingTree = drop_.id;
			BYTE* raw = packPlayerMoving(&data_);
			*(int*)(raw + 8) = net_id;
			*(float*)(raw + 16) = (float)(Flag ? drop_.flag : drop_.count);
			*(__int8*)(raw + 1) = 0;
			for (ENetPeer* cp_ = server->peers; cp_ < &server->peers[server->peerCount]; ++cp_) {
				if (cp_->state != ENET_PEER_STATE_CONNECTED or cp_->data == NULL) continue;
				if (pInfo(cp_)->world == world_->name) {
					send_raw(cp_, 4, raw, 56, ENET_PACKET_FLAG_RELIABLE);
				}
			}
			delete[]raw;
		}
	}
	static void Trade(ENetPeer* p_, int id, int time) {
		PlayerMoving data_{};
		data_.packetType = 19, data_.plantingTree = time, data_.netID = 0;
		data_.x = pInfo(p_)->x + 10, data_.y = pInfo(p_)->y + 16;
		data_.punchX = id, data_.punchY = pInfo(p_)->netID;
		int32_t to_netid = pInfo(p_)->netID;
		BYTE* raw = packPlayerMoving(&data_);
		raw[3] = 5;
		Memory_Copy(raw + 8, &to_netid, 4);
		send_raw(p_, 4, raw, 56, ENET_PACKET_FLAG_RELIABLE);
		delete[] raw;
	}
	static void ReversalEff(ENetPeer* peer, int one, int two) {
		PlayerMoving data_{}; PlayerMoving data{};
		data_.x = pInfo(peer)->lastwrenchx * 32 + 16, data_.y = pInfo(peer)->lastwrenchy * 32 + 16, data_.packetType = 19, data_.plantingTree = 500, data_.punchX = one, data_.punchY = pInfo(peer)->netID;
		int32_t to_netid = pInfo(peer)->netID;
		BYTE* raw = packPlayerMoving(&data_);
		raw[3] = 5;
		Memory_Copy(raw + 8, &to_netid, 4);
		data.packetType = 19, data.netID = -1, data.plantingTree = 0;
		data.x = pInfo(peer)->lastwrenchx * 32 + 16, data.y = pInfo(peer)->lastwrenchy * 32 + 16;
		data.XSpeed = pInfo(peer)->x + 16, data.YSpeed = pInfo(peer)->y + 16;
		data.punchX = two;
		BYTE* raw_ = packPlayerMoving(&data);
		raw_[3] = 6;
		for (ENetPeer* cp_ = server->peers; cp_ < &server->peers[server->peerCount]; cp_++) {
			if (cp_->state != ENET_PEER_STATE_CONNECTED || cp_->data == NULL) break;
			if (pInfo(peer)->world == pInfo(cp_)->world) {
				send_raw(cp_, 4, raw, 56, ENET_PACKET_FLAG_RELIABLE);
				send_raw(cp_, 4, raw_, 56, ENET_PACKET_FLAG_RELIABLE);
			}
		}
		delete[] raw, raw_;
	}
	static int Flagmay(Player* p_, int force = false) {
		int state_ = 0;
		state_ |= Playmods::HasById(p_, 38) << 0;
		state_ |= Playmods::HasById(p_, 99) << 1;
		if (p_->back == 1970 || p_->back == 8530 || p_->hand == 9906 || p_->hand == 9908 || p_->hand == 10384 || p_->hair == 9838) state_ |= 1 << 5;
		if (p_->necklace == 10412) state_ |= 1 << 10;
		if (p_->back == 10426) state_ |= 1 << 11;
		if (items[p_->hand].flagmay != 256) state_ |= 1 << (p_->flagmay ? items[p_->hand].flagmay : items[p_->hand].flagmay - 1);
		if (items[p_->necklace].flagmay != 256) state_ |= 1 << (p_->flagmay ? items[p_->necklace].flagmay : items[p_->necklace].flagmay - 1);
		if (items[p_->feet].flagmay != 256) state_ |= 1 << (p_->flagmay ? items[p_->feet].flagmay : items[p_->feet].flagmay - 1);
		if (p_->mask_dragon && (p_->face == 11506 || p_->face == 11508)) state_ |= 1 << 19;
		if (p_->hair == 12872 || p_->hair == 12874) state_ |= 1 << (p_->panda_spirit == 0 ? 25 : 26);
		return p_->flag_may_form = state_;
	}
	static int Type_Player(Player* p_, int force = false) {
		int state_ = 0;
		state_ |= Playmods::HasById(p_, 101) << 0;
		state_ |= Playmods::HasById(p_, 102) << 1;
		state_ |= Playmods::HasById(p_, 103) << 2;
		state_ |= Playmods::HasById(p_, 104) << 3;
		if (p_->mask == 5712) state_ |= 1 << p_->wild;
		if (p_->feet == 10044) state_ |= 1 << p_->golem;
		if (p_->hand == 6028)state_ |= 1 << 10;
		if (p_->necklace == 6120) state_ |= 1 << 12;
		if (p_->hand == 6262)state_ |= 1 << 13;
		if (p_->feet == 7384 && p_->growformer) state_ |= 1 << 19;
		if (p_->shirt == 7584)state_ |= 1 << (21 + (p_->sprite == 0 ? 1 : p_->sprite));
		return p_->type_player = state_;
	}
	static int State(Player* p_, bool force = false) {
		int state_ = 0;
		state_ |= p_->ghost << 0;
		if (p_->invis) {
			state_ |= 1 << 2;
			state_ |= 1 << 3;
			state_ |= 1 << 5;
		}
		else {
			state_ |= p_->no_hands << 3;
			state_ |= p_->no_body << 5;
		}
		if (p_->xenonite & SETTINGS::XENONITE_BLOCK_DOUBLE_JUMP) {
		}
		else if (p_->xenonite & SETTINGS::XENONITE_FORCE_DOUBLE_JUMP) state_ |= 1 << 1;
		else {
			if ((p_->cheater_settings & SETTINGS::SETTINGS_2 && p_->disable_cheater == 0) || Playmods::HasByName(p_, "double jump") or p_->winter_power or p_->back != 0)	state_ |= 1 << 1;
		}
		state_ |= Playmods::HasByName(p_, "The One Ring") << 2;
		state_ |= Playmods::HasByName(p_, "Mark of Growganoth") << 4;
		if ((p_->cheater_settings & SETTINGS::SETTINGS_3 && p_->disable_cheater == 0)) state_ |= 1 << 10;
		if (p_->pants == 9782 || p_->hair == 9866 || p_->shirt == 9868 || p_->necklace == 12540 || p_->hand == 9906 || p_->hand == 9918 || p_->hand == 10290 || p_->hand == 10384 || p_->hand == 9908 || p_->hair == 9838 || p_->back == 10684) state_ |= 1 << 15;
		if (p_->necklace == 6064) state_ |= 1 << 18;
		if (p_->spotlight) state_ |= 1 << 20;
		if (p_->stage_pineapple < 600) {
			state_ |= (p_->stage_pineapple >= 400 && p_->stage_pineapple < 600) << 21;
			state_ |= (p_->stage_pineapple >= 200 && p_->stage_pineapple < 400) << 22;
		}
		else {
			state_ |= 1 << 21;
			state_ |= 1 << 22;
		}
		state_ |= p_->hs << 24;
		bool antidote_ = false;
		if (Playmods::HasById(p_, 25)) antidote_ = true;
		for (int i_ = 0; i_ < p_->playmods.size(); i_++) {
			if (p_->playmods[i_].id == 90) p_->surgery_type = 28;
			else if (p_->playmods[i_].id == 91) p_->surgery_type = 25;
			else if (p_->playmods[i_].id == 92) p_->surgery_type = 24;
			else if (p_->playmods[i_].id == 93) p_->surgery_type = 27;
			else if (p_->playmods[i_].id == 94) p_->surgery_type = 26;
			else if (p_->playmods[i_].id == 95) p_->surgery_type = 23;
			if (not info_about_playmods[p_->playmods[i_].id - 1][7].empty()) state_ |= true << atoi(info_about_playmods[p_->playmods[i_].id - 1][7].c_str());
			if (antidote_)if (p_->playmods[i_].id == 28 || p_->playmods[i_].id == 27 || p_->playmods[i_].id == 41 || p_->playmods[i_].id == 49 || p_->playmods[i_].id == 48 || p_->playmods[i_].id == 71 || p_->playmods[i_].id == 72 || p_->playmods[i_].id == 73 || p_->playmods[i_].id == 4 || p_->playmods[i_].id == 16 || p_->playmods[i_].id == 17 || p_->playmods[i_].id == 19 || p_->playmods[i_].id == 27 || p_->playmods[i_].id == 42) p_->playmods[i_].time = 1;
		}
		return p_->state_player = state_;
	}
	static int Skin_Color(ENetPeer* peer) {
		vector<PlayMods>::iterator p = find_if(pInfo(peer)->playmods.begin(), pInfo(peer)->playmods.end(), [&](const PlayMods& a) { return not info_about_playmods[a.id - 1][9].empty(); });
		if (p != pInfo(peer)->playmods.end()) {
			char* endptr = NULL;
			string special_id = info_about_playmods[pInfo(peer)->playmods[p - pInfo(peer)->playmods.begin()].id - 1][9];
			return strtoll(special_id.c_str(), &endptr, 10);
		}
		else {
			if ((pInfo(peer)->ghost or pInfo(peer)->hair == 8496) && pInfo(peer)->skin_c == "0,0,0") return -2450;
			else {
				if (Playmods::HasByName(pInfo(peer), "ninja stealth")) return 1684300950;
				else if (pInfo(peer)->face == 10928) return -2139062017;
			}
			return pInfo(peer)->skin;
		}
	}
	static void Nick(ENetPeer* clicked_on, ENetPeer* send_to, string name = "") {
		gamepacket_t p2(0, pInfo(clicked_on)->netID);
		p2.Insert("OnNameChanged");
		p2.Insert(get_player_nick(clicked_on, name));
		p2.Insert(get_player_custom_wrench(clicked_on));
		if (send_to == NULL) {
			for (ENetPeer* cp_ = server->peers; cp_ < &server->peers[server->peerCount]; ++cp_) {
				if (cp_->state != ENET_PEER_STATE_CONNECTED or cp_->data == NULL or pInfo(cp_)->world != pInfo(clicked_on)->world) continue;
				p2.CreatePacket(cp_);
			}
		}
		else p2.CreatePacket(send_to);
	}
};
class Clothing_V2 {
public:
	static void Update(ENetPeer* peer, bool state = false, bool clothing = false) {
		if (pInfo(peer)->world.empty()) pInfo(peer)->update = true;
		bool hide_status = (pInfo(peer)->hider ? true : false);
		PlayerMoving data{ pInfo(peer)->netID, 0, 0x14, 0, (hide_status ? 16777236 : pInfo(peer)->state_player), 0, 0, 0, 1200, (pInfo(peer)->xenonite & SETTINGS::XENONITE_FORCE_STRONG_PUNCH or (pInfo(peer)->cheater_settings & SETTINGS::SETTINGS_9 && pInfo(peer)->disable_cheater == 0) ? 500 : (pInfo(peer)->xenonite & SETTINGS::XENONITE_BLOCK_STRONG_PUNCH ? 200 : pInfo(peer)->strong_punch)), (pInfo(peer)->xenonite & SETTINGS::XENONITE_FORCE_SPEEDY ? 310 : (pInfo(peer)->xenonite & SETTINGS::XENONITE_BLOCK_SPEEDY or hide_status ? 250 : pInfo(peer)->player_speed)), (pInfo(peer)->xenonite & SETTINGS::XENONITE_FORCE_HIGH_JUMP or (pInfo(peer)->cheater_settings & SETTINGS::SETTINGS_7 && pInfo(peer)->disable_cheater == 0) ? 700 : (pInfo(peer)->xenonite & SETTINGS::XENONITE_BLOCK_HIGH_JUMP ? 1000 : pInfo(peer)->high_jump)) };
		gamepacket_t p(0, pInfo(peer)->netID);
		if (state == false || clothing == true) {
			p.Insert("OnSetClothing");
			if (hide_status) {
				p.Insert(0, 0, 0);
				p.Insert(0, (float)pInfo(peer)->hiden_clothing, 0);
				p.Insert(0, 0, 0);
			}
			else {
				p.Insert((float)pInfo(peer)->hair, (float)pInfo(peer)->shirt, (float)pInfo(peer)->pants); // hair shirt pants
				p.Insert((float)pInfo(peer)->feet, (float)pInfo(peer)->face, (float)pInfo(peer)->hand); // feet face hand 
				p.Insert((float)pInfo(peer)->back, (float)pInfo(peer)->mask, (float)pInfo(peer)->necklace); // back mask neck
			}
			p.Insert(VisualHandle::Skin_Color(peer));
			if (hide_status) {
				p.Insert(0, 0, 0);
			}
			else {
				p.Insert((float)pInfo(peer)->ances, 0, 0);
			}
		}
		BYTE* raw = packPlayerMoving(&data);
		int p_eff = 0;
		for (int i_2 = 0; i_2 < EditItem.size(); i_2++) {
			if (EditItem[i_2].ID == pInfo(peer)->hand or EditItem[i_2].ID == pInfo(peer)->necklace or EditItem[i_2].ID == pInfo(peer)->pants or EditItem[i_2].ID == pInfo(peer)->shirt or EditItem[i_2].ID == pInfo(peer)->face or EditItem[i_2].ID == pInfo(peer)->mask or EditItem[i_2].ID == pInfo(peer)->hair or EditItem[i_2].ID == pInfo(peer)->feet or EditItem[i_2].ID == pInfo(peer)->back) {
				if (EditItem[i_2].Punch_Id != 0) p_eff = EditItem[i_2].Punch_Id;
			}
		}
		int e_ = 8421376 + (pInfo(peer)->punched != 0 ? pInfo(peer)->punched : p_eff != 0 ? p_eff : pInfo(peer)->punch_effect);
		Memory_Copy(raw + 1, &e_, 3);
		*(uint8_t*)(raw + 2) = (pInfo(peer)->xenonite & SETTINGS::XENONITE_FORCE_LONG_BUILD or (pInfo(peer)->cheater_settings & SETTINGS::SETTINGS_11 && pInfo(peer)->disable_cheater == 0) ? 129 : (pInfo(peer)->xenonite & SETTINGS::XENONITE_BLOCK_LONG_BUILD ? 128 : pInfo(peer)->build_range));
		*(uint8_t*)(raw + 3) = (pInfo(peer)->xenonite & SETTINGS::XENONITE_FORCE_LONG_PUNCH or (pInfo(peer)->cheater_settings & SETTINGS::SETTINGS_10 && pInfo(peer)->disable_cheater == 0) ? 129 : (pInfo(peer)->xenonite & SETTINGS::XENONITE_BLOCK_LONG_PUNCH ? 128 : pInfo(peer)->punch_range));
		if (pInfo(peer)->eye_lenses != 0xFFFFFFFF) *(uint32_t*)(raw + 8) = pInfo(peer)->eye_lenses;
		*(int*)(raw + 12) = (hide_status ? 0 : pInfo(peer)->type_player);
		*(float*)(raw + 16) = pInfo(peer)->water_speed;
		if (pInfo(peer)->hair_color != 0xFFFFFFFF)	*(uint32_t*)(raw + 44) = pInfo(peer)->hair_color;
		if (pInfo(peer)->eye_drop != 0xFFFFFFFF)	*(uint32_t*)(raw + 48) = pInfo(peer)->eye_drop;
		gamepacket_t pf(0, pInfo(peer)->netID), p2c(0, pInfo(peer)->netID), p3(0, pInfo(peer)->netID);
		if (state == false) {
			pf.Insert("OnFlagMay2019"), pf.Insert((hide_status ? 0 : pInfo(peer)->flag_may_form));
			p2c.Insert("OnCountryState"), p2c.Insert(pInfo(peer)->country + "|showGuild" + (pInfo(peer)->lvl125 ? "|maxLevel" : "") + (pInfo(peer)->donor == 1 ? "|donor" : "") + (pInfo(peer)->master ? "|master" : "") + (pInfo(peer)->ttBadge ? "|ttBadge" : "") + (pInfo(peer)->ccBadge ? "|ccBadge" : "") + (pInfo(peer)->party_animal ? "|euphoriaTitle" : ""));
			p3.Insert("OnSetRoleSkinsAndIcons"), p3.Insert(pInfo(peer)->roleSkin), p3.Insert(pInfo(peer)->roleIcon), p3.Insert(0);
		}
		for (ENetPeer* cp_ = server->peers; cp_ < &server->peers[server->peerCount]; ++cp_) {
			if (cp_->state != ENET_PEER_STATE_CONNECTED or cp_->data == NULL or pInfo(cp_)->world != pInfo(peer)->world) continue;
			if (state == false) {
				if (hide_status == false) {
					if (pInfo(peer)->hand == 3552 && pInfo(peer)->battle_pet.first[0] != 0) {
						PlayerMoving data2;
						data2.netID = pInfo(peer)->netID;
						data2.packetType = 33;
						data2.punchY = (pInfo(peer)->battle_pet.first[3] == 1 ? pInfo(peer)->battle_pet.first[0] : pInfo(peer)->battle_pet.second[0] == 0 ? pInfo(peer)->battle_pet.first[0] : pInfo(peer)->battle_pet.second[0]);
						(pInfo(peer)->battle_pet.first[3] == 1 ? pInfo(peer)->battle_pet.first[3] = 0 : pInfo(peer)->battle_pet.first[3] = 1);
						BYTE* raw2 = packPlayerMoving(&data2);
						send_raw(cp_, 4, raw2, 56, ENET_PACKET_FLAG_RELIABLE);
					}
					if (pInfo(cp_)->hand == 3552 && pInfo(cp_)->battle_pet.first[0] != 0) {
						PlayerMoving data2;
						data2.netID = pInfo(cp_)->netID;
						data2.packetType = 33;
						data2.punchY = (pInfo(cp_)->battle_pet.first[3] == 1 ? pInfo(cp_)->battle_pet.first[0] : pInfo(cp_)->battle_pet.second[0] == 0 ? pInfo(cp_)->battle_pet.first[0] : pInfo(cp_)->battle_pet.second[0]);
						(pInfo(cp_)->battle_pet.first[3] == 1 ? pInfo(cp_)->battle_pet.first[3] = 0 : pInfo(cp_)->battle_pet.first[3] = 1);
						BYTE* raw2 = packPlayerMoving(&data2);
						send_raw(peer, 4, raw2, 56, ENET_PACKET_FLAG_RELIABLE);
					}
					if (pInfo(peer)->b_bill.substr(0, 1) == "1" && pInfo(peer)->b_p != 0) {
						gamepacket_t p5(0, pInfo(peer)->netID);
						p5.Insert("OnBillboardChange"), p5.Insert(pInfo(peer)->netID), p5.Insert(pInfo(peer)->b_i), p5.Insert(pInfo(peer)->b_bill), p5.Insert(pInfo(peer)->b_p), p5.Insert(pInfo(peer)->b_w);
						p5.CreatePacket(cp_);
					}
					if (pInfo(peer)->necklace == 11818) {
						gamepacket_t p(0, pInfo(peer)->netID);
						p.Insert("OnScarfOfSeasons"), p.Insert(pInfo(peer)->i_11818_1), p.Insert(pInfo(peer)->i_11818_2), p.CreatePacket(cp_);
					}
					else if (pInfo(peer)->necklace == 11748) {
						gamepacket_t p(0, pInfo(peer)->netID);
						p.Insert("OnBannerBandolier"), p.Insert(pInfo(peer)->Banner_Item);
						p.Insert(pInfo(peer)->Banner_Flag);
						p.CreatePacket(cp_);
					}
					else if (pInfo(peer)->necklace == 10246) {
						gamepacket_t p(0, pInfo(peer)->netID);
						p.Insert("OnDaylightDragon");
						p.Insert(DaylightDragon.param1);
						p.Insert(DaylightDragon.param2);
						p.Insert(DaylightDragon.param3);
						p.Insert(DaylightDragon.param4);
						p.Insert(DaylightDragon.param5);
						p.Insert(DaylightDragon.param6);
						p.CreatePacket(cp_);
					}
					if (pInfo(peer)->hair == 12958) {
						gamepacket_t p(0, pInfo(peer)->netID);
						p.Insert("OnInfinityCrown");
						p.Insert(pInfo(peer)->Crown_Value);
						p.Insert(pInfo(peer)->Crown_Cycle_Time);
						p.Insert(to_string(pInfo(peer)->Crown_Value_0_0) + "," + to_string(pInfo(peer)->Crown_Value_0_1) + "," + to_string(pInfo(peer)->Crown_Value_0_2));
						p.Insert(to_string(pInfo(peer)->Crown_Value_1_0) + "," + to_string(pInfo(peer)->Crown_Value_1_1) + "," + to_string(pInfo(peer)->Crown_Value_1_2));
						p.CreatePacket(cp_);
					}
					else if (pInfo(peer)->hair == 10674) {
						gamepacket_t p(0, pInfo(peer)->netID);
						p.Insert("OnCernuousMask");
						p.Insert(pInfo(peer)->Aura_Season);
						p.Insert(pInfo(peer)->Trail_Season);
						p.CreatePacket(cp_);
					}
					if (pInfo(peer)->back == 12640) {
						gamepacket_t p(0, pInfo(peer)->netID);
						p.Insert("OnMinokawaWings"), p.Insert(pInfo(peer)->minokawa_wings);
						p.CreatePacket(cp_);
					}
					else if (pInfo(peer)->back == 10424) {
						gamepacket_t p(0, pInfo(peer)->netID);
						p.Insert("OnRiftCape"), p.Insert(pInfo(peer)->flags), p.Insert(pInfo(peer)->cape_t), p.Insert(pInfo(peer)->cape_t2), p.Insert(pInfo(peer)->cape_c), p.Insert(pInfo(peer)->cape_c2), p.Insert(pInfo(peer)->TimeDilation), p.CreatePacket(cp_);
					}
					else if (pInfo(peer)->back == 11478) {
						gamepacket_t p(0, pInfo(peer)->netID);
						p.Insert("OnRiftWings"), p.Insert(pInfo(peer)->_flags), p.Insert(pInfo(peer)->wings_t), p.Insert(pInfo(peer)->wings_t2), p.Insert(pInfo(peer)->wings_c), p.Insert(pInfo(peer)->wings_c2), p.Insert(pInfo(peer)->_TimeDilation), p.CreatePacket(cp_);
					}
					else if (pInfo(peer)->back == 10182) {
						gamepacket_t p(0, pInfo(cp_)->netID);
						p.Insert("OnPianoWingsUpdate");
						p.Insert(pInfo(cp_)->musical_note);
						p.Insert(pInfo(cp_)->musical_volume);
						p.Insert(0);
						p.CreatePacket(peer);
					}
					if (pInfo(peer)->feet == 10666) {
						gamepacket_t p(0, pInfo(peer)->netID);
						p.Insert("OnChangeAirBalloonStyle"), p.Insert(pInfo(peer)->grow_air_ballon);
						p.CreatePacket(cp_);
					}
					if (pInfo(peer)->pants == 10914) {
						gamepacket_t p(0, pInfo(peer)->netID);
						p.Insert("OnChangePureBeingMode"), p.Insert(pInfo(peer)->pure_shadow);
						p.CreatePacket(cp_);
					}
					if (pInfo(peer)->ances == 12634) {
						gamepacket_t p(0, pInfo(peer)->netID);
						p.Insert("OnEqAura"), p.Insert(pInfo(peer)->eq_aura);
						p.CreatePacket(cp_);
					}
					if (not pInfo(peer)->transmuted.empty() or pInfo(peer)->temp_transmute) {
						gamepacket_t p5(0, pInfo(peer)->netID);
						p5.Insert("OnTransmutateLinkDataModified"), p5.Insert(pInfo(peer)->transmuted);
						p5.CreatePacket(cp_);
					}
				}
				pf.CreatePacket(cp_), p2c.CreatePacket(cp_), p3.CreatePacket(cp_);
				if (pInfo(peer)->guild_role != -1) {
					gamepacket_t p4(0, pInfo(peer)->netID);
					p4.Insert("OnGuildDataChanged"), p4.Insert(50478), p4.Insert(79289404);
					if (pInfo(peer)->guild_fg == 0 && pInfo(peer)->guild_bg == 0) p4.Insert(0);
					else p4.Insert((65536 * pInfo(peer)->guild_bg) + pInfo(peer)->guild_fg);
					p4.Insert(pInfo(peer)->guild_role);
					p4.CreatePacket(cp_);
				}
			}
			if (state == false || clothing == true) p.CreatePacket(cp_);
			if (!pInfo(peer)->pet_ClothesUpdated && pInfo(peer)->show_pets) {
				Pet_Ai::Update(cp_, pInfo(peer)->pet_netID, pInfo(peer)->pet_level, pInfo(peer)->master_pet, pInfo(peer)->active_bluename);
			}
			send_raw(cp_, 4, raw, 56, ENET_PACKET_FLAG_RELIABLE);
			if (pInfo(peer)->netID != pInfo(cp_)->netID) {
				bool hide_p2 = (pInfo(cp_)->hider) ? true : false;
				if (state == false || clothing == true) {
					if (hide_p2 == false) {
						if (pInfo(peer)->hand == 3552 && pInfo(peer)->battle_pet.first[0] != 0) {
							PlayerMoving data2;
							data2.netID = pInfo(peer)->netID;
							data2.packetType = 33;
							data2.punchY = (pInfo(peer)->battle_pet.first[3] == 1 ? pInfo(peer)->battle_pet.first[0] : pInfo(peer)->battle_pet.second[0] == 0 ? pInfo(peer)->battle_pet.first[0] : pInfo(peer)->battle_pet.second[0]);
							(pInfo(peer)->battle_pet.first[3] == 1 ? pInfo(peer)->battle_pet.first[3] = 0 : pInfo(peer)->battle_pet.first[3] = 1);
							BYTE* raw2 = packPlayerMoving(&data2);
							send_raw(cp_, 4, raw2, 56, ENET_PACKET_FLAG_RELIABLE);
						}
						if (pInfo(cp_)->hand == 3552 && pInfo(cp_)->battle_pet.first[0] != 0) {
							PlayerMoving data2;
							data2.netID = pInfo(cp_)->netID;
							data2.packetType = 33;
							data2.punchY = (pInfo(cp_)->battle_pet.first[3] == 1 ? pInfo(cp_)->battle_pet.first[0] : pInfo(cp_)->battle_pet.second[0] == 0 ? pInfo(cp_)->battle_pet.first[0] : pInfo(cp_)->battle_pet.second[0]);
							(pInfo(cp_)->battle_pet.first[3] == 1 ? pInfo(cp_)->battle_pet.first[3] = 0 : pInfo(cp_)->battle_pet.first[3] = 1);
							BYTE* raw2 = packPlayerMoving(&data2);
							send_raw(peer, 4, raw2, 56, ENET_PACKET_FLAG_RELIABLE);
						}
						if (pInfo(cp_)->b_bill.substr(0, 1) == "1" && pInfo(cp_)->b_p != 0) {
							gamepacket_t p5(0, pInfo(cp_)->netID);
							p5.Insert("OnBillboardChange"), p5.Insert(pInfo(cp_)->netID), p5.Insert(pInfo(cp_)->b_i), p5.Insert(pInfo(cp_)->b_bill), p5.Insert(pInfo(cp_)->b_p), p5.Insert(pInfo(cp_)->b_w);
							p5.CreatePacket(peer);
						}
						if (pInfo(peer)->updated_clothes) {
							if (pInfo(cp_)->fishing_used != 0) {
								PlayerMoving data_{};
								data_.packet_3 = 0, data_.netID = pInfo(cp_)->netID, data_.x = pInfo(cp_)->f_x, data_.y = pInfo(cp_)->f_y;
								BYTE* raw = packFishMoving(&data_);
								send_raw(peer, 4, raw, 56, ENET_PACKET_FLAG_RELIABLE);
								delete[] raw;
							}
						}
						{
							gamepacket_t p3(0, pInfo(cp_)->netID);
							p3.Insert("OnSetRoleSkinsAndIcons"), p3.Insert(pInfo(cp_)->roleSkin), p3.Insert(pInfo(cp_)->roleIcon), p3.Insert(0), p3.CreatePacket(peer);
						}
						{
							gamepacket_t p2(0, pInfo(cp_)->netID);
							p2.Insert("OnCountryState"), p2.Insert(pInfo(cp_)->country + "|showGuild" + (pInfo(cp_)->lvl125 ? "|maxLevel" : "") + (pInfo(cp_)->donor == 1 ? "|donor" : "") + (pInfo(cp_)->master ? "|master" : "") + (pInfo(cp_)->ttBadge ? "|ttBadge" : "") + (pInfo(cp_)->ccBadge ? "|ccBadge" : "") + (pInfo(cp_)->party_animal ? "|euphoriaTitle" : "")), p2.CreatePacket(peer);
						}
						if (pInfo(cp_)->guild_role != -1) {
							gamepacket_t p4(0, pInfo(cp_)->netID);
							p4.Insert("OnGuildDataChanged"), p4.Insert(50478), p4.Insert(79289404);
							if (pInfo(cp_)->guild_fg == 0 && pInfo(cp_)->guild_bg == 0) 	p4.Insert(0);
							else p4.Insert((65536 * pInfo(cp_)->guild_bg) + pInfo(cp_)->guild_fg);
							p4.Insert(pInfo(cp_)->guild_role), p4.CreatePacket(peer);
						}
						if (pInfo(cp_)->feet == 10666) {
							gamepacket_t p(0, pInfo(cp_)->netID);
							p.Insert("OnChangeAirBalloonStyle"), p.Insert(pInfo(cp_)->grow_air_ballon);
							p.CreatePacket(peer);
						}
						if (pInfo(cp_)->hair == 12958) {
							gamepacket_t p(0, pInfo(cp_)->netID);
							p.Insert("OnInfinityCrown");
							p.Insert(pInfo(cp_)->Crown_Value);
							p.Insert(pInfo(cp_)->Crown_Cycle_Time);
							p.Insert(to_string(pInfo(cp_)->Crown_Value_0_0) + "," + to_string(pInfo(cp_)->Crown_Value_0_1) + "," + to_string(pInfo(cp_)->Crown_Value_0_2));
							p.Insert(to_string(pInfo(cp_)->Crown_Value_1_0) + "," + to_string(pInfo(cp_)->Crown_Value_1_1) + "," + to_string(pInfo(cp_)->Crown_Value_1_2));
							p.CreatePacket(peer);
						}
						else if (pInfo(cp_)->hair == 10674) {
							gamepacket_t p(0, pInfo(cp_)->netID);
							p.Insert("OnCernuousMask");
							p.Insert(pInfo(cp_)->Aura_Season);
							p.Insert(pInfo(cp_)->Trail_Season);
							p.CreatePacket(peer);
						}
						if (pInfo(cp_)->necklace == 11748) {
							gamepacket_t p(0, pInfo(cp_)->netID);
							p.Insert("OnBannerBandolier"), p.Insert(pInfo(cp_)->Banner_Item);
							p.Insert(pInfo(cp_)->Banner_Flag);
							p.CreatePacket(peer);
						}
						else if (pInfo(cp_)->necklace == 11818) {
							gamepacket_t p(0, pInfo(cp_)->netID);
							p.Insert("OnScarfOfSeasons"), p.Insert(pInfo(cp_)->i_11818_1), p.Insert(pInfo(cp_)->i_11818_2), p.CreatePacket(peer);
						}
						else if (pInfo(cp_)->necklace == 10246) {
							gamepacket_t p(0, pInfo(cp_)->netID);
							p.Insert("OnDaylightDragon");
							p.Insert(DaylightDragon.param1);
							p.Insert(DaylightDragon.param2);
							p.Insert(DaylightDragon.param3);
							p.Insert(DaylightDragon.param4);
							p.Insert(DaylightDragon.param5);
							p.Insert(DaylightDragon.param6);
							p.CreatePacket(peer);
						}
						if (not pInfo(cp_)->transmuted.empty() or pInfo(cp_)->temp_transmute) {
							gamepacket_t p5(0, pInfo(cp_)->netID);
							p5.Insert("OnTransmutateLinkDataModified"), p5.Insert(pInfo(cp_)->transmuted);
							p5.CreatePacket(peer);
						}
						if (pInfo(cp_)->pants == 10914) {
							gamepacket_t p(0, pInfo(cp_)->netID);
							p.Insert("OnChangePureBeingMode"), p.Insert(pInfo(cp_)->pure_shadow);
							p.CreatePacket(peer);
						}
						if (pInfo(cp_)->ances == 12634) {
							gamepacket_t p(0, pInfo(cp_)->netID);
							p.Insert("OnEqAura"), p.Insert(pInfo(cp_)->eq_aura);
							p.CreatePacket(peer);
						}
						{
							gamepacket_t p(0, pInfo(cp_)->netID);
							p.Insert("OnFlagMay2019"), p.Insert((hide_p2 ? 0 : pInfo(cp_)->flag_may_form)), p.CreatePacket(peer);
						}
						if (pInfo(cp_)->back == 12640) {
							gamepacket_t p(0, pInfo(cp_)->netID);
							p.Insert("OnMinokawaWings"), p.Insert(pInfo(cp_)->minokawa_wings);
							p.CreatePacket(peer);
						}
						else if (pInfo(cp_)->back == 10424) {
							gamepacket_t p(0, pInfo(cp_)->netID);
							p.Insert("OnRiftCape"), p.Insert(pInfo(cp_)->flags), p.Insert(pInfo(cp_)->cape_t), p.Insert(pInfo(cp_)->cape_t2), p.Insert(pInfo(cp_)->cape_c), p.Insert(pInfo(cp_)->cape_c2), p.Insert(pInfo(cp_)->TimeDilation), p.CreatePacket(peer);
						}
						else if (pInfo(cp_)->back == 11478) {
							gamepacket_t p(0, pInfo(cp_)->netID);
							p.Insert("OnRiftWings"), p.Insert(pInfo(cp_)->_flags), p.Insert(pInfo(cp_)->wings_t), p.Insert(pInfo(cp_)->wings_t2), p.Insert(pInfo(cp_)->wings_c), p.Insert(pInfo(cp_)->wings_c2), p.Insert(pInfo(cp_)->_TimeDilation), p.CreatePacket(peer);
						}
						else if (pInfo(cp_)->back == 10182) {
							gamepacket_t p(0, pInfo(cp_)->netID);
							p.Insert("OnPianoWingsUpdate");
							p.Insert(pInfo(cp_)->musical_note);
							p.Insert(pInfo(cp_)->musical_volume);
							p.Insert(0);
							p.CreatePacket(peer);
						}
					}
				}
				if (state == false || clothing == true) {
					gamepacket_t p(0, pInfo(cp_)->netID);
					p.Insert("OnSetClothing");
					if (hide_p2) {
						p.Insert(0, 0, 0);
						p.Insert(0, (float)pInfo(cp_)->hiden_clothing, 0);
						p.Insert(0, 0, 0);
					}
					else {
						p.Insert((float)pInfo(cp_)->hair, (float)pInfo(cp_)->shirt, (float)pInfo(cp_)->pants); // hair shirt pants
						p.Insert((float)pInfo(cp_)->feet, (float)pInfo(cp_)->face, (float)pInfo(cp_)->hand); // feet face hand 
						p.Insert((float)pInfo(cp_)->back, (float)pInfo(cp_)->mask, (float)pInfo(cp_)->necklace); // back mask neck
					}
					p.Insert(VisualHandle::Skin_Color(cp_));
					if (hide_p2) {
						p.Insert(0, 0, 0);
					}
					else {
						p.Insert((float)pInfo(cp_)->ances, 0, 0);
					}
					p.CreatePacket(peer);
				}
				if (!pInfo(cp_)->pet_ClothesUpdated && pInfo(cp_)->show_pets) {
					Pet_Ai::Update(peer, pInfo(cp_)->pet_netID, pInfo(cp_)->pet_level, pInfo(cp_)->master_pet, pInfo(cp_)->active_bluename);
				}
				PlayerMoving data2{ pInfo(cp_)->netID, 0, 0x14, 0, (hide_p2 ? 16777236 : pInfo(cp_)->state_player), 0, 0, 0, 1200, (pInfo(cp_)->xenonite & SETTINGS::XENONITE_FORCE_STRONG_PUNCH or (pInfo(cp_)->cheater_settings & SETTINGS::SETTINGS_9 && pInfo(cp_)->disable_cheater == 0) ? 500 : (pInfo(cp_)->xenonite & SETTINGS::XENONITE_BLOCK_STRONG_PUNCH ? 200 : pInfo(cp_)->strong_punch)), (pInfo(cp_)->xenonite & SETTINGS::XENONITE_FORCE_SPEEDY ? 310 : (pInfo(cp_)->xenonite & SETTINGS::XENONITE_BLOCK_SPEEDY or hide_p2 ? 250 : pInfo(cp_)->player_speed)), (pInfo(cp_)->xenonite & SETTINGS::XENONITE_FORCE_HIGH_JUMP or (pInfo(cp_)->cheater_settings & SETTINGS::SETTINGS_7 && pInfo(cp_)->disable_cheater == 0) ? 700 : (pInfo(cp_)->xenonite & SETTINGS::XENONITE_BLOCK_HIGH_JUMP ? 1000 : pInfo(cp_)->high_jump)) };
				BYTE* raw_ = packPlayerMoving(&data2);
				int p_eff = 0;
				for (int i_2 = 0; i_2 < EditItem.size(); i_2++) {
					if (EditItem[i_2].ID == pInfo(cp_)->hand or EditItem[i_2].ID == pInfo(cp_)->necklace or EditItem[i_2].ID == pInfo(cp_)->pants or EditItem[i_2].ID == pInfo(cp_)->shirt or EditItem[i_2].ID == pInfo(cp_)->face or EditItem[i_2].ID == pInfo(cp_)->mask or EditItem[i_2].ID == pInfo(cp_)->hair or EditItem[i_2].ID == pInfo(cp_)->feet or EditItem[i_2].ID == pInfo(peer)->back) {
						if (EditItem[i_2].Punch_Id != 0) p_eff = EditItem[i_2].Punch_Id;
					}
				}
				int e_ = 8421376 + (pInfo(cp_)->punched != 0 ? pInfo(cp_)->punched : p_eff != 0 ? p_eff : pInfo(cp_)->punch_effect);
				Memory_Copy(raw_ + 1, &e_, 3); //16777218
				*(uint8_t*)(raw_ + 2) = (pInfo(cp_)->xenonite & SETTINGS::XENONITE_FORCE_LONG_BUILD or (pInfo(cp_)->cheater_settings & SETTINGS::SETTINGS_11 && pInfo(cp_)->disable_cheater == 0) ? 129 : (pInfo(cp_)->xenonite & SETTINGS::XENONITE_BLOCK_LONG_BUILD ? 128 : pInfo(cp_)->build_range));
				*(uint8_t*)(raw_ + 3) = (pInfo(cp_)->xenonite & SETTINGS::XENONITE_FORCE_LONG_PUNCH or (pInfo(cp_)->cheater_settings & SETTINGS::SETTINGS_10 && pInfo(cp_)->disable_cheater == 0) ? 129 : (pInfo(cp_)->xenonite & SETTINGS::XENONITE_BLOCK_LONG_PUNCH ? 128 : pInfo(cp_)->punch_range));
				*(int*)(raw_ + 12) = (hide_p2 ? 0 : pInfo(cp_)->type_player);
				*(float*)(raw_ + 16) = pInfo(cp_)->water_speed;
				if (pInfo(cp_)->hair_color != 0xFFFFFFFF)*(uint32_t*)(raw_ + 44) = pInfo(cp_)->hair_color;
				if (pInfo(cp_)->eye_drop != 0xFFFFFFFF)*(uint32_t*)(raw_ + 48) = pInfo(cp_)->eye_drop;
				if (pInfo(cp_)->eye_lenses != 0xFFFFFFFF) *(uint32_t*)(raw_ + 8) = pInfo(cp_)->eye_lenses;
				send_raw(peer, 4, raw_, 56, ENET_PACKET_FLAG_RELIABLE);
				delete[]raw_;
			}
		}
		delete[]raw;
		pInfo(peer)->updated_clothes = false;
	}
	static void Update_Value(ENetPeer* peer, bool guild = false) {
		if (guild == false) {
			VisualHandle::State(pInfo(peer));
			VisualHandle::Type_Player(pInfo(peer));
			VisualHandle::Flagmay(pInfo(peer));
			pInfo(peer)->strong_punch = Playmods::HasByName(pInfo(peer), "punch range-") ? float(-300) : (Playmods::HasByName(pInfo(peer), "fists o' fury") || pInfo(peer)->hand == 9908 ? 500 : (Playmods::HasByName(pInfo(peer), "Dragonborn") ? 500 : (Playmods::HasByName(pInfo(peer), "devouring souls") ? -300 : 200)));
			pInfo(peer)->high_jump = (Playmods::HasById(pInfo(peer), 18) || Playmods::HasById(pInfo(peer), 72) ? -30 : (Playmods::HasByName(pInfo(peer), "high jump") || Playmods::HasByName(pInfo(peer), "slowfall") ? 700 : 1000));
			if ((pInfo(peer)->cheater_settings & SETTINGS::SETTINGS_4 && pInfo(peer)->disable_cheater == 0)) pInfo(peer)->player_speed = 800;
			else {
				pInfo(peer)->player_speed = 250;
				if (Playmods::HasByName(pInfo(peer), "Speedy")) pInfo(peer)->player_speed = 320;
				if (Playmods::HasById(pInfo(peer), 47) || Playmods::HasById(pInfo(peer), 116)) pInfo(peer)->player_speed = 420;
				if (Playmods::HasById(pInfo(peer), 141) || Playmods::HasById(pInfo(peer), 28) || Playmods::HasById(pInfo(peer), 114) || Playmods::HasByName(pInfo(peer), "Black Magic"))  pInfo(peer)->player_speed = (pInfo(peer)->player_speed == 420 || pInfo(peer)->player_speed == 310 ? 190 : 150);
			}
			pInfo(peer)->water_speed = Playmods::HasByName(pInfo(peer), "water") || pInfo(peer)->hand == 2970 ? 170 : 125;
			if (pInfo(peer)->hand == 11094) {
				pInfo(peer)->build_range = (Role::Moderator(peer) || Role::Administrator(peer) || pInfo(peer)->name_color == "`2" ? 131 : 129);
				pInfo(peer)->punch_range = (Role::Moderator(peer) || Role::Administrator(peer) || pInfo(peer)->name_color == "`2" ? 131 : 129);
			}
			else {
				if (pInfo(peer)->hand == 9908 || pInfo(peer)->hand == 10384) pInfo(peer)->build_range = 133, pInfo(peer)->punch_range = 136;
				else if (pInfo(peer)->hand == 9906) pInfo(peer)->build_range = 130, pInfo(peer)->punch_range = 132;
				else {
					pInfo(peer)->build_range = (Playmods::HasByName(pInfo(peer), "build range") ? 129 : 128);
					if (Playmods::HasByName(pInfo(peer), "punch range")) {
						if (Playmods::HasByName(pInfo(peer), "punch range+"))  pInfo(peer)->punch_range = 130;
						else pInfo(peer)->punch_range = 129;
					}
					else  pInfo(peer)->punch_range = 128;
				}
			}
			if (pInfo(peer)->transmute.size() != 0 or pInfo(peer)->temp_transmute) {
				pInfo(peer)->transmuted.clear();
				for (int i = 0; i < pInfo(peer)->transmute.size(); i++) {
					if (items[pInfo(peer)->transmute[i].first].clothType == items[pInfo(peer)->transmute[i].second].clothType) {
						pInfo(peer)->transmuted += "," + to_string(pInfo(peer)->transmute[i].first) + ":" + to_string(pInfo(peer)->transmute[i].second);
					}
				}
				if (not pInfo(peer)->transmuted.empty()) pInfo(peer)->transmuted.erase(0, 1);
			}
			pInfo(peer)->punch_modifier = 0;
			pInfo(peer)->punch_decrease = false;
			if (Playmods::HasByName(pInfo(peer), "Enhanced Digging")) pInfo(peer)->punch_modifier++;
			if (Playmods::HasByName(pInfo(peer), "punch damage", (pInfo(peer)->punch_modifier == 0 ? false : true))) pInfo(peer)->punch_modifier++;
			if (Playmods::HasByName(pInfo(peer), "Dragoscarf")) pInfo(peer)->punch_modifier++;
			if (Playmods::HasByName(pInfo(peer), "punch range-")) pInfo(peer)->punch_decrease = true;
			pInfo(peer)->punch_effect = items[pInfo(peer)->hand].effect != 0 ? items[pInfo(peer)->hand].effect : items[pInfo(peer)->necklace].effect != 0 ? items[pInfo(peer)->necklace].effect : items[pInfo(peer)->back].effect != 0 ? items[pInfo(peer)->back].effect : items[pInfo(peer)->face].effect != 0 ? items[pInfo(peer)->face].effect : items[pInfo(peer)->mask].effect != 0 ? items[pInfo(peer)->mask].effect : items[pInfo(peer)->hair].effect != 0 ? items[pInfo(peer)->hair].effect : items[pInfo(peer)->feet].effect != 0 ? items[pInfo(peer)->feet].effect : items[pInfo(peer)->shirt].effect != 0 ? items[pInfo(peer)->shirt].effect : items[pInfo(peer)->pants].effect != 0 ? items[pInfo(peer)->pants].effect : items[pInfo(peer)->ances].effect != 0 ? items[pInfo(peer)->ances].effect : 0;
		}
		else {
			bool guild_role = false;
			if (pInfo(peer)->guild_id != 0) {
				uint32_t guild_id = pInfo(peer)->guild_id;
				vector<Guild>::iterator find_guild = find_if(guilds.begin(), guilds.end(), [guild_id](const Guild& a) { return a.guild_id == guild_id; });
				if (find_guild != guilds.end()) {
					Guild* guild_information = &guilds[find_guild - guilds.begin()];
					for (GuildMember member_search : guild_information->guild_members) {
						if (to_lower(member_search.member_name) == to_lower(pInfo(peer)->tankIDName)) {
							pInfo(peer)->guild_role = member_search.role_id;
							if (guild_information->guild_mascot[0] + guild_information->guild_mascot[1] != 0) {
								pInfo(peer)->guild_fg = guild_information->guild_mascot[0];
								pInfo(peer)->guild_bg = guild_information->guild_mascot[1];
							}
							guild_role = true;
							break;
						}
					}
				}
				if (guild_role == false) pInfo(peer)->guild_role = 0;
			}
			else {
				if (guild_role == false) pInfo(peer)->guild_role = -1;
			}
		}
	}
};
class Inventory {
public:
	static int Modify(ENetPeer* p_, const int i_, int& c_, bool upd_inv_visuals = true, bool force_return = false) {
		if (c_ > 200 or i_ > items.size() or i_ <= 0 or i_ == 112 or pInfo(p_)->inv.size() <= 0) return -1;
		if (c_ == 0) upd_inv_visuals = false;
		int ori_ = c_;
		Player* k_ = pInfo(p_);
		int last_free_ = -1;
		for (int a_ = 0; a_ < k_->inv.size(); a_++) {
			if (k_->inv[a_].first == i_) {
				if (k_->inv[a_].second + c_ <= 200) {
					if (c_ < 0 and k_->inv[a_].second + c_ < 0) return -1;
					if (k_->inv[a_].second + c_ == 0) {
						if (pInfo(p_)->b_i == k_->inv[a_].first) {
							if (pInfo(p_)->b_bill.size() < 3) pInfo(p_)->b_bill = "0,0";
							gamepacket_t p5(0, pInfo(p_)->netID);
							p5.Insert("OnBillboardChange"), p5.Insert(pInfo(p_)->netID), p5.Insert(pInfo(p_)->b_i = 0), p5.Insert(pInfo(p_)->b_bill = "0," + pInfo(p_)->b_bill.substr(2, 3)), p5.Insert(pInfo(p_)->b_p), p5.Insert(pInfo(p_)->b_w);
							for (ENetPeer* cp_ = server->peers; cp_ < &server->peers[server->peerCount]; ++cp_) {
								if (cp_->state != ENET_PEER_STATE_CONNECTED or cp_->data == NULL or pInfo(p_)->world != pInfo(cp_)->world) continue;
								p5.CreatePacket(cp_);
							}
						}
						if (items[k_->inv[a_].first].blockType == BlockTypes::CLOTHING) {
							int id_ = k_->inv[a_].first;
							if (items[id_].flagmay != 0) pInfo(p_)->flagmay = 0, Clothing_V2::Update(p_);
							if (id_ == 7584) {
								pInfo(p_)->sprite++;
								if (pInfo(p_)->sprite > 3) pInfo(p_)->sprite = 1;
							}
							else if (id_ == 5712) {
								pInfo(p_)->wild++;
								if (pInfo(p_)->wild > 8) pInfo(p_)->wild = 6;
							}
							else if (id_ == 10666) {
								pInfo(p_)->grow_air_ballon++;
								if (pInfo(p_)->grow_air_ballon > 3) pInfo(p_)->grow_air_ballon = 0;
							}
							else if (id_ == 10044) {
								pInfo(p_)->golem++;
								if (pInfo(p_)->golem > 8) pInfo(p_)->golem = 6;
							}
							else if (id_ == 7384) pInfo(p_)->growformer = (pInfo(p_)->growformer ? 0 : 1);
							else if (id_ == 11506 || id_ == 11508) pInfo(p_)->mask_dragon = (pInfo(p_)->mask_dragon ? 0 : 1);
							else if (id_ == 10914) pInfo(p_)->pure_shadow = (pInfo(p_)->pure_shadow == 1 ? 0 : 1);
							bool stat_ = 0;
							ItemDB item_ = items[id_];
							switch (items[id_].clothType) {
							case ClothTypes::ANCES:
								if (pInfo(p_)->ances == id_) pInfo(p_)->ances = 0, stat_ = 1;
								break;
							case ClothTypes::BACK:
								if (pInfo(p_)->back == id_) pInfo(p_)->back = 0, stat_ = 1;
								break;
							case ClothTypes::FACE:
								if (pInfo(p_)->face == id_) pInfo(p_)->face = 0, stat_ = 1;
								break;
							case ClothTypes::FEET:
								if (pInfo(p_)->feet == id_) pInfo(p_)->feet = 0, stat_ = 1;
								break;
							case ClothTypes::HAIR:
								if (pInfo(p_)->hair == id_) pInfo(p_)->hair = 0, stat_ = 1;
								break;
							case ClothTypes::HAND:
								if (pInfo(p_)->hand == id_) pInfo(p_)->hand = 0, stat_ = 1;
								break;
							case ClothTypes::MASK:
								if (pInfo(p_)->mask == id_) pInfo(p_)->mask = 0, stat_ = 1;
								break;
							case ClothTypes::NECKLACE:
								if (pInfo(p_)->necklace == id_) pInfo(p_)->necklace = 0, stat_ = 1;
								break;
							case ClothTypes::PANTS:
								if (pInfo(p_)->pants == id_) pInfo(p_)->pants = 0, stat_ = 1;
								break;
							case ClothTypes::SHIRT:
								if (pInfo(p_)->shirt == id_) pInfo(p_)->shirt = 0, stat_ = 1;
								break;
							default:
								break;
							}
							if (stat_) {
								Clothing_V2::Update(p_);
								Clothing_V2::Update_Value(p_);
								CAction::Positioned(p_, pInfo(p_)->netID, "audio/change_clothes.wav", 0);
							}
							if (stat_ and item_.on_remove != "" or id_ == 2286 and pInfo(p_)->hand == 2286 or id_ == 2204 and pInfo(p_)->hand == 2204 or id_ == 2558 and pInfo(p_)->hand == 2560 or id_ == 2560 and pInfo(p_)->hand == 2558) {
								CAction::Positioned(p_, pInfo(p_)->netID, "audio/dialog_confirm.wav", 0);
								if (id_ == 2204 || id_ == 2558) VarList::OnConsoleMessage(p_, "" + items[id_].ori_name + " removed. (`$" + items[id_].ori_name + "`` mod removed)");
								else if (id_ == 2286 or id_ == 2560 and pInfo(p_)->geiger_ < 100) {
									VarList::OnConsoleMessage(p_, "" + items[id_].ori_name + " is no longer charging! (`$Charging " + items[id_].ori_name + "`` mod removed)");
									pInfo(p_)->geiger_ = 0;
								}
								else VarList::OnConsoleMessage(p_, item_.on_remove + (item_.playmod != "" ? " (`$" + item_.playmod + "`` mod removed)" : ""));
							}
						}
						k_->inv[a_].first = 0, k_->inv[a_].second = 0;
						goto s_;
					}
					k_->inv[a_].second += c_;
					if (c_ == 0) {
						c_ = k_->inv[a_].second;
						return -1;
					}
					c_ = k_->inv[a_].second;
				}
				else {
					if (force_return) c_ = k_->inv[a_].second;
					return -1;
				}
				goto s_;
			}
			else if (k_->inv[a_].first == 0 and last_free_ == -1) {
				last_free_ = a_;
			}
			if (a_ + 1 == k_->inv.size()) {
				if (last_free_ != -1 and c_ > 0) {
					k_->inv[last_free_].first = i_, k_->inv[last_free_].second = c_;
					goto s_;
				}
				return -1;
			}
		}
	s_:
		if (upd_inv_visuals and c_ != 0) {
			PlayerMoving data_{};
			data_.packetType = 13, data_.plantingTree = i_;
			BYTE* raw = packPlayerMoving(&data_);
			if (force_return) raw[(ori_ < 0 ? 2 : 3)] = ori_ < 0 ? (ori_ * -1) : ori_ - ori_;
			else raw[(ori_ < 0 ? 2 : 3)] = ori_ < 0 ? (ori_ * -1) : ori_;
			send_raw(p_, 4, raw, 56, ENET_PACKET_FLAG_RELIABLE);
			delete[]raw;
		}
		return 0;
	}
	static void Visuals(ENetPeer* peer) {
		size_t inv_size = (pInfo(peer)->inv.size() > 476 ? 476 : pInfo(peer)->inv.size());
		int packetLen = 66 + (inv_size * 4) + 4, MessageType = 0x4, PacketType = 0x9, NetID = -1, CharState = 0x8, state56 = 6 + (inv_size * 4) + 4, bruh = 1;
		BYTE* d_ = new BYTE[packetLen];
		Memory_Set(d_, 0, packetLen);
		Memory_Copy(d_, &MessageType, 1);
		Memory_Copy(d_ + 4, &PacketType, 4);
		Memory_Copy(d_ + 8, &NetID, 4);
		Memory_Copy(d_ + 16, &CharState, 4);
		Memory_Copy(d_ + 56, &state56, 4);
		Memory_Copy(d_ + 60, &bruh, 4);
		Memory_Copy(d_ + 61, &inv_size, 4);
		Memory_Copy(d_ + 65, &inv_size, 4);
		vector<pair<uint16_t, uint8_t>> send_later;
		int offset = 67;
		for (int i_ = 0; i_ < inv_size; ++i_) {
			if (pInfo(peer)->inv[i_].first == 9850 || pInfo(peer)->inv[i_].first == 9812 || pInfo(peer)->inv[i_].first == 7782 || pInfo(peer)->inv[i_].first == 9902 || pInfo(peer)->inv[i_].first == 9636 || pInfo(peer)->inv[i_].first == 9726 || pInfo(peer)->inv[i_].first == 9500 || pInfo(peer)->inv[i_].first == 9584 || pInfo(peer)->inv[i_].first == 9586 || pInfo(peer)->inv[i_].first == 9588 || pInfo(peer)->inv[i_].first == 9590 || pInfo(peer)->inv[i_].first == 9550 || pInfo(peer)->inv[i_].first == 9582 || pInfo(peer)->inv[i_].first == 9580 || pInfo(peer)->inv[i_].first == 9578 || pInfo(peer)->inv[i_].first == 9572 || pInfo(peer)->inv[i_].first == 9570 || pInfo(peer)->inv[i_].first == 9568 || pInfo(peer)->inv[i_].first == 9566 || pInfo(peer)->inv[i_].first == 9564 || pInfo(peer)->inv[i_].first == 9562 || pInfo(peer)->inv[i_].first == 9560 || pInfo(peer)->inv[i_].first == 9558 || pInfo(peer)->inv[i_].first == 9490 || pInfo(peer)->inv[i_].first == 9492 || pInfo(peer)->inv[i_].first == 9490 || pInfo(peer)->inv[i_].first == 9492 || pInfo(peer)->inv[i_].first == 9516 || pInfo(peer)->inv[i_].first == 9540) send_later.push_back(make_pair(pInfo(peer)->inv[i_].first, pInfo(peer)->inv[i_].second));
			else {
				*(__int16*)(d_ + offset) = pInfo(peer)->inv[i_].first; offset += 2;
				*(__int8*)(d_ + offset) = pInfo(peer)->inv[i_].second; offset += 2;
			}
		}
		ENetPacket* const p_ = enet_packet_create(d_, packetLen, ENET_PACKET_FLAG_RELIABLE);
		enet_peer_send(peer, 0, p_);
		delete[] d_;
		if (send_later.size() > 0) {
			PlayerMoving data_{};
			data_.packetType = 13;
			for (int i = 0; i < send_later.size(); i++) {
				data_.plantingTree = send_later[i].first;
				BYTE* raw = packPlayerMoving(&data_);
				raw[3] = send_later[i].second;
				send_raw(peer, 4, raw, 56, ENET_PACKET_FLAG_RELIABLE);
				delete[]raw;
			}
		}
	}
	static int Get_Slots(Player* p_) {
		int free = 0;
		for (int i_ = 0; i_ < p_->inv.size(); i_++) {
			if (p_->inv[i_].first == 0 and p_->inv[i_].second == 0) free++;
		}
		return free;
	}
	static int Contains(ENetPeer* peer, int item_id) {
		vector<pair<int, int>>::iterator p = find_if(pInfo(peer)->inv.begin(), pInfo(peer)->inv.end(), [&](const pair < int, int>& element) { return element.first == item_id; });
		if (p != pInfo(peer)->inv.end()) return pInfo(peer)->inv[p - pInfo(peer)->inv.begin()].second;
		else return 0;
	}
	static bool Check_Max(ENetPeer* p_, int fItemId, int fQuantityAdd) {
		bool isMaxed = false;
		for (int i = 0; i < pInfo(p_)->inv.size(); i++) {
			if (pInfo(p_)->inv[i].first == fItemId && pInfo(p_)->inv[i].second + fQuantityAdd > 200) {
				isMaxed = true;
				break;
			}
		}
		return isMaxed;
	}
	static int HasItemsInInv(ENetPeer* peer, int itemId, int count = -1) {
		int idx = 0;
		for (auto& a : pInfo(peer)->inv) {
			if (a.first == itemId) {
				if (a.second >= count || count == -1)
					return idx;
			}
			idx++;
		}
		return -1;
	}
	static void SaveDropItemMoreTimes(ENetPeer* peer, int itemId, int count) {
		int add = 0, ori_ = count;
		if (Inventory::Contains(peer, itemId) == 0) {
			Inventory::Modify(peer, itemId, add = count, true, true);
			VarList::OnConsoleMessage(peer, "Collected `w" + to_string(ori_) + " " + items[itemId].ori_name + "``." + (items[itemId].rarity > 420 ? "" : " Rarity: `w" + to_string(items[itemId].rarity) + "``") + "");
		}
		else {
			short int currentItemCount = Inventory::Contains(peer, itemId);
			int plusItem = currentItemCount + count;
			int idx = Inventory::HasItemsInInv(peer, itemId, 1);
			if (plusItem > 200) {
				pInfo(peer)->inv[idx].second = 200;
				WorldDrop drop_block_{};
				drop_block_.id = itemId, drop_block_.count = plusItem - 200, drop_block_.x = pInfo(peer)->x + rand() % 17, drop_block_.y = pInfo(peer)->y + rand() % 17;
				std::string name_ = pInfo(peer)->world;
				std::vector<World>::iterator p = find_if(worlds.begin(), worlds.end(), [name_](const World& a) { return a.name == name_; });
				if (p != worlds.end()) {
					World* world_ = &worlds[p - worlds.begin()];
					world_->fresh_world = true;
					VisualHandle::Drop(world_, drop_block_);
				}
				VarList::OnConsoleMessage(peer, "Collected `w" + to_string(200 - currentItemCount) + " " + items[itemId].ori_name + "``." + (items[itemId].rarity > 420 ? "" : " Rarity: `w" + to_string(items[itemId].rarity) + "``") + "");
			}
			else {
				pInfo(peer)->inv[idx].second = currentItemCount + count;
				VarList::OnConsoleMessage(peer, "Collected `w" + to_string(ori_) + " " + items[itemId].ori_name + "``." + (items[itemId].rarity > 420 ? "" : " Rarity: `w" + to_string(items[itemId].rarity) + "``") + "");
			}
			PlayerMoving data_{};
			data_.packetType = 13, data_.plantingTree = itemId;
			BYTE* raw = packPlayerMoving(&data_);
			raw[(ori_ < 0 ? 2 : 3)] = ori_ < 0 ? (ori_ * -1) : ori_ - ori_;
			send_raw(peer, 4, raw, 56, ENET_PACKET_FLAG_RELIABLE);
			delete[]raw;
		}
	}
};
class Subscribtion {
public:
	static void Has(Player* p_, int& id) {
		vector<PlayMods>::iterator p = find_if(p_->playmods.begin(), p_->playmods.end(), [&](const PlayMods& a) { return a.id == 129 || a.id == 130 || a.id == 131 || a.id == 132 || a.id == 133; });
		if (p != p_->playmods.end()) {
			p_->subscriber = true;
			id = p_->playmods[p - p_->playmods.begin()].id;
		}
		else id = 0;
	}
	static void Receive(ENetPeer* peer, int item) {
		pInfo(peer)->subscriber = true;
		if (item == 129) item = 9266;
		else if (item == 130)  item = 6856;
		else if (item == 131)  item = 6858;
		else if (item == 132)  item = 6860;
		else if (item == 133)  item = 8188;
		if (guild_event_type == "Spring Clash") pInfo(peer)->spring_token += items[item].clash_token;
		if (guild_event_type == "Summer Clash") pInfo(peer)->summer_token += items[item].clash_token;
		if (guild_event_type == "Winter Clash") pInfo(peer)->winter_token += items[item].clash_token;
		if (item == 8188) {
			int add = 1;
			if (Inventory::Modify(peer, 242, add) == 0) {
			}
		}
		VarList::OnBuxGems(peer, items[item].max_gems3);
		VarList::OnAddNotification(peer, "Received `o" + Set_Count(items[item].max_gems3) + "`` Gems" + (item == 8188 ? ", " + to_string(items[item].clash_token) + " " + guild_event_type + " Token and 1 World Lock" : " and " + to_string(items[item].clash_token) + " " + guild_event_type + " Token") + "!", "interface/cash_icon_overlay.rttex", "audio/piano_nice.wav.wav");
	}
};
class Clothing {
public:
	static void UnEquip(ENetPeer* p_, const int id_) {
		if (items[id_].flagmay != 0) pInfo(p_)->flagmay = 0, Clothing_V2::Update(p_);
		if (id_ == 7584) {
			pInfo(p_)->sprite++;
			if (pInfo(p_)->sprite > 3) pInfo(p_)->sprite = 1;
		}
		else if (id_ == 5712) {
			pInfo(p_)->wild++;
			if (pInfo(p_)->wild > 8) pInfo(p_)->wild = 6;
		}
		else if (id_ == 10666) {
			pInfo(p_)->grow_air_ballon++;
			if (pInfo(p_)->grow_air_ballon > 3) pInfo(p_)->grow_air_ballon = 0;
		}
		else if (id_ == 10044) {
			pInfo(p_)->golem++;
			if (pInfo(p_)->golem > 8) pInfo(p_)->golem = 6;
		}
		else if (id_ == 7384) pInfo(p_)->growformer = (pInfo(p_)->growformer ? 0 : 1);
		else if (id_ == 11506 || id_ == 11508) pInfo(p_)->mask_dragon = (pInfo(p_)->mask_dragon ? 0 : 1);
		else if (id_ == 10914) pInfo(p_)->pure_shadow = (pInfo(p_)->pure_shadow == 1 ? 0 : 1);
		bool stat_ = 0;
		ItemDB item_ = items[id_];
		switch (items[id_].clothType) {
		case ClothTypes::ANCES:
			if (pInfo(p_)->ances == id_)
				pInfo(p_)->ances = 0, stat_ = 1;
			break;
		case ClothTypes::BACK:
			if (pInfo(p_)->back == id_)
				pInfo(p_)->back = 0, stat_ = 1;
			break;
		case ClothTypes::FACE:
			if (pInfo(p_)->face == id_)
				pInfo(p_)->face = 0, stat_ = 1;
			break;
		case ClothTypes::FEET:
			if (pInfo(p_)->feet == id_)
				pInfo(p_)->feet = 0, stat_ = 1;
			break;
		case ClothTypes::HAIR:
			if (pInfo(p_)->hair == id_)
				pInfo(p_)->hair = 0, stat_ = 1;
			break;
		case ClothTypes::HAND:
			if (pInfo(p_)->hand == id_)
				pInfo(p_)->hand = 0, stat_ = 1;
			break;
		case ClothTypes::MASK:
			if (pInfo(p_)->mask == id_)
				pInfo(p_)->mask = 0, stat_ = 1;
			break;
		case ClothTypes::NECKLACE:
			if (pInfo(p_)->necklace == id_)
				pInfo(p_)->necklace = 0, stat_ = 1;
			break;
		case ClothTypes::PANTS:
			if (pInfo(p_)->pants == id_)
				pInfo(p_)->pants = 0, stat_ = 1;
			break;
		case ClothTypes::SHIRT:
			if (pInfo(p_)->shirt == id_)
				pInfo(p_)->shirt = 0, stat_ = 1;
			break;
		default:
			break;
		}
		if (stat_) {
			Clothing_V2::Update_Value(p_);
			Clothing_V2::Update(p_);
			CAction::Positioned(p_, pInfo(p_)->netID, "audio/change_clothes.wav", 0);
		}
		if (stat_ and item_.on_remove != "" or id_ == 2286 and pInfo(p_)->hand == 2286 or id_ == 2204 and pInfo(p_)->hand == 2204 or id_ == 2558 and pInfo(p_)->hand == 2560 or id_ == 2560 and pInfo(p_)->hand == 2558) {
			CAction::Positioned(p_, pInfo(p_)->netID, "audio/dialog_confirm.wav", 0);
			if (id_ == 2204 || id_ == 2558) VarList::OnConsoleMessage(p_, "" + items[id_].ori_name + " removed. (`$" + items[id_].ori_name + "`` mod removed)");
			else if (id_ == 2286 or id_ == 2560 and pInfo(p_)->geiger_ < 100) {
				VarList::OnConsoleMessage(p_, "" + items[id_].ori_name + " is no longer charging! (`$Charging " + items[id_].ori_name + "`` mod removed)");
				pInfo(p_)->geiger_ = 0;
			}
			else VarList::OnConsoleMessage(p_, item_.on_remove + (item_.playmod != "" ? " (`$" + item_.playmod + "`` mod removed)" : ""));
		}
	}
	static void Equip(ENetPeer* p_, int item) {
		int c_ = 0;
		Inventory::Modify(p_, item, c_);
		if (c_ == 0) return;
		if (item == 9506 and pInfo(p_)->tankIDName != "Ocho") {
			VarList::OnConsoleMessage(p_, "`oThis item can only be used by Ocho");
			return;
		}
		if (pInfo(p_)->pants == 2474 and pInfo(p_)->shirt == 2472 and pInfo(p_)->face == 2466 and pInfo(p_)->hair == 2470 and pInfo(p_)->mask == 2468) Epic_Quest::Add(p_, "Dress up as Locke The Traveling Salesman", pInfo(p_)->epicq_dressup, 1, 1);
		if (pInfo(p_)->ances == item or pInfo(p_)->back == item
			or pInfo(p_)->feet == item or pInfo(p_)->face == item
			or pInfo(p_)->hair == item or pInfo(p_)->hand == item
			or pInfo(p_)->mask == item or pInfo(p_)->necklace == item
			or pInfo(p_)->pants == item or pInfo(p_)->shirt == item) {
			Clothing::UnEquip(p_, item);
		}
		else {
			if (item == 8304) {
				gamepacket_t p;
				p.Insert("OnDialogRequest");
				p.Insert("set_default_color|`o\nadd_label_with_icon|big|`wMagic Magnet``|left|8304|\nadd_spacer|small|" + (string(pInfo(p_)->Magnet_Item != 0 ? "\nadd_label_with_icon|small|`w" + items[pInfo(p_)->Magnet_Item].name + "``|left|" + to_string(pInfo(p_)->Magnet_Item) + "|" : "")) + "\nadd_item_picker|magic_compass_item|`wSelect Item``|Choose an item to pickup!|\nadd_button|clear_item|Clear|noflags|0|0|\nadd_spacer|small|\nend_dialog|magic_compass|Close||");
				p.CreatePacket(p_);
			}
			else if (item == 4746 or item == 4748 or item == 4750) {
				int remove_ = c_ * -1, give_back = abs(remove_);
				if (item == 4746) {
					Inventory::Modify(p_, item, remove_);
					item = 4748;
					Inventory::Modify(p_, item, give_back);
				}
				else if (item == 4748) {
					Inventory::Modify(p_, item, remove_);
					item = 4750;
					Inventory::Modify(p_, item, give_back);
				}
				else if (item == 4750) {
					Inventory::Modify(p_, item, remove_);
					item = 4746;
					Inventory::Modify(p_, item, give_back);
				}
			}
			ClothTypes type_ = items[item].clothType;
			if (type_ == ClothTypes::ANCES) pInfo(p_)->ances = item;
			else if (type_ == ClothTypes::BACK) pInfo(p_)->back = item;
			else if (type_ == ClothTypes::FEET) pInfo(p_)->feet = item;
			else if (type_ == ClothTypes::FACE) pInfo(p_)->face = item;
			else if (type_ == ClothTypes::HAIR) pInfo(p_)->hair = item;
			else if (type_ == ClothTypes::HAND) pInfo(p_)->hand = item;
			else if (type_ == ClothTypes::MASK) pInfo(p_)->mask = item;
			else if (type_ == ClothTypes::NECKLACE) pInfo(p_)->necklace = item;
			else if (type_ == ClothTypes::PANTS) pInfo(p_)->pants = item;
			else if (type_ == ClothTypes::SHIRT) pInfo(p_)->shirt = item;
			if (items[item].on_equip != "") {
				VarList::OnConsoleMessage(p_, items[item].on_equip + (items[item].playmod != "" ? " (`$" + items[item].playmod + "`` mod added)" : ""));
			}
			Clothing_V2::Update_Value(p_);
			Clothing_V2::Update(p_);
			CAction::Positioned(p_, pInfo(p_)->netID, "audio/change_clothes.wav", 0);
			if (item == 3172) {
				if (Playmods::HasById(pInfo(p_), 86, 1)) {
					VarList::OnConsoleMessage(p_, "`2Your briefs have stunned the judge!``");
					VarList::OnTalkBubble(p_, pInfo(p_)->netID, "`2Your briefs have stunned the judge!``", 0, 0);
					int remove = -1;
					Inventory::Modify(p_, 3172, remove);
				}
			}
		}
	}
};
class EventPool {
public:
	class Load {
	public:
		static void Anniversary_Leaderboard() {
			Event()->top_anniversary_list.clear();
			std::vector<std::pair<long long int, std::string>> top_tiers = Event()->top_anniversary;
			sort(top_tiers.begin(), top_tiers.end());
			reverse(top_tiers.begin(), top_tiers.end());
			top_tiers.resize((top_tiers.size() >= 10 ? 10 : top_tiers.size()));
			for (uint8_t i = 0; i < top_tiers.size(); i++) {
				if (i < 20) Event()->top_anniversary_list += "\nadd_smalltext|`w" + to_string(i + 1) + ". " + top_tiers[i].second + ": " + Set_Count(top_tiers[i].first) + "``|left|";
			}
			if (Event()->top_anniversary_list.empty()) Event()->top_anniversary_list = "\nadd_smalltext|`wThe list should update in few minutes..|";
		}
		static void Mines_Leaderboard() {
			top_mines_list.clear();
			std::vector<std::pair<long long int, std::string>> top_tiers = top_mines;
			sort(top_tiers.begin(), top_tiers.end());
			reverse(top_tiers.begin(), top_tiers.end());
			top_tiers.resize((top_tiers.size() >= 10 ? 10 : top_tiers.size()));
			for (uint8_t i = 0; i < top_tiers.size(); i++) {
				if (i < 20) top_mines_list += "\nadd_smalltext|`o" + to_string(i + 1) + ". " + top_tiers[i].second + " - Score: " + Set_Count(top_tiers[i].first) + "|left|";
			}
			if (top_mines_list.empty()) top_mines_list = "\nadd_smalltext|`oThe list should update in few minutes..|";
		}
		static void RoyalPass_Leaderboard() {
			royalpass_list.clear();
			std::vector<std::pair<long long int, std::string>> top_tiers = top_royalpass;
			sort(top_tiers.begin(), top_tiers.end());
			reverse(top_tiers.begin(), top_tiers.end());
			top_tiers.resize((top_tiers.size() >= 10 ? 10 : top_tiers.size()));
			for (uint8_t i = 0; i < top_tiers.size(); i++) {
				if (i < 20) royalpass_list += "\nadd_smalltext|`o" + to_string(i + 1) + ". " + top_tiers[i].second + " - " + Set_Count(top_tiers[i].first) + "|left|";
			}
			if (royalpass_list.empty()) royalpass_list = "\nadd_smalltext|`oThe list should update in few minutes..|";
		}
		static void DailyC_Leaderboard() {
			Event()->top_dailyc_list.clear();
			std::vector<std::pair<long long int, std::string>> top_tiers = Event()->top_dailyc;
			sort(top_tiers.begin(), top_tiers.end());
			reverse(top_tiers.begin(), top_tiers.end());
			top_tiers.resize((top_tiers.size() >= 10 ? 10 : top_tiers.size()));
			for (uint8_t i = 0; i < top_tiers.size(); i++) {
				if (i < 5) Event()->top_dailyc_list += "\nadd_label_with_icon|small|`o#" + to_string(i + 1) + ". `w" + top_tiers[i].second + " (`oPoint: `w" + Set_Count(top_tiers[i].first) + ")|left|1366|\nadd_custom_textbox|`1Reward`o: " + (i + 1 == 1 ? "1x Challenge Crown, 5x Diamond Locks and 50x World Locks" : i + 1 == 2 ? "1x Flaming Aura, 4x Diamond Locks and 50x World Locks" : i + 1 == 3 ? "1x Crystal Cape, 3x Diamond Locks and 50x World Locks" : i + 1 == 4 ? "2 Diamond Locks and 50 World Locks" : "1x Diamond Locks and 50x World Locks") + ".|size:small;|";
			}
			if (Event()->top_dailyc_list.empty()) Event()->top_dailyc_list = "\nadd_smalltext|`oThe list should update in few minutes..|";
		}
		static void Guild_Leaderboard() {
			if (Event()->Can_Event == false) {
				top_basher_list.clear(), top_guild_list.clear(), top_basher_list_shop.clear(), top_guild_list_shop.clear();
				std::vector<std::pair<long long int, std::string>> top_tiers = top_basher;
				sort(top_tiers.begin(), top_tiers.end());
				reverse(top_tiers.begin(), top_tiers.end());
				top_tiers.resize((top_tiers.size() >= 10 ? 10 : top_tiers.size()));
				for (uint8_t i = 0; i < top_tiers.size(); i++) {
					top_basher_list += "\nadd_smalltext|" + to_string(i + 1) + " : " + top_tiers[i].second + ", Score: " + Set_Count(top_tiers[i].first) + "|";
					if (i < 5) top_basher_list_shop += "<CR>" + to_string(i + 1) + " : " + top_tiers[i].second + ", Score: " + Set_Count(top_tiers[i].first) + "";
				}
				if (top_basher_list.empty()) top_basher_list = "\nadd_smalltext|The list should update in few minutes..|";
				top_tiers = top_guild;
				sort(top_tiers.begin(), top_tiers.end());
				reverse(top_tiers.begin(), top_tiers.end());
				top_tiers.resize((top_tiers.size() >= 10 ? 10 : top_tiers.size()));
				for (uint8_t i = 0; i < top_tiers.size(); i++) {
					vector<Guild>::iterator p = find_if(guilds.begin(), guilds.end(), [&](const Guild& a) { return a.guild_id == atoi(top_tiers[i].second.c_str()); });
					if (p != guilds.end()) {
						Guild* guild_information = &guilds[p - guilds.begin()];
						if (i == 0) best_guild = guild_information->guild_name + ", score: " + Set_Count(top_tiers[i].first);
						top_guild_list += "\nadd_button|warp_to_" + guild_information->guild_world + "|`w" + to_string(i + 1) + ". " + guild_information->guild_name + "``|noflags|0|0|\nadd_smalltext|Score: " + (top_tiers[i].first >= 4'294'967'295 ? Set_Count(4294967295) : Set_Count(top_tiers[i].first)) + "|left|" + (top_tiers[i].first >= 4'294'967'295 ? "\nadd_smalltext|`oMaximum score reached!!!|left|" : "") + "";
						if (i < 5) top_guild_list_shop += "<CR>" + to_string(i + 1) + " : " + guild_information->guild_name + ", Score: " + Set_Count(top_tiers[i].first) + "";
					}
				}
				if (top_guild_list.empty()) top_guild_list = "\nadd_smalltext|The list should update in few minutes..|";
			}
			else {
				top_basher_last.clear(), top_guild_last.clear();
				std::vector<std::pair<long long int, std::string>> top_tiers = last_basher_list;
				sort(top_tiers.begin(), top_tiers.end());
				reverse(top_tiers.begin(), top_tiers.end());
				top_tiers.resize((top_tiers.size() >= 10 ? 10 : top_tiers.size()));
				for (uint8_t i = 0; i < top_tiers.size(); i++) {
					top_basher_last += "\nadd_smalltext|" + to_string(i + 1) + " : " + top_tiers[i].second + ", Score: " + Set_Count(top_tiers[i].first) + "|";
					if (i < 5) top_basher_list_shop += "<CR>" + to_string(i + 1) + " : " + top_tiers[i].second + ", Score: " + Set_Count(top_tiers[i].first) + "";
				}
				if (top_basher_last.empty()) top_basher_last = "\nadd_smalltext|The list should update in few minutes..|";
				top_tiers = last_guild_last;
				sort(top_tiers.begin(), top_tiers.end());
				reverse(top_tiers.begin(), top_tiers.end());
				top_tiers.resize((top_tiers.size() >= 10 ? 10 : top_tiers.size()));
				for (uint8_t i = 0; i < top_tiers.size(); i++) {
					vector<Guild>::iterator p = find_if(guilds.begin(), guilds.end(), [&](const Guild& a) { return a.guild_id == atoi(top_tiers[i].second.c_str()); });
					if (p != guilds.end()) {
						Guild* guild_information = &guilds[p - guilds.begin()];
						if (i == 0) best_guild = guild_information->guild_name + ", score: " + Set_Count(top_tiers[i].first);
						top_guild_last += "\nadd_button|warp_to_" + guild_information->guild_world + "|`w" + to_string(i + 1) + ". " + guild_information->guild_name + "``|noflags|0|0|\nadd_smalltext|Score: " + Set_Count(top_tiers[i].first) + "|left|";
						if (i < 5) top_guild_list_shop += "<CR>" + to_string(i + 1) + " : " + guild_information->guild_name + ", Score: " + Set_Count(top_tiers[i].first) + "";
					}
				}
				if (top_guild_last.empty()) top_guild_last = "\nadd_smalltext|The list should update in few minutes..|";
			}
		}
		static void Recycle_Leaderboard() {
			if (wls_event_time - time(nullptr) <= 0) {
				sort(top_wls.begin(), top_wls.end());
				reverse(top_wls.begin(), top_wls.end());
				top_wls.resize((top_wls.size() >= 100 ? 100 : top_wls.size()));
			}
			top_wls_list.clear();
			std::vector<std::pair<long long int, std::string>> top_tiers = top_wls;
			sort(top_tiers.begin(), top_tiers.end());
			reverse(top_tiers.begin(), top_tiers.end());
			top_tiers.resize((top_tiers.size() >= 100 ? 100 : top_tiers.size()));
			for (uint8_t i = 0; i < top_tiers.size(); i++) {
				string reward = "";
				if (i + 1 == 1) reward = "\nadd_smalltext|`3Reward`w: Vip Role Permanent, 5x " + Environment()->server_name + " Coin.|left|";
				if (i + 1 == 2) reward = "\nadd_smalltext|`3Reward`w: Golden Legendary Wings, 5x " + Environment()->server_name + " Coin.|left|";
				if (i + 1 == 3) reward = "\nadd_smalltext|`3Reward`w: Rosewater Dragonlance, 5x " + Environment()->server_name + " Coin.|left|";
				if (i + 1 == 4) reward = "\nadd_smalltext|`3Reward`w: Leonidas Scythe, 5x " + Environment()->server_name + " Coin.|left|";
				if (i + 1 == 5) reward = "\nadd_smalltext|`3Reward`w: 5x " + Environment()->server_name + " Coin.|left|";
				if (i + 1 == 6 or i + 1 == 7 or i + 1 == 8 or i + 1 == 9 or i + 1 == 10)reward = "\nadd_smalltext|`3Reward`w: 5x " + Environment()->server_name + " Coin.|left|";
				if (i + 1 == 11 or i + 1 == 12 or i + 1 == 13 or i + 1 == 14 or i + 1 == 15)reward = "\nadd_smalltext|`3Reward`w: 5x " + Environment()->server_name + " Coin.|left|";
				top_wls_list += "\nadd_label_with_icon|small|`o#" + to_string(i + 1) + ". `w" + top_tiers[i].second + " `o(`$" + Set_Count(top_tiers[i].first) + "`o)|left|1366|" + reward + "|";
			}
			if (top_wls_list.empty()) top_wls_list = "\nadd_label_with_icon|small|The list should update in few minutes..|left|1366|";
		}
		static void Punch_Leaderboard() {
			top_punch_list.clear();
			std::vector<std::pair<long long int, std::string>> top_tiers = top_punch;
			sort(top_tiers.begin(), top_tiers.end());
			reverse(top_tiers.begin(), top_tiers.end());
			top_tiers.resize((top_tiers.size() >= 10 ? 10 : top_tiers.size()));
			for (uint8_t i = 0; i < top_tiers.size(); i++) {
				top_punch_list += "\nadd_label_with_icon|small|`o#" + to_string(i + 1) + ". `w" + top_tiers[i].second + "|left|1366|\nadd_smalltext|`3Punched`o: " + Set_Count(top_tiers[i].first) + "|left|";
			}
			if (top_punch_list.empty()) top_punch_list = "\nadd_smalltext|The list should update in few minutes..|";
		}
		static void Rich_Leaderboard() {
			top_rich_list.clear();
			std::vector<std::pair<long long int, std::string>> topPlayer = top_richest;
			sort(topPlayer.begin(), topPlayer.end());
			reverse(topPlayer.begin(), topPlayer.end());
			topPlayer.resize((topPlayer.size() >= 28 ? 28 : topPlayer.size()));
			for (uint8_t i = 0; i < topPlayer.size(); i++) {
				if (topPlayer[i].first == 0) return;
				top_rich_list += "\nadd_label_with_icon_button|small|`o#" + to_string(i + 1) + ". `w" + topPlayer[i].second + "|left|1366|userinfo_" + topPlayer[i].second + "|\nadd_smalltext|`3Net Worth`o: " + Set_Count(topPlayer[i].first) + "|left|";
			}
			if (top_rich_list == "") top_rich_list = "\nadd_smalltext|The list should update in few minutes.|\nadd_spacer|small|";
		}
		static void DailyC() {
			std::string filePath = "database/json/daily_challenge.json";
			if (std::filesystem::exists(filePath)) {
				std::ifstream file(filePath);
				if (file.peek() == std::ifstream::traits_type::eof()) {
					Logger::Info("ERROR", "JSON file has corrupted : " + filePath);
					return; // File kosong
				}
				nlohmann::json j;
				file >> j;
				file.close();
				Event()->dailyc_name = (!(j.find("dailyc_name") != j.end()) ? Event()->dailyc_name : j["dailyc_name"].get<std::string>());
				Event()->top_dailyc = (!(j.find("top_dailyc") != j.end()) ? Event()->top_dailyc : j["top_dailyc"].get<std::vector<std::pair<long long int, std::string>>>());
				Event()->daily_wait_time = (!(j.find("daily_wait_time") != j.end()) ? Event()->daily_wait_time : j["daily_wait_time"].get<long long int>());
				Event()->daily_current_time = (!(j.find("daily_current_time") != j.end()) ? Event()->daily_current_time : j["daily_current_time"].get<long long int>());
				Event()->DailyChallenge = (!(j.find("dailychallenge") != j.end()) ? Event()->DailyChallenge : j["dailychallenge"].get<bool>());
			}
			else {
				Logger::Info("ERROR", "JSON file not found at : " + filePath);
				return;
			}
		}
		static void DailyQ() {
			std::string filePath = "database/json/daily_reset.json";
			if (std::filesystem::exists(filePath)) {
				std::ifstream file(filePath);
				if (file.peek() == std::ifstream::traits_type::eof()) {
					Logger::Info("ERROR", "JSON file has corrupted : " + filePath);
					return; // File kosong
				}
				nlohmann::json j;
				file >> j;
				file.close();
				Environment()->Dq_Item1 = j["Dq_Item1"].get<uint16_t>();
				Environment()->Dq_Item2 = j["Dq_Item2"].get<uint16_t>();
				Environment()->Dq_Count1 = j["Dq_Count1"].get<uint8_t>();
				Environment()->Dq_Count2 = j["Dq_Count2"].get<uint8_t>();
				Environment()->Dq_Day = j["Dq_Day"].get<uint8_t>();
				Environment()->Ancient_Riddle = (!(j.find("Ancient_Riddle") != j.end()) ? Environment()->Ancient_Riddle : j["Ancient_Riddle"].get<std::vector<std::pair<int, std::string>>>());
			}
			else {
				Logger::Info("ERROR", "JSON file not found at : " + filePath);
				return;
			}
		}
		static void Config() {
			std::string filePath = "VallenServer.json";
			if (std::filesystem::exists(filePath)) {
				std::ifstream file(filePath);
				if (file.peek() == std::ifstream::traits_type::eof()) {
					Logger::Info("ERROR", "JSON file has corrupted : " + filePath);
					return; // File kosong
				}
				nlohmann::json j;
				file >> j;
				file.close();
				/*SERVER*/
				Environment()->server_ip = j["SERVER"]["IP"].get<std::string>();
				Environment()->server_name = j["SERVER"]["NAME"].get<std::string>();
				Environment()->osm_link = j["SERVER"]["OSM_LINK"].get<std::string>();
				Environment()->osm_path = j["SERVER"]["OSM_PATH"].get<std::string>();
				Environment()->proto = j["SERVER"]["PROTOCOL"].get<std::string>();
				Environment()->GT_Version = j["SERVER"]["CLIENT_VERSION"].get<std::string>();
				Environment()->server_version = j["SERVER"]["SERVER_VERSION"].get<std::string>();
				Environment()->discord_url = j["SERVER"]["DISCORD_URL"].get<std::string>();
				Environment()->whatsapp_url = j["SERVER"]["WHATSAPP_URL"].get<std::string>();
				Environment()->website_url = j["SERVER"]["WEBSITE_URL"].get<std::string>();
				Environment()->apikey_ai = j["SERVER"]["APIKEY_AI"].get<std::string>();
				Environment()->Deposit_World = j["SERVER"]["DEPOSIT_WORLD"].get<std::string>();
				/*GAME*/
				C_List.clist = j["GAME"]["CREATOR_LIST"].get<std::vector<std::string>>();
				Environment()->Anti_Proxy = j["GAME"]["ANTI_PROXY"].get<bool>();
				Environment()->Anti_GL = j["GAME"]["ANTI_GROWLAUNCHER"].get<bool>();
				Environment()->Enable_Joystick = j["GAME"]["JOYSTICK"].get<bool>();
				Environment()->AutoFarm_Delay = j["GAME"]["AUTOFARM_DELAY"].get<int>();
				WorldDefault.fg = j["GAME"]["WORLD_FG"].get<uint16_t>();
				WorldDefault.bg = j["GAME"]["WORLD_BG"].get<uint16_t>();
				WorldDefault.rock = j["GAME"]["WORLD_ROCK"].get<uint16_t>();
				WorldDefault.lava = j["GAME"]["WORLD_LAVA"].get<uint16_t>();
				WorldDefault.weather = j["GAME"]["WORLD_WEATHER"].get<uint8_t>();
				Environment()->Stock_ERay = j["GAME"]["STORE_STOCK_ERAY"].get<int>();
				Environment()->Stock_GRay = j["GAME"]["STORE_STOCK_GRAY"].get<int>();
				Environment()->Stock_Mag = j["GAME"]["STORE_STOCK_MAG"].get<int>();
				/*NEWBIE GET*/
				new_get.list = j["NEWBIE_GET"]["ITEMS"].get<std::vector<Newbie_Get>>();
				Logger::Info("INFO", "Succesfully loaded - Configurations");
			}
			else {
				Logger::Info("ERROR", "JSON file not found at : " + filePath);
				return;
			}
		}
		static void Logs() {
			std::string filePath = "database/json/server_logs.json";
			if (std::filesystem::exists(filePath)) {
				std::ifstream file(filePath);
				if (file.peek() == std::ifstream::traits_type::eof()) {
					Logger::Info("ERROR", "JSON file has corrupted : " + filePath);
					return; // File kosong
				}
				nlohmann::json j;
				file >> j;
				file.close();
				Environment()->Logs = (!(j.find("logs") != j.end()) ? Environment()->Logs : j["logs"].get<std::vector<std::pair<std::string, std::string>>>());
			}
			else {
				Logger::Info("ERROR", "JSON file not found at : " + filePath);
				return;
			}
		}
		static void Rcode() {
			std::string filePath = "database/json/redeemcode.json";
			if (std::filesystem::exists(filePath)) {
				std::ifstream file(filePath);
				if (file.peek() == std::ifstream::traits_type::eof()) {
					Logger::Info("ERROR", "JSON file has corrupted : " + filePath);
					return; // File kosong
				}
				nlohmann::json j;
				file >> j;
				file.close();
				redeem_codev2.redeemcode = (!(j.find("redeem_codev2") != j.end()) ? redeem_codev2.redeemcode : j["redeem_codev2"].get<std::vector<Redeem_Code>>());
			}
			else {
				Logger::Info("ERROR", "JSON file not found at : " + filePath);
				return;
			}
		}
		static void EditItemV2() {
			std::string filePath = "database/json/edit_itemv2.json";
			if (std::filesystem::exists(filePath)) {
				std::ifstream file(filePath);
				if (file.peek() == std::ifstream::traits_type::eof()) {
					Logger::Info("ERROR", "JSON file has corrupted : " + filePath);
					return; // File kosong
				}
				nlohmann::json j;
				file >> j;
				file.close();
				auto items_ = j["items"].get<json>();
				if (!items_.empty()) {
					for (int i = 0; i < items_.size(); i++) {
						Edit_ItemV2 cw;
						cw.ID = items_[i]["ID"].get<int>();
						cw.Far_Punch = items_[i]["Far_Punch"].get<int>();
						cw.Punch_Hit = items_[i]["Punch_Hit"].get<int>();
						cw.Punch_Place = items_[i]["Punch_Place"].get<int>();
						cw.Punch_Id = items_[i]["Punch_Id"].get<int>();
						cw.Gems = items_[i]["Gems"].get<int>();
						cw.Xp = items_[i]["Xp"].get<int>();
						cw.Bonus = items_[i]["Bonus"].get<int>();
						cw.Item_Price = items_[i]["Item_Price"].get<int>();
						cw.rarity = items_[i]["rarity"].get<int16_t>();
						cw.Name = items_[i]["Name"].get<std::string>();
						cw.Desc = items_[i]["Desc"].get<std::string>();
						cw.Extra_Drops = items_[i]["Extra_Drops"].get<std::vector<std::pair<int, int>>>();
						cw.property_untradeable = items_[i]["property_untradeable"].get<bool>();
						cw.property_blacklist = items_[i]["property_blacklist"].get<bool>();
						cw.property_gacha = items_[i]["property_gacha"].get<bool>();
						cw.property_unobtainable = items_[i]["property_unobtainable"].get<bool>();
						cw.property_blocked = items_[i]["property_blocked"].get<bool>();
						cw.property_farmable = (!(items_[i].find("property_farmable") != items_[i].end()) ? cw.property_farmable : items_[i]["property_farmable"].get<bool>());
						cw.Change_Drop_Seeds = (!(items_[i].find("Change_Drop_Seeds") != items_[i].end()) ? cw.Change_Drop_Seeds : items_[i]["Change_Drop_Seeds"].get<int>());
						EditItem.push_back(cw);
					}
				}
			}
			else {
				Logger::Info("ERROR", "JSON file not found at : " + filePath);
				return;
			}
		}
		static void Guilds() {
			std::string filePath = "database/json/guild_events.json";
			if (std::filesystem::exists(filePath)) {
				std::ifstream file(filePath);
				if (file.peek() == std::ifstream::traits_type::eof()) {
					Logger::Info("ERROR", "JSON file has corrupted : " + filePath);
					return; // File kosong
				}
				nlohmann::json j;
				file >> j;
				file.close();
				Event()->Can_Event = (!(j.find("can_event") != j.end()) ? Event()->Can_Event : j["can_event"].get<bool>());
				Event()->Wait_Next = (!(j.find("wait_next") != j.end()) ? Event()->Wait_Next : j["wait_next"].get<bool>());
				next_event = (!(j.find("next_event") != j.end()) ? next_event : j["next_event"].get<long long int>());
				wait_event = (!(j.find("wait_event") != j.end()) ? wait_event : j["wait_event"].get<long long int>());
				current_event = (!(j.find("current_event") != j.end()) ? current_event : j["current_event"].get<long long int>());
				event_item = (!(j.find("event_item") != j.end()) ? event_item : j["event_item"].get<int>());
				guild_t1 = (!(j.find("guild_t1") != j.end()) ? guild_t1 : j["guild_t1"].get<int>());
				guild_t2 = (!(j.find("guild_t2") != j.end()) ? guild_t2 : j["guild_t2"].get<int>());
				guild_t3 = (!(j.find("guild_t3") != j.end()) ? guild_t3 : j["guild_t3"].get<int>());
				guild_t4 = (!(j.find("guild_t4") != j.end()) ? guild_t4 : j["guild_t4"].get<int>());
				guild_t5 = (!(j.find("guild_t5") != j.end()) ? guild_t5 : j["guild_t5"].get<int>());
				guild_t6 = (!(j.find("guild_t6") != j.end()) ? guild_t6 : j["guild_t6"].get<int>());
				guild_t7 = (!(j.find("guild_t7") != j.end()) ? guild_t7 : j["guild_t7"].get<int>());
				guild_t8 = (!(j.find("guild_t8") != j.end()) ? guild_t8 : j["guild_t8"].get<int>());
				guild_t9 = (!(j.find("guild_t9") != j.end()) ? guild_t9 : j["guild_t9"].get<int>());
				guild_t10 = (!(j.find("guild_t10") != j.end()) ? guild_t10 : j["guild_t10"].get<int>());
				guild_t11 = (!(j.find("guild_t11") != j.end()) ? guild_t11 : j["guild_t11"].get<int>());
				guild_t12 = (!(j.find("guild_t12") != j.end()) ? guild_t12 : j["guild_t12"].get<int>());
				guild_t13 = (!(j.find("guild_t13") != j.end()) ? guild_t13 : j["guild_t13"].get<int>());
				guild_t14 = (!(j.find("guild_t14") != j.end()) ? guild_t14 : j["guild_t14"].get<int>());
				guild_t15 = (!(j.find("guild_t15") != j.end()) ? guild_t15 : j["guild_t15"].get<int>());
				guild_t16 = (!(j.find("guild_t16") != j.end()) ? guild_t16 : j["guild_t16"].get<int>());
				guild_t17 = (!(j.find("guild_t17") != j.end()) ? guild_t17 : j["guild_t17"].get<int>());
				guild_t18 = (!(j.find("guild_t18") != j.end()) ? guild_t18 : j["guild_t18"].get<int>());
				guild_t19 = (!(j.find("guild_t19") != j.end()) ? guild_t19 : j["guild_t19"].get<int>());
				guild_t20 = (!(j.find("guild_t20") != j.end()) ? guild_t20 : j["guild_t20"].get<int>());
				guild_t21 = (!(j.find("guild_t21") != j.end()) ? guild_t21 : j["guild_t21"].get<int>());
				guild_t22 = (!(j.find("guild_t22") != j.end()) ? guild_t22 : j["guild_t22"].get<int>());
				guild_t23 = (!(j.find("guild_t23") != j.end()) ? guild_t23 : j["guild_t23"].get<int>());
				guild_t24 = (!(j.find("guild_t24") != j.end()) ? guild_t24 : j["guild_t24"].get<int>());
				guild_t25 = (!(j.find("guild_t25") != j.end()) ? guild_t25 : j["guild_t25"].get<int>());
				personal_t1 = (!(j.find("personal_t1") != j.end()) ? personal_t1 : j["personal_t1"].get<int>());
				personal_t2 = (!(j.find("personal_t2") != j.end()) ? personal_t2 : j["personal_t2"].get<int>());
				personal_t3 = (!(j.find("personal_t3") != j.end()) ? personal_t3 : j["personal_t3"].get<int>());
				personal_t4 = (!(j.find("personal_t4") != j.end()) ? personal_t4 : j["personal_t4"].get<int>());
				personal_t5 = (!(j.find("personal_t5") != j.end()) ? personal_t5 : j["personal_t5"].get<int>());
				personal_t6 = (!(j.find("personal_t6") != j.end()) ? personal_t6 : j["personal_t6"].get<int>());
				personal_t7 = (!(j.find("personal_t7") != j.end()) ? personal_t7 : j["personal_t7"].get<int>());
				personal_t8 = (!(j.find("personal_t8") != j.end()) ? personal_t8 : j["personal_t8"].get<int>());
				personal_t9 = (!(j.find("personal_t9") != j.end()) ? personal_t9 : j["personal_t9"].get<int>());
				personal_t10 = (!(j.find("personal_t10") != j.end()) ? personal_t10 : j["personal_t10"].get<int>());
				personal_t11 = (!(j.find("personal_t11") != j.end()) ? personal_t11 : j["personal_t11"].get<int>());
				personal_t12 = (!(j.find("personal_t12") != j.end()) ? personal_t12 : j["personal_t12"].get<int>());
				personal_t13 = (!(j.find("personal_t13") != j.end()) ? personal_t13 : j["personal_t13"].get<int>());
				personal_t14 = (!(j.find("personal_t14") != j.end()) ? personal_t14 : j["personal_t14"].get<int>());
				personal_t15 = (!(j.find("personal_t15") != j.end()) ? personal_t15 : j["personal_t15"].get<int>());
				personal_t16 = (!(j.find("personal_t16") != j.end()) ? personal_t16 : j["personal_t16"].get<int>());
				personal_t17 = (!(j.find("personal_t17") != j.end()) ? personal_t17 : j["personal_t17"].get<int>());
				personal_t18 = (!(j.find("personal_t18") != j.end()) ? personal_t18 : j["personal_t18"].get<int>());
				personal_t19 = (!(j.find("personal_t19") != j.end()) ? personal_t19 : j["personal_t19"].get<int>());
				personal_t20 = (!(j.find("personal_t20") != j.end()) ? personal_t20 : j["personal_t20"].get<int>());
				old_event_item = (!(j.find("old_event_item") != j.end()) ? old_event_item : j["old_event_item"].get<int>());
				guild_event_id = (!(j.find("guild_event_id") != j.end()) ? guild_event_id : j["guild_event_id"].get<int>());
				guild_event_type = (!(j.find("guild_event_type") != j.end()) ? guild_event_type : j["guild_event_type"].get<std::string>());
				top_guild = (!(j.find("top_guild") != j.end()) ? top_guild : j["top_guild"].get<std::vector<std::pair<long long int, std::string>>>());
				top_basher = (!(j.find("top_basher") != j.end()) ? top_basher : j["top_basher"].get<std::vector<std::pair<long long int, std::string>>>());
				last_guild_last = (!(j.find("last_guild_last") != j.end()) ? last_guild_last : j["last_guild_last"].get<std::vector<std::pair<long long int, std::string>>>());
				last_basher_list = (!(j.find("last_basher_list") != j.end()) ? last_basher_list : j["last_basher_list"].get<std::vector<std::pair<long long int, std::string>>>());
				top_guild_winners = (!(j.find("top_guild_winners") != j.end()) ? top_guild_winners : j["top_guild_winners"].get<std::vector<std::pair<int, std::string>>>());
				top_basher_winners = (!(j.find("top_basher_winners") != j.end()) ? top_basher_winners : j["top_basher_winners"].get<std::vector<std::pair<int, std::string>>>());
			}
			else {
				Logger::Info("ERROR", "JSON file not found at : " + filePath);
				return; 
			}
		}
		static void All() {
			std::string filePath = "database/json/server_events.json";
			if (std::filesystem::exists(filePath)) {
				std::ifstream file(filePath);
				if (file.peek() == std::ifstream::traits_type::eof()) {
					Logger::Info("ERROR", "JSON file has corrupted : " + filePath);
					return; // File kosong
				}
				nlohmann::json j;
				file >> j;
				file.close();
				Disable_Item.id = (!(j.find("Disable_Items") != j.end()) ? Disable_Item.id : j["Disable_Items"].get<vector<int>>());
				top_wls = (!(j.find("top_wls") != j.end()) ? top_wls : j["top_wls"].get<std::vector<std::pair<long long int, std::string>>>());
				total_wls_recycled = (!(j.find("total_wls_recycled") != j.end()) ? total_wls_recycled : j["total_wls_recycled"].get<long long int>());
				wls_event_time = (!(j.find("wls_event_time") != j.end()) ? wls_event_time : j["wls_event_time"].get<long long int>());
				Event()->Anniversary_Time = (!(j.find("Anniversary_Time") != j.end()) ? Event()->Anniversary_Time : j["Anniversary_Time"].get<long long int>());
				world_rating = (!(j.find("world_rating") != j.end()) ? world_rating : j["world_rating"].get<std::vector<WorldRate>>());
				Environment()->World_Report = (!(j.find("World_Report") != j.end()) ? Environment()->World_Report : j["World_Report"].get<std::vector<std::pair<std::string, std::string>>>());
				Environment()->Player_Report = (!(j.find("Player_Report") != j.end()) ? Environment()->Player_Report : j["Player_Report"].get<std::vector<std::pair<std::string, std::string>>>());
				Environment()->Rid_Bans = (!(j.find("ridbans") != j.end()) ? Environment()->Rid_Bans : j["ridbans"].get<std::vector<std::string>>());
				Environment()->BlackList = (!(j.find("blacklist") != j.end()) ? Environment()->BlackList : j["blacklist"].get<std::vector<std::string>>());
				Environment()->WOTD = (!(j.find("WOTD") != j.end()) ? Environment()->WOTD : j["WOTD"].get<std::vector<std::pair<std::string, std::string>>>());
				Environment()->WOTW = (!(j.find("WOTW") != j.end()) ? Environment()->WOTW : j["WOTW"].get<std::vector<std::pair<std::string, std::string>>>());
				Environment()->World_Menu = (!(j.find("world_menu") != j.end()) ? Environment()->World_Menu : j["world_menu"].get<vector<string>>());
				Environment()->Npc_MarketPlace = (!(j.find("Npc_MarketPlace") != j.end()) ? Environment()->Npc_MarketPlace : j["Npc_MarketPlace"].get<std::vector<std::tuple<int, int, int>>>());
				top_royalpass = (!(j.find("top_royalpass") != j.end()) ? top_royalpass : j["top_royalpass"].get<std::vector<std::pair<long long int, std::string>>>());
				top_mines = (!(j.find("top_mines") != j.end()) ? top_mines : j["top_mines"].get<std::vector<std::pair<long long int, std::string>>>());
				top_punch = (!(j.find("top_punch") != j.end()) ? top_punch : j["top_punch"].get<std::vector<std::pair<long long int, std::string>>>());
				top_online = (!(j.find("top_online") != j.end()) ? top_online : j["top_online"].get<std::vector<std::pair<long long int, std::string>>>());
				top_richest = (!(j.find("top_richest") != j.end()) ? top_richest : j["top_richest"].get<std::vector<std::pair<long long int, std::string>>>());
				Event()->top_anniversary = (!(j.find("top_anniversary") != j.end()) ? Event()->top_anniversary : j["top_anniversary"].get<std::vector<std::pair<long long int, std::string>>>());
				Event()->Xp_Event = (!(j.find("Xp_Event") != j.end()) ? Event()->Xp_Event : j["Xp_Event"].get<bool>());
				Event()->Gems_Event = (!(j.find("Gems_Event") != j.end()) ? Event()->Gems_Event : j["Gems_Event"].get<bool>());
				Event()->Exchange_Event = (!(j.find("Exchange_Event") != j.end()) ? Event()->Exchange_Event : j["Exchange_Event"].get<bool>());
				Event()->X_Gems = (!(j.find("x_gems") != j.end()) ? Event()->X_Gems : j["x_gems"].get<int>());
				Event()->X_Xp = (!(j.find("x_xp") != j.end()) ? Event()->X_Xp : j["x_xp"].get<int>());
				Event()->X_Exchange = (!(j.find("x_exchange") != j.end()) ? Event()->X_Exchange : j["x_exchange"].get<int>());
				Event()->x_gems_time = (!(j.find("x_gems_time") != j.end()) ? Event()->x_gems_time : j["x_gems_time"].get<long long int>());
				Event()->x_xp_time = (!(j.find("x_xp_time") != j.end()) ? Event()->x_xp_time : j["x_xp_time"].get<long long int>());
				Event()->x_exchange_time = (!(j.find("x_exchange_time") != j.end()) ? Event()->x_exchange_time : j["x_exchange_time"].get<long long int>());
				Event()->Summerfest = (!(j.find("Summerfest") != j.end()) ? Event()->Summerfest : j["Summerfest"].get<bool>());
				Event()->Carnival = (!(j.find("Carnival") != j.end()) ? Event()->Carnival : j["Carnival"].get<bool>());
				Event()->Valentine = (!(j.find("Valentine") != j.end()) ? Event()->Valentine : j["Valentine"].get<bool>());
				Event()->Halloween = (!(j.find("Growganoth") != j.end()) ? Event()->Halloween : j["Growganoth"].get<bool>());
				Event()->Harvest_Festival = (!(j.find("Harvest_Festival") != j.end()) ? Event()->Harvest_Festival : j["Harvest_Festival"].get<bool>());
				Event()->Anniversary = (!(j.find("Anniversary") != j.end()) ? Event()->Anniversary : j["Anniversary"].get<bool>());
				Environment()->Fake_Online = (!(j.find("Fake_Online") != j.end()) ? Environment()->Fake_Online : j["Fake_Online"].get<bool>());
				Environment()->top_points = (!(j.find("top_points") != j.end()) ? Environment()->top_points : j["top_points"].get<std::vector<std::pair<int, std::string>>>());
				Environment()->top_yesterday = (!(j.find("top_yesterday") != j.end()) ? Environment()->top_yesterday : j["top_yesterday"].get<std::vector<std::pair<int, std::string>>>());
				Environment()->top_overall = (!(j.find("top_overall") != j.end()) ? Environment()->top_overall : j["top_overall"].get<std::vector<std::pair<int, std::string>>>());
				Environment()->Verifed_Csn_World = (!(j.find("verifed_csn_world") != j.end()) ? Environment()->Verifed_Csn_World : j["verifed_csn_world"].get<std::vector<std::string>>());
				Environment()->Waiting_Verif_Csn = (!(j.find("waiting_verif_csn") != j.end()) ? Environment()->Waiting_Verif_Csn : j["waiting_verif_csn"].get<std::vector<std::string>>());
				WinterFest.Heart_Size = (!(j.find("WinterFest.Heart_Size") != j.end()) ? WinterFest.Heart_Size : j["WinterFest.Heart_Size"].get<int>());
				WinterFest.GiftedGrowch = (!(j.find("WinterFest.GiftedGrowch") != j.end()) ? WinterFest.GiftedGrowch : j["WinterFest.GiftedGrowch"].get<int>());
				WinterFest.Progress_Gifted = (!(j.find("WinterFest.Progress_Gifted") != j.end()) ? WinterFest.Progress_Gifted : j["WinterFest.Progress_Gifted"].get<int>());
				WinterFest.Growch_Happy_Time = (!(j.find("WinterFest.Growch_Happy_Time") != j.end()) ? WinterFest.Growch_Happy_Time : j["WinterFest.Growch_Happy_Time"].get<long long int>());
				WinterFest.Calendar_Sold = (!(j.find("WinterFest.Calendar_Sold") != j.end()) ? WinterFest.Calendar_Sold : j["WinterFest.Calendar_Sold"].get<int>());
				WinterFest.Calendar_Stock = (!(j.find("WinterFest.Calendar_Stock") != j.end()) ? WinterFest.Calendar_Stock : j["WinterFest.Calendar_Stock"].get<int>());
				WinterFest.Bonanza_Sold = (!(j.find("WinterFest.Bonanza_Sold") != j.end()) ? WinterFest.Bonanza_Sold : j["WinterFest.Bonanza_Sold"].get<int>());
				WinterFest.Bonanza_Stock = (!(j.find("WinterFest.Bonanza_Stock") != j.end()) ? WinterFest.Bonanza_Stock : j["WinterFest.Bonanza_Stock"].get<int>());
				WinterFest.Active = (!(j.find("WinterFest.Active") != j.end()) ? WinterFest.Active : j["WinterFest.Active"].get<bool>());
				WinterFest.Growch_Happy = (!(j.find("WinterFest.Growch_Happy") != j.end()) ? WinterFest.Growch_Happy : j["WinterFest.Growch_Happy"].get<bool>());
			}
			else {
				Logger::Info("ERROR", "JSON file not found at : " + filePath);
				return;
			}
			struct tm newtime;
			time_t now = time(0);
#ifdef _WIN32
			localtime_s(&newtime, &now);
#elif defined(__linux__)
			localtime_r(&now, &newtime);
#endif
			today_day = newtime.tm_mday;
			{
				std::ifstream file_info("database/trade_scan/item_price.txt");
				if (file_info.is_open()) {
					string line_info;
					while (getline(file_info, line_info)) {
						vector<string> ok = explode("|", line_info);
						int item_idas = atoi(ok[0].c_str());
						if (item_idas == 9812 || item_idas == 9918 || item_idas == 9496 || item_idas == 9570 || item_idas == 9916 || item_idas == 10644 || item_idas == 9228) {
						}
						else {
							Environment()->price_item.push_back({ atoi(ok[0].c_str()), atoi(ok[1].c_str()) * 3 });
							items[item_idas].scan_price = atoi(ok[1].c_str());
						}
					}
				}
				file_info.close();
			}
			Environment()->Wotd_Worlds.clear();
			for (const auto& wlist : Environment()->WOTD) {
				Environment()->Wotd_Worlds.push_back(wlist.first);
			}
			Gtps_Shop::Load();
			EventPool::Load::Guilds(), EventPool::Load::DailyC(), EventPool::Load::Config(), EventPool::Load::EditItemV2(), EventPool::Load::Logs(), EventPool::Load::DailyQ(), EventPool::Load::Rcode();
			for (const auto& entry : fs::directory_iterator("database/guilds")) {
				if (!fs::is_directory(entry.path())) {
					json guild_read;
					std::ifstream read_guild(entry.path(), ifstream::binary);
					if (read_guild.peek() == std::ifstream::traits_type::eof()) {
						Logger::Info("ERROR", "Error: JSON file has corrupted : database/guilds/" + entry.path().filename().string());
						return; // File kosong
					}
					read_guild >> guild_read;
					read_guild.close();
					Guild new_guild{};
					new_guild.guild_id = guild_read["guild_id"].get<int>();
					new_guild.guild_name = guild_read["guild_name"].get<std::string>();
					new_guild.guild_description = guild_read["guild_description"].get<std::string>();
					new_guild.guild_notebook = guild_read["guild_notebook"].get<std::string>();
					new_guild.guild_mascot = guild_read["guild_mascot"].get<std::vector<uint16_t>>();
					new_guild.guild_level = guild_read["guild_level"].get<uint16_t>();
					new_guild.guild_xp = guild_read["guild_xp"].get<uint32_t>();
					new_guild.guild_world = guild_read["guild_world"].get<std::string>();
					new_guild.guild_members = guild_read["guild_members"].get<std::vector<GuildMember>>();
					new_guild.guild_logs = guild_read["guild_logs"].get<std::vector<GuildLog>>();
					new_guild.guild_settings = (!(guild_read.find("guild_settings") != guild_read.end()) ? new_guild.guild_settings : guild_read["guild_settings"].get<int>());
					guilds.push_back(new_guild);
					guild_read.clear();
				}
			}
			for (int i_ = 0; i_ < items.size(); i_++) {
				int item_id = items[i_].id;
				if (Gtps_Shop::Disable_Items(item_id) || item_id == 2950 || items[item_id].untradeable || items[item_id].blockType == BlockTypes::LOCK || items[item_id].blockType == SEED || items[item_id].name.find("Data Bedrock") != string::npos || items[item_id].name.find("Phoenix") != string::npos || items[item_id].name.find("Golden") != string::npos || items[item_id].name.find("Legend") != string::npos || items[item_id].name.find("Legendary") != string::npos || items[item_id].name.find("Ancestral") != string::npos || items[item_id].name.find("Wrench") != string::npos || items[item_id].name.find("null_item") != string::npos || items[item_id].name.find("null") != string::npos || items[item_id].name.find("Guild Flag") != string::npos || items[item_id].name.find("Guild Entrance") != string::npos || items[item_id].name.find("Guild Banner") != string::npos || items[item_id].name.find("Guild Key") != string::npos || items[item_id].name.find("World Key") != string::npos || item_id == 5640 || item_id == 5814 || item_id == 1486 || item_id == 6802 || item_id == 5070 || item_id == 5072 || item_id == 5074 || item_id == 5076 || item_id == 9158) continue;
				if (Gtps_Shop::Get_Price(item_id) == 0) continue;
				Environment()->buy_item_list.push_back(std::make_pair(item_id, item_id));
			}
			for (int i_ = 0; i_ < items.size(); i_++) {
				int item_id = items[i_].id;
				for (int i = 0; i < EditItem.size(); i++) {
					if (EditItem[i].ID == item_id) {
						items[EditItem[i].ID].name = EditItem[i].Name;
						items[EditItem[i].ID].ori_name = EditItem[i].Name;
						items[EditItem[i].ID].description = EditItem[i].Desc;
						items[EditItem[i].ID].rarity = EditItem[i].rarity;
						items[EditItem[i].ID].newdropchance = EditItem[i].Change_Drop_Seeds;
						items[EditItem[i].ID].max_gems = EditItem[i].Gems;
						items[EditItem[i].ID].untradeable = (EditItem[i].property_untradeable ? 1 : 0);
						items[EditItem[i].ID].unobtainable = (EditItem[i].property_unobtainable ? 1 : 0);
						items[EditItem[i].ID].blocked_place = (EditItem[i].property_blocked ? 1 : 0);
						items[EditItem[i].ID].farmable = (EditItem[i].property_farmable ? true : false);
						if (EditItem[i].Item_Price != 0) {
							if (Gtps_Shop::Get_Price(EditItem[i].ID) == 0) Environment()->buy_item_list.push_back(std::make_pair(EditItem[i].ID, EditItem[i].ID));
							Environment()->shop_data[EditItem[i].ID] = EditItem[i].Item_Price;
						}
					}
				}
				if (item_id == 12240 || item_id == 10352 || item_id == 4170) items[item_id].oprc = 225;
				if (item_id == 12990) items[item_id].oprc = 240;
				if (item_id == 12308 || item_id == 12834 || item_id == 13046 || item_id == 13044 || item_id == 10132 || item_id == 10104 || item_id == 12462 || item_id == 12458 || item_id == 13230)  items[item_id].oprc = 250;
				if (item_id == 13120 || item_id == 13124 || item_id == 6274 || item_id == 10114 || item_id == 5804 || item_id == 5812 || item_id == 8416 || item_id == 13234 || item_id == 4556 || item_id == 9420 || item_id == 11714 || item_id == 4328)  items[item_id].oprc = 300;
				if (item_id == 13128 || item_id == 13232 || item_id == 13420 || item_id == 8516) items[item_id].oprc = 350;
				if (item_id == 12996 || item_id == 1836)  items[item_id].oprc = 360;
				if (item_id == 12836 || item_id == 2418 || item_id == 12874 || item_id == 13198)  items[item_id].oprc = 380;
				if (item_id == 12646 || item_id == 12648 || item_id == 12650 || item_id == 12992 || item_id == 12456 || item_id == 4330)  items[item_id].oprc = 400;
				if (item_id == 12062 || item_id == 12644) items[item_id].oprc = 420;
				if (item_id == 9780 || item_id == 11168 || item_id == 13426) items[item_id].oprc = 450;
				if (item_id == 12430 || item_id == 12848 || item_id == 13042 || item_id == 12186 || item_id == 3462 || item_id == 9716 || item_id == 11152 || item_id == 9758 || item_id == 13126) items[item_id].oprc = 500;
				if (item_id == 13422) items[item_id].oprc = 550;
				if (item_id == 736 || item_id == 4626 || item_id == 13118 || item_id == 6276 || item_id == 13330 || item_id == 13424 || item_id == 13370) items[item_id].oprc = 600;
				if (item_id == 13332 || item_id == 9410)items[item_id].oprc = 650;
				if (item_id == 12846 || item_id == 11120 || item_id == 9058) items[item_id].oprc = 700;
				if (item_id == 9496 || item_id == 9032 || item_id == 4208) items[item_id].oprc = 750;
				if (item_id == 9768 || item_id == 792 || item_id == 1442 || item_id == 13116 || item_id == 13140) items[item_id].oprc = 800;
				if (item_id == 4956 || item_id == 13068 || item_id == 2278 || item_id == 10796 || item_id == 1787)  items[item_id].oprc = 1000;
				if (item_id == 1228) items[item_id].oprc = 1150;
				if (item_id == 1496 || item_id == 3416)items[item_id].oprc = 1200;
				if (item_id == 13134) items[item_id].oprc = 1300;
				if (item_id == 13134) items[item_id].oprc = 1300;
				if (item_id == 9386) items[item_id].oprc = 1400;
				if (item_id == 12540 || item_id == 12284 || item_id == 9250 || item_id == 9930 || item_id == 9932 || item_id == 9934 || item_id == 13050) items[item_id].oprc = 1500;
				if (item_id == 7102) items[item_id].oprc = 1850;
				if (item_id == 6950 || item_id == 6952 || item_id == 5188 || item_id == 9212 || item_id == 5134 || item_id == 5152 || item_id == 5170) items[item_id].oprc = 2000;
				if (item_id == 12406)  items[item_id].oprc = 2100;
				if (item_id == 2072 || item_id == 6954) items[item_id].oprc = 2500;
				if (item_id == 12342 || item_id == 9856 || item_id == 6016 || item_id == 6782 || item_id == 8306) items[item_id].oprc = 3000;
				if (item_id == 6954) items[item_id].oprc = 4000;
				if (item_id == 9166) items[item_id].oprc = 5000;
				if (item_id == 1790) items[item_id].oprc = 9500;
				if (item_id == 10684) items[item_id].oprc = 99999;
				if (items[item_id].oprc != 0) Environment()->opc_item.push_back(make_pair(items[item_id].oprc, item_id));
				if (item_id == 2950 || item_id == 0 || item_id == 6 || item_id == 6548 || items[item_id].blocked_place || items[item_id].blockType == SEED || items[item_id].name.find("Data Bedrock") != string::npos || items[item_id].name.find("Wrench") != string::npos || items[item_id].name.find("null_item") != string::npos || items[item_id].name.find("null") != string::npos || items[item_id].name.find("Guild Flag") != string::npos || items[item_id].name.find("Guild Entrance") != string::npos || items[item_id].name.find("Guild Banner") != string::npos || items[item_id].name.find("Guild Key") != string::npos || items[item_id].name.find("World Key") != string::npos || item_id == 5640 || item_id == 5814 || item_id == 5070 || item_id == 5072 || item_id == 5074 || item_id == 5076 || item_id == 18 || item_id == 32 || item_id == 6336 || item_id == 9384 || item_id == 9158) continue;
				Environment()->find_item_list.push_back(std::make_pair(item_id, item_id));
			}																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																		
		}
	};
	class Save {
	public:
		static void Config() {
			try {
				json j;
				std::string filename = "./VallenServer.json";
				std::ifstream inputFile(filename);
				if (inputFile.is_open()) {
					inputFile >> j;
					inputFile.close();
					/*GAME*/
					j["GAME"]["CREATOR_LIST"] = C_List.clist;
					j["GAME"]["ANTI_PROXY"] = Environment()->Anti_Proxy;
					j["GAME"]["ANTI_GROWLAUNCHER"] = Environment()->Anti_GL;
					j["GAME"]["JOYSTICK"] = Environment()->Enable_Joystick;
					j["GAME"]["AUTOFARM_DELAY"] = Environment()->AutoFarm_Delay;
					j["GAME"]["WORLD_FG"] = WorldDefault.fg;
					j["GAME"]["WORLD_BG"] = WorldDefault.bg;
					j["GAME"]["WORLD_ROCK"] = WorldDefault.rock;
					j["GAME"]["WORLD_LAVA"] = WorldDefault.lava;
					j["GAME"]["WORLD_WEATHER"] = WorldDefault.weather;
					j["GAME"]["STORE_STOCK_ERAY"] = Environment()->Stock_ERay;
					j["GAME"]["STORE_STOCK_GRAY"] = Environment()->Stock_GRay;
					j["GAME"]["STORE_STOCK_MAG"] = Environment()->Stock_Mag;
					/*NEWBIE GET*/
					j["NEWBIE_GET"]["ITEMS"] = new_get.list;
					ofstream o("VallenServer.json");
					if (!o.is_open()) {
						Logger::Info("ERROR", "Failed to open config.json for writing");
					}
					o << j.dump(4) << endl;
					o.close();
				}
			}
			catch (...) {
				return;
			}
		}
		static void SLogs() {
			try {
				json j;
				j["logs"] = Environment()->Logs;
				ofstream o("database/json/server_logs.json");
				if (!o.is_open()) {
					Logger::Info("ERROR", "Failed to open server_logs.json for writing");
				}
				o << j.dump(4) << endl;
				o.close();
			}
			catch (...) {
				return;
			}
		}
		static void RedeemCode() {
			try {
				json j;
				j["redeem_codev2"] = redeem_codev2.redeemcode;
				ofstream o("database/json/redeemcode.json");
				if (!o.is_open()) {
					Logger::Info("ERROR", "Failed to open redeemcode.json for writing");
				}
				o << j.dump(4) << endl;
				o.close();
			}
			catch (...) {
				return;
			}
		}
		static void DailyChallenge() {
			try {
				json j;
				j["top_dailyc"] = Event()->top_dailyc;
				j["dailyc_name"] = Event()->dailyc_name;
				j["dailychallenge"] = Event()->DailyChallenge;
				j["daily_wait_time"] = Event()->daily_wait_time;
				j["daily_current_time"] = Event()->daily_current_time;
				ofstream o("database/json/daily_challenge.json");
				if (!o.is_open()) {
					Logger::Info("ERROR", "Failed to open daily_challenge.json for writing");
				}
				o << j.dump(4) << endl;
				o.close();
			}
			catch (...) {
				return;
			}
		}
		static void Guilds() {
			try {
				json j;
				j["can_event"] = Event()->Can_Event;
				j["wait_next"] = Event()->Wait_Next;
				j["event_item"] = event_item;
				j["next_event"] = next_event;
				j["wait_event"] = wait_event;
				j["current_event"] = current_event;
				j["guild_t1"] = guild_t1;
				j["guild_t2"] = guild_t2;
				j["guild_t3"] = guild_t3;
				j["guild_t4"] = guild_t4;
				j["guild_t5"] = guild_t5;
				j["guild_t6"] = guild_t6;
				j["guild_t7"] = guild_t7;
				j["guild_t8"] = guild_t8;
				j["guild_t9"] = guild_t9;
				j["guild_t10"] = guild_t10;
				j["guild_t11"] = guild_t11;
				j["guild_t12"] = guild_t12;
				j["guild_t13"] = guild_t13;
				j["guild_t14"] = guild_t14;
				j["guild_t15"] = guild_t15;
				j["guild_t16"] = guild_t16;
				j["guild_t17"] = guild_t17;
				j["guild_t18"] = guild_t18;
				j["guild_t19"] = guild_t19;
				j["guild_t20"] = guild_t20;
				j["guild_t21"] = guild_t21;
				j["guild_t22"] = guild_t22;
				j["guild_t23"] = guild_t23;
				j["guild_t24"] = guild_t24;
				j["guild_t25"] = guild_t25;
				j["personal_t1"] = personal_t1;
				j["personal_t2"] = personal_t2;
				j["personal_t3"] = personal_t3;
				j["personal_t4"] = personal_t4;
				j["personal_t5"] = personal_t5;
				j["personal_t6"] = personal_t6;
				j["personal_t7"] = personal_t7;
				j["personal_t8"] = personal_t8;
				j["personal_t9"] = personal_t9;
				j["personal_t10"] = personal_t10;
				j["personal_t11"] = personal_t11;
				j["personal_t12"] = personal_t12;
				j["personal_t13"] = personal_t13;
				j["personal_t14"] = personal_t14;
				j["personal_t15"] = personal_t15;
				j["personal_t16"] = personal_t16;
				j["personal_t17"] = personal_t17;
				j["personal_t18"] = personal_t18;
				j["personal_t19"] = personal_t19;
				j["personal_t20"] = personal_t20;
				j["old_event_item"] = old_event_item;
				j["guild_event_id"] = guild_event_id;
				j["guild_event_type"] = guild_event_type;
				j["top_guild"] = top_guild;
				j["top_basher"] = top_basher;
				j["last_guild_last"] = last_guild_last;
				j["last_basher_list"] = last_basher_list;
				j["top_guild_winners"] = top_guild_winners;
				j["top_basher_winners"] = top_basher_winners;
				ofstream o("database/json/guild_events.json");
				if (!o.is_open()) {
					Logger::Info("ERROR", "Failed to open guild_events.json for writing");
				}
				o << j.dump(4) << endl;
				o.close();
			}
			catch (...) {
				return;
			}
		}
		static void All() {
			try {
				json j;
				j["Disable_Items"] = Disable_Item.id;
				j["world_menu"] = Environment()->World_Menu;
				j["Npc_MarketPlace"] = Environment()->Npc_MarketPlace;
				j["Xp_Event"] = Event()->Xp_Event;
				j["Exchange_Event"] = Event()->Exchange_Event;
				j["top_punch"] = top_punch;
				j["top_online"] = top_online;
				j["top_richest"] = top_richest;
				j["top_royalpass"] = top_royalpass;
				j["top_anniversary"] = Event()->top_anniversary;
				j["top_wls"] = top_wls;
				j["wls_event_time"] = wls_event_time;
				j["Anniversary_Time"] = Event()->Anniversary_Time;
				j["total_wls_recycled"] = total_wls_recycled;
				j["top_mines"] = top_mines;
				j["Gems_Event"] = Event()->Gems_Event;
				j["blacklist"] = Environment()->BlackList;
				j["ridbans"] = Environment()->Rid_Bans;
				j["World_Report"] = Environment()->World_Report;
				j["Player_Report"] = Environment()->Player_Report;
				j["Fake_Online"] = Environment()->Fake_Online;
				j["Growganoth"] = Event()->Halloween;
				j["Carnival"] = Event()->Carnival;
				j["Valentine"] = Event()->Valentine;
				j["Summerfest"] = Event()->Summerfest;
				j["Harvest_Festival"] = Event()->Harvest_Festival;
				j["Anniversary"] = Event()->Anniversary;
				j["x_gems"] = Event()->X_Gems;
				j["x_xp"] = Event()->X_Xp;
				j["x_exchange"] = Event()->X_Exchange;
				j["x_gems_time"] = Event()->x_gems_time;
				j["x_xp_time"] = Event()->x_xp_time;
				j["x_exchange_time"] = Event()->x_exchange_time;
				j["WOTD"] = Environment()->WOTD;
				j["WOTW"] = Environment()->WOTW;
				j["world_rating"] = world_rating;
				j["WinterFest.Active"] = WinterFest.Active;
				j["WinterFest.Growch_Happy"] = WinterFest.Growch_Happy;
				j["WinterFest.Heart_Size"] = WinterFest.Heart_Size;
				j["WinterFest.GiftedGrowch"] = WinterFest.GiftedGrowch;
				j["WinterFest.Progress_Gifted"] = WinterFest.Progress_Gifted;
				j["WinterFest.Growch_Happy_Time"] = WinterFest.Growch_Happy_Time;
				j["WinterFest.Calendar_Sold"] = WinterFest.Calendar_Sold;
				j["WinterFest.Calendar_Stock"] = WinterFest.Calendar_Stock;
				j["WinterFest.Bonanza_Stock"] = WinterFest.Bonanza_Stock;
				j["WinterFest.Bonanza_Sold"] = WinterFest.Bonanza_Sold;
				j["verifed_csn_world"] = Environment()->Verifed_Csn_World;
				j["waiting_verif_csn"] = Environment()->Waiting_Verif_Csn;
				if (Environment()->top_points.size() != 0) j["top_points"] = Environment()->top_points;
				if (Environment()->top_yesterday.size() != 0) j["top_yesterday"] = Environment()->top_yesterday;
				if (Environment()->top_overall.size() != 0) j["top_overall"] = Environment()->top_overall;
				ofstream o("database/json/server_events.json");
				if (!o.is_open()) {
					Logger::Info("ERROR", "Failed to open server_events.json for writing");
				}
				o << j.dump(4) << endl;
				o.close();
				EventPool::Save::SLogs();
				EventPool::Save::Guilds();
				EventPool::Save::RedeemCode();
				EventPool::Save::DailyChallenge();
			}
			catch (...) {}
		}
	};
	class Recycle {
	public:
		static void Start() {
			wls_event_time = time(nullptr) + 691200;
			top_wls.clear();
			total_wls_recycled = 0;
			for (ENetPeer* cp_ = server->peers; cp_ < &server->peers[server->peerCount]; ++cp_) {
				if (cp_->state != ENET_PEER_STATE_CONNECTED or cp_->data == NULL) continue;
				pInfo(cp_)->has_claim_event_wls = false;
				pInfo(cp_)->wls_participated = false;
				VarList::OnConsoleMessage(cp_, "CP:_PL:0_OID:_CT:[S]_ `5***`` `9Reycle World Locks Event has started....``");
			}
		}
		class Point {
		public:
			static void Add(ENetPeer* peer, int points) {
				pInfo(peer)->wls_participated = true;
				total_wls_recycled += points;
				auto it = std::find_if(top_wls.begin(), top_wls.end(),
					[&](const std::pair<long long int, std::string>& element) {
						return toLower(element.second) == toLower(pInfo(peer)->tankIDName);
					});
				if (it != top_wls.end()) {
					it->first += points;
				}
				else {
					top_wls.emplace_back(points, pInfo(peer)->tankIDName);
				}
			}
		};
	};
	class Anniversary {
	public:
		class Point {
		public:
			static void Add(ENetPeer* peer, int points) {
				pInfo(peer)->anniversary_participated = true;
				auto it = std::find_if(Event()->top_anniversary.begin(), Event()->top_anniversary.end(),
					[&](const std::pair<long long int, std::string>& element) {
						return toLower(element.second) == toLower(pInfo(peer)->tankIDName);
					});
				if (it != Event()->top_anniversary.end()) {
					it->first += points;
				}
				else {
					Event()->top_anniversary.emplace_back(points, pInfo(peer)->tankIDName);
				}
			}
			static int Get(ENetPeer* peer) {
				auto it = std::find_if(Event()->top_anniversary.begin(), Event()->top_anniversary.end(),
					[&](const std::pair<long long int, std::string>& element) {
						return toLower(element.second) == toLower(pInfo(peer)->tankIDName);
					});
				if (it != Event()->top_anniversary.end()) {
					return std::distance(Event()->top_anniversary.begin(), it) + 1;
				}
				return 0;
			}
		};
	};
	class DailyChallenge {
	public:
		static void Start() {
			Event()->DailyChallenge = true;
			Event()->dailyc_name = Daily_Challenge::Get_Next();
			Event()->daily_current_time = time(nullptr) + 86400;
			Event()->top_dailyc.clear(); Event()->top_dailyc_list.clear();
		}
		static void Wait() {
			Event()->DailyChallenge = false;
			Event()->daily_wait_time = time(nullptr) + 43200;//12jam
		}
	};
	class Guilds {
	public:
		static void Start() {
			Event()->Can_Event = false;
			event_item = get_next_event();
			current_event = time(nullptr) + 691200;
			top_basher_last.clear(), top_guild_last.clear();
			last_guild_last.clear(), last_basher_list.clear(), top_basher_list.clear(), top_guild_list.clear();
			const char* months[12] = { "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December" };
			struct tm newtime;
			time_t now = time(0);
#ifdef _WIN32
			localtime_s(&newtime, &now);
#elif defined(__linux__)
			localtime_r(&now, &newtime);
#endif
			string month = months[newtime.tm_mon];
			if (month == "March" or month == "April" or month == "May" or month == "June") {
				guild_event_type = "Spring Clash";
				guild_event_id = 7844;
			}
			if (month == "November" or month == "December" or month == "January" or month == "February") {
				guild_event_type = "Winter Clash";
				guild_event_id = 7328;
			}
			if (month == "July" or month == "August" or month == "September" or month == "October") {
				guild_event_type = "Summer Clash";
				guild_event_id = 6198;
			}
			if (items[event_item].hand_scythe_text == "Block Bashers") {
				personal_t1 = 2300, personal_t2 = 5200, personal_t3 = 8600, personal_t4 = 12600, personal_t5 = 17200;
				personal_t6 = 22900, personal_t7 = 28600, personal_t8 = 37200, personal_t9 = 48600, personal_t10 = 62900;
				personal_t11 = 91400, personal_t12 = 125700, personal_t13 = 165600, personal_t14 = 211300, personal_t15 = 268400;
				personal_t16 = 354100, personal_t17 = 456800, personal_t18 = 571000, personal_t19 = 696700, personal_t20 = 828000;
				guild_t1 = 21850, guild_t2 = 49400, guild_t3 = 81700, guild_t4 = 119700, guild_t5 = 163400;
				guild_t6 = 217550, guild_t7 = 271700, guild_t8 = 353400, guild_t9 = 461700, guild_t10 = 597550;
				guild_t11 = 868300, guild_t12 = 1194150, guild_t13 = 1573200, guild_t14 = 2007350, guild_t15 = 2549800;
				guild_t16 = 3363950, guild_t17 = 4339600, guild_t18 = 5424500, guild_t19 = 6618650, guild_t20 = 7866000;
				guild_t21 = 9113350, guild_t22 = 10360700, guild_t23 = 11608050, guild_t24 = 14102750, guild_t25 = 15350100;
			}
			if (items[event_item].hand_scythe_text == "Fishing Fanatics") {
				personal_t1 = 13000, personal_t2 = 29200, personal_t3 = 48600, personal_t4 = 71200, personal_t5 = 97100;
				personal_t6 = 129400, personal_t7 = 161800, personal_t8 = 210300, personal_t9 = 275000, personal_t10 = 355900;
				personal_t11 = 517600, personal_t12 = 711700, personal_t13 = 938200, personal_t14 = 1197000, personal_t15 = 1520500;
				personal_t16 = 2005700, personal_t17 = 2588000, personal_t18 = 3235000, personal_t19 = 3946700, personal_t20 = 4690800;
				guild_t1 = 123500, guild_t2 = 277400, guild_t3 = 461700, guild_t4 = 676400, guild_t5 = 922450;
				guild_t6 = 1229300, guild_t7 = 1537100, guild_t8 = 1997850, guild_t9 = 2612500, guild_t10 = 3381050;
				guild_t11 = 4917200, guild_t12 = 6761150, guild_t13 = 8912900, guild_t14 = 11371500, guild_t15 = 14444750;
				guild_t16 = 19054150, guild_t17 = 24586000, guild_t18 = 30732500, guild_t19 = 37493648, guild_t20 = 44562600;
				guild_t21 = 51631552, guild_t22 = 58700500, guild_t23 = 62050700, guild_t24 = 64350900, guild_t25 = 67350000;
			}
			if (items[event_item].hand_scythe_text == "Surgery Stars") {
				personal_t1 = 4600, personal_t2 = 11700, personal_t3 = 19500, personal_t4 = 28600, personal_t5 = 39000;
				personal_t6 = 52000, personal_t7 = 65000, personal_t8 = 84500, personal_t9 = 110500, personal_t10 = 143000;
				personal_t11 = 208000, personal_t12 = 286000, personal_t13 = 377000, personal_t14 = 481000, personal_t15 = 611000;
				personal_t16 = 806000, personal_t17 = 1040000, personal_t18 = 1300000, personal_t19 = 1586000, personal_t20 = 1885000;
				guild_t1 = 43700, guild_t2 = 97850, guild_t3 = 163400, guild_t4 = 239400, guild_t5 = 325850;
				guild_t6 = 434150, guild_t7 = 542450, guild_t8 = 705850, guild_t9 = 922450, guild_t10 = 1194150;
				guild_t11 = 1736600, guild_t12 = 2387350, guild_t13 = 3146400, guild_t14 = 4014700, guild_t15 = 5099600;
				guild_t16 = 6726950, guild_t17 = 8679200, guild_t18 = 10849000, guild_t19 = 13236350, guild_t20 = 15731050;
				guild_t21 = 17385250, guild_t22 = 19500250, guild_t23 = 22950300, guild_t24 = 24510350, guild_t25 = 26450000;
			}
			if (items[event_item].hand_scythe_text == "Harvest Heroes" or items[event_item].hand_scythe_text == "Speedy Splicers" or items[event_item].hand_scythe_text == "Block Builders") {
				personal_t1 = 2600, personal_t2 = 5900, personal_t3 = 9800, personal_t4 = 14300, personal_t5 = 19500;
				personal_t6 = 25900, personal_t7 = 32400, personal_t8 = 42100, personal_t9 = 55000, personal_t10 = 71200;
				personal_t11 = 103600, personal_t12 = 142400, personal_t13 = 187700, personal_t14 = 239400, personal_t15 = 304100;
				personal_t16 = 401200, personal_t17 = 517600, personal_t18 = 647000, personal_t19 = 789400, personal_t20 = 938200;
				guild_t1 = 24700, guild_t2 = 56050, guild_t3 = 93100, guild_t4 = 135850, guild_t5 = 185250;
				guild_t6 = 246050, guild_t7 = 307800, guild_t8 = 399950, guild_t9 = 522500, guild_t10 = 676400;
				guild_t11 = 984200, guild_t12 = 1352800, guild_t13 = 1783150, guild_t14 = 2274300, guild_t15 = 2888950;
				guild_t16 = 3811400, guild_t17 = 4917200, guild_t18 = 6146500, guild_t19 = 7499300, guild_t20 = 8912900;
				guild_t21 = 10458250, guild_t22 = 12003600, guild_t23 = 13228950, guild_t24 = 14550200, guild_t25 = 15673550;
			}
			for (ENetPeer* cp_ = server->peers; cp_ < &server->peers[server->peerCount]; ++cp_) {
				if (cp_->state != ENET_PEER_STATE_CONNECTED or cp_->data == NULL) continue;
				VarList::OnConsoleMessage(cp_, "CP:_PL:0_OID:_CT:[S]_ `5***`` `9Seasonal " + guild_event_type + " Event has started: " + items[event_item].hand_scythe_text + " - " + items[event_item].description + "``");
				//Webhook::Guild_Event("```" + guild_event_type + " Event has started: " + items[event_item].hand_scythe_text + " - " + items[event_item].description + "```");
				pInfo(cp_)->next_guild_event = true; pInfo(cp_)->raw5_legendary_claim = false; pInfo(cp_)->participated_personal = false;
				pInfo(cp_)->row1_items1_claim = false, pInfo(cp_)->row1_items2_claim = false, pInfo(cp_)->row1_items3_claim = false, pInfo(cp_)->row1_items4_claim = false, pInfo(cp_)->row1_items5_claim = false, pInfo(cp_)->row1_items6_claim = false;
				pInfo(cp_)->row2_items1_claim = false, pInfo(cp_)->row2_items2_claim = false, pInfo(cp_)->row2_items3_claim = false, pInfo(cp_)->row2_items4_claim = false, pInfo(cp_)->row2_items5_claim = false, pInfo(cp_)->row2_items6_claim = false;
				pInfo(cp_)->row3_items1_claim = false, pInfo(cp_)->row3_items2_claim = false, pInfo(cp_)->row3_items3_claim = false, pInfo(cp_)->row3_items4_claim = false, pInfo(cp_)->row3_items5_claim = false, pInfo(cp_)->row3_items6_claim = false;
				pInfo(cp_)->row4_items1_claim = false, pInfo(cp_)->row4_items2_claim = false, pInfo(cp_)->row4_items3_claim = false, pInfo(cp_)->row4_items4_claim = false, pInfo(cp_)->row4_items5_claim = false, pInfo(cp_)->row4_items6_claim = false;
				pInfo(cp_)->claim_top1 = false, pInfo(cp_)->claim_top2 = false, pInfo(cp_)->claim_top3 = false, pInfo(cp_)->claim_top4 = false, pInfo(cp_)->claim_top5 = false, pInfo(cp_)->claim_top6 = false, pInfo(cp_)->claim_top7 = false, pInfo(cp_)->claim_top8 = false, pInfo(cp_)->claim_top9 = false, pInfo(cp_)->claim_top10 = false, pInfo(cp_)->claim_top11 = false, pInfo(cp_)->claim_top12 = false, pInfo(cp_)->claim_top13 = false, pInfo(cp_)->claim_top14 = false, pInfo(cp_)->claim_top15 = false, pInfo(cp_)->claim_top16 = false, pInfo(cp_)->claim_top17 = false, pInfo(cp_)->claim_top18 = false, pInfo(cp_)->claim_top19 = false, pInfo(cp_)->claim_top20 = false, pInfo(cp_)->claim_top1g = false, pInfo(cp_)->claim_top2g = false, pInfo(cp_)->claim_top3g = false, pInfo(cp_)->claim_top4g = false, pInfo(cp_)->claim_top5g = false, pInfo(cp_)->claim_top6g = false, pInfo(cp_)->claim_top7g = false, pInfo(cp_)->claim_top8g = false, pInfo(cp_)->claim_top9g = false, pInfo(cp_)->claim_top10g = false, pInfo(cp_)->claim_top11g = false, pInfo(cp_)->claim_top12g = false, pInfo(cp_)->claim_top13g = false, pInfo(cp_)->claim_top14g = false, pInfo(cp_)->claim_top15g = false, pInfo(cp_)->claim_top16g = false, pInfo(cp_)->claim_top17g = false, pInfo(cp_)->claim_top18g = false, pInfo(cp_)->claim_top19g = false, pInfo(cp_)->claim_top20g = false, pInfo(cp_)->claim_top21g = false, pInfo(cp_)->claim_top22g = false, pInfo(cp_)->claim_top23g = false, pInfo(cp_)->claim_top24g = false, pInfo(cp_)->claim_top25g = false;
			}
		}
		static void Reset() {
			for (ENetPeer* cp_ = server->peers; cp_ < &server->peers[server->peerCount]; ++cp_) {
				if (cp_->state != ENET_PEER_STATE_CONNECTED or cp_->data == NULL) continue;
				pInfo(cp_)->next_guild_event = false;
			}
			Event()->Can_Event = true, Event()->Wait_Next = false;
			wait_event = time(nullptr) + 345600;
			top_guild_winners.clear();
			std::vector<std::pair<long long int, std::string>> top_tiers = top_basher;
			sort(top_tiers.begin(), top_tiers.end());
			reverse(top_tiers.begin(), top_tiers.end());
			top_tiers.resize(10);
			for (uint8_t i = 0; i < top_tiers.size(); i++) {
				if (not top_tiers[i].second.empty() and top_tiers[i].first != 0) {
					top_basher_winners.push_back(make_pair(i + 1, top_tiers[i].second));
					last_basher_list.push_back(make_pair(top_tiers[i].first, top_tiers[i].second));
				}
			}
			top_tiers = top_guild;
			sort(top_tiers.begin(), top_tiers.end());
			reverse(top_tiers.begin(), top_tiers.end());
			top_tiers.resize(10);
			for (uint8_t i = 0; i < top_tiers.size(); i++) {
				if (not top_tiers[i].second.empty() and top_tiers[i].first != 0) {
					vector<Guild>::iterator p = find_if(guilds.begin(), guilds.end(), [&](const Guild& a) { return a.guild_id == atoi(top_tiers[i].second.c_str()); });
					if (p != guilds.end()) {
						Guild* guild_information = &guilds[p - guilds.begin()];
						if (i + 1 == 1) best_guild = guild_information->guild_name + ", score: " + Set_Count(top_tiers[i].first);
						top_guild_winners.push_back(make_pair(i + 1, top_tiers[i].second));
						last_guild_last.push_back(make_pair(top_tiers[i].first, top_tiers[i].second));
					}
				}
			}
			top_basher.clear();
			top_guild.clear();
		}
		static void Next() {
			Event()->Can_Event = true;
			Event()->Wait_Next = true;
			next_event = time(nullptr) + 259200;
		}
		class Point {
		public:
			static void Add(ENetPeer* peer, int id) {
				if (Event()->Can_Event == false) {
					int point = (id == 6836 ? 2100 : id == 6936 ? 220 : id == 6834 ? 80 : 20);
					if (event_item == 6238) point = (id == 6240 ? 1800 : id == 6926 ? 170 : id == 6238 ? 50 : id == 6236 ? 8 : 0);
					else if (event_item == 6828) point = (id == 6830 ? 2100 : id == 6934 ? 220 : id == 6828 ? 80 : id == 6826 ? 20 : 0);
					else if (event_item == 6256) point = (id == 6258 ? 350000 : id == 6932 ? 42800 : id == 6256 ? 15700 : id == 6254 ? 3400 : 0);
					else if (event_item == 6244) point = (id == 6244 ? 80 : id == 6246 ? 1200 : id == 6928 ? 220 : id == 6242 ? 20 : 0);
					else if (event_item == 6834) point = (id == 6836 ? 2100 : id == 6936 ? 220 : id == 6834 ? 80 : id == 6832 ? 20 : 0);
					else if (event_item == 6250) point = (id == 6252 ? 150000 : id == 6930 ? 20000 : id == 6250 ? 6200 : id == 6248 ? 1500 : 0);
					if (point == 0) return;
					if (point != 10 && point != 20 && point != 3400 && point != 1500) {
						int most_give = 0, most_second = 0, most_last = 0;
						if (event_item == 6238) most_give = 6240, most_second = 6238, most_last = 6236;
						else if (event_item == 6828) most_give = 6830, most_second = 6828, most_last = 6826;
						else if (event_item == 6256) most_give = 6258, most_second = 6256, most_last = 6254;
						else if (event_item == 6244) most_give = 6246, most_second = 6244, most_last = 6242;
						else if (event_item == 6834) most_give = 6836, most_second = 6834, most_last = 6832;
						else if (event_item == 6250) most_give = 6252, most_second = 6250, most_last = 6248;
						int got = 0;
						uint8_t chance = (id == most_give ? 3 : 4);
						if (rand() % 50 < chance) {
							VarList::OnTalkBubble(peer, pInfo(peer)->netID, "`wYour " + items[id].name + " has fractured, turning into an " + (id == most_give ? items[most_second].name : items[most_last].name) + "!", 0, 1);
							Inventory::Modify(peer, id, got = -1);
							Inventory::Modify(peer, (id == most_give ? most_second : most_last), got = 1);
						}
					}
					if (point != 0) {
						pInfo(peer)->participated = event_item;
						std::vector<std::pair<long long int, std::string>>::iterator p = find_if(top_basher.begin(), top_basher.end(), [&](const pair < long long int, string>& element) { return element.second == pInfo(peer)->tankIDName; });
						if (p != top_basher.end()) {
							if (top_basher[p - top_basher.begin()].first < 0) top_basher[p - top_basher.begin()].first = 0;
							top_basher[p - top_basher.begin()].first += point;
						}
						else top_basher.push_back(make_pair(point, pInfo(peer)->tankIDName));
						if (pInfo(peer)->guild_id != 0) {
							auto it = std::find_if(top_guild.begin(), top_guild.end(), [&](const std::pair<long long int, std::string>& element) {
								return element.second == std::to_string(pInfo(peer)->guild_id); });
							if (it != top_guild.end()) {
								if (it->first < 0) {
									it->first = 0;
								}
								else if (it->first >= 4'294'967'295) {
									it->first = 4'294'967'295;
								}
								else {
									it->first += point;
								}
							}
							else {
								top_guild.emplace_back(point, std::to_string(pInfo(peer)->guild_id));
							}
						}
					}
				}
			}
		};
	};
};
class ServerPool {
public:
	class PacketLogs {
	public:
		static void Add() {
			std::ofstream d_("database/server_logs/Packet_Logs.txt", std::ios::app);
			if (d_.is_open()) {
				d_ << ServerLogsPkt.packet_logs << std::endl;
				d_.close();
			}
			else std::cerr << "Unable to open database/server_logs/packet.txt file." << std::endl;
		}
	};
	class CrashLogs {
	public:
		static void Add() {
			std::ofstream a("database/server_logs/Crash_Logs.txt", std::ios::app);
			if (a.is_open()) {
				a << "Last CCH: " << ServerLogsPkt.theCCH << "\nLast World: " << ServerLogsPkt.last_world << "\nlast in CASE NET_MESSAGE_GAME_PACKET: " << ServerLogsPkt.packet_type << std::endl;
				a.close();
			}
			else std::cerr << "Unable to open database/server_logs/crash.txt file." << std::endl;
		}
	};
	class Logs {
	public:
		static void Add(string log, string logs_name) {
			//if (logs_name != "Take Item" and logs_name != "Drop Item") Webhook::Send("LOGS", log);
			struct tm newtime;
			time_t now = time(0);
#ifdef _WIN32
			localtime_s(&newtime, &now);
#elif defined(__linux__)
			localtime_r(&now, &newtime);
#endif
			log = "`0" + (newtime.tm_hour < 10 ? "0" + to_string(newtime.tm_hour) + "" : to_string(newtime.tm_hour)) + ":" + (newtime.tm_min < 10 ? "0" + to_string(newtime.tm_min) + "" : to_string(newtime.tm_min)) + " " + to_string(newtime.tm_mon + 1) + "/" + to_string(newtime.tm_mday) + ": `o" + log + "``\n";
			vector<pair<string, string>>::iterator p2 = find_if(Environment()->Logs.begin(), Environment()->Logs.end(), [&](const pair < string, string>& element) { return element.first == logs_name; });
			if (p2 != Environment()->Logs.end()) Environment()->Logs[p2 - Environment()->Logs.begin()].second += log;
			else Environment()->Logs.push_back(make_pair(logs_name, log));
		}
		static void Load(ENetPeer* peer, string button, string search = "") {
			string log_text = "";
			int found = 0;
			vector<string> text_decode;
			for (int i = 0; i < Environment()->Logs.size(); i++) {
				if (Environment()->Logs[i].first == button) {
					vector <string> that_log = explode("\n", Environment()->Logs[i].second);
					reverse(that_log.begin(), that_log.end());
					text_decode = that_log;
					break;
				}
			}
			if (not search.empty()) {
				for (int i = 0; i < text_decode.size(); i++) {
					if (to_lower(explode("\n", text_decode[i])[0].c_str()).find(to_lower(search)) != string::npos) {
						log_text += "\nadd_smalltext|" + a + explode("\n", text_decode[i])[0].c_str() + "|left|";
						found++;
					}
				}
			}
			else {
				if (text_decode.size() > 1) {
					if (pInfo(peer)->search_page >= text_decode.size()) {
						pInfo(peer)->search_page = text_decode.size() - 20;
					}
					for (int i = (pInfo(peer)->search_page > text_decode.size() ? 0 : pInfo(peer)->search_page - 20); i < (pInfo(peer)->search_page > text_decode.size() ? text_decode.size() : pInfo(peer)->search_page); i++) log_text += "\nadd_smalltext|" + a + explode("\n", text_decode[i])[0].c_str() + "|left|";
				}
			}
			VarList::OnDialogRequest(peer, SetColor(peer) + "set_default_color|`o\nadd_label_with_icon|big|`w" + button + "``|left|3732|\nembed_data|logs_title|" + button + "" + (log_text.empty() ? "\nadd_smalltext|No logs yet|left|\nend_dialog|logs|OK||" : "\nadd_spacer|small|\nadd_text_input|search|Search: " + (not search.empty() ? "(" + to_string(found) + ")" : "") + ":||30|\nadd_spacer|small|" + log_text + "\nadd_spacer|small|" + (not search.empty() ? "" : "" + a + (pInfo(peer)->search_page != 20 ? "\nadd_button|Previous page|`#<Previous 20>``|noflags|0|0|" : "") + "\nadd_button|Next page|`#<Next 20>``|noflags|0|0|") + "\nend_dialog|logs_search|OK|Search|") + "");
		}
	};
	class ModLogs {
	public:
		static void Add(ENetPeer* peer, string bywho, string text, string timed) {
			for (ENetPeer* cp_ = server->peers; cp_ < &server->peers[server->peerCount]; ++cp_) {
				if (cp_->state != ENET_PEER_STATE_CONNECTED or cp_->data == NULL) continue;
				if (Role::Moderator(cp_)) {
					VarList::OnConsoleMessage(cp_, "CT:[FC]_>> `o>> [`#MOD-LOGS`o] from `o(" + bywho + "`o) in [" + pInfo(peer)->world + "] > " + text + "" + (timed != "" ? " for " + timed + "``" : ""));
				}
			}
		}
	};
	class CctvLogs {
	public:
		static void Add(ENetPeer* peer, string type, string extra) {
			struct tm newtime;
			time_t now = time(0);
#ifdef _WIN32
			localtime_s(&newtime, &now);
#elif defined(__linux__)
			localtime_r(&now, &newtime);
#endif
			WorldCCTV cctv_{};
			std::string name_ = pInfo(peer)->world;
			std::vector<World>::iterator p = find_if(worlds.begin(), worlds.end(), [name_](const World& a) { return a.name == name_; });
			if (p != worlds.end()) {
				World* world_ = &worlds[p - worlds.begin()];
				for (int i2_ = 0; i2_ < world_->cctv_settings.size(); i2_++) {
					cctv_.logs = "";
					if (world_->cctv_settings[i2_][6] && to_lower(pInfo(peer)->tankIDName) == to_lower(world_->owner_name)) break;
					if (world_->cctv_settings[i2_][8] && to_lower(pInfo(peer)->tankIDName) != to_lower(world_->owner_name) and !guild_access(peer, world_->guild_id) and find(world_->admins.begin(), world_->admins.end(), to_lower(pInfo(peer)->tankIDName)) == world_->admins.end()) break;
					if (world_->cctv_settings[i2_][7] && find(world_->admins.begin(), world_->admins.end(), to_lower(pInfo(peer)->tankIDName)) != world_->admins.end()) break;
					if (type == "entered" && world_->cctv_settings[i2_][4] or type == "left" && world_->cctv_settings[i2_][5] or type == "took" && world_->cctv_settings[i2_][2] or type == "dropped" && world_->cctv_settings[i2_][3] or type == "bought" && world_->cctv_settings[i2_][9]) cctv_.logs = "\nadd_label_with_icon|small|`w" + pInfo(peer)->tankIDName + "`w " + type + "" + (extra.empty() ? " " : " " + extra + " ") + "at " + to_string(newtime.tm_hour) + ":" + to_string(newtime.tm_min) + " on " + to_string(newtime.tm_mon + 1) + "/" + to_string(newtime.tm_mday) + "``|left|" + (type == "entered" ? "13804" : type == "left" ? "13806" : type == "took" ? "13808" : type == "dropped" ? "13810" : "13812") + "|";
					if (cctv_.logs != "") {
						if (world_->cctv.size() >= 50) world_->cctv.erase(world_->cctv.begin() + 0);
						if (world_->cctv.size() > 51) for (int i = 0; i < world_->cctv.size(); i++) if (i >= 51) world_->cctv.erase(world_->cctv.begin() + 0);
						cctv_.x = world_->cctv_settings[i2_][0], cctv_.y = world_->cctv_settings[i2_][1];
						world_->cctv.push_back(cctv_);
					}
				}
			}
		}
	};
	class Top_Player {
	public:
		static void Add(string name) {
			vector<pair<int, string>>::iterator p = find_if(top_player_points.begin(), top_player_points.end(), [&](const pair < int, string>& element) { return element.second == name; });
			if (p != top_player_points.end()) {
				top_player_points[p - top_player_points.begin()].first++;
				top_player_points[p - top_player_points.begin()].second = name;
			}
			else top_player_points.push_back(make_pair(1, name));
		}
	};
	class Ratings {
	public:
		static void Add(string world, string owner, string world_type, int points) {
			if (points < 100) points = 100;
			else if (points > 500) points = 500;
			if (world.empty() or world_type.empty()) return;
			std::vector<WorldRate>::iterator p = find_if(world_rating.begin(), world_rating.end(), [&](const WorldRate& a) { return a.name == world; });
			if (p != world_rating.end()) {
				WorldRate* rating = &world_rating[p - world_rating.begin()];
				if (world_type != rating->category) rating->rating.clear();
				rating->rating.push_back(points);
				rating->category = world_type;
			}
			else {
				WorldRate new_data;
				new_data.name = world;
				new_data.category = world_type;
				new_data.rating = { points };
				world_rating.push_back(new_data);
			}
		}
	};
	class Honors {
	public:
		static void Add(string world, string owner) {
			if (world.empty()) return;
			vector<pair<int, string>>::iterator p = find_if(Environment()->top_points.begin(), Environment()->top_points.end(), [&](const pair < int, string>& element) { return element.second.substr(0, element.second.find("|")) == world; });
			if (p != Environment()->top_points.end()) {
				Environment()->top_points[p - Environment()->top_points.begin()].first++;
				Environment()->top_points[p - Environment()->top_points.begin()].second = world + "|`#" + owner;
			}
			else Environment()->top_points.push_back(make_pair(1, world + "|" + owner));
			vector<pair<int, string>>::iterator p2 = find_if(Environment()->top_overall.begin(), Environment()->top_overall.end(), [&](const pair < int, string>& element) { return element.second.substr(0, element.second.find("|")) == world; });
			if (p2 != Environment()->top_overall.end()) {
				Environment()->top_overall[p2 - Environment()->top_overall.begin()].first++;
				Environment()->top_overall[p2 - Environment()->top_overall.begin()].second = world + "|`#" + owner;
			}
			else Environment()->top_overall.push_back(make_pair(1, world + "|" + owner));
		}
		static void Reset() {
			struct tm newtime;
			time_t now = time(0);
#ifdef _WIN32
			localtime_s(&newtime, &now);
#elif defined(__linux__)
			localtime_r(&now, &newtime);
#endif
			bool clean_up = false;
			if (today_month != -1) {
				if (today_month != newtime.tm_mon + 1) {
					today_month = newtime.tm_mon + 1;
					world_rating.clear();
					Environment()->top_overall.clear();
					top_player_points.clear();
				}
			}
			if (newtime.tm_mday == 29) {
				Event()->Comet_Dust = true;
			}
			else {
				Event()->Comet_Dust = false;
			}
			today_day = newtime.tm_mday;
			today_month = newtime.tm_mon + 1;
			rolequest_day = newtime.tm_wday;
			long long ms_time = duration_cast<milliseconds>(system_clock::now().time_since_epoch()).count();
			if (Honors_Update.last_old_honors - ms_time <= 0 or Honors_Update.last_old_honors == 0 or clean_up or top_yesterday_list.empty()) {
				best_quote = Environment()->random_quotes[rand() % Environment()->random_quotes.size()];
				vector<pair<int, string>> top_tier = Environment()->top_points;
				top_list.clear(), Environment()->List_World_Menu.clear(), top_basher_list.clear(), top_guild_list.clear(), top_basher_list_shop.clear(), top_guild_list_shop.clear();
				Honors_Update.world_honors.clear();
				sort(top_tier.begin(), top_tier.end());
				reverse(top_tier.begin(), top_tier.end());
				top_tier.resize((top_tier.size() >= 200 ? 200 : top_tier.size()));
				for (uint8_t i = 0; i < top_tier.size(); i++) {
					string world = top_tier[i].second.substr(0, top_tier[i].second.find("|")), owner = top_tier[i].second.substr(top_tier[i].second.find("|") + 1);
					Honors_Update.world_honors.push_back(make_pair(world, "`8#" + to_string(i + 1) + " today``"));
					if (i < 50) Environment()->List_World_Menu += "\nadd_floater|" + world + "|" + to_string((i + 1) * -1) + "|0.38|3417414143";
					top_list += "\nadd_button|warp_to_" + world + "|`w#" + to_string(i + 1) + "`` " + world + " by " + owner + "|noflags|0|0|";
				}
				if (top_list.empty()) top_list = "\nadd_smalltext|The list should update in few minutes.|\nadd_spacer|small|";
				{
					Environment()->world_rate_types = { {},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{} };
					for (int i = 0; i < Environment()->world_rate_types.size(); i++) {
						vector<pair<int, string>> top_rating;
						for (int i_ = 0; i_ < world_rating.size(); i_++) {
							if (world_category_id(world_rating[i_].category) == i) {
								int rating = item_average2(world_rating[i_].rating);
								string rating2 = to_string(rating);
								top_rating.push_back(make_pair(rating, world_rating[i_].name + "|" + rating2.substr(0, 1) + "." + rating2.substr(1, 2)));
							}
						}
						top_tier = top_rating;
						sort(top_tier.begin(), top_tier.end());
						reverse(top_tier.begin(), top_tier.end());
						top_tier.resize((top_tier.size() >= 100 ? 100 : top_tier.size()));
						for (uint8_t is = 0; is < top_tier.size(); is++) Environment()->world_rate_types[i].push_back(top_tier[is].second);
					}
				}
				top_overall_list.clear(), top_yesterday_list.clear();
				top_tier = Environment()->top_yesterday;
				sort(top_tier.begin(), top_tier.end());
				reverse(top_tier.begin(), top_tier.end());
				top_tier.resize((top_tier.size() >= 200 ? 200 : top_tier.size()));
				Environment()->top_yesterday = top_tier;
				for (uint8_t i = 0; i < top_tier.size(); i++) {
					string world = top_tier[i].second.substr(0, top_tier[i].second.find("|")), owner = top_tier[i].second.substr(top_tier[i].second.find("|") + 1);
					vector<pair<string, string>>::iterator paa = find_if(Honors_Update.world_honors.begin(), Honors_Update.world_honors.end(), [&](const pair<string, string>& a) { return a.first == world; });
					if (paa != Honors_Update.world_honors.end()) Honors_Update.world_honors[paa - Honors_Update.world_honors.begin()].second += ", `5#" + to_string(i + 1) + " yesterday``";
					else Honors_Update.world_honors.push_back(make_pair(world, "`5#" + to_string(i + 1) + " yesterday``"));
					top_yesterday_list += "\nadd_button|warp_to_" + world + "|`w#" + to_string(i + 1) + "`` " + world + " by " + owner + "|noflags|0|0|";
				}
				top_tier = Environment()->top_overall;
				sort(top_tier.begin(), top_tier.end());
				reverse(top_tier.begin(), top_tier.end());
				top_tier.resize((top_tier.size() >= 200 ? 200 : top_tier.size()));
				for (uint8_t i = 0; i < top_tier.size(); i++) {
					string world = top_tier[i].second.substr(0, top_tier[i].second.find("|")), owner = top_tier[i].second.substr(top_tier[i].second.find("|") + 1);
					vector<pair<string, string>>::iterator paa = find_if(Honors_Update.world_honors.begin(), Honors_Update.world_honors.end(), [&](const pair<string, string>& a) { return a.first == world; });
					if (paa != Honors_Update.world_honors.end()) Honors_Update.world_honors[paa - Honors_Update.world_honors.begin()].second += ", `0#" + to_string(i + 1) + " overall``";
					else Honors_Update.world_honors.push_back(make_pair(world, "`0#" + to_string(i + 1) + " overall``"));
					top_overall_list += "\nadd_button|warp_to_" + world + "|`w#" + to_string(i + 1) + "`` " + world + " by " + owner + "|noflags|0|0|";
				}
				if (top_yesterday_list.empty()) top_yesterday_list = "\nadd_smalltext|The list should update in few minutes.|\nadd_spacer|small|";
				if (top_overall_list.empty()) top_overall_list = "\nadd_smalltext|The list should update in few minutes.|\nadd_spacer|small|";
				Honors_Update.last_old_honors = ms_time + 23200000;
			}
		}
	};
	class SaveDatabase {
	public:
		static void Players(Player* p_, bool on_exit) {
			if (p_->tankIDName.empty() or p_->tankIDPass.empty()) return;
			struct tm newtime;
			time_t now = time(0);
#ifdef _WIN32
			localtime_s(&newtime, &now);
#elif defined(__linux__)
			localtime_r(&now, &newtime);
#endif
			try {
				json save_;
				save_["name"] = p_->tankIDName;
				save_["requestedName"] = p_->requestedName;
				save_["id"] = p_->id;
				save_["recovery_token"] = p_->recovery_token;
				save_["player_token"] = p_->player_token;
				save_["AccountSecured"] = p_->AccountSecured;
				save_["Has_Verifed"] = p_->Has_Verifed;
				save_["border_color"] = p_->border_color;
				save_["bg_color"] = p_->bg_color;
				save_["has_claim_event_wls"] = p_->has_claim_event_wls;
				save_["n"] = p_->n;
				save_["m_h"] = p_->m_h;
				save_["cc"] = p_->cc;
				save_["opc"] = p_->opc;
				save_["7bans"] = p_->bans;
				save_["Warning"] = p_->Warning;
				save_["Warning_Message"] = p_->Warning_Message;
				save_["Account_Notes"] = p_->Account_Notes;
				save_["worlds_favorite"] = p_->worlds_favorite;
				save_["StarglitterTask_Prize"] = p_->StarglitterTask_Prize;
				save_["starglitter_enter"] = p_->starglitter_enter;
				save_["starglitter_seed"] = p_->starglitter_seed;
				save_["starglitter_seed2"] = p_->starglitter_seed2;
				save_["starglitter_combine"] = p_->starglitter_combine;
				save_["starglitter_crystal"] = p_->starglitter_crystal;
				save_["starglitter_points"] = p_->starglitter_points;
				save_["starglitter_email"] = p_->starglitter_email;
				save_["starglitter_surgery"] = p_->starglitter_surgery;
				save_["starglitter_fish"] = p_->starglitter_fish;
				save_["starglitter_break"] = p_->starglitter_break;
				save_["starglitter_place"] = p_->starglitter_place;
				save_["starglitter_trade"] = p_->starglitter_trade;
				save_["starglitter_sb"] = p_->starglitter_sb;
				save_["starglitter_provider"] = p_->starglitter_provider;
				save_["starglitter_provider2"] = p_->starglitter_provider2;
				save_["starglitter_geiger"] = p_->starglitter_geiger;
				save_["starglitter_geiger2"] = p_->starglitter_geiger2;
				save_["starglitter_reset_day"] = p_->starglitter_reset_day;
				save_["starglitter_reset_week"] = p_->starglitter_reset_week;
				save_["starglitter_reset_month"] = p_->starglitter_reset_month;
				save_["w_w"] = p_->w_w;
				save_["mer"] = p_->mercy;
				save_["meta"] = p_->meta;
				save_["drtt"] = p_->drtitle;
				save_["drll"] = p_->drlegend;
				save_["_drt"] = p_->drt;
				save_["dnr"] = p_->donor;
				save_["mst"] = p_->master;
				save_["wls_participated"] = p_->wls_participated;
				save_["mentor"] = p_->mentor;
				save_["radio2"] = p_->radio2;
				save_["ttBadge"] = p_->ttBadge;
				save_["ccBadge"] = p_->ccBadge;
				save_["Role.Cheats"] = p_->Role.Cheats;
				save_["Role.Vip"] = p_->Role.Vip;
				save_["Role.Moderator"] = p_->Role.Moderator;
				save_["Role.Administrator"] = p_->Role.Administrator;
				save_["Role.Developer"] = p_->Role.Developer;
				save_["Role.God"] = p_->Role.God;
				save_["Role.Unlimited"] = p_->Role.Unlimited;
				save_["Role.Owner_Server"] = p_->Role.Owner_Server;
				save_["Role.BOOST"] = p_->Role.BOOST;
				save_["Role.SUPER_BOOST"] = p_->Role.SUPER_BOOST;
				save_["bos_time"] = p_->Role.BOOST_TIME;
				save_["spbos_time"] = p_->Role.SUPER_BOOST_TIME;
				save_["Title.OfLegend"] = p_->Title.OfLegend;
				save_["Title.Doctor"] = p_->Title.Doctor;
				save_["Title.Grow4Good"] = p_->Title.Grow4Good;
				save_["Title.Mentor"] = p_->Title.Mentor;
				save_["Title.TiktokBadge"] = p_->Title.TiktokBadge;
				save_["Title.ContentCBadge"] = p_->Title.ContentCBadge;
				save_["Title.PartyAnimal"] = p_->Title.PartyAnimal;
				save_["Title.ThanksGiving"] = p_->Title.ThanksGiving;
				save_["Title.OldTimer"] = p_->Title.OldTimer;
				save_["Title.WinterSanta"] = p_->Title.WinterSanta;
				save_["Title.GrowPass_Gold"] = p_->Title.GrowPass_Gold;
				save_["Title.GrowPass_Silver"] = p_->Title.GrowPass_Silver;
				save_["Title.GrowPass_Bronze"] = p_->Title.GrowPass_Bronze;
				save_["Title.Award_Winning"] = p_->Title.Award_Winning;
				save_["TitleTexture"] = p_->TitleTexture;
				save_["TitleCoordinate"] = p_->TitleCoordinate;
				save_["tgiv"] = p_->tgiv;
				save_["gp_gold"] = p_->gp_gold;
				save_["gp_silver"] = p_->gp_silver;
				save_["gp_bronze"] = p_->gp_bronze;
				save_["aw_winning"] = p_->aw_winning;
				save_["party_animal"] = p_->party_animal;
				save_["anni_old"] = p_->anni_old;
				save_["santa"] = p_->santa;
				save_["participated"] = p_->participated;
				save_["redeem_code"] = p_->redeem_code;
				save_["EarnFreeGems.Time"] = p_->EarnFreeGems.Time;
				save_["EarnFreeGems.Quest_1"] = p_->EarnFreeGems.Quest_1;
				save_["EarnFreeGems.Quest_2"] = p_->EarnFreeGems.Quest_2;
				save_["EarnFreeGems.Quest_3"] = p_->EarnFreeGems.Quest_3;
				save_["EarnFreeGems.Claim"] = p_->EarnFreeGems.Claim;
				save_["ig"] = p_->ignored;
				save_["wipe"] = p_->wiped_invalid_worlds;
				save_["received_recycle_prize"] = p_->received_recycle_prize;
				save_["lr"] = p_->last_rated;
				save_["sc"] = p_->skin_c;
				save_["as"] = p_->autofarm_slot;
				save_["playtime_items"] = p_->playtime_items;
				save_["bc"] = p_->black_color;
				save_["on"] = p_->p_status;
				save_["rubble"] = p_->rubble;
				save_["a_s"] = p_->Aura_Season;
				save_["t_s"] = p_->Trail_Season;
				save_["ba_i"] = p_->Banner_Item;
				save_["ba_f"] = p_->Banner_Flag;
				save_["p_d1"] = p_->pinata_day;
				save_["p_d2"] = p_->pinata_prize;
				save_["p_d3"] = p_->pinata_claimed;
				save_["growpass_points"] = p_->growpass_points;
				save_["growpass_prizes"] = p_->growpass_prizes;
				save_["growpass_quests"] = p_->growpass_quests;
				save_["Wrench_Style"] = p_->Wrench_Style;
				save_["Wrench_Decoration"] = p_->Wrench_Decoration;
				save_["sm1"] = p_->summer_surprise;
				save_["sm2"] = p_->summer_total;
				save_["sm3"] = p_->summer_milestone;
				save_["c_t_c"] = p_->Crown_Time_Change;
				save_["c_c_t"] = p_->Crown_Cycle_Time;
				save_["br0"] = p_->Base_R_0;
				save_["bg0"] = p_->Base_G_0;
				save_["bb0"] = p_->Base_B_0;
				save_["gr0"] = p_->Gem_R_0;
				save_["gg0"] = p_->Gem_G_0;
				save_["gb0"] = p_->Gem_B_0;
				save_["cr0"] = p_->Crystal_R_0;
				save_["cg0"] = p_->Crystal_G_0;
				save_["cb0"] = p_->Crystal_B_0;
				save_["cfe0"] = p_->Crown_Floating_Effect_0;
				save_["clb0"] = p_->Crown_Laser_Beam_0;
				save_["crc0"] = p_->Crown_Crystals_0;
				save_["c0rr"] = p_->Crown_Rays_0;
				save_["Base_R_1"] = p_->Base_R_1;
				save_["Base_G_1"] = p_->Base_G_1;
				save_["Base_B_1"] = p_->Base_B_1;
				save_["Gem_R_1"] = p_->Gem_R_1;
				save_["Gem_G_1"] = p_->Gem_G_1;
				save_["Gem_B_1"] = p_->Gem_B_1;
				save_["Crystal_R_1"] = p_->Crystal_R_1;
				save_["Crystal_G_1"] = p_->Crystal_G_1;
				save_["Crystal_B_1"] = p_->Crystal_B_1;
				save_["Crown_Floating_Effect_1"] = p_->Crown_Floating_Effect_1;
				save_["Crown_Laser_Beam_1"] = p_->Crown_Laser_Beam_1;
				save_["Crown_Crystals_1"] = p_->Crown_Crystals_1;
				save_["Crown_Rays_1"] = p_->Crown_Rays_1;
				save_["Crown_Value"] = p_->Crown_Value;
				save_["Crown_Value_0_0"] = p_->Crown_Value_0_0;
				save_["Crown_Value_0_1"] = p_->Crown_Value_0_1;
				save_["Crown_Value_0_2"] = p_->Crown_Value_0_2;
				save_["Crown_Value_1_0"] = p_->Crown_Value_1_0;
				save_["Crown_Value_1_1"] = p_->Crown_Value_1_1;
				save_["Crown_Value_1_2"] = p_->Crown_Value_1_2;
				save_["c_s"] = p_->cheater_settings;
				save_["egg"] = p_->egg_carton;
				save_["egg2"] = p_->magic_egg;
				save_["mg"] = p_->Magnet_Item;
				save_["g_a_b"] = p_->grow_air_ballon;
				save_["ca_c"] = p_->carnival_credit;
				save_["CQuest"] = p_->C_QuestActive;
				save_["CQItem"] = p_->C_DeliverID;
				save_["CQProg"] = p_->C_QuestProgress;
				save_["CQKind"] = p_->C_QuestKind;
				save_["CQNeed"] = p_->C_ProgressNeeded;
				save_["CQStep"] = p_->C_QuestStep;
				save_["balloon_prize"] = p_->received_balloon_warz;
				save_["grm"] = p_->growmoji;
				save_["12640"] = p_->minokawa_wings;
				save_["12872"] = p_->panda_spirit;
				save_["11506"] = p_->mask_dragon;
				save_["7384"] = p_->growformer;
				save_["12634"] = p_->eq_aura;
				save_["bb_1"] = p_->balloon_faction;
				save_["bb_2"] = p_->balloon_hit;
				save_["bb_3"] = p_->hit_by;
				save_["bb_4"] = p_->balloon_donated;
				save_["bb_5"] = p_->balloon_score;
				save_["lw_1"] = p_->lwiz_quest;
				save_["lw_2"] = p_->lwiz_step;
				save_["lw_3"] = p_->lwiz_notification;
				save_["lw_4"] = p_->legendary_quest;
				save_["is_legend"] = p_->is_legend;
				save_["ri_1"] = p_->cape_t;
				save_["ri_2"] = p_->cape_c;
				save_["ri_3"] = p_->cape_t2;
				save_["ri_4"] = p_->cape_c2;
				save_["ri_5"] = p_->flags;
				save_["ri_6"] = p_->TimeDilation;
				save_["ri_7"] = p_->CapeStyleColor_1;
				save_["ri_8"] = p_->CapeStyleColor_2;
				save_["ri_9"] = p_->CapeCollarColor_1;
				save_["ri_10"] = p_->CapeCollarColor_2;
				save_["rw_1"] = p_->wings_t;
				save_["rw_2"] = p_->wings_c;
				save_["rw_3"] = p_->wings_t2;
				save_["rw_4"] = p_->wings_c2;
				save_["rw_5"] = p_->_flags;
				save_["rw_6"] = p_->_TimeDilation;
				save_["rw_7"] = p_->_CapeStyleColor_1;
				save_["rw_8"] = p_->_CapeStyleColor_2;
				save_["rw_9"] = p_->_CapeCollarColor_1;
				save_["rw_10"] = p_->_CapeCollarColor_2;
				save_["p_7"] = p_->pure_shadow;
				save_["gr_w"] = p_->growtoken_worlds;
				save_["2fa"] = p_->fa2;
				save_["p_1"] = p_->display_age;
				save_["p_2"] = p_->display_home;
				save_["fire"] = p_->fires;
				save_["bea_1"] = p_->pearl;
				save_["spr"] = p_->sprite;
				save_["spr2"] = p_->wild;
				save_["spr3"] = p_->golem;
				save_["p1_1"] = p_->total_pineapple;
				save_["p1_2"] = p_->stage_pineapple;
				save_["lvl125"] = p_->lvl125;
				save_["rad"] = p_->radio;
				save_["skl"] = p_->surgery_skill;
				save_["sgt"] = p_->surgery_type;
				save_["sd"] = p_->surgery_done;
				save_["su1"] = p_->su_8552_1;
				save_["su2"] = p_->su_8552_2;
				save_["su3"] = p_->su_8552_3;
				save_["pg_bank"] = p_->pg_bank;
				save_["Banked_Piggy"] = p_->Banked_Piggy;
				save_["glo"] = p_->glo;
				save_["b_t"] = p_->b_t;
				save_["b_b"] = p_->b_b;
				save_["dd"] = p_->dd;
				save_["lo"] = to_string(newtime.tm_mon + 1) + "/" + to_string(today_day) + "/" + to_string(1900 + newtime.tm_year) + " " + to_string(newtime.tm_hour) + ":" + (newtime.tm_min < 10 ? "0" + to_string(newtime.tm_min) + "" : "" + to_string(newtime.tm_min)) + ":" + to_string(newtime.tm_sec);
				save_["ip"] = p_->ip;
				save_["fa_ip"] = p_->fa_ip;
				save_["b_s"] = p_->b_s;
				save_["b_r"] = p_->b_r;
				save_["b_ra"] = p_->b_ra;
				save_["i_11818_1"] = p_->i_11818_1;
				save_["i_11818_2"] = p_->i_11818_2;
				save_["e_1"] = p_->hair_color;
				save_["e_2"] = p_->eye_drop;
				save_["e_3"] = p_->eye_lenses;
				save_["b_lvl"] = p_->b_lvl;
				save_["b_i"] = p_->b_i;
				save_["b_bill"] = p_->b_bill;
				save_["myou"] = p_->mini_you;
				save_["b_w"] = p_->b_w;
				save_["b_p"] = p_->b_p;
				save_["m_b"] = p_->m_b;
				save_["note"] = p_->note;
				save_["supp"] = p_->supp;
				save_["hs"] = p_->hs;
				save_["bb"] = p_->bb;
				save_["gtwl"] = p_->gtwl;
				save_["rb"] = p_->rb;
				save_["gp"] = p_->gp;
				save_["g4p"] = p_->g4p;
				save_["glo_p"] = p_->glo_p;
				save_["lvl_p"] = p_->lvl_p;
				save_["surg_p"] = p_->surg_p;
				save_["t_p"] = p_->t_p;
				save_["bb_p"] = p_->bb_p;
				save_["ff_p"] = p_->ff_p;
				save_["p_p"] = p_->p_p;
				save_["g_p"] = p_->g_p;
				save_["t_xp"] = p_->t_xp;
				save_["bb_xp"] = p_->bb_xp;
				save_["ff_xp"] = p_->ff_xp;
				save_["s_xp"] = p_->s_xp;
				save_["g_xp"] = p_->g_xp;
				save_["p_xp"] = p_->p_xp;
				save_["t_lvl"] = p_->t_lvl;
				save_["bb_lvl"] = p_->bb_lvl;
				save_["ff_lvl"] = p_->ff_lvl;
				save_["g_lvl"] = p_->g_lvl;
				save_["p_lvl"] = p_->p_lvl;
				save_["s_lvl"] = p_->s_lvl;
				save_["b_l"] = p_->b_l;
				save_["bp"] = p_->bp;
				save_["flagmay"] = p_->flagmay;
				save_["epic_quest_total"] = p_->epic_quest_total;
				save_["epicq_lvl100"] = p_->epicq_lvl100;
				save_["epicq_plant_wiz"] = p_->epicq_plant_wiz;
				save_["epicq_emeraldlock"] = p_->epicq_emeraldlock;
				save_["epicq_ghostcharm"] = p_->epicq_ghostcharm;
				save_["epicq_teddybear"] = p_->epicq_teddybear;
				save_["epicq_splice_wm_comet"] = p_->epicq_splice_wm_comet;
				save_["epicq_stonefish"] = p_->epicq_stonefish;
				save_["epicq_woolcraft"] = p_->epicq_woolcraft;
				save_["epicq_octopushead"] = p_->epicq_octopushead;
				save_["epicq_goldenaxe"] = p_->epicq_goldenaxe;
				save_["epicq_ddrag"] = p_->epicq_ddrag;
				save_["epicq_riding"] = p_->epicq_riding;
				save_["epicq_compactdress"] = p_->epicq_compactdress;
				save_["epicq_dressup"] = p_->epicq_dressup;
				save_["Slot_Far"] = p_->Slot_Far;
				save_["Mines_Score"] = p_->Mines_Score;
				save_["Number_License"] = p_->Number_License;
				save_["mines_coin"] = p_->mines_coin;
				save_["Has_Read_"] = p_->Has_Read_;
				save_["bank_password"] = p_->bank_password;
				save_["wl_bank_amount"] = p_->wl_bank_amount;
				save_["dl_bank_amount"] = p_->dl_bank_amount;
				save_["pgl_bank_amount"] = p_->pgl_bank_amount;
				save_["mgl_bank_amount"] = p_->mgl_bank_amount;
				save_["igl_bank_amount"] = p_->igl_bank_amount;
				save_["Bank_History"] = p_->Bank_History;
				save_["tscanc"] = p_->tscanc;
				save_["Gems_Storage"] = p_->Gems_Storage;
				save_["last_rank_per"] = p_->last_rank_per;
				save_["last_rank_guild"] = p_->last_rank_guild;
				save_["last_guild_contri"] = p_->last_guild_contri;
				save_["last_personal_contri"] = p_->last_personal_contri;
				save_["spring_token"] = p_->spring_token;
				save_["summer_token"] = p_->summer_token;
				save_["winter_token"] = p_->winter_token;
				save_["Legendary_Keys"] = p_->Legendary_Keys;
				save_["raw5_legendary_claim"] = p_->raw5_legendary_claim;
				save_["participated_personal"] = p_->participated_personal;
				save_["next_guild_event"] = p_->next_guild_event;
				save_["row1_items1_claim"] = p_->row1_items1_claim;
				save_["row1_items2_claim"] = p_->row1_items2_claim;
				save_["row1_items3_claim"] = p_->row1_items3_claim;
				save_["row1_items4_claim"] = p_->row1_items4_claim;
				save_["row1_items5_claim"] = p_->row1_items5_claim;
				save_["row1_items6_claim"] = p_->row1_items6_claim;
				save_["row2_items1_claim"] = p_->row2_items1_claim;
				save_["row2_items2_claim"] = p_->row2_items2_claim;
				save_["row2_items3_claim"] = p_->row2_items3_claim;
				save_["row2_items4_claim"] = p_->row2_items4_claim;
				save_["row2_items5_claim"] = p_->row2_items5_claim;
				save_["row2_items6_claim"] = p_->row2_items6_claim;
				save_["row3_items1_claim"] = p_->row3_items1_claim;
				save_["row3_items2_claim"] = p_->row3_items2_claim;
				save_["row3_items3_claim"] = p_->row3_items3_claim;
				save_["row3_items4_claim"] = p_->row3_items4_claim;
				save_["row3_items5_claim"] = p_->row3_items5_claim;
				save_["row3_items6_claim"] = p_->row3_items6_claim;
				save_["row4_items1_claim"] = p_->row4_items1_claim;
				save_["row4_items2_claim"] = p_->row4_items2_claim;
				save_["row4_items3_claim"] = p_->row4_items3_claim;
				save_["row4_items4_claim"] = p_->row4_items4_claim;
				save_["row4_items5_claim"] = p_->row4_items5_claim;
				save_["row4_items6_claim"] = p_->row4_items6_claim;
				save_["claim_top1"] = p_->claim_top1;
				save_["claim_top2"] = p_->claim_top2;
				save_["claim_top3"] = p_->claim_top3;
				save_["claim_top4"] = p_->claim_top4;
				save_["claim_top5"] = p_->claim_top5;
				save_["claim_top6"] = p_->claim_top6;
				save_["claim_top7"] = p_->claim_top7;
				save_["claim_top8"] = p_->claim_top8;
				save_["claim_top9"] = p_->claim_top9;
				save_["claim_top10"] = p_->claim_top10;
				save_["claim_top11"] = p_->claim_top11;
				save_["claim_top12"] = p_->claim_top12;
				save_["claim_top13"] = p_->claim_top13;
				save_["claim_top14"] = p_->claim_top14;
				save_["claim_top15"] = p_->claim_top15;
				save_["claim_top16"] = p_->claim_top16;
				save_["claim_top17"] = p_->claim_top17;
				save_["claim_top18"] = p_->claim_top18;
				save_["claim_top19"] = p_->claim_top19;
				save_["claim_top20"] = p_->claim_top20;
				save_["claim_top1g"] = p_->claim_top1g;
				save_["claim_top2g"] = p_->claim_top2g;
				save_["claim_top3g"] = p_->claim_top3g;
				save_["claim_top4g"] = p_->claim_top4g;
				save_["claim_top5g"] = p_->claim_top5g;
				save_["claim_top6g"] = p_->claim_top6g;
				save_["claim_top7g"] = p_->claim_top7g;
				save_["claim_top8g"] = p_->claim_top8g;
				save_["claim_top9g"] = p_->claim_top9g;
				save_["claim_top10g"] = p_->claim_top10g;
				save_["claim_top11g"] = p_->claim_top11g;
				save_["claim_top12g"] = p_->claim_top12g;
				save_["claim_top13g"] = p_->claim_top13g;
				save_["claim_top14g"] = p_->claim_top14g;
				save_["claim_top15g"] = p_->claim_top15g;
				save_["claim_top16g"] = p_->claim_top16g;
				save_["claim_top17g"] = p_->claim_top17g;
				save_["claim_top18g"] = p_->claim_top18g;
				save_["claim_top19g"] = p_->claim_top19g;
				save_["claim_top20g"] = p_->claim_top20g;
				save_["claim_top21g"] = p_->claim_top21g;
				save_["claim_top22g"] = p_->claim_top22g;
				save_["claim_top23g"] = p_->claim_top23g;
				save_["claim_top24g"] = p_->claim_top24g;
				save_["claim_top25g"] = p_->claim_top25g;
				save_["top_punch_1"] = p_->top_punch_1;
				save_["top_punch_2"] = p_->top_punch_2;
				save_["top_punch_3"] = p_->top_punch_3;
				save_["top_punch_4"] = p_->top_punch_4;
				save_["top_punch_5"] = p_->top_punch_5;
				save_["HalloweenTask_Prize"] = p_->HalloweenTask_Prize;
				save_["DarkKing_Sacrifices"] = p_->DarkKing_Sacrifices;
				save_["halloween_q1"] = p_->halloween_q1;
				save_["halloween_q2"] = p_->halloween_q2;
				save_["halloween_q3"] = p_->halloween_q3;
				save_["halloween_q4"] = p_->halloween_q4;
				save_["halloween_q5"] = p_->halloween_q5;
				save_["halloween_q6"] = p_->halloween_q6;
				save_["halloween_q7"] = p_->halloween_q7;
				save_["halloween_q8"] = p_->halloween_q8;
				save_["halloween_q9"] = p_->halloween_q9;
				save_["WinterBingo_Task"] = p_->WinterBingo_Task;
				save_["WinterBingo_Prize"] = p_->WinterBingo_Prize;
				save_["Has_BingoTask"] = p_->Has_BingoTask;
				save_["Has_ClaimBingo"] = p_->Has_ClaimBingo;
				save_["Has_BingoPrize"] = p_->Has_BingoPrize;
				save_["Has_WinBingo"] = p_->Has_WinBingo;
				save_["Present_Goblin"] = p_->Present_Goblin;
				save_["winter_seal"] = p_->winter_seal;
				save_["winter_seal_branch_1"] = p_->winter_seal_branch_1;
				save_["winter_seal_branch_2"] = p_->winter_seal_branch_2;
				save_["winter_seal_branch_3"] = p_->winter_seal_branch_3;
				save_["winter_seal_branch_4"] = p_->winter_seal_branch_4;
				save_["ability_upgrade_ances"] = p_->ability_upgrade_ances;
				save_["wrench_custom"] = p_->wrench_custom;
				save_["wrench_foreground_custom"] = p_->wrench_foreground_custom;
				save_["card_level"] = p_->card_level;
				save_["card_xp"] = p_->card_xp;
				save_["unlock_card_license"] = p_->unlock_card_license;
				save_["Slot_Credits"] = p_->Slot_Credits;
				save_["Slot_Points"] = p_->Slot_Points;
				save_["new_player"] = p_->new_player;
				save_["Gacha_History"] = p_->Gacha_History;
				save_["Pity"] = p_->Pity;
				save_["Pity_On"] = p_->Pity_On;
				save_["Intertwined_Fate"] = p_->Intertwined_Fate;
				save_["Acquaint_Fate"] = p_->Acquaint_Fate;
				save_["Claim_Code"] = p_->Has_Claim;
				save_["daily_login"] = p_->daily_login;
				save_["claimed_daily_today"] = p_->claimed_daily_today;
				save_["is_day"] = p_->is_day;
				save_["daily_login_day"] = p_->daily_login_day;
				save_["vip_daily"] = p_->vip_daily;
				save_["vip_claimed_daily"] = p_->vip_claimed_daily;
				save_["vip_day"] = p_->vip_day;
				save_["vip_daily_day"] = p_->vip_daily_day;
				save_["lvl_rewards"] = p_->lvl_rewards;
				save_["pet_netID"] = p_->pet_netID;
				save_["pet_ID"] = p_->pet_ID;
				save_["pet_level"] = p_->pet_level;
				save_["ability_xgems"] = p_->ability_xgems;
				save_["ability_xxp"] = p_->ability_xxp;
				save_["pet_type"] = p_->pet_type;
				save_["pet_ClothesUpdated"] = p_->pet_ClothesUpdated;
				save_["show_pets"] = p_->show_pets;
				save_["LiyueHtouFly"] = p_->LiyueHtouFly;
				save_["AbyssMageFly"] = p_->AbyssMageFly;
				save_["UuuzzFly"] = p_->UuuzzFly;
				save_["master_pet"] = p_->master_pet;
				save_["pet_name"] = p_->pet_name;
				save_["active_bluename"] = p_->active_bluename;
				save_["pet_xp"] = p_->pet_xp;
				save_["Pets_hunger"] = p_->Pets_hunger;
				save_["Pets_health"] = p_->Pets_health;
				save_["Pets_Builder_Lvl"] = p_->Pets_Builder_Lvl;
				save_["Pets_Farmer_Lvl"] = p_->Pets_Farmer_Lvl;
				save_["Pets_Dead"] = p_->Pets_Dead;
				save_["Pets_Death_Times"] = p_->Pets_Death_Times;
				save_["rolequest_reset_day"] = p_->rolequest_reset_day;
				save_["biweekly_reset_day"] = p_->biweekly_reset_day;
				save_["lifegoals_reset_day"] = p_->lifegoals_reset_day;
				save_["need_sumbit_req_id"] = p_->need_sumbit_req_id;
				save_["need_item_req_id"] = p_->need_item_req_id;
				save_["need_required"] = p_->need_required;
				save_["quest_required"] = p_->quest_required;
				save_["total_quest_selected"] = p_->total_quest_selected;
				save_["role_quest"] = p_->role_quest;
				save_["quest_number"] = p_->quest_number;
				save_["complete_rolequest_day"] = p_->complete_rolequest_day;
				save_["role_quest_type"] = p_->role_quest_type;
				save_["specialization_track"] = p_->specialization_track;
				save_["quest_text"] = p_->quest_text;
				save_["awesomeness"] = p_->awesomeness;
				save_["seed_goal"] = p_->seed_goal;
				save_["gem_goal"] = p_->gem_goal;
				save_["exp_goal"] = p_->exp_goal;
				save_["lifegoals1"] = p_->lifegoals1;
				save_["lifegoals2"] = p_->lifegoals2;
				save_["lifegoals3"] = p_->lifegoals3;
				save_["lifegoals_1"] = p_->lifegoals_1;
				save_["lifegoals_2"] = p_->lifegoals_2;
				save_["lifegoals_3"] = p_->lifegoals_3;
				save_["claim_myth_1"] = p_->claim_myth_1;
				save_["claim_myth_2"] = p_->claim_myth_2;
				save_["claim_myth_3"] = p_->claim_myth_3;
				save_["claim_myth_4"] = p_->claim_myth_4;
				save_["claim_myth_5"] = p_->claim_myth_5;
				save_["claim_myth_6"] = p_->claim_myth_6;
				save_["claim_seven_seas_1"] = p_->claim_seven_seas_1;
				save_["claim_seven_seas_2"] = p_->claim_seven_seas_2;
				save_["claim_seven_seas_3"] = p_->claim_seven_seas_3;
				save_["claim_seven_seas_4"] = p_->claim_seven_seas_4;
				save_["claim_seven_seas_5"] = p_->claim_seven_seas_5;
				save_["claim_seven_seas_6"] = p_->claim_seven_seas_6;
				save_["WinterTask_Prize"] = p_->WinterTask_Prize;
				save_["Winter_Branch_Rewards"] = p_->Winter_Branch_Rewards;
				save_["Winter_Daily_Time"] = p_->Winter_Daily_Time;
				save_["winterfest_wishes"] = p_->winterfest_wishes;
				save_["winterfest_quest_1"] = p_->winterfest_quest_1;
				save_["winterfest_quest_2"] = p_->winterfest_quest_2;
				save_["winterfest_quest_3"] = p_->winterfest_quest_3;
				save_["reset_winterfest_quest_1"] = p_->reset_winterfest_quest_1;
				save_["reset_winterfest_quest_2"] = p_->reset_winterfest_quest_2;
				save_["reset_winterfest_quest_3"] = p_->reset_winterfest_quest_3;
				save_["reset_winterfest_quest_4"] = p_->reset_winterfest_quest_4;
				save_["reset_winterfest_quest_5"] = p_->reset_winterfest_quest_5;
				save_["reset_winterfest_quest_6"] = p_->reset_winterfest_quest_6;
				save_["reset_winterfest_quest_7"] = p_->reset_winterfest_quest_7;
				save_["reset_winterfest_quest_8"] = p_->reset_winterfest_quest_8;
				save_["reset_winterfest_quest_9"] = p_->reset_winterfest_quest_9;
				save_["Bronze_Donatur"] = p_->Bronze_Donatur;
				save_["Silver_Donatur"] = p_->Silver_Donatur;
				save_["Gold_Donatur"] = p_->Gold_Donatur;
				save_["Diamond_Donatur"] = p_->Diamond_Donatur;
				save_["btp"] = p_->battle_pet;
				save_["staged"] = p_->staged;
				save_["s4tb"] = p_->s4tb;
				save_["winter_power"] = p_->winter_power;
				save_["Already_Tried_Gob"] = p_->Already_Tried_Gob;
				save_["DrDes"] = p_->DrDes;
				save_["Health_DrDes"] = p_->Health_DrDes;
				save_["St_Regen_Time"] = p_->St_Regen_Time;
				save_["Masterless_Starglitter"] = p_->Masterless_Starglitter;
				save_["Used_VipDoor"] = p_->Used_VipDoor;
				save_["sew1"] = p_->sew1;
				save_["sew2"] = p_->sew2;
				save_["sew3"] = p_->sew3;
				save_["totalsew"] = p_->totalsew;
				save_["sewtype"] = p_->sewtype;
				save_["sewunlocked"] = p_->sewunlocked;
				save_["Kit"] = p_->startedKit;
				save_["kit_level"] = p_->lvlKit;
				save_["kit_xp"] = p_->xpKit;
				save_["lvlKit_S2"] = p_->lvlKit_S2;
				save_["xpKit_S2"] = p_->xpKit_S2;
				save_["KitPass_Prize"] = p_->KitPass_Prize;
				save_["pass"] = p_->tankIDPass, save_["email"] = p_->email;
				save_["gems"] = p_->gems;
				save_["vou"] = p_->voucher;
				save_["punch"] = p_->punch_count;
				save_["home_world"] = p_->home_world;
				save_["show_location"] = p_->show_location_;
				save_["show_notifications"] = p_->show_friend_notifications_;
				save_["xp"] = p_->xp;
				save_["d_name"] = p_->d_name;
				save_["level"] = p_->level;
				save_["skin"] = p_->skin;
				save_["geiger"] = p_->geiger_;
				save_["ghost"] = p_->ghost;
				save_["invis"] = p_->invis;
				save_["date"] = p_->account_created;
				save_["booty_broken"] = p_->booty_broken;
				save_["playtime"] = p_->seconds + (time(NULL) - p_->playtime);
				save_["guild_id"] = p_->guild_id;
				save_["legend"] = p_->is_legend;
				save_["roleSkin"] = p_->roleSkin;
				save_["roleIcon"] = p_->roleIcon;
				save_["rid"] = p_->rid;
				save_["playmods"] = p_->playmods;
				save_["worlds_owned"] = p_->worlds_owned;
				save_["la_wo"] = p_->last_visited_worlds;
				save_["t_h"] = p_->trade_history;
				save_["inventory"] = p_->inv;
				save_["trans"] = p_->transmute;
				save_["friends"] = p_->friends;
				save_["favitem"] = p_->Fav_Items;
				save_["hair"] = p_->hair, save_["shirt"] = p_->shirt, save_["pants"] = p_->pants, save_["feet"] = p_->feet, save_["face"] = p_->face, save_["hand"] = p_->hand, save_["back"] = p_->back, save_["mask"] = p_->mask, save_["necklace"] = p_->necklace, save_["ances"] = p_->ances;			
				if (save_.dump().size() > 1000000) {
					Logger::Info("ERROR", "" + p_->tankIDName + " JSON data is too large to save!");
					return;
				}
				std::ofstream file("database/players/" + p_->tankIDName + "_.json");
				if (!file.is_open()) {
					Logger::Info("ERROR", "Failed to open file database/players/" + p_->tankIDName + "_.json for writing!");
					return;
				}
				file << save_.dump(4);
				if (file.fail()) {
					Logger::Info("ERROR", "Failed to write to file database/players/" + p_->tankIDName + "_.json");
				}
				file.close();
			}
			catch (...) { Logger::Info("WARNING", "Failed to save " + p_->tankIDName + "_.json"); }
			if (on_exit) {
				uint32_t guild_id = p_->guild_id;
				if (p_->guild_id != 0) {
					vector<Guild>::iterator p = find_if(guilds.begin(), guilds.end(), [guild_id](const Guild& a) { return a.guild_id == guild_id; });
					if (p != guilds.end()) {
						Guild* guild_information = &guilds[p - guilds.begin()];
						for (int i_ = 0; i_ < guild_information->guild_members.size(); i_++) {
							GuildMember* edit_member = &guild_information->guild_members[i_];
							if (to_lower(edit_member->member_name) == to_lower(p_->tankIDName)) {
								edit_member->last_online = time(NULL);
								break;
							}
						}
					}
				}
				vector<string> friends_;
				for (int c_ = 0; c_ < p_->friends.size(); c_++) friends_.push_back(to_lower(p_->friends[c_].name));
				for (ENetPeer* cp_ = server->peers; cp_ < &server->peers[server->peerCount]; ++cp_) {
					if (cp_->state != ENET_PEER_STATE_CONNECTED or cp_->data == NULL) continue;
					if (p_->guild_id != 0) {
						if (p_->guild_id == pInfo(cp_)->guild_id) {
							if (pInfo(cp_)->tankIDName == p_->tankIDName) continue;
							VarList::OnConsoleMessage(cp_, "`5[GUILD ALERT]`` " + p_->tankIDName + " has `4logged off``.");
						}
					}
					if (find(friends_.begin(), friends_.end(), to_lower(pInfo(cp_)->tankIDName)) != friends_.end()) {
						for (int d_ = 0; d_ < pInfo(cp_)->friends.size(); d_++) {
							if (to_lower(pInfo(cp_)->friends[d_].name) == to_lower(p_->tankIDName)) {
								pInfo(cp_)->friends[d_].last_seen = time(NULL);
								break;
							}
						}
						if (not p_->invis and not p_->m_h) {
							if (pInfo(cp_)->show_friend_notifications_) {
								CAction::Positioned(cp_, pInfo(cp_)->netID, "audio/friend_logoff.wav", 0);
								VarList::OnConsoleMessage(cp_, "`3FRIEND ALERT:`` " + p_->tankIDName + " has `4logged off``.");
							}
						}
					}
				}
			}
		}
		static void All() {
			while (true) {
				std::this_thread::sleep_for(std::chrono::minutes(1));
				EventPool::Save::All();
				for (ENetPeer* cp_ = server->peers; cp_ < &server->peers[server->peerCount]; ++cp_) {
					if (cp_->state != ENET_PEER_STATE_CONNECTED or cp_->data == NULL) continue;
					ServerPool::SaveDatabase::Players(pInfo(cp_), false);
				}
				Environment()->Auto_Saving = true;
				for (int i = 0; i < static_cast<int>(worlds.size()); i++) {
					save_world(worlds[i].name, false);
				}
				save_guilds();
				Environment()->Auto_Saving = false;
			}
		}
	};
	class Load {
	public:
		static void TradeScan_Price(bool reload = false) {
			std::ifstream ifs("database/trade_scan/item_prices.json");
			json j = json::parse(ifs);
			vector<vector<int>> item_prices = j["items"].get<vector<vector<int>>>();
			for (int i = 0; i < item_prices.size(); i++) items[i].price = item_prices[i];
			if (reload) {
				string item_names = "";
				for (int i_ = 0; i_ < items.size(); i_++) {
					if (i_ % 2 == 0 && items[i_].scan_price > 0 && items[i_].ori_name.find("null") == string::npos)item_names += to_string(i_) + "|" + to_string(items[i_].scan_price) + "|\n";
				}
				std::ofstream m;
				m.open("database/trade_scan/item_price.txt"), m << item_names, m.close();
				Environment()->price_item.clear();
				j.clear();
			}
			std::ifstream file_info("database/trade_scan/item_price.txt");
			if (file_info.is_open()) {
				string line_info;
				while (getline(file_info, line_info)) {
					std::istringstream iss(line_info);
					std::string itemIdStr;
					std::getline(iss, itemIdStr, '|');
					int itemId = std::atoi(itemIdStr.c_str());
					int saleValue;
					while (iss >> saleValue) {
						items[itemId].last20sales.push_back(saleValue);
					}
					vector<string> ok = explode("|", line_info);
					int item_idas = atoi(ok[0].c_str());
					if (item_idas == 9812 || item_idas == 9918 || item_idas == 9496 || item_idas == 9570 || item_idas == 9916 || item_idas == 10644 || item_idas == 9228) {
					}
					else {
						Environment()->price_item.push_back({ atoi(ok[0].c_str()), atoi(ok[1].c_str()) * 3 });
						items[item_idas].scan_price = atoi(ok[1].c_str());
					}
				}
			}
			file_info.close();
		}
	};
	static int PlayerCountServer() {
		int count = 0;
		if (Environment()->Fake_Online) {
			for (const auto& entry : fs::directory_iterator("database/players/")) {
				if (fs::is_regular_file(entry.status())) {
					count++;
				}
			}
		}
		else {
			for (ENetPeer* cp_ = server->peers; cp_ < &server->peers[server->peerCount]; ++cp_) {
				if (cp_->state != ENET_PEER_STATE_CONNECTED) continue;
				count++;
			}
		}
		return count;
	}
	static int PlayerCountWorld(string name_) {
		int return_players = 0;
		for (ENetPeer* cp_ = server->peers; cp_ < &server->peers[server->peerCount]; ++cp_) {
			if (cp_->state != ENET_PEER_STATE_CONNECTED or cp_->data == NULL or pInfo(cp_)->tankIDName.empty()) continue;
			if (pInfo(cp_)->world == name_) {
				return_players++;
			}
		}
		return return_players;
	}
	static void NetId(const string& name_, int& net_) {
		for (ENetPeer* cp_ = server->peers; cp_ < &server->peers[server->peerCount]; ++cp_) {
			if (cp_->state != ENET_PEER_STATE_CONNECTED or cp_->data == NULL or pInfo(cp_)->tankIDName.empty()) continue;
			if (not name_.empty() && pInfo(cp_)->world == name_) {
				if (pInfo(cp_)->netID >= net_) net_ = pInfo(cp_)->netID + 1;			
			}
		}
	}
	static void Auto_Save(int e) {
		ServerPool::PacketLogs::Add();
		ServerPool::CrashLogs::Add();
		EventPool::Save::All();
		for (ENetPeer* cp_ = server->peers; cp_ < &server->peers[server->peerCount]; ++cp_) {
			if (cp_->state != ENET_PEER_STATE_CONNECTED or cp_->data == NULL) continue;
			ServerPool::SaveDatabase::Players(pInfo(cp_), false);
		}
		Environment()->Auto_Saving = true;
		for (int i = 0; i < static_cast<int>(worlds.size()); i++) {
			save_world(worlds[i].name, false);
		}
		save_guilds();
		Environment()->Auto_Saving = false;
		Logger::Info("ERROR", "ENet Server Crashed: Auto Saving System is now running");
		Logger::Info("ERROR", "Saved All World and Players");
		Logger::Info("ERROR", "Caught Signal: " + to_string(e));
		std::this_thread::sleep_for(std::chrono::seconds(5));
		exit(EXIT_FAILURE);
	}
	static void Trigger() {
		if (Environment()->Server_Port == 17091) {
			EventPool::Save::All();
			std::ofstream logFile("application.log", std::ios::app);
			if (logFile.is_open()) {
				std::time_t now = std::time(nullptr);
				logFile << std::ctime(&now) << ": Application is closing (Last CCH: " << ServerLogsPkt.theCCH << "\nLast World: " << ServerLogsPkt.last_world << "\nlast in CASE NET_MESSAGE_GAME_PACKET: " << ServerLogsPkt.packet_type << "\n" << " LAST PACKET LOGS: " << ServerLogsPkt.packet_logs << std::endl;
				logFile.close();
			}
			else std::cerr << "Unable to open log file." << std::endl;
			Logger::Info("INFO", "Saving: [PLAYERS/WORLDS/HONORS]");
			for (ENetPeer* cp_ = server->peers; cp_ < &server->peers[server->peerCount]; ++cp_) {
				if (cp_->state != ENET_PEER_STATE_CONNECTED or cp_->data == NULL) continue;
				ServerPool::SaveDatabase::Players(pInfo(cp_), false);
			}
			Environment()->Auto_Saving = true;
			Logger::Info("INFO", "Saving WORLDS [" + to_string(worlds.size()) + "]");
			for (int i = 0; i < worlds.size(); i++) {
				save_world(worlds[i].name, false);
			}
			save_guilds();
			Environment()->Auto_Saving = false;
			Sleep(1000);
			Logger::Info("INFO", "Saved: [PLAYERS/WORLDS/HONORS]");
			worlds.clear();
			std::this_thread::sleep_for(std::chrono::seconds(5));
			exit(EXIT_FAILURE);
		}
	}
};
bool block_access(ENetPeer* peer, World* world_, WorldBlock* block_, bool vend = false, bool admin_access = false, bool lock_access = false, bool public_world = false) {
	if (to_lower(world_->owner_name) == to_lower(pInfo(peer)->tankIDName) || Role::Developer(peer) and world_->name != "GROWCH") return true;
	if (world_->name == "GROWCH" and block_->fg == 3200 and pInfo(peer)->hand == 3206) return true;
	if (vend) {
		if (world_->world_settings & SETTINGS::SETTINGS_3 && public_world == false) {
			if (not block_->locked && find(world_->admins.begin(), world_->admins.end(), to_lower(pInfo(peer)->tankIDName)) != world_->admins.end()) return true;
		}
		if (block_->locked) {
			WorldBlock* block2_ = &world_->blocks[block_->lock_origin];
			if (to_lower(block2_->owner_name) == to_lower(pInfo(peer)->tankIDName)) return true;
		}
		else if (world_->owner_name.empty() && public_world == false) return true;
	}
	else {
		if (block_->locked) {
			WorldBlock* block2_ = &world_->blocks[block_->lock_origin];
			if (lock_access == false) if (find(block2_->admins.begin(), block2_->admins.end(), to_lower(pInfo(peer)->tankIDName)) != block2_->admins.end()) return true;
			if (to_lower(block2_->owner_name) == to_lower(pInfo(peer)->tankIDName)) return true;
			if (public_world == false && block2_->spin) return true;
		}
		else {
			if (public_world == false && (world_->owner_name.empty() || world_->world_settings & SETTINGS::SETTINGS_4 || guild_access(peer, world_->guild_id))) return true;
			if (admin_access == false) if (find(world_->admins.begin(), world_->admins.end(), to_lower(pInfo(peer)->tankIDName)) != world_->admins.end()) return true;
		}
	}
	return false;
}
bool toolavailable(ENetPeer* peer, int tool, int& count) {
	bool have = false;
	count = Inventory::Contains(peer, tool);
	if (count != 0) have = true;
	if (pInfo(peer)->dirt == 10 && tool != 1258 && tool != 0)
		return false;
	else
		switch (tool) {
		case 1258:
			return have;
		case 1266:
			return have && pInfo(peer)->labworked;
		case 1296:
			return pInfo(peer)->fixable && !pInfo(peer)->fixed;
		case 4316:
			return have && !pInfo(peer)->sounded;
		case 4318:
			return have && !pInfo(peer)->labworked;
		case 4312:
			return have && pInfo(peer)->heart > 0;
		case 1268:
			return have && pInfo(peer)->broken > 0;
		case 4308:
			return have && pInfo(peer)->shattered > 0 && pInfo(peer)->incisions > 0;
		case 4314:
			return have && pInfo(peer)->incisions > 0 && pInfo(peer)->bleeding > 0;
		default:
			return have;
		}
}
void world_menu(ENetPeer* peer, bool online = true) {
	string recently_visited = "", worlds_owned = "", recommended_worlds = "", wotd = "START";
	for (const auto& wlist : Environment()->WOTD) wotd = wlist.first;
	for (uint8_t w_ = 0; w_ < (pInfo(peer)->worlds_owned.size() >= 10 ? 10 : pInfo(peer)->worlds_owned.size()); w_++) worlds_owned += "\nadd_floater|" + pInfo(peer)->worlds_owned[w_] + "|0|0.5|2147418367";
	for (auto it = pInfo(peer)->last_visited_worlds.rbegin(); it != pInfo(peer)->last_visited_worlds.rend(); ++it) recently_visited += "\nadd_floater|" + *it + "|0|0.5|65535";
	for (int w_ = 0; w_ < Environment()->World_Menu.size(); w_++) recommended_worlds += "\nadd_floater|" + Environment()->World_Menu[w_] + "|" + Environment()->World_Menu[w_] + "|0|0.5|305559807";
	VarList::OnRequestWorldSelectMenu(peer, "add_filter|\nadd_heading|`#Ļ Top Worlds `w(`2" + to_string(Environment()->Active_Worlds.size() + 1) + "`w)<ROW2>|\nset_max_rows|3|\nadd_floater|" + wotd + "|Ļ WOTD|0|0.5|3529161471|" + Environment()->Active_World_List + (pInfo(peer)->worlds_owned.size() != 0 ? "\nadd_heading|`2ā My Worlds `w(`2" + to_string(pInfo(peer)->worlds_owned.size()) + "`w)<CR>|" + worlds_owned : "") + "\nadd_heading|`9ę Recommended Worlds `w(`2" + to_string(Environment()->World_Menu.size()) + "`w)<CR>|" + recommended_worlds + "|" + (not recently_visited.empty() ? "\nadd_heading|ĭ `4Recently Visited Worlds<CR>|" + recently_visited : "") + "\n");
	if (online) VarList::OnConsoleMessage(peer, "Where would you like to go? (`w" + to_string(ServerPool::PlayerCountServer()) + "`` online)");
}
void add_pineapple(ENetPeer* peer, int give) {
	bool bc_all = false;
	total_pineapple_eaten += give;
	pInfo(peer)->stage_pineapple += give;
	pInfo(peer)->total_pineapple += give;
	uint16_t stage = pInfo(peer)->stage_pineapple;
	if (stage >= 200) stage -= (stage / 200) * 200;
	stage /= 2;
	if (stage == 0 && (pInfo(peer)->stage_pineapple == 200 || pInfo(peer)->stage_pineapple == 400 || pInfo(peer)->stage_pineapple == 600)) stage = 100;
	uint8_t stage_level = (pInfo(peer)->stage_pineapple <= 200 ? 1 : (pInfo(peer)->stage_pineapple <= 400 ? 2 : 3));
	vector<string> pineapple_text{ "Full of Pineapples", "Almost a Pineapple", "Pineapple Form" }, random_scream{ ":P `9No more!!``", ":P `9URP!``", ":P `9Bluhhhh...``", ":P `9I can't eat another bite!``", ":P `9Please stop, I'm going to explode!``", ":P `9Seriously, I AM GOING TO `4EXXPPPPLLLOOOODEEE``!!!``" };
	gamepacket_t p;
	p.Insert("OnTalkBubble");
	p.Insert(pInfo(peer)->netID);
	if (stage == 100) {
		Clothing_V2::Update(peer);
		Clothing_V2::Update_Value(peer);
		p.Insert("`9You have reached Stage " + to_string(stage_level) + "``\n`2" + pineapple_text[stage_level - 1] + "``");
		PlayerMoving data_{};
		data_.packetType = 17, data_.netID = 44, data_.YSpeed = 44, data_.x = pInfo(peer)->x + 16, data_.plantingTree = 300, data_.y = pInfo(peer)->y + 16;
		BYTE* raw = packPlayerMoving(&data_);
		for (ENetPeer* cp_ = server->peers; cp_ < &server->peers[server->peerCount]; ++cp_) {
			if (cp_->state != ENET_PEER_STATE_CONNECTED or cp_->data == NULL or pInfo(peer)->world != pInfo(cp_)->world) continue;
			send_raw(cp_, 4, raw, 56, ENET_PACKET_FLAG_RELIABLE);
		}
		delete[] raw;
	}
	else {
		if (pInfo(peer)->stage_pineapple <= 617) p.Insert((pInfo(peer)->stage_pineapple <= 599 ? "You are `5" + to_string(stage) + "%`` towards becoming Stage " + to_string(stage_level) + " `5" + pineapple_text[stage_level - 1] + "``" : random_scream[rand() % random_scream.size()]));
		else {
			Clothing_V2::Update_Value(peer);
			Clothing_V2::Update(peer);
			bc_all = true;
			p.Insert(":P `9I exploded.``");
			pInfo(peer)->stage_pineapple = 0;
			PlayerMoving data_{};
			data_.packetType = 17, data_.netID = 97, data_.YSpeed = 97, data_.x = pInfo(peer)->x + 16, data_.plantingTree = 300, data_.y = pInfo(peer)->y + 16, data_.XSpeed = 2734;
			BYTE* raw = packPlayerMoving(&data_);
			for (ENetPeer* cp_ = server->peers; cp_ < &server->peers[server->peerCount]; ++cp_) {
				if (cp_->state != ENET_PEER_STATE_CONNECTED or cp_->data == NULL or pInfo(peer)->world != pInfo(cp_)->world) continue;
				send_raw(cp_, 4, raw, 56, ENET_PACKET_FLAG_RELIABLE);
			}
			delete[] raw;
			if (Playmods::HasByName(pInfo(peer), "Ultimate Super Pineapple Magic") == false) {
				PlayMods new_playmod{};
				new_playmod.id = 98, new_playmod.time = time(nullptr) + 1200, pInfo(peer)->playmods.push_back(new_playmod);
				{
					CAction::Positioned(peer, pInfo(peer)->netID, "audio/dialog_confirm.wav", 0);
					VarList::OnConsoleMessage(peer, "You shmimer with ULTIMATE Super Pineapple Magic (`$Ultimate Super Pineapple Magic`` mod added, `$20 mins`` left)");
				}
			}
		}
		p.Insert(0);
		p.Insert((pInfo(peer)->stage_pineapple <= 599 ? 1 : 0));
		if (pInfo(peer)->stage_pineapple > 599 or bc_all) {
			for (ENetPeer* cp_ = server->peers; cp_ < &server->peers[server->peerCount]; ++cp_) {
				if (cp_->state != ENET_PEER_STATE_CONNECTED or cp_->data == NULL or pInfo(peer)->world != pInfo(cp_)->world) continue;
				p.CreatePacket(cp_);
			}
		}
	}
	p.CreatePacket(peer);
}
void cancel_trade(ENetPeer* p_, bool confirm_cancel = false, bool busy_ = false) {
	bool found = false;
	for (ENetPeer* cp_ = server->peers; cp_ < &server->peers[server->peerCount]; ++cp_) {
		if (cp_->state != ENET_PEER_STATE_CONNECTED or cp_->data == NULL) continue;
		if (pInfo(cp_)->world == pInfo(p_)->world) {
			if (pInfo(cp_)->netID == pInfo(p_)->trading_with and pInfo(p_)->netID == pInfo(cp_)->trading_with) {
				found = true;
				pInfo(cp_)->block_trade = false, pInfo(cp_)->accept_the_offer = false, pInfo(cp_)->trading_with = -1, pInfo(cp_)->trade_items.clear();
				std::string name_ = pInfo(p_)->world;
				std::vector<World>::iterator p = find_if(worlds.begin(), worlds.end(), [name_](const World& a) { return a.name == name_; });
				if (p != worlds.end()) {
					if (not confirm_cancel) {
						World* world_ = &worlds[p - worlds.begin()];
						if (busy_) {
							VarList::OnConsoleMessage(p_, get_player_nick(p_) + " is too busy to trade!");
							VarList::OnConsoleMessage(cp_, get_player_nick(p_) + " is too busy to trade!");
							VarList::OnTextOverlay(p_, get_player_nick(p_) + " is too busy to trade!");
							VarList::OnTextOverlay(cp_, get_player_nick(p_) + " is too busy to trade!");
						}
						else VarList::OnTextOverlay(cp_, get_player_nick(p_) + " has canceled the trade");
					}
					else {
						VarList::OnTalkBubble(p_, pInfo(p_)->netID, "`6[```4Trade canceled by " + get_player_nick(p_) + "!```6]``", 0, 0);
						VarList::OnTalkBubble(cp_, pInfo(cp_)->netID, "`6[```4Trade canceled by " + get_player_nick(p_) + "!```6]``", 0, 0);
						VarList::OnConsoleMessage(p_, "`6[```4Trade canceled by " + get_player_nick(p_) + "!```6]``");
						VarList::OnConsoleMessage(cp_, "`6[```4Trade canceled by " + get_player_nick(p_) + "!```6]``");
						VarList::OnTextOverlay(p_, "`6[```4Trade canceled by " + get_player_nick(p_) + "!```6]``");
						VarList::OnTextOverlay(cp_, "`6[```4Trade canceled by " + get_player_nick(p_) + "!```6]``");
					}
					VarList::OnForceTradeEnd(cp_);
					if (busy_) VarList::OnForceTradeEnd(p_);
				}
				pInfo(p_)->block_trade = false, pInfo(p_)->trading_with = -1, pInfo(p_)->trade_accept = false, pInfo(p_)->accept_the_offer = false, pInfo(p_)->trade_items.clear();
				return;
			}
		}
	}
	if (busy_) {
		VarList::OnConsoleMessage(p_, (not pInfo(p_)->d_name.empty() ? pInfo(p_)->d_name : pInfo(p_)->tankIDName) + " is too busy to trade!");
		VarList::OnTextOverlay(p_, (not pInfo(p_)->d_name.empty() ? pInfo(p_)->d_name : pInfo(p_)->tankIDName) + " is too busy to trade!");
	}
	else if (pInfo(p_)->trade_accept) VarList::OnTextOverlay(p_, "The other person left the trade!");
	if (not found) VarList::OnForceTradeEnd(p_);
	pInfo(p_)->block_trade = false, pInfo(p_)->trading_with = -1, pInfo(p_)->trade_accept = false, pInfo(p_)->accept_the_offer = false, pInfo(p_)->trade_items.clear();
}
void leave_guild(ENetPeer* peer) {
	uint32_t guild_id = pInfo(peer)->guild_id;
	if (guild_id == 0) return;
	vector<Guild>::iterator p = find_if(guilds.begin(), guilds.end(), [guild_id](const Guild& a) { return a.guild_id == guild_id; });
	if (p != guilds.end()) {
		__int64 id_ = p - guilds.begin();
		Guild* guild_information = &guilds[p - guilds.begin()];
		for (GuildMember member_search : guild_information->guild_members) {
			if (to_lower(member_search.member_name) == to_lower(pInfo(peer)->tankIDName)) {
				if (member_search.role_id == 3) {
					if (guild_information->guild_members.size() != 1) return;
					break;
				}
			}
		}
		VarList::OnConsoleMessage(peer, "`5[GUILD ALERT]`` You left the guild!");
		if (pInfo(peer)->world == guild_information->guild_world and guild_access(peer, guild_information->guild_id)) {
			VisualHandle::Nick(peer, NULL);
			for (ENetPeer* cp_ = server->peers; cp_ < &server->peers[server->peerCount]; ++cp_) {
				if (cp_->state != ENET_PEER_STATE_CONNECTED or cp_->data == NULL) continue;
				if (pInfo(cp_)->world == pInfo(peer)->world) {
					if (pInfo(cp_)->netID != pInfo(peer)->netID and pInfo(cp_)->guild_id == guild_id) {
						gamepacket_t p(0, pInfo(peer)->netID);
						p.Insert("OnGuildDataChanged"), p.Insert(0), p.Insert(0), p.Insert(0), p.Insert(0), p.CreatePacket(cp_);
						gamepacket_t p2(0, pInfo(peer)->netID);
						p2.Insert("OnNameChanged"), p2.Insert(get_player_nick(peer)), p2.Insert(get_player_custom_wrench(peer)), p2.CreatePacket(cp_);
						VarList::OnConsoleMessage(cp_, "`5[GUILD ALERT]`` " + pInfo(peer)->tankIDName + " left the guild!");
					}
				}
			}
		}
		else {
			for (ENetPeer* cp_ = server->peers; cp_ < &server->peers[server->peerCount]; ++cp_) {
				if (cp_->state != ENET_PEER_STATE_CONNECTED or cp_->data == NULL) continue;
				if (pInfo(cp_)->netID != pInfo(peer)->netID and pInfo(cp_)->guild_id == guild_id) {
					gamepacket_t p(0, pInfo(peer)->netID);
					p.Insert("OnGuildDataChanged"), p.Insert(0), p.Insert(0), p.Insert(0), p.Insert(0), p.CreatePacket(cp_);
					gamepacket_t p2(0, pInfo(peer)->netID);
					p2.Insert("OnNameChanged"), p2.Insert(get_player_nick(peer)), p2.Insert(get_player_custom_wrench(peer)), p2.CreatePacket(cp_);
					VarList::OnConsoleMessage(cp_, "`5[GUILD ALERT]`` " + pInfo(peer)->tankIDName + " left the guild!");
				}
			}
		}
		pInfo(peer)->guild_id = 0;
		Clothing_V2::Update(peer);
		Clothing_V2::Update_Value(peer);
		ServerPool::SaveDatabase::Players(pInfo(peer), false);
		for (int i_ = 0; i_ < guild_information->guild_members.size(); i_++) {
			GuildMember* member_search = &guild_information->guild_members[i_];
			if (to_lower(member_search->member_name) == to_lower(pInfo(peer)->tankIDName)) {
				if (member_search->role_id == 3) {
					for (ENetPeer* cp_ = server->peers; cp_ < &server->peers[server->peerCount]; ++cp_) {
						if (cp_->state != ENET_PEER_STATE_CONNECTED or cp_->data == NULL) continue;
						if (pInfo(cp_)->world == pInfo(peer)->world) {
							if (pInfo(cp_)->guild_id == guild_information->guild_id) {
								if (guild_access(cp_, guild_information->guild_id)) {
									VisualHandle::Nick(cp_, NULL);
								}
							}
						}
					}
					break;
				}
				guild_information->guild_members.erase(guild_information->guild_members.begin() + i_);
				create_guild_log(guild_information, "`$" + pInfo(peer)->tankIDName + "`` `wleft the guild", 5948);
			}
		}

	}
}
class Role_Quest {
public:
	class Add {
	public:
		static void Xp(ENetPeer* peer, int amount, string eventname) {
			bool levelup = false;
			int required = 0, nowlevel = 0;
			if (eventname == "farmer") {
				if (pInfo(peer)->t_lvl == 10) return;
				pInfo(peer)->t_xp += amount;
				required = Role_Quest::Farmer::Xp(pInfo(peer)->t_lvl);
				if (pInfo(peer)->t_xp >= Role_Quest::Farmer::Xp(pInfo(peer)->t_lvl)) {
					pInfo(peer)->t_lvl++;
					nowlevel = pInfo(peer)->t_lvl;
					pInfo(peer)->t_xp -= required;
					if (pInfo(peer)->gp) pInfo(peer)->growpass_points += 20;
					VarList::OnBuxGems(peer, 500);
					for (ENetPeer* cp_ = server->peers; cp_ < &server->peers[server->peerCount]; ++cp_) {
						if (cp_->state != ENET_PEER_STATE_CONNECTED or cp_->data == NULL) continue;
						if (pInfo(cp_)->world == pInfo(peer)->world) {
							CAction::Effect(cp_, 46, (float)pInfo(peer)->x + 16, (float)pInfo(peer)->y + 16);
							VarList::OnConsoleMessage(cp_, "`oCongratulations, you have reached `2Farming ``level `6" + to_string(nowlevel) + "``!");
							VarList::OnTalkBubble(cp_, pInfo(peer)->netID, "`wCongratulations, you have reached `2Farming ``level `6" + to_string(nowlevel) + "``!", 0, 0);
						}
					}
				}
			}
			else if (eventname == "builder") {
				if (pInfo(peer)->bb_lvl == 10) return;
				pInfo(peer)->bb_xp += amount;
				required = Role_Quest::Builder::Xp(pInfo(peer)->bb_lvl);
				if (pInfo(peer)->bb_xp >= Role_Quest::Builder::Xp(pInfo(peer)->bb_lvl)) {
					pInfo(peer)->bb_lvl++;
					nowlevel = pInfo(peer)->bb_lvl;
					pInfo(peer)->bb_xp -= required;
					if (pInfo(peer)->gp) pInfo(peer)->growpass_points += 20;
					VarList::OnBuxGems(peer, 500);
					for (ENetPeer* cp_ = server->peers; cp_ < &server->peers[server->peerCount]; ++cp_) {
						if (cp_->state != ENET_PEER_STATE_CONNECTED or cp_->data == NULL) continue;
						if (pInfo(cp_)->world == pInfo(peer)->world) {
							CAction::Effect(cp_, 46, (float)pInfo(peer)->x + 16, (float)pInfo(peer)->y + 16);
							VarList::OnConsoleMessage(cp_, "`oCongratulations, you have reached `2Builder ``level `6" + to_string(nowlevel) + "``!");
							VarList::OnTalkBubble(cp_, pInfo(peer)->netID, "`wCongratulations, you have reached `2Builder ``level `6" + to_string(nowlevel) + "``!", 0, 0);
						}
					}
				}
			}
			else if (eventname == "surgeon") {
				if (pInfo(peer)->s_lvl == 10) return;
				pInfo(peer)->s_xp += amount;
				required = Role_Quest::Surgeon::Xp(pInfo(peer)->s_lvl);
				if (pInfo(peer)->s_xp >= Role_Quest::Surgeon::Xp(pInfo(peer)->s_lvl)) {
					pInfo(peer)->s_lvl++;
					nowlevel = pInfo(peer)->s_lvl;
					pInfo(peer)->s_xp -= required;
					if (pInfo(peer)->gp) pInfo(peer)->growpass_points += 20;
					VarList::OnBuxGems(peer, 500);
					for (ENetPeer* cp_ = server->peers; cp_ < &server->peers[server->peerCount]; ++cp_) {
						if (cp_->state != ENET_PEER_STATE_CONNECTED or cp_->data == NULL) continue;
						if (pInfo(cp_)->world == pInfo(peer)->world) {
							CAction::Effect(cp_, 46, (float)pInfo(peer)->x + 16, (float)pInfo(peer)->y + 16);
							VarList::OnConsoleMessage(cp_, "`oCongratulations, you have reached `2Surgeon ``level `6" + to_string(nowlevel) + "``!");
							VarList::OnTalkBubble(cp_, pInfo(peer)->netID, "`wCongratulations, you have reached `2Surgeon ``level `6" + to_string(nowlevel) + "``!", 0, 0);
						}
					}
				}
				if (pInfo(peer)->C_QuestActive && pInfo(peer)->C_QuestKind == 9 && pInfo(peer)->C_QuestProgress < pInfo(peer)->C_ProgressNeeded) {
					pInfo(peer)->C_QuestProgress++;
					if (pInfo(peer)->C_QuestProgress == pInfo(peer)->C_ProgressNeeded) {
						VarList::OnTalkBubble(peer, pInfo(peer)->netID, "`9Ring Quest task complete! Go tell the Ringmaster!", 0, 0);
					}
				}
			}
			else if (eventname == "fishing") {
				if (pInfo(peer)->ff_lvl == 10) return;
				pInfo(peer)->ff_xp += amount;
				required = Role_Quest::Fishing::Xp(pInfo(peer)->ff_lvl);
				if (pInfo(peer)->ff_xp >= Role_Quest::Fishing::Xp(pInfo(peer)->ff_lvl)) {
					pInfo(peer)->ff_lvl++;
					nowlevel = pInfo(peer)->ff_lvl;
					pInfo(peer)->ff_xp -= required;
					if (pInfo(peer)->gp) pInfo(peer)->growpass_points += 20;
					VarList::OnBuxGems(peer, 500);
					for (ENetPeer* cp_ = server->peers; cp_ < &server->peers[server->peerCount]; ++cp_) {
						if (cp_->state != ENET_PEER_STATE_CONNECTED or cp_->data == NULL) continue;
						if (pInfo(cp_)->world == pInfo(peer)->world) {
							CAction::Effect(cp_, 46, (float)pInfo(peer)->x + 16, (float)pInfo(peer)->y + 16);
							VarList::OnConsoleMessage(cp_, "`oCongratulations, you have reached `2Fishing ``level `6" + to_string(nowlevel) + "``!");
							VarList::OnTalkBubble(cp_, pInfo(peer)->netID, "`wCongratulations, you have reached `2Fishing ``level `6" + to_string(nowlevel) + "``!", 0, 0);
						}
					}
				}
			}
			else if (eventname == "provider") {
				if (pInfo(peer)->p_lvl == 10) return;
				pInfo(peer)->p_xp += amount;
				required = Role_Quest::Provider::Xp(pInfo(peer)->p_lvl);
				if (pInfo(peer)->p_xp >= Role_Quest::Provider::Xp(pInfo(peer)->p_lvl)) {
					pInfo(peer)->p_lvl++;
					nowlevel = pInfo(peer)->p_lvl;
					pInfo(peer)->p_xp -= required;
					if (pInfo(peer)->gp) pInfo(peer)->growpass_points += 20;
					VarList::OnBuxGems(peer, 500);
					for (ENetPeer* cp_ = server->peers; cp_ < &server->peers[server->peerCount]; ++cp_) {
						if (cp_->state != ENET_PEER_STATE_CONNECTED or cp_->data == NULL) continue;
						if (pInfo(cp_)->world == pInfo(peer)->world) {
							CAction::Effect(cp_, 46, (float)pInfo(peer)->x + 16, (float)pInfo(peer)->y + 16);
							VarList::OnConsoleMessage(cp_, "`oCongratulations, you have reached `2Provider ``level `6" + to_string(nowlevel) + "``!");
							VarList::OnTalkBubble(cp_, pInfo(peer)->netID, "`wCongratulations, you have reached `2Provider ``level `6" + to_string(nowlevel) + "``!", 0, 0);
						}
					}
				}
				if (pInfo(peer)->C_QuestActive && pInfo(peer)->C_QuestKind == 10 && pInfo(peer)->C_QuestProgress < pInfo(peer)->C_ProgressNeeded) {
					pInfo(peer)->C_QuestProgress++;
					if (pInfo(peer)->C_QuestProgress >= pInfo(peer)->C_ProgressNeeded) {
						pInfo(peer)->C_QuestProgress = pInfo(peer)->C_ProgressNeeded;
						VarList::OnTalkBubble(peer, pInfo(peer)->netID, "`9Ring Quest task complete! Go tell the Ringmaster!", 0, 0);
					}
				}
			}
			else if (eventname == "geiger") {
				if (pInfo(peer)->g_lvl == 10) return;
				pInfo(peer)->g_xp += amount;
				required = Role_Quest::Geiger::Xp(pInfo(peer)->g_lvl);
				if (pInfo(peer)->g_xp >= Role_Quest::Geiger::Xp(pInfo(peer)->g_lvl)) {
					pInfo(peer)->g_lvl++;
					nowlevel = pInfo(peer)->g_lvl;
					pInfo(peer)->g_xp -= required;
					if (pInfo(peer)->gp) pInfo(peer)->growpass_points += 20;
					VarList::OnBuxGems(peer, 500);
					for (ENetPeer* cp_ = server->peers; cp_ < &server->peers[server->peerCount]; ++cp_) {
						if (cp_->state != ENET_PEER_STATE_CONNECTED or cp_->data == NULL) continue;
						if (pInfo(cp_)->world == pInfo(peer)->world) {
							CAction::Effect(cp_, 46, (float)pInfo(peer)->x + 16, (float)pInfo(peer)->y + 16);
							VarList::OnConsoleMessage(cp_, "`oCongratulations, you have reached `2Geiger ``level `6" + to_string(nowlevel) + "``!");
							VarList::OnTalkBubble(cp_, pInfo(peer)->netID, "`wCongratulations, you have reached `2Geiger ``level `6" + to_string(nowlevel) + "``!", 0, 0);
						}
					}
				}
				if (pInfo(peer)->C_QuestActive && pInfo(peer)->C_QuestKind == 13 && pInfo(peer)->C_QuestProgress < pInfo(peer)->C_ProgressNeeded) {
					pInfo(peer)->C_QuestProgress++;
					if (pInfo(peer)->C_QuestProgress == pInfo(peer)->C_ProgressNeeded) {
						VarList::OnTalkBubble(peer, pInfo(peer)->netID, "`9Ring Quest task complete! Go tell the Ringmaster!", 0, 0);
					}
				}
			}
			if (levelup) {
				if (pInfo(peer)->gp) pInfo(peer)->growpass_points += 20;
				VarList::OnBuxGems(peer, 500);
				for (ENetPeer* cp_ = server->peers; cp_ < &server->peers[server->peerCount]; ++cp_) {
					if (cp_->state != ENET_PEER_STATE_CONNECTED or cp_->data == NULL) continue;
					if (pInfo(cp_)->world == pInfo(peer)->world) {
						CAction::Effect(cp_, 46, (float)pInfo(peer)->x + 16, (float)pInfo(peer)->y + 16);
						VarList::OnConsoleMessage(cp_, get_player_nick(peer) + " " + eventname + " quest is now level " + to_string(nowlevel) + "!");
						VarList::OnTalkBubble(cp_, pInfo(peer)->netID, get_player_nick(peer) + " " + eventname + " quest is now level " + to_string(nowlevel) + "!", 0, 0);
					}
				}
			}
		}
	};
	class Farmer {
	public:
		static int Point(uint32_t farmer_level) {
			switch (farmer_level) {
			case 0:
				return 270;
			case 1:
				return 540;
			case 2:
				return 810;
			case 3:
				return 1080;
			case 4:
				return 1350;
			case 5:
				return 1620;
			case 6:
				return 1890;
			case 7:
				return 2160;
			case 8:
				return 2430;
			case 9:
				return 2700;
			default:
				return 0;
			}
		}
		static int Xp(uint32_t farmer_level) {
			switch (farmer_level) {
			case 0:
				return 1300;
			case 1:
				return 5200;
			case 2:
				return 11700;
			case 3:
				return 20800;
			case 4:
				return 32500;
			case 5:
				return 46800;
			case 6:
				return 63700;
			case 7:
				return 83200;
			case 8:
				return 105300;
			case 9:
				return 130000;
			default:
				return 0;
			}
		}
	};
	class Builder {
	public:
		static int Point(uint32_t builder_level) {
			switch (builder_level) {
			case 0:
				return 230;
			case 1:
				return 460;
			case 2:
				return 690;
			case 3:
				return 920;
			case 4:
				return 1150;
			case 5:
				return 1380;
			case 6:
				return 1610;
			case 7:
				return 1840;
			case 8:
				return 2070;
			case 9:
				return 2300;
			default:
				return 0;
			}
		}
		static int Xp(uint32_t builder_level) {
			switch (builder_level) {
			case 0:
				return 1500;
			case 1:
				return 6000;
			case 2:
				return 13500;
			case 3:
				return 24000;
			case 4:
				return 37500;
			case 5:
				return 54000;
			case 6:
				return 73500;
			case 7:
				return 96000;
			case 8:
				return 121500;
			case 9:
				return 150000;
			default:
				return 0;
			}
		}
	};
	class Surgeon {
	public:
		static int Point(uint32_t surgeon_level) {
			switch (surgeon_level) {
			case 0:
				return 270;
			case 1:
				return 540;
			case 2:
				return 810;
			case 3:
				return 1080;
			case 4:
				return 1350;
			case 5:
				return 1620;
			case 6:
				return 1890;
			case 7:
				return 2160;
			case 8:
				return 2430;
			case 9:
				return 2700;
			default:
				return 0;
			}
		}
		static int Xp(uint32_t surgeon_level) {
			switch (surgeon_level) {
			case 0:
				return 1300;
			case 1:
				return 5200;
			case 2:
				return 11700;
			case 3:
				return 20800;
			case 4:
				return 32500;
			case 5:
				return 46800;
			case 6:
				return 63700;
			case 7:
				return 83200;
			case 8:
				return 105300;
			case 9:
				return 130000;
			default:
				return 0;
			}
		}
	};
	class Fishing {
	public:
		static int Point(uint32_t fishing_level) {
			switch (fishing_level) {
			case 0:
				return 270;
			case 1:
				return 540;
			case 2:
				return 810;
			case 3:
				return 1080;
			case 4:
				return 1350;
			case 5:
				return 1620;
			case 6:
				return 1890;
			case 7:
				return 2160;
			case 8:
				return 2430;
			case 9:
				return 2700;
			default:
				return 0;
			}
		}
		static int Xp(uint32_t fishing_level) {
			switch (fishing_level) {
			case 0:
				return 1300;
			case 1:
				return 5200;
			case 2:
				return 11700;
			case 3:
				return 20800;
			case 4:
				return 32500;
			case 5:
				return 46800;
			case 6:
				return 63700;
			case 7:
				return 83200;
			case 8:
				return 105300;
			case 9:
				return 130000;
			default:
				return 0;
			}
		}
	};
	class Provider {
	public:
		static int Point(uint32_t provider_level) {
			switch (provider_level) {
			case 0:
				return 230;
			case 1:
				return 460;
			case 2:
				return 690;
			case 3:
				return 920;
			case 4:
				return 1150;
			case 5:
				return 1380;
			case 6:
				return 1610;
			case 7:
				return 1840;
			case 8:
				return 2070;
			case 9:
				return 2300;
			default:
				return 0;
			}
		}
		static int Xp(uint32_t provider_level) {
			switch (provider_level) {
			case 0:
				return 1500;
			case 1:
				return 6000;
			case 2:
				return 13500;
			case 3:
				return 24000;
			case 4:
				return 37500;
			case 5:
				return 54000;
			case 6:
				return 73500;
			case 7:
				return 96000;
			case 8:
				return 121500;
			case 9:
				return 150000;
			default:
				return 0;
			}
		}
	};
	class Geiger {
	public:
		static int Point(uint32_t geiger_level) {
			switch (geiger_level) {
			case 0:
				return 270;
			case 1:
				return 540;
			case 2:
				return 810;
			case 3:
				return 1080;
			case 4:
				return 1350;
			case 5:
				return 1620;
			case 6:
				return 1890;
			case 7:
				return 2160;
			case 8:
				return 2430;
			case 9:
				return 2700;
			default:
				return 0;
			}
		}
		static int Xp(uint32_t geiger_level) {
			switch (geiger_level) {
			case 0:
				return 1300;
			case 1:
				return 5200;
			case 2:
				return 11700;
			case 3:
				return 20800;
			case 4:
				return 32500;
			case 5:
				return 46800;
			case 6:
				return 63700;
			case 7:
				return 83200;
			case 8:
				return 105300;
			case 9:
				return 130000;
			default:
				return 0;
			}
		}
	};
	static int CostPerDay(uint32_t total) {// Includes 4 Roles (Farmer, Fishing, Surgeon, Geiger)
		switch (total) {
		case 1:
			return 3000;
		case 2:
			return 15000;
		case 3:
			return 42000;
		case 4:
			return 90000;
		case 5:
			return 165000;
		case 6:
			return 273000;
		case 7:
			return 420000;
		case 8:
			return 612000;
		case 9:
			return 855000;
		default:
			return 0;
		}
	}
	static int CostPerDay_2(uint32_t total) {// Includes 2 Roles (Builder, Provider)
		switch (total) {
		case 1:
			return 4000;
		case 2:
			return 20000;
		case 3:
			return 56000;
		case 4:
			return 120000;
		case 5:
			return 220000;
		case 6:
			return 364000;
		case 7:
			return 560000;
		case 8:
			return 816000;
		case 9:
			return 1140000;
		default:
			return 0;
		}
	}
	static void Dialog(ENetPeer* peer) {
		string selected_quest = "", button = "";
		if (pInfo(peer)->need_sumbit_req_id == 0) {
			if (pInfo(peer)->need_required >= pInfo(peer)->quest_required) button = "\nadd_button|Complete_RoleQuest|`$Complete Quest|0|0|";
			else {
				if (pInfo(peer)->supp == 0 and not pInfo(peer)->subscriber) button = "\nadd_smalltext|`$Only supporters, super supporters or subsription owner can cancel quests.|left|";
				else button = "\nadd_button|Cancel_Role_Quest|`$Cancel Quest|0|0|";
			}
		}
		if (pInfo(peer)->need_sumbit_req_id != 0) {
			if (Inventory::Contains(peer, pInfo(peer)->need_sumbit_req_id) >= pInfo(peer)->quest_required) button = "\nadd_button|Complete_RoleQuest|`$Complete Quest|0|0|";
			else {
				if (pInfo(peer)->supp == 0 and not pInfo(peer)->subscriber) button = "\nadd_smalltext|`$Only supporters, super supporters or subsription owner can cancel quests.|left|";
				else button = "\nadd_button|Cancel_Role_Quest|`$Cancel Quest|0|0|";
			}
		}
		long long time_ = time(nullptr);
		/*Farmer*/
		if (pInfo(peer)->role_quest_type == "Farmer") selected_quest = "\nadd_spacer|small|" + (pInfo(peer)->t_lvl == 10 ? "\nadd_progress_bar|`$Farmer``|big|`wLevel: Mastered!||-1||\nadd_spacer|small|" : "\nadd_player_info|`$Farmer``|" + to_string(pInfo(peer)->t_lvl) + "|" + to_string(pInfo(peer)->t_xp) + "|" + to_string(Role_Quest::Farmer::Xp(pInfo(peer)->t_lvl)) + "|") + "\nadd_spacer|small|\nadd_smalltext|`2Current Quest:|left|\nadd_smalltext|`$- " + pInfo(peer)->quest_text + " (" + (pInfo(peer)->quest_required == pInfo(peer)->need_required ? "`2Quest complete!" : "`6" + Set_Count(pInfo(peer)->quest_required - pInfo(peer)->need_required) + " `$more need to be " + (pInfo(peer)->quest_number == 2 or pInfo(peer)->quest_number == 4 ? "Planted" : pInfo(peer)->quest_number == 1 or pInfo(peer)->quest_number == 3 ? "Harvested" : "Spliced")) + "`$)|left|\nadd_smalltext|`$- Completing this Quest will earn you: " + Set_Count(Role_Quest::Farmer::Point(pInfo(peer)->t_lvl)) + " `6Farming Points!|left|\nadd_spacer|small|" + button + "";
		/*Builder*/
		if (pInfo(peer)->role_quest_type == "Builder") selected_quest = "\nadd_spacer|small|" + (pInfo(peer)->bb_lvl == 10 ? "\nadd_progress_bar|`$Builder``|big|`wLevel: Mastered!||-1||\nadd_spacer|small|" : "\nadd_player_info|`$Builder``|" + to_string(pInfo(peer)->bb_lvl) + "|" + to_string(pInfo(peer)->bb_xp) + "|" + to_string(Role_Quest::Builder::Xp(pInfo(peer)->bb_lvl)) + "|") + "\nadd_spacer|small|\nadd_smalltext|`2Current Quest:|left|\nadd_smalltext|`$- " + pInfo(peer)->quest_text + " (" + (pInfo(peer)->quest_required == pInfo(peer)->need_required ? "`2Quest complete!" : "`6" + Set_Count(pInfo(peer)->quest_required - pInfo(peer)->need_required) + " " + (pInfo(peer)->quest_number == 2 or pInfo(peer)->quest_number == 4 ? "`$more Blocks to be " : " `$more rarity to ") + (pInfo(peer)->quest_number == 2 or pInfo(peer)->quest_number == 4 ? "Broken" : pInfo(peer)->quest_number == 1 or pInfo(peer)->quest_number == 3 ? "Build" : "")) + "`$)|left|\nadd_smalltext|`$- Completing this Quest will earn you: " + Set_Count(Role_Quest::Builder::Point(pInfo(peer)->bb_lvl)) + " `6Builder Points!|left|\nadd_spacer|small|" + button + "";
		/*Surgeon*/
		if (pInfo(peer)->role_quest_type == "Surgeon") selected_quest = "\nadd_spacer|small|" + (pInfo(peer)->s_lvl == 10 ? "\nadd_progress_bar|`$Surgeon``|big|`wLevel: Mastered!||-1||\nadd_spacer|small|" : "\nadd_player_info|`$Surgeon``|" + to_string(pInfo(peer)->s_lvl) + "|" + to_string(pInfo(peer)->s_xp) + "|" + to_string(Role_Quest::Surgeon::Xp(pInfo(peer)->s_lvl)) + "|") + "\nadd_spacer|small|\nadd_smalltext|`2Current Quest:|left|\nadd_smalltext|`$- " + pInfo(peer)->quest_text + " " + (pInfo(peer)->quest_number == 1 ? "`$(" + (pInfo(peer)->quest_required == pInfo(peer)->need_required ? "`2Quest complete!" : "`6" + Set_Count(pInfo(peer)->quest_required - pInfo(peer)->need_required) + " " + (pInfo(peer)->quest_number == 1 ? "`$remaining" : "")) + "`$)" : "") + "|left|\nadd_smalltext|`$- Completing this Quest will earn you: " + Set_Count(Role_Quest::Surgeon::Point(pInfo(peer)->s_lvl)) + " `6Surgery Points!|left|\nadd_spacer|small|" + button + "";
		/*Fishing*/
		if (pInfo(peer)->role_quest_type == "Fishing") selected_quest = "\nadd_spacer|small|" + (pInfo(peer)->ff_lvl == 10 ? "\nadd_progress_bar|`$Fishing``|big|`wLevel: Mastered!||-1||\nadd_spacer|small|" : "\nadd_player_info|`$Fishing``|" + to_string(pInfo(peer)->ff_lvl) + "|" + to_string(pInfo(peer)->ff_xp) + "|" + to_string(Role_Quest::Fishing::Xp(pInfo(peer)->ff_lvl)) + "|") + "\nadd_spacer|small|\nadd_smalltext|`2Current Quest:|left|\nadd_smalltext|`$- " + pInfo(peer)->quest_text + " (" + (pInfo(peer)->quest_required == pInfo(peer)->need_required ? "`2Quest complete!" : "`6" + Set_Count(pInfo(peer)->quest_required - pInfo(peer)->need_required) + "lbs `$remaining") + "`$)|left|\nadd_smalltext|`$- Completing this Quest will earn you: " + Set_Count(Role_Quest::Fishing::Point(pInfo(peer)->ff_lvl)) + " `6Fishing Points!|left|\nadd_spacer|small|" + button + "";
		/*Provider*/
		if (pInfo(peer)->role_quest_type == "Provider") selected_quest = "\nadd_spacer|small|" + (pInfo(peer)->p_lvl == 10 ? "\nadd_progress_bar|`$Provider``|big|`wLevel: Mastered!||-1||\nadd_spacer|small|" : "\nadd_player_info|`$Provider``|" + to_string(pInfo(peer)->p_lvl) + "|" + to_string(pInfo(peer)->p_xp) + "|" + to_string(Role_Quest::Provider::Xp(pInfo(peer)->p_lvl)) + "|") + "\nadd_spacer|small|\nadd_smalltext|`2Current Quest:|left|\nadd_smalltext|`$- " + pInfo(peer)->quest_text + " " + (pInfo(peer)->quest_number == 1 ? "`$(" + (pInfo(peer)->quest_required == pInfo(peer)->need_required ? "`2Quest complete!" : "`6" + Set_Count(pInfo(peer)->quest_required - pInfo(peer)->need_required) + " " + (pInfo(peer)->quest_number == 1 ? "`$more need to be Harvested" : "")) + "`$)" : "") + "|left|\nadd_smalltext|`$- Completing this Quest will earn you: " + Set_Count(Role_Quest::Provider::Point(pInfo(peer)->p_lvl)) + " `6Provider Points!|left|\nadd_spacer|small|" + button + "";
		/*Geiger*/
		if (pInfo(peer)->role_quest_type == "Geiger") selected_quest = "\nadd_spacer|small|" + (pInfo(peer)->g_lvl == 10 ? "\nadd_progress_bar|`$Geiger``|big|`wLevel: Mastered!||-1||\nadd_spacer|small|" : "\nadd_player_info|`$Geiger``|" + to_string(pInfo(peer)->g_lvl) + "|" + to_string(pInfo(peer)->g_xp) + "|" + to_string(Role_Quest::Geiger::Xp(pInfo(peer)->g_lvl)) + "|") + "\nadd_spacer|small|\nadd_smalltext|`2Current Quest:|left|\nadd_smalltext|`$- " + pInfo(peer)->quest_text + " " + (pInfo(peer)->quest_number == 1 ? "`$(" + (pInfo(peer)->quest_required == pInfo(peer)->need_required ? "`2Quest complete!" : "`6" + Set_Count(pInfo(peer)->quest_required - pInfo(peer)->need_required) + " " + (pInfo(peer)->quest_number == 1 ? "`$Radioactive remaining" : "")) + "`$)" : "") + "|left|\nadd_smalltext|`$- Completing this Quest will earn you: " + Set_Count(Role_Quest::Geiger::Point(pInfo(peer)->g_lvl)) + " `6Geiger Points!|left|\nadd_spacer|small|" + button + "";
		VarList::OnDialogRequest(peer, SetColor(peer) + "set_default_color|\nadd_label_with_icon|big|Role Quest|left|982|\nadd_spacer|small|\nadd_textbox|`9What's your specialty? Punch, Build, Grow, and more to earn points and unlock Role Rewards and Powers!|left|\nadd_spacer|small|\nadd_smalltext|`$- You have ambarked on " + to_string(pInfo(peer)->total_quest_selected) + " Role Quests today!|left|\nadd_smalltext|`$- Your quest will reset in : " + Time::Playmod(pInfo(peer)->rolequest_reset_day - time_) + " and any progress on the current quest will be lost.|left|" + (pInfo(peer)->role_quest ? selected_quest : pInfo(peer)->total_quest_selected == 0 ? "\nadd_spacer|small|\nadd_smalltext|`$- You haven't started Role Quests today!|left|\nadd_smalltext|`$- Your first quest for the day is `2FREE ``to start!|left|" : "\nadd_spacer|small") + "" + (pInfo(peer)->role_quest ? "" : "\nadd_button|quest_selected|`$Quest Select|0|0|") + "\nadd_button|view_role_stats|`$View Role Stats|0|0|\nadd_smalltext|`5- Earn 20 Grow Pass Points.|left|\nadd_button|growpass_dialog|`$View Grow Pass|0|0|\nadd_button|backto_goals|`wBack|\nend_dialog|Role_Quest|||\nadd_quick_exit|");
	}
	static void Reward(ENetPeer* peer, string reward) {
		string prize = "";
		vector<int> list;
		if (reward == "farmer") {
			list = { 98, 6898, 1746, 6840, 1830, 5078, 1966, 6948, 6946, 4956 };
			for (int i = 0, lvl = 0; i < list.size(); i++) {
				bool ok = (i == 9 ? true : false);
				if (find(pInfo(peer)->t_p.begin(), pInfo(peer)->t_p.end(), lvl += 1) != pInfo(peer)->t_p.end()) prize += "\nadd_spacer|small|\nadd_smalltext|`$Level " + to_string(lvl) + " rewards:``|left|\nadd_label_with_icon|small|`$(Unlocked) " + (list[i] == 1746 ? "200" : "") + " " + items[list[i]].name + "``|left|" + to_string(list[i]) + "|" + (ok ? "\nadd_label_with_icon|small|`$(Unlocked) Unique Farmer's Flag and skin! - Show off your mastery with a flag beside your name``|left|7064|" : "") + "\nadd_spacer|small|";
				else if (pInfo(peer)->t_lvl >= lvl) prize += "\nadd_spacer|small|\nadd_smalltext|`$Level " + to_string(lvl) + " rewards:``|left|\nadd_label_with_icon|small|`w(Unlocked) " + (list[i] == 1746 ? "200" : "") + " " + items[list[i]].name + "``|left|" + to_string(list[i]) + "|" + (ok ? "\nadd_label_with_icon|small|`w(Unlocked) Unique Farmer's Flag and skin! - Show off your mastery with a flag beside your name``|left|7064|" : "") + "\nadd_small_font_button|t_claimreward" + to_string(i + 1) + "|Claim Reward|noflags|0|0|";
				else if (pInfo(peer)->t_lvl < lvl) prize += "\nadd_spacer|small|\nadd_smalltext|`$Level " + to_string(lvl) + " rewards:``|left|\nadd_label_with_icon|small|`a(Locked) " + (list[i] == 1746 ? "200" : "") + " " + items[list[i]].name + "``|left|" + to_string(list[i]) + "|" + (ok ? "\nadd_label_with_icon|small|`a(Locked) Unique Farmer's Flag and skin! - Show off your mastery with a flag beside your name``|left|7064|" : "");
			}
			VarList::OnDialogRequest(peer, SetColor(peer) + "set_default_color|`o\nadd_label_with_icon|big|`wFarmer Rewards|left|7064|\nadd_spacer|small|\nadd_textbox|`9Here are all the Farmer rewards that you have earned so far!``|left|" + prize + "|\nadd_spacer|small|\nend_dialog|Role_Quest|||\nadd_button|backto_viewrole|`$Back|noflags|0|0|\nadd_quick_exit|\n");
		}
		else if (reward == "builder") {
			list = { 6896, 9522, 6948, 1068, 1966, 1836, 5080, 10754, 1874, 6946 };
			for (int i = 0, lvl = 0; i < list.size(); i++) {
				bool ok = (i == 9 ? true : false);
				if (find(pInfo(peer)->bb_p.begin(), pInfo(peer)->bb_p.end(), lvl += 1) != pInfo(peer)->bb_p.end()) prize += "\nadd_spacer|small|\nadd_smalltext|`$Level " + to_string(lvl) + " rewards:``|left|\nadd_label_with_icon|small|`$(Unlocked) " + (list[i] == 9522 ? "200" : "") + "" + (list[i] == 1068 ? "10" : "") + " " + items[list[i]].name + "``|left|" + to_string(list[i]) + "|" + (ok ? "\nadd_label_with_icon|small|`$(Unlocked) Unique Builder's Flag and skin! - Show off your mastery with a flag beside your name``|left|7070|" : "") + "\nadd_spacer|small|";
				else if (pInfo(peer)->bb_lvl >= lvl) prize += "\nadd_spacer|small|\nadd_smalltext|`$Level " + to_string(lvl) + " rewards:``|left|\nadd_label_with_icon|small|`w(Unlocked) " + (list[i] == 9522 ? "200" : "") + "" + (list[i] == 1068 ? "10" : "") + " " + items[list[i]].name + "``|left|" + to_string(list[i]) + "|" + (ok ? "\nadd_label_with_icon|small|`w(Unlocked) Unique Builder's Flag and skin! - Show off your mastery with a flag beside your name``|left|7070|" : "") + "\nadd_small_font_button|b_claimreward" + to_string(i + 1) + "|Claim Reward|noflags|0|0|";
				else if (pInfo(peer)->bb_lvl < lvl)  prize += "\nadd_spacer|small|\nadd_smalltext|`$Level " + to_string(lvl) + " rewards:``|left|\nadd_label_with_icon|small|`a(Locked) " + (list[i] == 9522 ? "200" : "") + "" + (list[i] == 1068 ? "10" : "") + " " + items[list[i]].name + "``|left|" + to_string(list[i]) + "|" + (ok ? "\nadd_label_with_icon|small|`a(Locked) Unique Builder's Flag and skin! - Show off your mastery with a flag beside your name``|left|7070|" : "");
			}
			VarList::OnDialogRequest(peer, SetColor(peer) + "set_default_color|`o\nadd_label_with_icon|big|`wBuilder Rewards|left|7070|\nadd_spacer|small|\nadd_textbox|`9Here are all the Builder rewards that you have earned so far!``|left|" + prize + "|\nadd_spacer|small|\nend_dialog|Role_Quest|||\nadd_button|backto_viewrole|`$Back|noflags|0|0|\nadd_quick_exit|\n");
		}
		else if (reward == "surgery") {
			list = { 6900, 6982, 6212, 3172, 9068, 6912, 10836, 5142, 3130, 8284 };
			for (int i = 0, lvl = 0; i < list.size(); i++) {
				bool ok = (i == 9 ? true : false);
				if (find(pInfo(peer)->surg_p.begin(), pInfo(peer)->surg_p.end(), lvl += 1) != pInfo(peer)->surg_p.end()) prize += "\nadd_spacer|small|\nadd_smalltext|`$Level " + to_string(lvl) + " rewards:``|left|\nadd_label_with_icon|small|`$(Unlocked) " + (list[i] == 6212 ? "50" : list[i] == 3172 || list[i] == 6912 ? "25" : list[i] == 10836 ? "100" : list[i] == 5142 ? "5" : "") + " " + items[list[i]].name + "``|left|" + to_string(list[i]) + "|" + (ok ? "\nadd_label_with_icon|small|`$(Unlocked) Unique Surgeon's Flag and skin! - Show off your mastery with a flag beside your name``|left|7068|" : "") + "\nadd_spacer|small|";
				else if (pInfo(peer)->s_lvl >= lvl) prize += "\nadd_spacer|small|\nadd_smalltext|`$Level " + to_string(lvl) + " rewards:``|left|\nadd_label_with_icon|small|`w(Unlocked) " + (list[i] == 6212 ? "50" : list[i] == 3172 || list[i] == 6912 ? "25" : list[i] == 10836 ? "100" : list[i] == 5142 ? "5" : "") + " " + items[list[i]].name + "``|left|" + to_string(list[i]) + "|" + (ok ? "\nadd_label_with_icon|small|`w(Unlocked) Unique Surgeon's Flag and skin! - Show off your mastery with a flag beside your name``|left|7068|" : "") + "\nadd_small_font_button|s_claimreward" + to_string(i + 1) + "|Claim Reward|noflags|0|0|";
				else if (pInfo(peer)->s_lvl < lvl) prize += "\nadd_spacer|small|\nadd_smalltext|`$Level " + to_string(lvl) + " rewards:``|left|\nadd_label_with_icon|small|`a(Locked) " + (list[i] == 6212 ? "50" : list[i] == 3172 || list[i] == 6912 ? "25" : list[i] == 10836 ? "100" : list[i] == 5142 ? "5" : "") + " " + items[list[i]].name + "``|left|" + to_string(list[i]) + "|" + (ok ? "\nadd_label_with_icon|small|`a(Locked) Unique Surgeon's Flag and skin! - Show off your mastery with a flag beside your name``|left|7068|" : "");
			}
			VarList::OnDialogRequest(peer, SetColor(peer) + "set_default_color|`o\nadd_label_with_icon|big|`wSurgeon Rewards|left|7068|\nadd_spacer|small|\nadd_textbox|`9Here are all the Surgeon rewards that you have earned so far!``|left|" + prize + "|\nadd_spacer|small|\nend_dialog|Role_Quest|||\nadd_button|backto_viewrole|`$Back|noflags|0|0|\nadd_quick_exit|\n");
		}
		else if (reward == "fishing") {
			list = { 3010, 3018, 3020, 3044, 5740, 3042, 3098, 3100, 3040, 10262 };
			for (int i = 0, lvl = 0; i < list.size(); i++) {
				bool ok = (i == 9 ? true : false);
				if (find(pInfo(peer)->ff_p.begin(), pInfo(peer)->ff_p.end(), lvl += 1) != pInfo(peer)->ff_p.end()) prize += "\nadd_spacer|small|\nadd_smalltext|`$Level " + to_string(lvl) + " rewards:``|left|\nadd_label_with_icon|small|`$(Unlocked) " + (list[i] == 3018 ? "200" : list[i] == 3020 || list[i] == 3098 ? "25" : list[i] == 3044 || list[i] == 3218 ? "50" : "") + " " + items[list[i]].name + "``|left|" + to_string(list[i]) + "|" + (ok ? "\nadd_label_with_icon|small|`$(Unlocked) Unique Fisherman's Flag and skin! - Show off your mastery with a flag beside your name``|left|7072|" : "") + "\nadd_spacer|small|";
				else if (pInfo(peer)->ff_lvl >= lvl) prize += "\nadd_spacer|small|\nadd_smalltext|`$Level " + to_string(lvl) + " rewards:``|left|\nadd_label_with_icon|small|`w(Unlocked) " + (list[i] == 3018 ? "200" : list[i] == 3020 || list[i] == 3098 ? "25" : list[i] == 3044 || list[i] == 3218 ? "50" : "") + " " + items[list[i]].name + "``|left|" + to_string(list[i]) + "|" + (ok ? "\nadd_label_with_icon|small|`w(Unlocked) Unique Fisherman's Flag and skin! - Show off your mastery with a flag beside your name``|left|7072|" : "") + "\nadd_small_font_button|f_claimreward" + to_string(i + 1) + "|Claim Reward|noflags|0|0|";
				else if (pInfo(peer)->ff_lvl < lvl) prize += "\nadd_spacer|small|\nadd_smalltext|`$Level " + to_string(lvl) + " rewards:``|left|\nadd_label_with_icon|small|`a(Locked) " + (list[i] == 3018 ? "200" : list[i] == 3020 || list[i] == 3098 ? "25" : list[i] == 3044 || list[i] == 3218 ? "50" : "") + " " + items[list[i]].name + "``|left|" + to_string(list[i]) + "|" + (ok ? "\nadd_label_with_icon|small|`a(Locked) Unique Fisherman's Flag and skin! - Show off your mastery with a flag beside your name``|left|7072|" : "");
			}
			VarList::OnDialogRequest(peer, SetColor(peer) + "set_default_color|`o\nadd_label_with_icon|big|`wFishing Rewards|left|7072|\nadd_spacer|small|\nadd_textbox|`9Here are all the Fishing rewards that you have earned so far!``|left|" + prize + "|\nadd_spacer|small|\nend_dialog|Role_Quest|||\nadd_button|backto_viewrole|`$Back|noflags|0|0|\nadd_quick_exit|\n");
		}
		else if (reward == "provider") {
			list = { 1008,1044,872,10450,870,7166,876,6950,6952,9166 };
			for (int i = 0, lvl = 0; i < list.size(); i++) {
				bool ok = (i == 9 ? true : false);
				if (find(pInfo(peer)->p_p.begin(), pInfo(peer)->p_p.end(), lvl += 1) != pInfo(peer)->p_p.end()) prize += "\nadd_spacer|small|\nadd_smalltext|`$Level " + to_string(lvl) + " rewards:``|left|\nadd_label_with_icon|small|`$(Unlocked) " + (list[i] == 1008 ? "5" : list[i] == 1044 ? "50" : list[i] == 872 ? "200" : list[i] == 10450 ? "3" : "") + " " + items[list[i]].name + "``|left|" + to_string(list[i]) + "|" + (ok ? "\nadd_label_with_icon|small|`$(Unlocked) Unique Chef's Flag and skin! - Show off your mastery with a flag beside your name``|left|7076|" : "") + "|\nadd_spacer|small|";
				else if (pInfo(peer)->p_lvl >= lvl) prize += "\nadd_spacer|small|\nadd_smalltext|`$Level " + to_string(lvl) + " rewards:``|left|\nadd_label_with_icon|small|`w(Unlocked) " + (list[i] == 1008 ? "5" : list[i] == 1044 ? "50" : list[i] == 872 ? "200" : list[i] == 10450 ? "3" : "") + " " + items[list[i]].name + "``|left|" + to_string(list[i]) + "|" + (ok ? "\nadd_label_with_icon|small|`w(Unlocked) Unique Chef's Flag and skin! - Show off your mastery with a flag beside your name``|left|7076|" : "") + "\nadd_small_font_button|p_claimreward" + to_string(i + 1) + "|Claim Reward|noflags|0|0|";
				else if (pInfo(peer)->p_lvl < lvl) prize += "\nadd_spacer|small|\nadd_smalltext|`$Level " + to_string(lvl) + " rewards:``|left|\nadd_label_with_icon|small|`a(Locked) " + (list[i] == 1008 ? "5" : list[i] == 1044 ? "50" : list[i] == 872 ? "200" : list[i] == 10450 ? "3" : "") + " " + items[list[i]].name + "``|left|" + to_string(list[i]) + "|" + (ok ? "\nadd_label_with_icon|small|`a(Locked) Unique Chef's Flag and skin! - Show off your mastery with a flag beside your name``|left|7076|" : "");
			}
			VarList::OnDialogRequest(peer, SetColor(peer) + "set_default_color|`o\nadd_label_with_icon|big|`wProvider Rewards|left|928|\nadd_spacer|small|\nadd_textbox|`9Here are all the Provider rewards that you have earned so far!``|left|" + prize + "|\nadd_spacer|small|\nend_dialog|Role_Quest|||\nadd_button|backto_viewrole|`$Back|noflags|0|0|\nadd_quick_exit|\n");
		}
		else if (reward == "geiger") {
			list = { 4654,262,826,828,9712,3146,2266,5072,5070,9716 };
			for (int i = 0, lvl = 0; i < list.size(); i++) {
				bool ok = (i == 9 ? true : false);
				if (find(pInfo(peer)->g_p.begin(), pInfo(peer)->g_p.end(), lvl += 1) != pInfo(peer)->g_p.end()) prize += "\nadd_spacer|small|\nadd_smalltext|`$Level " + to_string(lvl) + " rewards:``|left|\nadd_label_with_icon|small|`$(Unlocked) " + (list[i] == 262 || list[i] == 826 || list[i] == 828 ? "50" : list[i] == 3146 ? "10" : "") + " " + items[list[i]].name + "``|left|" + to_string(list[i]) + "|" + (ok ? "\nadd_label_with_icon|small|`$(Unlocked) Unique Surgeon's Flag and skin! - Show off your mastery with a flag beside your name``|left|7074|" : "") + "|\nadd_spacer|small|";
				else if (pInfo(peer)->g_lvl >= lvl) prize += "\nadd_spacer|small|\nadd_smalltext|`$Level " + to_string(lvl) + " rewards:``|left|\nadd_label_with_icon|small|`w(Unlocked) " + (list[i] == 262 || list[i] == 826 || list[i] == 828 ? "50" : list[i] == 3146 ? "10" : "") + " " + items[list[i]].name + "``|left|" + to_string(list[i]) + "|\nadd_small_font_button|g_claimreward" + to_string(i + 1) + (ok ? "\nadd_label_with_icon|small|`w(Unlocked) Unique Surgeon's Flag and skin! - Show off your mastery with a flag beside your name``|left|7074|" : "") + "\nadd_small_font_button|g_claimreward" + to_string(i + 1) + "|Claim Reward|noflags|0|0|";
				else if (pInfo(peer)->g_lvl < lvl) prize += "\nadd_spacer|small|\nadd_smalltext|`$Level " + to_string(lvl) + " rewards:``|left|\nadd_label_with_icon|small|`a(Locked) " + (list[i] == 262 || list[i] == 826 || list[i] == 828 ? "50" : list[i] == 3146 ? "10" : "") + " " + items[list[i]].name + "``|left|" + to_string(list[i]) + "|" + (ok ? "\nadd_label_with_icon|small|`a(Locked) Unique Startopia's Flag and skin! - Show off your mastery with a flag beside your name``|left|7074|" : "");
			}
			VarList::OnDialogRequest(peer, SetColor(peer) + "set_default_color|`o\nadd_label_with_icon|big|`wGeiger Rewards|left|2204|\nadd_spacer|small|\nadd_textbox|`9Here are all the Geiger rewards that you have earned so far!``|left|" + prize + "|\nadd_spacer|small|\nend_dialog|Role_Quest|||\nadd_button|backto_viewrole|`$Back|noflags|0|0|\nadd_quick_exit|\n");
		}
	}
	static void Get_Random_Quest(ENetPeer* p_, string type_role) {
		if (pInfo(p_)->role_quest) return;
		/*Farmer*/
		if (type_role == "Farmer") {
			pInfo(p_)->role_quest = true;
			pInfo(p_)->total_quest_selected++;
			pInfo(p_)->role_quest_type = "Farmer";
			int Random_Quest = rand() % 5 + 1;
			if (Random_Quest == 1) {
				pInfo(p_)->quest_number = 1;
				pInfo(p_)->need_required = 0;
				pInfo(p_)->quest_required = 200;
				pInfo(p_)->quest_text = "Harvest `9200 trees with a rarity above 20``.";
			}
			if (Random_Quest == 2) {
				pInfo(p_)->quest_number = 2;
				pInfo(p_)->need_required = 0;
				pInfo(p_)->quest_required = 200;
				pInfo(p_)->quest_text = "Plant `9200 trees with a rarity above 20``.";
			}
			if (Random_Quest == 3) {
				pInfo(p_)->quest_number = 3;
				pInfo(p_)->need_required = 0;
				pInfo(p_)->quest_required = 15000;
				pInfo(p_)->quest_text = "Harvest `915,000 rarity of trees``.";
			}
			if (Random_Quest == 4) {
				pInfo(p_)->quest_number = 4;
				pInfo(p_)->need_required = 0;
				pInfo(p_)->quest_required = 15000;
				pInfo(p_)->quest_text = "Plant `915,000 rarity of trees``.";
			}
			if (Random_Quest == 5) {
				pInfo(p_)->quest_number = 5;
				pInfo(p_)->need_required = 0;
				pInfo(p_)->quest_required = 15000;
				pInfo(p_)->quest_text = "Splice `915,000 rarity of trees``.";
			}
			if (Random_Quest == 6) {
				pInfo(p_)->quest_number = 6;
				pInfo(p_)->need_required = 0;
				pInfo(p_)->quest_required = 200;
				pInfo(p_)->quest_text = "Splice `9200 trees with a rarity above 20``.";
			}
			if (Random_Quest == 7) {
				vector<int> list{ 3567, 13, 57, 17, 381, 1139, 21, 101, 379, 117, 27, 23, 581, 195, 105, 191, 377, 1307, 697, 881, 167, 185, 1323, 165, 3783, 369, 25, 171, 53, 103, 885, 119, 3573, 199, 549, 681, 655, 107, 163, 31, 671, 889, 887, 193, 127, 1433, 173, 7631, 413, 3571, 3568,  2809, 9393, 225, 111, 109, 201, 59, 607, 285, 2029, 2013, 2015, 1611, 995, 997, 963, 1481, 219, 197, 2023, 2021, 9331, 1305, 823, 1039, 231, 487, 483, 2019,  427, 1757, 2009, 281, 781, 329, 459, 1041, 421, 2787, 1043, 2797, 181, 613, 65, 4983, 283, 553, 425, 4639, 987, 627, 2017, 989, 61, 4635, 973, 3523, 331, 265, 859, 433, 253, 339, 1105, 439, 4567, 333, 677, 5673, 1427, 5603, 183, 5731, 7223, 6035, 6813, 10533, 1113, 1047, 653, 2811, 4703, 1429, 847, 665, 231,487,483,2019,427,1757,2009,281,781,329,459,1041,421,2787,2789,1043,2797,181,613,65,4983,283,553,425,4635,987,627,2017,989,61,4639,973,3523,331,265,859,433,253,339,1105,439,4567,333,677,5673,1427,5603,183,10533,5731,7223,10833,6035,6813,1113,1047,653,2811,4703,1429,847,665,485,1613,833,2025,1775,3931,429,3831,423,437,1773,4767,1299,361,667,2815,3473,301,4637,5683,2709,415,955,461,861,9389,5467,2791,2815,1803,419,2027,685,555,741,10531,5729,7221,10831,6033,6811,621,6401,1107,359,3471,855,309,1685,1449,1309,441,1111,221,1431,3065,9307,1257,1501,1109,4641,3587,1103,417,743,431,3823,2949,1131,3825,727,5379,729,187,787,5459,4785,3261,3521,2293,2309,2321,2333,5461,3721,327,247,63,3479,445,4783,299,863,8935,1451,261,1871,1499,455,9391,683,1159,551,1745,411,3005,557,687,4799,559,4643,3899,1605,9309,567,565,1155,3827,1327,1767,993,1157,563,4721,115,1423,10515,1329,6545,287,669,777,5463,1655,1599,561,4585,3413,4745,1771,2011,1161,1729,3757,3753,321,3265,3263,623,775,6397,129,4667,759,3767,1529,6543,4707,3835,1435,651,8929,569,527,3287,1595,6063,2795,1003,1731,4943,4963,597,4669,1531,1523,625,4297,599,657,571,873,3755,2969,1725,4603,1447,3267,5375,1683 }, small_seed_pack{ 3567, 13, 57, 17, 381, 1139, 21, 101, 379, 117, 27, 23, 581, 195, 105, 191, 377, 1307, 697, 881, 167, 185, 1323, 165, 3783, 369, 25, 171, 53, 103, 179, 29, 249, 177, 1325, 337, 189, 169, 55, 223, 175, 885, 119, 3573, 199, 549, 681, 655, 107, 163, 31, 671, 889, 887, 193, 127, 1433, 173, 7631, 413, 3571, 3569, 2809, 9393, 225, 111, 109, 201, 59, 607, 285, 2029, 2013, 2015, 1611, 995, 997, 963, 1481, 219, 197, 2023, 2021, 9331, 1305, 823, 1039, 231, 487, 483, 2019, 427, 1757, 2009, 281, 781, 329, 459, 1041, 421, 2787, 2789, 1043, 2797, 181, 613, 65, 4983, 283, 553, 425, 4635, 987, 627, 2017, 989, 61, 4639, 973, 3523, 331, 265, 859, 433, 253, 339, 1105, 439, 4567, 333, 677, 5673, 1427, 5603, 183, 10533, 5731, 7223, 10833, 6035, 6813, 1113, 1047, 653, 2811, 4703, 1429, 847, 665 };
				int random_item = list[rand() % list.size()];
				pInfo(p_)->quest_number = 7;
				pInfo(p_)->need_required = 0;
				pInfo(p_)->quest_required = 200;
				pInfo(p_)->need_item_req_id = random_item;
				pInfo(p_)->quest_text = "Plant `9200 of " + items[random_item].name + "``.";
			}
		}
		/*Builder*/
		if (type_role == "Builder") {
			pInfo(p_)->role_quest = true;
			pInfo(p_)->total_quest_selected++;
			pInfo(p_)->role_quest_type = "Builder";
			int Random_Quest = rand() % 4 + 1;
			if (Random_Quest == 1) {
				pInfo(p_)->quest_number = 1;
				pInfo(p_)->need_required = 0;
				pInfo(p_)->quest_required = 1000;
				pInfo(p_)->quest_text = "Build `91,000 of any blocks``.";
			}
			if (Random_Quest == 2) {
				pInfo(p_)->quest_number = 2;
				pInfo(p_)->need_required = 0;
				pInfo(p_)->quest_required = 1000;
				pInfo(p_)->quest_text = "Break `91,000 of any blocks``.";
			}
			if (Random_Quest == 3) {
				pInfo(p_)->quest_number = 3;
				pInfo(p_)->need_required = 0;
				pInfo(p_)->quest_required = 15000;
				pInfo(p_)->quest_text = "Build `915,000 ``rarity of blocks.";
			}
			if (Random_Quest == 4) {
				pInfo(p_)->quest_number = 4;
				pInfo(p_)->need_required = 0;
				pInfo(p_)->quest_required = 15000;
				pInfo(p_)->quest_text = "Break `915,000 ``rarity of blocks.";
			}
			if (Random_Quest == 5) {
				vector<int> list{ 100, 164, 166, 168, 170, 172, 174, 176, 178, 180, 182, 184, 186, 282, 308, 324, 360, 666, 716, 884, 1610, 1554, 1612, 2012, 2020, 2018, 2016, 2022, 2024, 2026, 2028, 2056, 2708 };
				int random_item = list[rand() % list.size()];
				pInfo(p_)->quest_number = 5;
				pInfo(p_)->need_required = 0;
				pInfo(p_)->quest_required = 100;
				pInfo(p_)->need_item_req_id = random_item;
				pInfo(p_)->quest_text = "build `9100 of " + items[random_item].name + "``.";
			}
		}
		/*Surgeon*/
		if (type_role == "Surgeon") {
			pInfo(p_)->role_quest = true;
			pInfo(p_)->total_quest_selected++;
			pInfo(p_)->role_quest_type = "Surgeon";
			int Random_Quest = rand() % 5 + 1;
			if (Random_Quest == 1) {
				pInfo(p_)->quest_number = 1;
				int Random = rand() % 3 + 2;
				pInfo(p_)->need_required = 0;
				pInfo(p_)->quest_required = Random;
				pInfo(p_)->quest_text = "Complete `9" + fixint(Random) + " Surgeries``.";
			}
			if (Random_Quest == 2) {
				pInfo(p_)->quest_number = 2;
				pInfo(p_)->need_required = 0;
				pInfo(p_)->quest_required = 2;
				pInfo(p_)->need_sumbit_req_id = 4298;
				pInfo(p_)->quest_text = "Submit `62 Caduceus.";
			}
			if (Random_Quest == 3) {
				pInfo(p_)->quest_number = 3;
				pInfo(p_)->need_required = 0;
				pInfo(p_)->quest_required = 20;
				pInfo(p_)->need_sumbit_req_id = 1294;
				pInfo(p_)->quest_text = "Submit `620 Hospital Door.";
			}
			if (Random_Quest == 4) {
				pInfo(p_)->quest_number = 4;
				pInfo(p_)->need_required = 0;
				pInfo(p_)->quest_required = 20;
				pInfo(p_)->need_sumbit_req_id = 1290;
				pInfo(p_)->quest_text = "Submit `620 Hospital Wall.";
			}
			if (Random_Quest == 5) {
				pInfo(p_)->quest_number = 5;
				pInfo(p_)->need_required = 0;
				pInfo(p_)->quest_required = 20;
				pInfo(p_)->need_sumbit_req_id = 1292;
				pInfo(p_)->quest_text = "Submit `620 Hospital Window.";
			}
			if (Random_Quest == 6) {
				pInfo(p_)->quest_number = 6;
				pInfo(p_)->need_required = 0;
				pInfo(p_)->quest_required = 20;
				pInfo(p_)->need_sumbit_req_id = 1288;
				pInfo(p_)->quest_text = "Submit `620 Hospital Curtain.";
			}
		}
		/*Fishing*/
		if (type_role == "Fishing") {
			pInfo(p_)->role_quest = true;
			pInfo(p_)->total_quest_selected++;
			pInfo(p_)->role_quest_type = "Fishing";
			int Random_Quest = rand() % 2 + 1;
			if (Random_Quest == 1) {
				pInfo(p_)->quest_number = 1;
				pInfo(p_)->need_required = 0;
				pInfo(p_)->quest_required = 800;
				pInfo(p_)->quest_text = "Catch `6800lbs ``of fish.";
			}
			if (Random_Quest == 2) {
				pInfo(p_)->quest_number = 2;
				pInfo(p_)->need_required = 0;
				pInfo(p_)->quest_required = 6000;
				pInfo(p_)->quest_text = "Catch `66,000lbs ``of fish.";
			}
			if (Random_Quest == 3) {
				pInfo(p_)->quest_number = 3;
				pInfo(p_)->need_required = 0;
				pInfo(p_)->quest_required = 2000;
				pInfo(p_)->quest_text = "Catch `62,000lbs ``of fish.";
			}
		}
		/*Provider*/
		if (type_role == "Provider") {
			pInfo(p_)->role_quest = true;
			pInfo(p_)->total_quest_selected++;
			pInfo(p_)->role_quest_type = "Provider";
			int Random_Quest = rand() % 1 + 1;
			if (Random_Quest == 1) {
				vector<int> list{ 866, 872, 1044, 3888, 928, 8112, 2798, 8172, 8160, 8136, 8100, 6414 };
				int random_item = list[rand() % list.size()];
				pInfo(p_)->quest_number = 1;
				int Random = rand() % 900 + 263;
				pInfo(p_)->need_required = 0;
				pInfo(p_)->quest_required = Random;
				pInfo(p_)->need_item_req_id = random_item;
				pInfo(p_)->quest_text = "Harvest `9" + fixint(Random) + " of " + items[random_item].name + "``.";
			}
			if (Random_Quest == 2) {
				vector<int> list{ 868, 874, 868, 3890, 1634, 5114, 822, 8174, 8176, 8178, 8180, 8182, 914, 924, 916, 918, 920, 924, 920, 1258, 6520, 7762, 1646, 7754, 4314, 7754, 924, 4848, 4846, 196, 8116, 8118, 7780, 2914, 3012, 7748 };
				int random_item = list[rand() % list.size()];
				pInfo(p_)->quest_number = 2;
				int Random = rand() % 100 + 100;
				pInfo(p_)->need_required = 0;
				pInfo(p_)->quest_required = Random;
				pInfo(p_)->need_sumbit_req_id = random_item;
				pInfo(p_)->quest_text = "Submit `6" + fixint(Random) + " of " + items[random_item].name + "``.";
			}
		}
		/*Geiger*/
		if (type_role == "Geiger") {
			pInfo(p_)->role_quest = true;
			pInfo(p_)->total_quest_selected++;
			pInfo(p_)->role_quest_type = "Geiger";
			int Random_Quest = rand() % 3 + 1;
			if (Random_Quest == 1) {
				pInfo(p_)->quest_number = 1;
				int Random = rand() % 3 + 2;
				pInfo(p_)->need_required = 0;
				pInfo(p_)->quest_required = Random;
				pInfo(p_)->quest_text = "Collect `9" + fixint(Random) + " Radioactive items``.";
			}
			if (Random_Quest == 2) {
				pInfo(p_)->quest_number = 2;
				int Random = rand() % 9 + 3;
				pInfo(p_)->need_required = 0;
				pInfo(p_)->quest_required = Random;
				pInfo(p_)->need_sumbit_req_id = 2242;
				pInfo(p_)->quest_text = "Submit `6" + fixint(Random) + " Red Crystal.";
			}
			if (Random_Quest == 3) {
				pInfo(p_)->quest_number = 3;
				int Random = rand() % 5 + 2;
				pInfo(p_)->need_required = 0;
				pInfo(p_)->quest_required = Random;
				pInfo(p_)->need_sumbit_req_id = 2246;
				pInfo(p_)->quest_text = "Submit `6" + fixint(Random) + " Blue Crystal.";
			}
			if (Random_Quest == 4) {
				pInfo(p_)->quest_number = 4;
				int Random = rand() % 3 + 2;
				pInfo(p_)->need_required = 0;
				pInfo(p_)->quest_required = Random;
				pInfo(p_)->need_sumbit_req_id = 2249;
				pInfo(p_)->quest_text = "Submit `6" + fixint(Random) + " White Crystal.";
			}
		}
	}
};
void RandomizeCQuest(ENetPeer* p_) {
	if (pInfo(p_)->C_QuestKind != 0) return;
	if (pInfo(p_)->CQ) pInfo(p_)->CQ = false;
	int RandomQuest = rand() % 15 + 1;
	if (RandomQuest == 1) {
		pInfo(p_)->C_QuestKind = 1;
	GenerateAgain:
		int RandomItem = rand() % items.size() + 34;
		if (items[RandomItem].r_1 == 2035 || items[RandomItem].r_2 == 2035 || items[RandomItem].r_1 == 2037 || items[RandomItem].r_2 == 2037 || items[RandomItem].blockType == BlockTypes::LOCK || items[RandomItem].blockType == BlockTypes::SEED || items[RandomItem].r_1 == 0 || items[RandomItem].r_2 == 0 || items[RandomItem].properties & Property_Untradable || items[RandomItem].properties & Property_Mod || items[RandomItem].rarity == 999 || items[RandomItem].rarity >= 150) goto GenerateAgain;
		else {
			pInfo(p_)->C_DeliverID = RandomItem;
			pInfo(p_)->C_ProgressNeeded = rand() % 300 + 1;
		}
	}
	if (RandomQuest == 2) {
		int RandomProg = rand() % 20000;
		if (RandomProg <= 1000) RandomProg += 1000;
		pInfo(p_)->C_QuestKind = 2;
		pInfo(p_)->C_ProgressNeeded = RandomProg;
	}
	if (RandomQuest == 3) {
		int RandomProg = rand() % 20000;
		if (RandomProg <= 1000) RandomProg += 1000;
		pInfo(p_)->C_QuestKind = 3;
		pInfo(p_)->C_ProgressNeeded = RandomProg;
	}
	if (RandomQuest == 4) {
		int RandomProg = rand() % 2500;
		if (RandomProg <= 500) RandomProg += 500;
		pInfo(p_)->C_QuestKind = 4;
		pInfo(p_)->C_ProgressNeeded = RandomProg;
	}
	if (RandomQuest == 5) {
		int RandomProg = rand() % 20000;
		if (RandomProg <= 1000) RandomProg += 1000;
		pInfo(p_)->C_QuestKind = 5;
		pInfo(p_)->C_ProgressNeeded = RandomProg;
	}
	if (RandomQuest == 6) {
		int RandomProg = rand() % 10000;
		if (RandomProg <= 1000) RandomProg += 1000;
		pInfo(p_)->C_QuestKind = 6;
		pInfo(p_)->C_ProgressNeeded = RandomProg;
	}
	if (RandomQuest == 7) {
		int RandomProg = rand() % 100000;
		if (RandomProg <= 20000) RandomProg += 20000;
		pInfo(p_)->C_QuestKind = 7;
		pInfo(p_)->C_ProgressNeeded = RandomProg;
	}
	if (RandomQuest == 8) {
		int RandomProg = rand() % 200 + 1;
		pInfo(p_)->C_DeliverID = 242;
		pInfo(p_)->C_QuestKind = 8;
		pInfo(p_)->C_ProgressNeeded = RandomProg;
	}
	if (RandomQuest == 9) {
		int RandomProg = rand() % 25 + 1;
		if (RandomProg <= 3) RandomProg += 5;
		pInfo(p_)->C_QuestKind = 9;
		pInfo(p_)->C_ProgressNeeded = RandomProg;
	}
	if (RandomQuest == 10) {
		int RandomProg = rand() % 1000 + 1;
		pInfo(p_)->C_QuestKind = 10;
		pInfo(p_)->C_ProgressNeeded = RandomProg;
	}
	if (RandomQuest == 11) {
		int RandomProg = rand() % 5 + 1;
		pInfo(p_)->C_QuestKind = 11;
		pInfo(p_)->C_ProgressNeeded = RandomProg;
	}
	if (RandomQuest == 12) {
		int RandomProg = rand() % 15 + 1;
		if (RandomProg <= 3) RandomProg += 5;
		pInfo(p_)->C_QuestKind = 12;
		pInfo(p_)->C_ProgressNeeded = RandomProg;
	}
	if (RandomQuest == 13) {
		int RandomProg = rand() % 25 + 1;
		if (RandomProg <= 3) RandomProg += 5;
		pInfo(p_)->C_QuestKind = 13;
		pInfo(p_)->C_ProgressNeeded = RandomProg;
	}
	if (RandomQuest == 14) {
		int RandomProg = rand() % 3000 + 1;
		if (RandomProg <= 200) RandomProg += 400;
		pInfo(p_)->C_QuestKind = 14;
		pInfo(p_)->C_ProgressNeeded = RandomProg;
	}
	if (RandomQuest == 15) {
		int RandomProg = rand() % 10 + 1;
		pInfo(p_)->C_QuestKind = 15;
		pInfo(p_)->C_ProgressNeeded = RandomProg;
	}
}
void SendCarnivalQuest(ENetPeer* p_, int delay) {
	if (!pInfo(p_)->C_QuestActive) return;
	if (pInfo(p_)->CQ) pInfo(p_)->CQ = false;
	try {
		string step = to_string(pInfo(p_)->C_QuestStep);
		string quest_info = "", current_progress = "", deliver = "", extra = "";
		int QuestKind = pInfo(p_)->C_QuestKind, ProgressNeeded = pInfo(p_)->C_ProgressNeeded, item = pInfo(p_)->C_DeliverID;
		// QuestKind 1 = Deliver
		// QuestKind 2 = Harvest
		// QuestKind 3 = Plant Rarity
		// QuestKind 4 = Break Block
		// QuestKind 5 = Break Rarity Block
		// QuestKind 6 = Earn XP
		// QuestKind 7 = Deliver Gems
		// QuestKind 8 = Deliver World Lock
		// QuestKind 9 = Perform Surgery
		// QuestKind 10 = Harvest Provider
		// QuestKind 11 = Earn Growtoken
		// QuestKind 12 = Shatter Crystal
		// QuestKind 13 = Geiger Counter
		// QuestKind 14 = Fishing lb fish
		// QuestKind 15 = DNA Splicing
		if (QuestKind == 0) {
			RandomizeCQuest(p_);
			return;
		}
		switch (QuestKind) {
		case 1: {
			quest_info = "Your task is to bring me " + fixint(ProgressNeeded) + " of them " + items[item].ori_name + " things!";
			current_progress = "(Current progress " + fixint(pInfo(p_)->C_QuestProgress) + "/" + fixint(ProgressNeeded) + ")";
			deliver = "You have none to deliver!";
			int adaBrp = 0;
			Inventory::Modify(p_, item, adaBrp);
			if (adaBrp != 0) {
				if (pInfo(p_)->C_QuestProgress + adaBrp > ProgressNeeded) adaBrp = ProgressNeeded - pInfo(p_)->C_QuestProgress;
				deliver = "Deliver " + fixint(adaBrp) + " " + items[item].ori_name + "";
			}
			break;
		}
		case 2: {
			quest_info = "You must pluck " + fixint(ProgressNeeded) + " rarity worth of delicious fruit from any tree! I don't want the fruit, I'm just mad that it's up there!";
			extra = "\nadd_smalltext|`o(For example, if you smash a rarity-50 tree and get 3 fruit from it, you get 150 points)|";
			current_progress = "(Current progress " + fixint(pInfo(p_)->C_QuestProgress) + "/" + fixint(ProgressNeeded) + ")";
			deliver = "I will go pick fruit!";
			if (pInfo(p_)->C_QuestProgress >= ProgressNeeded) {
				current_progress = "(Current progress " + fixint(ProgressNeeded) + "/" + fixint(ProgressNeeded) + ")";
				deliver = "The fruit is no more!";
			}
			break;
		}
		case 3: {
			quest_info = "You must plant " + fixint(ProgressNeeded) + " rarity worth of trees!";
			extra = "\nadd_smalltext|`o(For example, if you plant a tree of rarity 50, you get 50 points. A Dirt Tree is 1 point because it is rarity 1)|";
			current_progress = "(Current progress " + fixint(pInfo(p_)->C_QuestProgress) + "/" + fixint(ProgressNeeded) + ")";
			deliver = "I will go plant more!";
			if (pInfo(p_)->C_QuestProgress >= ProgressNeeded) {
				current_progress = "(Current progress " + fixint(ProgressNeeded) + "/" + fixint(ProgressNeeded) + ")";
				deliver = "I have planted them all!";
			}
			break;
		}
		case 4: {
			quest_info = "You must crush " + fixint(ProgressNeeded) + " blocks for me! I don't care what kind!";
			current_progress = "(Current progress " + fixint(pInfo(p_)->C_QuestProgress) + "/" + fixint(ProgressNeeded) + ")";
			deliver = "Keep on smashing!";
			if (pInfo(p_)->C_QuestProgress >= ProgressNeeded) {
				current_progress = "(Current progress " + fixint(ProgressNeeded) + "/" + fixint(ProgressNeeded) + ")";
				deliver = "I bashed 'em good!";
			}
			break;
		}
		case 5: {
			quest_info = "You must pummel " + fixint(ProgressNeeded) + " rarity worth of blocks! Destroy!";
			extra = "\nadd_smalltext|(For example, if you smash a block of rarity 50, you get 50 points. A Dirt block is 1 point because it is rarity 1)|";
			current_progress = "(Current progress " + fixint(pInfo(p_)->C_QuestProgress) + "/" + fixint(ProgressNeeded) + ")";
			deliver = "I will go smash more!";
			if (pInfo(p_)->C_QuestProgress >= ProgressNeeded) {
				current_progress = "(Current progress " + fixint(ProgressNeeded) + "/" + fixint(ProgressNeeded) + ")";
				deliver = "No block can beat me!";
			}
			break;
		}
		case 6: {
			quest_info = "Here's a freeform quest for you - I don't care what you do, just earn " + fixint(ProgressNeeded) + " XP doing it!";
			current_progress = "(Current progress " + fixint(pInfo(p_)->C_QuestProgress) + "/" + fixint(ProgressNeeded) + ")";
			deliver = "I'm on my way!";
			if (pInfo(p_)->C_QuestProgress >= ProgressNeeded) {
				current_progress = "(Current progress " + fixint(ProgressNeeded) + "/" + fixint(ProgressNeeded) + ")";
				deliver = "I have learned!";
			}
			break;
		}
		case 7: {
			quest_info = "It's traditional to grease the palm of an old carnie such as myself if you want to loosen up one of these rings in the hopes of it falling into your pocket... What I mean by that is, give me " + fixint(ProgressNeeded) + " Gems. Now.";
			current_progress = "(Current progress " + fixint(pInfo(p_)->C_QuestProgress) + "/" + fixint(ProgressNeeded) + ")";
			deliver = "You have none to deliver!";
			int adaBrp = pInfo(p_)->gems;
			if (adaBrp != 0) {
				if (pInfo(p_)->C_QuestProgress + adaBrp > ProgressNeeded) adaBrp = ProgressNeeded - pInfo(p_)->C_QuestProgress;
				deliver = "Deliver " + fixint(adaBrp) + " Gems";
			}
			break;
		}
		case 8: {
			quest_info = "Your task is to bring me " + fixint(ProgressNeeded) + " of them World Lock things!";
			current_progress = "(Current progress " + fixint(pInfo(p_)->C_QuestProgress) + "/" + fixint(ProgressNeeded) + ")";
			deliver = "You have none to deliver!";
			int adaBrp = 0;
			Inventory::Modify(p_, 242, adaBrp);
			if (adaBrp != 0) {
				if (pInfo(p_)->C_QuestProgress + adaBrp > ProgressNeeded) adaBrp = ProgressNeeded - pInfo(p_)->C_QuestProgress;
				deliver = "Deliver " + fixint(ProgressNeeded) + " " + items[242].ori_name + "";
			}
			break;
		}
		case 9: {
			quest_info = "Do some good for the world. Save " + fixint(ProgressNeeded) + " ailing Growtopians by performing surgery!";
			current_progress = "(Current progress " + fixint(pInfo(p_)->C_QuestProgress) + "/" + fixint(ProgressNeeded) + ")";
			deliver = "You haven't helped enough!";
			if (pInfo(p_)->C_QuestProgress >= ProgressNeeded) {
				current_progress = "(Current progress " + fixint(ProgressNeeded) + "/" + fixint(ProgressNeeded) + ")";
				deliver = "Saving lives is what I do";
			}
			break;
		}
		case 10: {
			quest_info = "I need you to go pick up some groceries for me. Collect " + fixint(ProgressNeeded) + " items from Providers.";
			extra = "\nadd_smalltext|(Providers are items like Science Stations and Cows, that give you an item on a regular basis)|";
			current_progress = "(Current progress " + fixint(pInfo(p_)->C_QuestProgress) + "/" + fixint(ProgressNeeded) + ")";
			deliver = "I'm on my way!";
			if (pInfo(p_)->C_QuestProgress >= ProgressNeeded) {
				current_progress = "(Current progress " + fixint(ProgressNeeded) + "/" + fixint(ProgressNeeded) + ")";
				deliver = "I'm a cow-puncher!";
			}
			break;
		}
		case 11: {
			quest_info = "Prove your skill! Earn " + fixint(ProgressNeeded) + " Growtokens! You can keep the Growtokens, I'm more popular than you can imagine!";
			current_progress = "(Current progress " + fixint(pInfo(p_)->C_QuestProgress) + "/" + fixint(ProgressNeeded) + ")";
			deliver = "I will quest onward!";
			if (pInfo(p_)->C_QuestProgress >= ProgressNeeded) {
				current_progress = "(Current progress " + fixint(ProgressNeeded) + "/" + fixint(ProgressNeeded) + ")";
				deliver = "I am talented!";
			}
			break;
		}
		case 12: {
			quest_info = "I want you to achieve inner peace. Shatter " + fixint(ProgressNeeded) + " crystals that are in harmonic resonance.";
			current_progress = "(Current progress " + fixint(pInfo(p_)->C_QuestProgress) + "/" + fixint(ProgressNeeded) + ")";
			deliver = "I'm on my way!";
			if (pInfo(p_)->C_QuestProgress >= ProgressNeeded) {
				current_progress = "(Current progress " + fixint(ProgressNeeded) + "/" + fixint(ProgressNeeded) + ")";
				deliver = "Does your hand hurt?";
			}
			break;
		}
		case 13: {
			quest_info = "Let's see how good you are at finding stuff. Go collect " + fixint(ProgressNeeded) + " radioactive items with a Geiger Counter. You can keep them!";
			current_progress = "(Current progress " + fixint(pInfo(p_)->C_QuestProgress) + "/" + fixint(ProgressNeeded) + ")";
			deliver = "I'm on my way!";
			if (pInfo(p_)->C_QuestProgress >= ProgressNeeded) {
				current_progress = "(Current progress " + fixint(ProgressNeeded) + "/" + fixint(ProgressNeeded) + ")";
				deliver = "These feel warm!";
			}
			break;
		}
		case 14: {
			quest_info = "I hate fish. Could you go catch " + fixint(ProgressNeeded) + "lbs of fish? You can keep them, I just wanna know they suffered.";
			current_progress = "(Current progress " + fixint(pInfo(p_)->C_QuestProgress) + "/" + fixint(ProgressNeeded) + ")";
			deliver = "Get them no-good fish!";
			if (pInfo(p_)->C_QuestProgress >= ProgressNeeded) {
				current_progress = "(Current progress " + fixint(ProgressNeeded) + "/" + fixint(ProgressNeeded) + ")";
				deliver = "I caught em!";
			}
			break;
		}
		case 15: {
			quest_info = "Splice DNA into " + fixint(ProgressNeeded) + " prehistoric thing for me! You can keep them, I just want to see them brought back to life.";
			current_progress = "(Current progress " + fixint(pInfo(p_)->C_QuestProgress) + "/" + fixint(ProgressNeeded) + ")";
			deliver = "Go make life from rocks!";
			if (pInfo(p_)->C_QuestProgress >= ProgressNeeded) {
				current_progress = "(Current progress " + fixint(ProgressNeeded) + "/" + fixint(ProgressNeeded) + ")";
				deliver = "I made em!";
			}
			break;
		}
		}
		gamepacket_t p(delay);
		p.Insert("OnDialogRequest");
		p.Insert("set_default_color|`o\nadd_label_with_icon|big|`9Quest For The Ring``|left|1900|\nadd_smalltext|`o(Step " + step + "/10)``|\nadd_spacer|small|\nadd_textbox|`o" + quest_info + "``|" + extra + "\nadd_spacer|small|\nadd_smalltext|`o" + current_progress + "``|\nadd_button|deliver|`o" + deliver + "|noflags|0|0|\nadd_button|give_up|`oGive up this quest|noflags|0|0|\nadd_spacer|small|\nadd_textbox|If you had 5 rings of the same type maybe we could have made a deal...|\nadd_spacer|small|\nend_dialog|carnival|Goodbye!||");
		p.CreatePacket(p_);
	}
	catch (out_of_range& e) {
		return;
	}
}
class Npc_MarketPlace {
public:
	static bool Has(int id) {
		auto it = std::find_if(Environment()->Npc_MarketPlace.begin(), Environment()->Npc_MarketPlace.end(),
			[&id](const std::tuple<int, int, int>& p) {
				return std::get<0>(p) == id;
			});
		return it != Environment()->Npc_MarketPlace.end();
	}
	static bool Remove(int id) {
		auto it = std::remove_if(Environment()->Npc_MarketPlace.begin(), Environment()->Npc_MarketPlace.end(),
			[&id](const std::tuple<int, int, int>& p) {
				return std::get<0>(p) == id;
			});
		if (it != Environment()->Npc_MarketPlace.end()) {
			Environment()->Npc_MarketPlace.erase(it, Environment()->Npc_MarketPlace.end());
			return true;
		}
		return false;
	}
};
class Has_Claimed {
public:
	static bool EFG(ENetPeer* peer, int id) {
		auto it = std::find(pInfo(peer)->EarnFreeGems.Claim.begin(), pInfo(peer)->EarnFreeGems.Claim.end(), id);
		if (it != pInfo(peer)->EarnFreeGems.Claim.end()) return true;
		return false;
	}
	static bool Bingo(ENetPeer* peer, int id) {
		auto it = std::find(pInfo(peer)->Has_BingoTask.begin(), pInfo(peer)->Has_BingoTask.end(), id);
		if (it != pInfo(peer)->Has_BingoTask.end()) return true;
		return false;
	}
	static bool BingoPr2(ENetPeer* peer, string id) {
		auto it = std::find(pInfo(peer)->Has_ClaimBingo.begin(), pInfo(peer)->Has_ClaimBingo.end(), id);
		if (it != pInfo(peer)->Has_ClaimBingo.end()) return true;
		return false;
	}
	static bool BingoPr(ENetPeer* peer, string toolName) {
		auto it = std::find_if(pInfo(peer)->Has_BingoPrize.begin(), pInfo(peer)->Has_BingoPrize.end(),
			[&toolName](const std::tuple<std::string, int, int>& p) {
				return std::get<0>(p) == toolName; 
			});
		return it != pInfo(peer)->Has_BingoPrize.end();
	}
	static bool Guild(ENetPeer* peer, string id) {
		auto it = std::find(pInfo(peer)->Guild_Prize.begin(), pInfo(peer)->Guild_Prize.end(), id);
		if (it != pInfo(peer)->Guild_Prize.end()) return true;
		return false;
	}
	static bool StargLitter(ENetPeer* peer, string id) {
		auto it = std::find(pInfo(peer)->StarglitterTask_Prize.begin(), pInfo(peer)->StarglitterTask_Prize.end(), id);
		if (it != pInfo(peer)->StarglitterTask_Prize.end()) return true;
		return false;
	}
	static bool HalloweenT(ENetPeer* peer, string id) {
		auto it = std::find(pInfo(peer)->HalloweenTask_Prize.begin(), pInfo(peer)->HalloweenTask_Prize.end(), id);
		if (it != pInfo(peer)->HalloweenTask_Prize.end()) return true;
		return false;
	}
	static bool WinterTask(ENetPeer* peer, string id) {
		auto it = std::find(pInfo(peer)->WinterTask_Prize.begin(), pInfo(peer)->WinterTask_Prize.end(), id);
		if (it != pInfo(peer)->WinterTask_Prize.end()) return true;
		return false;
	}
	static bool WinterBranch(ENetPeer* peer, string id) {
		auto it = std::find(pInfo(peer)->Winter_Branch_Rewards.begin(), pInfo(peer)->Winter_Branch_Rewards.end(), id);
		if (it != pInfo(peer)->Winter_Branch_Rewards.end()) return true;
		return false;
	}
	static bool Gpass(ENetPeer* peer, string id) {
		auto it = std::find(pInfo(peer)->growpass_prizes.begin(), pInfo(peer)->growpass_prizes.end(), id);
		if (it != pInfo(peer)->growpass_prizes.end()) return true;
		return false;
	}
	static bool Kit(ENetPeer* peer, string id) {
		auto it = std::find(pInfo(peer)->KitPass_Prize.begin(), pInfo(peer)->KitPass_Prize.end(), id);
		if (it != pInfo(peer)->KitPass_Prize.end()) return true;
		return false;
	}
	static bool Daily(ENetPeer* peer, int number) {
		auto it = std::find(pInfo(peer)->daily_login.begin(), pInfo(peer)->daily_login.end(), number);
		if (it != pInfo(peer)->daily_login.end()) return true;
		return false;
	}
	static bool Vip_Daily(ENetPeer* peer, int number) {
		auto it = std::find(pInfo(peer)->vip_daily.begin(), pInfo(peer)->vip_daily.end(), number);
		if (it != pInfo(peer)->vip_daily.end()) return true;
		return false;
	}
	static bool Lvl(ENetPeer* peer, int number) {
		auto it = std::find(pInfo(peer)->lvl_rewards.begin(), pInfo(peer)->lvl_rewards.end(), number);
		if (it != pInfo(peer)->lvl_rewards.end()) return true;
		return false;
	}
	static bool W_Style(ENetPeer* peer, int number) {
		auto it = std::find(pInfo(peer)->Wrench_Style.begin(), pInfo(peer)->Wrench_Style.end(), number);
		if (it != pInfo(peer)->Wrench_Style.end()) return true;
		return false;
	}
	static bool W_Deco(ENetPeer* peer, int number) {
		auto it = std::find(pInfo(peer)->Wrench_Decoration.begin(), pInfo(peer)->Wrench_Decoration.end(), number);
		if (it != pInfo(peer)->Wrench_Decoration.end()) return true;
		return false;
	}
};
class GameMenu {
public:
	static void Dialog(ENetPeer* peer) {
		VarList::OnDialogRequest(peer, SetColor(peer) + "set_default_color|`o\nadd_image_button||interface/large/tianvan/game_banner.rttex|bannerlayout|||\nadd_custom_button|flipping_coin|image:interface/large/tianvan/gui_button.rttex;image_size:400,260;frame:0,2;width:0.19;|\nadd_custom_button|casino|image:interface/large/tianvan/gui_button.rttex;image_size:400,260;frame:1,2;width:0.19;|\nadd_custom_button|slot_machine|image:interface/large/tianvan/gui_button.rttex;image_size:400,260;frame:2,2;width:0.19;|\nadd_custom_button|mines|image:interface/large/tianvan/gui_button.rttex;image_size:400,260;frame:9,1;width:0.19;|\nadd_custom_break|\nadd_spacer|small|\nadd_button|back|`wBack|noflags|0|0|\nend_dialog|game_menu|||");
	}
	static void Flip_Coin(ENetPeer* peer, string text = "", string bet = "", string hort = "", int delay = 0) {
		VarList::OnDialogRequest(peer, SetColor(peer) + "set_default_color|\nadd_label_with_icon|big|`wFlipping Coin|left|752|" + a + (text.empty() ? "" : "\nadd_spacer|small|\nadd_textbox|`o" + text + "|left|") + "\nadd_spacer|small|\nadd_textbox|`oYour current balance is: $" + Set_Count(pInfo(peer)->gems) + "|left|\nadd_spacer|small|\nadd_text_input|bet|`oPlace your bet:|" + bet + "|5|\nadd_text_input|hort|`oHeads or Tails (h/t):|" + hort + "|5|\nadd_button|back_to_gamemenu|`wBack|noflags|\nadd_custom_button|play_flipping_coin|textLabel:`2Playing!;anchor:_button_back_to_gamemenu;left:1;margin:40,0;|\nend_dialog|game_menu|||", delay);
	}
	static void Casino(ENetPeer* peer, string text = "", string bet = "", int delay = 0) {
		VarList::OnDialogRequest(peer, SetColor(peer) + "set_default_color|\nadd_label_with_icon|big|`wCasino|left|758|" + a + (text.empty() ? "" : "\nadd_spacer|small|\nadd_textbox|`o" + text + "|left|") + "\nadd_spacer|small|\nadd_textbox|`oYour current balance is: $" + Set_Count(pInfo(peer)->gems) + "|left|\nadd_spacer|small|\nadd_text_input|bet|`oEnter your bet amount:|" + bet + "|5|\nadd_button|back_to_gamemenu|`wBack|noflags|\nadd_custom_button|play_casino|textLabel:`2Playing!;anchor:_button_back_to_gamemenu;left:1;margin:40,0;|\nend_dialog|game_menu|||", delay);
	}
	static void Slot_Machine(ENetPeer* peer, string text = "", int delay = 0) {
		VarList::OnDialogRequest(peer, SetColor(peer) + "set_default_color|\nadd_label_with_icon|big|`wSlot Machine|left|756|" + a + (text.empty() ? "" : "\nadd_spacer|small|\nadd_textbox|`o" + text + "|left|") + "\nadd_spacer|small|\nadd_textbox|`oYou current credits " + Set_Count(pInfo(peer)->Slot_Credits) + "|left|\nadd_textbox|`oYou current Points " + Set_Count(pInfo(peer)->Slot_Points) + "|left|\nadd_textbox|`oIf all three numbers match, you win 10 times your bet!<CR>Good Luck!|left|\nadd_spacer|small|\nadd_textbox|`oNOTE: If you run out of credit you can exchange it for world locks at a price of 1 Credits/world lock and For every win you get 50 points.|left|\nadd_button|exchange_shop|`2Exchange Shop|noflags|0|0|\nadd_spacer|small|\nadd_button|back_to_gamemenu|`wBack|noflags|\nadd_custom_button|play_slot_machine|textLabel:`2Playing!;anchor:_button_back_to_gamemenu;left:1;margin:40,0;|\nend_dialog|game_menu|||", delay);
	}
	static void Mines(ENetPeer* peer, string text = "", int delay = 0) {
		VarList::OnDialogRequest(peer, SetColor(peer) + "set_default_color|`o\n\nadd_label_with_icon|big|`wMines Game``|left|6994|" + a + (text.empty() ? "" : "\nadd_spacer|small|\nadd_textbox|`o" + text + "|left|") + "\nadd_textbox|Are you sure you want to play?|left|\nadd_text_input|gems|Gems Amount:||15|\nadd_smalltext|(100,000-5,000,000)|left|\nadd_text_input|minesamount|Mines Amount:||2|\nadd_smalltext|(5-10)|left|\nadd_spacer|small|\nadd_button|back_to_gamemenu|`wBack|noflags|\nadd_custom_button|play_mines|textLabel:`2Playing!;anchor:_button_back_to_gamemenu;left:1;margin:40,0;|\nend_dialog|game_menu|||\n", delay);
	}
};
class Miner {
public:
	static bool Pickaxe(int id) {
		if (id == 98 || id == 14516 || id == 14518 || id == 14520 || id == 14522 || id == 14524) return true;
		else return false;
	}
	static int PickaxeLvl(ENetPeer* peer) {
		int itemId = pInfo(peer)->hand;
		if (itemId == 14516) return 1;
		else if (itemId == 14518) return 2;
		else if (itemId == 14520) return 3;
		else if (itemId == 14522) return 4;
		else if (itemId == 14524) return 5;
		return 0;
	}
};
class DialogHandle {
public:
	static void EditItemPro(ENetPeer* peer, int id) {
		std::string dialog = "", Extra__ = "", Extra_ = ""; int total__ = 0, total_ = 0; bool has_ = false;
		for (int i = 0; i < EditItem.size(); i++) {
			if (to_lower(EditItem[i].Name) == to_lower(items[id].name) or EditItem[i].ID == id) {
				if (id == 7960) {
					for (const auto& result : Environment()->dstone) {
						Extra__ += "\nadd_custom_button||icon:" + to_string(result) + ";state:disabled;color:255,255,255,255;border:red;width:0.150;display:inline_free;|" + (total__ == 15 or total__ == 30 or total__ == 45 or total__ == 60 or total__ == 75 or total__ == 90 or total__ == 105 or total__ == 120 or total__ == 135 or total__ == 150 or total__ == 165 or total__ == 180 or total__ == 195 or total__ == 210 or total__ == 225 or total__ == 240 or total__ == 255 or total__ == 270 or total__ == 285 or total__ == 300 or total__ == 315 or total__ == 330 or total__ == 345 or total__ == 360 or total__ == 375 or total__ == 390 or total__ == 405 or total__ == 420 or total__ == 435 or total__ == 450 or total__ == 465 or total__ == 480 or total__ == 495 or total__ == 510 or total__ == 525 or total__ == 540 or total__ == 555 or total__ == 570 or total__ == 585 or total__ == 600 ? "\nadd_custom_break|" : "") + "\n";
						total__++;
					}
				}
				else {
					if (items[id].randomitem.size() != 0) {
						for (const auto& result : items[id].randomitem) {
							Extra__ += "\nadd_custom_button||icon:" + to_string(result) + ";state:disabled;color:255,255,255,255;border:red;width:0.150;display:inline_free;|" + (total__ == 15 or total__ == 30 or total__ == 45 or total__ == 60 or total__ == 75 or total__ == 90 or total__ == 105 or total__ == 120 or total__ == 135 or total__ == 150 or total__ == 165 or total__ == 180 or total__ == 195 or total__ == 210 or total__ == 225 or total__ == 240 or total__ == 255 or total__ == 270 or total__ == 285 or total__ == 300 or total__ == 315 or total__ == 330 or total__ == 345 or total__ == 360 or total__ == 375 or total__ == 390 or total__ == 405 or total__ == 420 or total__ == 435 or total__ == 450 or total__ == 465 or total__ == 480 or total__ == 495 or total__ == 510 or total__ == 525 or total__ == 540 or total__ == 555 or total__ == 570 or total__ == 585 or total__ == 600 ? "\nadd_custom_break|" : "") + "\n";
							total__++;
						}
					}
				}
				for (const auto& result : EditItem[i].Extra_Drops) {
					total_++;
					Extra_ += "\nadd_button_with_icon|remove_" + to_string(result.first) + "|" + items[result.first].name + "|staticPurpleFrame|" + to_string(result.first) + "|" + to_string(result.second) + "|\n";
				}
				has_ = true;
				dialog += "\nset_default_color|`o\n";
				dialog += "\nadd_label_with_icon|big|`wEditing " + EditItem[i].Name + "````|left|" + to_string(id) + "|\n";
				dialog += "\nembed_data|itemID|" + to_string(id) + "|\n";
				dialog += "\nadd_spacer|small|\n";
				dialog += "\nadd_label_with_icon|small|`cITEM INFO:|left|6124|\n";
				dialog += "\nadd_text_input|item_name|Name:|" + EditItem[i].Name + "|100|\n";
				dialog += "\nadd_text_input|item_rarity|Rarity:|" + (EditItem[i].rarity != 0 ? to_string(EditItem[i].rarity) : to_string(items[id].rarity)) + "|3|\n";
				dialog += "\nadd_textbox|Description:|left|\nadd_text_box_input|item_desc||" + (EditItem[i].Desc != "" ? EditItem[i].Desc : items[id].description) + "|4000|2|";
				dialog += (items[id].rarity > 0 and items[id].rarity < 999 ? "\nadd_text_input|cdrop_seeds|Drop Change Seeds:|" + (EditItem[i].Change_Drop_Seeds != 0 ? to_string(EditItem[i].Change_Drop_Seeds) : to_string(items[id].newdropchance)) + "|3|\n" : "");
				dialog += (items.at(id).blockType == BlockTypes::CLOTHING ? "\nadd_text_input|item_effect|Punch ID:|" + to_string(EditItem[i].Punch_Id) + "|3|\n" : "");
				dialog += "\nadd_spacer|small|\n";
				dialog += "\nadd_label_with_icon|small|`cITEM BUFFS:|left|15048|\n";
				dialog += (items.at(id).blockType == BlockTypes::CLOTHING or items[id].rarity > 0 and items[id].rarity < 999 ? "\nadd_text_input|extra_gems|Extra Gems:|" + to_string(EditItem[i].Gems) + "|3|\nadd_text_input|extra_xp|Extra Xp:|" + to_string(EditItem[i].Xp) + "|3|\n" : "");
				dialog += (items.at(id).blockType == BlockTypes::CLOTHING ? "\nadd_text_input|p_far_range|Punch Far:|" + to_string(EditItem[i].Far_Punch) + "|2|\nadd_text_input|p_hit|Punch Hits:|" + to_string(EditItem[i].Punch_Hit) + "|2|\nadd_text_input|p_place|Place Far:|" + to_string(EditItem[i].Punch_Place) + "|2|\n" : "");		
				dialog += (items.at(id).blockType != BlockTypes::CLOTHING and items[id].rarity > 0 and items[id].rarity < 999 ? "\nadd_checkbox|property_farmable|`oSet Property Farmable|" + to_string(EditItem[i].property_farmable) + "|\nadd_smalltext|`oWhen enabled, The item '`2" + EditItem[i].Name + "``' will drop extra blocks when the seeds of '`2" + EditItem[i].Name + "``' are harvested.|left|" : "");
				dialog += (total__ >= 1 ? "\nadd_textbox|Can't add extra drop because it is already set in the source (Random Items are set in the source and can only be changed in source)|left|" : "" + a + (total_ == 0 ? "\nadd_smalltext|`oThis item does not have an Extra Drop, click `5Set Extra Drops`` to add some.|" : "") + "\nadd_textbox|Extra Drops:|left|\nadd_item_picker|itemid|`2Set Extra Drops|Pick items for Extra Drops!|\nadd_text_input|change_bonus|Chance <= (Num):|" + to_string(EditItem[i].Bonus) + "|3|\nadd_smalltext|(Set Extra Items will be dropped when breaking blocks, based on chance.)|\nadd_smalltext|`s'Chance' = rand() % 100 or equal to random 1 to 100 so if you set the number if 'chance' <= <number> (`4descending``) will drop the item.|\ntext_scaling_string|Subscribtions++++++++|" + (total_ >= 1 ? Extra_ + "\nadd_button_with_icon||END_LIST|noflags|0||\nadd_smalltext|`5(To remove click the item on top)|" : "") + (items.at(id).blockType != BlockTypes::CLOTHING ? "\nadd_checkbox|property_gacha|Set Property Gacha|" + to_string(EditItem[i].property_gacha) + "|\nadd_smalltext|`5(If this property is enabled then this '" + items[id].name + "' does not require change to drop items)|\nadd_spacer|small|\n" : "\nadd_spacer|small|"));				
				dialog += "\nadd_spacer|small|\n";
				dialog += "\nadd_label_with_icon|small|`cITEM PRICING:|left|13812|\n";
				dialog += "\nadd_text_input|item_price|ė Price:|" + to_string(EditItem[i].Item_Price) + "|6|\n";
				dialog += "\nadd_smalltext|(Change it to 0 to remove it from /buy, or add a number to show and sets the price.)|\n";
				dialog += "\nadd_spacer|small|\n";
				dialog += "\nadd_label_with_icon|small|`cITEM PROPERTIES:|left|15054|\n";
				dialog += "\nadd_checkicon|property_untradeable|Untradeable||4516||" + to_string(EditItem[i].property_untradeable) + "|\n";
				dialog += "\nadd_checkicon|property_blacklist|Blacklist /buy||5310||" + to_string(EditItem[i].property_blacklist) + "|\n";
				dialog += "\nadd_checkicon|property_unobtainable|Unobatainable||10716||" + to_string(EditItem[i].property_unobtainable) + "|\n";
				dialog += (items.at(id).blockType != BlockTypes::CLOTHING ? "\nadd_checkicon|property_blocked|Blocked Place||3732||" + to_string(EditItem[i].property_blocked) + "|\n" : "");
				dialog += "\nadd_button_with_icon||END_LIST|noflags|0||\nadd_spacer|small|\n";
				dialog += "\nend_dialog|EditItem_Apply|Cancel|Apply|\n";
			}
		}
		if (not has_) {
			if (id == 7960) {
				for (const auto& result : Environment()->dstone) {
					Extra__ += "\nadd_custom_button||icon:" + to_string(result) + ";state:disabled;color:255,255,255,255;border:red;width:0.150;display:inline_free;|" + (total__ == 15 or total__ == 30 or total__ == 45 or total__ == 60 or total__ == 75 or total__ == 90 or total__ == 105 or total__ == 120 or total__ == 135 or total__ == 150 or total__ == 165 or total__ == 180 or total__ == 195 or total__ == 210 or total__ == 225 or total__ == 240 or total__ == 255 or total__ == 270 or total__ == 285 or total__ == 300 or total__ == 315 or total__ == 330 or total__ == 345 or total__ == 360 or total__ == 375 or total__ == 390 or total__ == 405 or total__ == 420 or total__ == 435 or total__ == 450 or total__ == 465 or total__ == 480 or total__ == 495 or total__ == 510 or total__ == 525 or total__ == 540 or total__ == 555 or total__ == 570 or total__ == 585 or total__ == 600 ? "\nadd_custom_break|" : "") + "\n";
					total__++;
				}
			}
			else {
				if (items[id].randomitem.size() != 0) {
					for (const auto& result : items[id].randomitem) {
						Extra__ += "\nadd_custom_button||icon:" + to_string(result) + ";state:disabled;color:255,255,255,255;border:red;width:0.150;display:inline_free;|" + (total__ == 15 or total__ == 30 or total__ == 45 or total__ == 60 or total__ == 75 or total__ == 90 or total__ == 105 or total__ == 120 or total__ == 135 or total__ == 150 or total__ == 165 or total__ == 180 or total__ == 195 or total__ == 210 or total__ == 225 or total__ == 240 or total__ == 255 or total__ == 270 or total__ == 285 or total__ == 300 or total__ == 315 or total__ == 330 or total__ == 345 or total__ == 360 or total__ == 375 or total__ == 390 or total__ == 405 or total__ == 420 or total__ == 435 or total__ == 450 or total__ == 465 or total__ == 480 or total__ == 495 or total__ == 510 or total__ == 525 or total__ == 540 or total__ == 555 or total__ == 570 or total__ == 585 or total__ == 600 ? "\nadd_custom_break|" : "") + "\n";
						total__++;
					}
				}
			}
			dialog += "\nset_default_color|`o\n";
			dialog += "\nadd_label_with_icon|big|`wEditing " + items[id].name + "````|left|" + to_string(id) + "|\n";
			dialog += "\nembed_data|itemID|" + to_string(id) + "|\n";
			dialog += "\nadd_spacer|small|\n";
			dialog += "\nadd_label_with_icon|small|`cITEM INFO:|left|6124|\n";
			dialog += "\nadd_text_input|item_name|Name:|" + items[id].name + "|100|\n";
			dialog += "\nadd_text_input|item_rarity|Rarity:|" + to_string(items[id].rarity) + "|3|\n";
			dialog += "\nadd_textbox|Description:|left|\nadd_text_box_input|item_desc||" + items[id].description + "|4000|2|";
			dialog += (items[id].rarity > 0 and items[id].rarity < 999 ? "\nadd_text_input|cdrop_seeds|Drop Change Seeds:|" + to_string(items[id].newdropchance) + "|3|\n" : "");
			dialog += (items.at(id).blockType == BlockTypes::CLOTHING ? "\nadd_text_input|item_effect|Punch ID:|" + to_string(get_punch_id(id)) + "|3|\n" : "");
			dialog += "\nadd_spacer|small|\n";
			dialog += "\nadd_label_with_icon|small|`cITEM BUFFS:|left|15048|\n";
			dialog += (items.at(id).blockType == BlockTypes::CLOTHING or items[id].rarity > 0 and items[id].rarity < 999 ? "\nadd_text_input|extra_gems|Extra Gems:|0|3|\nadd_text_input|extra_xp|Extra Xp:|0|3|\n" : "");
			dialog += (items.at(id).blockType == BlockTypes::CLOTHING ? "\nadd_text_input|p_far_range|Punch Far:|0|2|\nadd_text_input|p_hit|Punch Hits:|0|2|\nadd_text_input|p_place|Place Far:|0|2|\n" : "");
			dialog += (items.at(id).blockType != BlockTypes::CLOTHING and items[id].rarity > 0 and items[id].rarity < 999 ? "\nadd_checkbox|property_farmable|`oSet Property Farmable|" + to_string(items[id].farmable) + "|\nadd_smalltext|`oWhen enabled, The item '`2" + items[id].name + "``' will drop extra blocks when the seeds of '`2" + items[id].name + "``' are harvested.|left|" : "");
			dialog += (total__ >= 1 ? "\nadd_textbox|Can't add extra drop because it is already set in the source (Random Items are set in the source and can only be changed in source)|left|" : "" + a + (total_ == 0 ? "\nadd_smalltext|`oThis item does not have an Extra Drop, click `5Set Extra Drops`` to add some.|" : "") + "\nadd_textbox|Extra Drops:|left|\nadd_item_picker|itemid|`2Set Extra Drops|Pick items for Extra Drops!|\nadd_text_input|change_bonus|Chance <= (Num):|0|3|\nadd_smalltext|(Set Extra Items will be dropped when breaking blocks, based on chance.)|\nadd_smalltext|`s'Chance' = rand() % 100 or equal to random 1 to 100 so if you set the number if 'chance' <= <number> (`4descending``) will drop the item.|\ntext_scaling_string|Subscribtions++++++++|" + (total_ >= 1 ? Extra_ + "\nadd_button_with_icon||END_LIST|noflags|0||\nadd_smalltext|`5(To remove click the item on top)|" : "") + (items.at(id).blockType != BlockTypes::CLOTHING ? "\nadd_checkbox|property_gacha|Set Property Gacha|0|\nadd_smalltext|`5(If this property is enabled then this '" + items[id].name + "' does not require change to drop items)|\nadd_spacer|small|\n" : "\nadd_spacer|small|"));
			dialog += "\nadd_spacer|small|\n";
			dialog += "\nadd_label_with_icon|small|`cITEM PRICING:|left|13812|\n";
			dialog += "\nadd_text_input|item_price|ė Price:|" + to_string(Gtps_Shop::Get_Price(id)) + "|6|\n";
			dialog += "\nadd_smalltext|(Change it to 0 to remove it from /buy, or add a number to show and sets the price.)|\n";
			dialog += "\nadd_spacer|small|\n";
			dialog += "\nadd_label_with_icon|small|`cITEM PROPERTIES:|left|15054|\n";
			dialog += "\nadd_checkicon|property_untradeable|Untradeable||4516||" + to_string(items[id].untradeable) + "|\n";
			dialog += "\nadd_checkicon|property_blacklist|Blacklist /buy||5310||0|\nadd_checkicon|property_unobtainable|Unobatainable||10716||" + to_string(items[id].unobtainable) + "|";
			dialog += (items.at(id).blockType != BlockTypes::CLOTHING ? "\nadd_checkicon|property_blocked|Blocked Place||3732||" + to_string(items[id].blocked_place) + "|\n" : "");
			dialog += "\nadd_button_with_icon||END_LIST|noflags|0||\n";
			dialog += "\nadd_spacer|small|\n";
			dialog += "\nend_dialog|EditItem_Apply|Cancel|Apply|\n";
		}
		VarList::OnDialogRequest(peer, SetColor(peer) + dialog);
	}
	static void Personal_Event_Rewards(ENetPeer* peer) {
		std::string score = "\nadd_textbox|`$Your current score: 0|left|", top1 = "", top2 = "", top3 = "", top4 = "", top5 = "", top6 = "", top7 = "", top8 = "", top9 = "", top10 = "", top11 = "", top12 = "", top13 = "", top14 = "", top15 = "", top16 = "", top17 = "", top18 = "", top19 = "", top20 = "";
		int my_point = 0;
		if (Event()->Can_Event) {
			std::vector<std::pair<long long int, std::string>>::iterator pa = find_if(last_basher_list.begin(), last_basher_list.end(), [&](const pair < long long int, string>& element) { return element.second == pInfo(peer)->tankIDName; });
			if (pa != last_basher_list.end()) {
				my_point = last_basher_list[pa - last_basher_list.begin()].first;
			}
		}
		else {
			std::vector<std::pair<long long int, std::string>>::iterator p_ = find_if(top_basher.begin(), top_basher.end(), [&](const pair < long long int, string>& element) { return element.second == pInfo(peer)->tankIDName; });
			if (p_ != top_basher.end()) {
				my_point = top_basher[p_ - top_basher.begin()].first;
			}
		}
		if (my_point > 1) score = "\nadd_textbox|`$Your current score: " + Set_Count(my_point) + "|left|\n";
		if (guild_event_type == "Spring Clash") {
			if (my_point >= personal_t1 and not pInfo(peer)->claim_top1) top1 = "\nadd_textbox|`w#1 Earn " + Set_Count(personal_t1) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`25 Spring Tokens|left|7844|\nadd_small_font_button|claimperevent_1|`$Claim Reward|0|0|";
			else if (pInfo(peer)->claim_top1) top1 = "\nadd_textbox|`^#1 Earn " + Set_Count(personal_t1) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`^5 Spring Tokens|left|7844|";
			else top1 = "\nadd_textbox|`s#1 Earn " + Set_Count(personal_t1) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`s5 Spring Tokens|left|7844|";

			if (my_point >= personal_t2 and not pInfo(peer)->claim_top2) top2 = "\nadd_textbox|`w#2 Earn " + Set_Count(personal_t2) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`210 Spring Tokens|left|7844|\nadd_small_font_button|claimperevent_2|`$Claim Reward|0|0|";
			else if (pInfo(peer)->claim_top2) top2 = "\nadd_textbox|`^#2 Earn " + Set_Count(personal_t2) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`^10 Spring Tokens|left|7844|";
			else top2 = "\nadd_textbox|`s#2 Earn " + Set_Count(personal_t2) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`s10 Spring Tokens|left|7844|";

			if (my_point >= personal_t3 and not pInfo(peer)->claim_top3) top3 = "\nadd_textbox|`w#3 Earn " + Set_Count(personal_t3) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`215 Spring Tokens|left|7844|\nadd_small_font_button|claimperevent_3|`$Claim Reward|0|0|";
			else if (pInfo(peer)->claim_top3) top3 = "\nadd_textbox|`^#2 Earn " + Set_Count(personal_t3) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`^10 Spring Tokens|left|7844|";
			else top3 = "\nadd_textbox|`s#3 Earn " + Set_Count(personal_t3) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`s15 Spring Tokens|left|7844|";

			if (my_point >= personal_t4 and not pInfo(peer)->claim_top4) top4 = "\nadd_textbox|`w#4 Earn " + Set_Count(personal_t4) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`220 Spring Tokens|left|7844|\nadd_small_font_button|claimperevent_4|`$Claim Reward|0|0|";
			else if (pInfo(peer)->claim_top4) top4 = "\nadd_textbox|`^#4 Earn " + Set_Count(personal_t4) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`^20 Spring Tokens|left|7844|";
			else top4 = "\nadd_textbox|`s#4 Earn " + Set_Count(personal_t4) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`s20 Spring Tokens|left|7844|";

			if (my_point >= personal_t5 and not pInfo(peer)->claim_top5) top5 = "\nadd_textbox|`w#5 Earn " + Set_Count(personal_t5) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`225 Spring Tokens|left|7844|\nadd_label_with_icon|small|`21 Spring Student's Reward|left|7954|\nadd_small_font_button|claimperevent_5|`$Claim Reward|0|0|";
			else if (pInfo(peer)->claim_top5) top5 = "\nadd_textbox|`^#5 Earn " + Set_Count(personal_t5) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`^25 Spring Tokens|left|7844|\nadd_label_with_icon|small|`^1 Spring Student's Reward|left|7954|";
			else top5 = "\nadd_textbox|`s#5 Earn " + Set_Count(personal_t5) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`s25 Spring Tokens|left|7844|\nadd_label_with_icon|small|`s1 Spring Student's Reward|left|7954|";

			if (my_point >= personal_t6 and not pInfo(peer)->claim_top6) top6 = "\nadd_textbox|`w#6 Earn " + Set_Count(personal_t6) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`225 Spring Tokens|left|7844|\nadd_small_font_button|claimperevent_6|`$Claim Reward|0|0|";
			else if (pInfo(peer)->claim_top6) top6 = "\nadd_textbox|`^#6 Earn " + Set_Count(personal_t6) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`^25 Spring Tokens|left|7844|";
			else top6 = "\nadd_textbox|`s#6 Earn " + Set_Count(personal_t6) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`s25 Spring Tokens|left|7844|";

			if (my_point >= personal_t7 and not pInfo(peer)->claim_top7) top7 = "\nadd_textbox|`w#7 Earn " + Set_Count(personal_t7) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`230 Spring Tokens|left|7844|\nadd_small_font_button|claimperevent_7|`$Claim Reward|0|0|";
			else if (pInfo(peer)->claim_top7) top7 = "\nadd_textbox|`^#7 Earn " + Set_Count(personal_t7) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`^30 Spring Tokens|left|7844|";
			else top7 = "\nadd_textbox|`s#7 Earn " + Set_Count(personal_t7) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`s30 Spring Tokens|left|7844|";

			if (my_point >= personal_t8 and not pInfo(peer)->claim_top8) top8 = "\nadd_textbox|`w#8 Earn " + Set_Count(personal_t8) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`235 Spring Tokens|left|7844|\nadd_small_font_button|claimperevent_8|`$Claim Reward|0|0|";
			else if (pInfo(peer)->claim_top8) top8 = "\nadd_textbox|`^#8 Earn " + Set_Count(personal_t8) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`^35 Spring Tokens|left|7844|";
			else top8 = "\nadd_textbox|`s#8 Earn " + Set_Count(personal_t8) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`s35 Spring Tokens|left|7844|";

			if (my_point >= personal_t9 and not pInfo(peer)->claim_top9) top9 = "\nadd_textbox|`w#9 Earn " + Set_Count(personal_t9) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`240 Spring Tokens|left|7844|\nadd_small_font_button|claimperevent_9|`$Claim Reward|0|0|";
			else if (pInfo(peer)->claim_top9) top9 = "\nadd_textbox|`^#9 Earn " + Set_Count(personal_t9) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`^40 Spring Tokens|left|7844|";
			else top9 = "\nadd_textbox|`s#9 Earn " + Set_Count(personal_t9) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`s40 Spring Tokens|left|7844|";

			if (my_point >= personal_t10 and not pInfo(peer)->claim_top10) top10 = "\nadd_textbox|`w#10 Earn " + Set_Count(personal_t10) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`250 Spring Tokens|left|7844|\nadd_label_with_icon|small|`21 Spring Trainer's Reward|left|7954|\nadd_small_font_button|claimperevent_10|`$Claim Reward|0|0|";
			else if (pInfo(peer)->claim_top10) top10 = "\nadd_textbox|`^#10 Earn " + Set_Count(personal_t10) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`^50 Spring Tokens|left|7844|\nadd_label_with_icon|small|`^1 Spring Trainer's Reward|left|7954|";
			else top10 = "\nadd_textbox|`s#10 Earn " + Set_Count(personal_t10) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`s50 Spring Tokens|left|7844|\nadd_label_with_icon|small|`s1 Spring Trainer's Reward|left|7954|";

			if (my_point >= personal_t11 and not pInfo(peer)->claim_top11) top11 = "\nadd_textbox|`w#11 Earn " + Set_Count(personal_t11) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`260 Spring Tokens|left|7844|\nadd_small_font_button|claimperevent_11|`$Claim Reward|0|0|";
			else if (pInfo(peer)->claim_top11) top11 = "\nadd_textbox|`^#11 Earn " + Set_Count(personal_t11) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`^60 Spring Tokens|left|7844|";
			else top11 = "\nadd_textbox|`s#11 Earn " + Set_Count(personal_t11) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`s60 Spring Tokens|left|7844|";

			if (my_point >= personal_t12 and not pInfo(peer)->claim_top12) top12 = "\nadd_textbox|`w#12 Earn " + Set_Count(personal_t12) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`280 Spring Tokens|left|7844|\nadd_small_font_button|claimperevent_12|`$Claim Reward|0|0|";
			else if (pInfo(peer)->claim_top12) top12 = "\nadd_textbox|`^#12 Earn " + Set_Count(personal_t12) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`^80 Spring Tokens|left|7844|";
			else top12 = "\nadd_textbox|`s#12 Earn " + Set_Count(personal_t12) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`s80 Spring Tokens|left|7844|";

			if (my_point >= personal_t13 and not pInfo(peer)->claim_top13) top13 = "\nadd_textbox|`w#13 Earn " + Set_Count(personal_t13) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`2100 Spring Tokens|left|7844|\nadd_small_font_button|claimperevent_13|`$Claim Reward|0|0|";
			else if (pInfo(peer)->claim_top13) top13 = "\nadd_textbox|`^#13 Earn " + Set_Count(personal_t13) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`^100 Spring Tokens|left|7844|";
			else top13 = "\nadd_textbox|`s#13 Earn " + Set_Count(personal_t13) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`s100 Spring Tokens|left|7844|";

			if (my_point >= personal_t14 and not pInfo(peer)->claim_top14) top14 = "\nadd_textbox|`w#14 Earn " + Set_Count(personal_t14) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`2120 Spring Tokens|left|7844|\nadd_small_font_button|claimperevent_14|`$Claim Reward|0|0|";
			else if (pInfo(peer)->claim_top14) top14 = "\nadd_textbox|`^#14 Earn " + Set_Count(personal_t14) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`^120 Spring Tokens|left|7844|";
			else top14 = "\nadd_textbox|`s#14 Earn " + Set_Count(personal_t14) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`s120 Spring Tokens|left|7844|";

			if (my_point >= personal_t15 and not pInfo(peer)->claim_top15) top15 = "\nadd_textbox|`w#15 Earn " + Set_Count(personal_t15) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`2150 Spring Tokens|left|7844|\nadd_label_with_icon|small|`21 Spring Contender's Reward|left|7954|\nadd_small_font_button|claimperevent_15|`$Claim Reward|0|0|";
			else if (pInfo(peer)->claim_top15) top15 = "\nadd_textbox|`^#15 Earn " + Set_Count(personal_t15) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`^150 Spring Tokens|left|7844|\nadd_label_with_icon|small|`^1 Spring Contender's Reward|left|7954|";
			else top15 = "\nadd_textbox|`s#15 Earn " + Set_Count(personal_t15) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`s150 Spring Tokens|left|7844|\nadd_label_with_icon|small|`s1 Spring Contender's Reward|left|7954|";

			if (my_point >= personal_t16 and not pInfo(peer)->claim_top16) top16 = "\nadd_textbox|`w#16 Earn " + Set_Count(personal_t16) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`2180 Spring Tokens|left|7844|\nadd_small_font_button|claimperevent_16|`$Claim Reward|0|0|";
			else if (pInfo(peer)->claim_top16) top16 = "\nadd_textbox|`^#16 Earn " + Set_Count(personal_t16) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`^180 Spring Tokens|left|7844|";
			else top16 = "\nadd_textbox|`s#16 Earn " + Set_Count(personal_t16) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`s180 Spring Tokens|left|7844|";

			if (my_point >= personal_t17 and not pInfo(peer)->claim_top17) top17 = "\nadd_textbox|`w#17 Earn " + Set_Count(personal_t17) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`2220 Spring Tokens|left|7844|\nadd_small_font_button|claimperevent_17|`$Claim Reward|0|0|";
			else if (pInfo(peer)->claim_top17) top17 = "\nadd_textbox|`^#17 Earn " + Set_Count(personal_t17) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`^220 Spring Tokens|left|7844|";
			else top17 = "\nadd_textbox|`s#17 Earn " + Set_Count(personal_t17) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`s220 Spring Tokens|left|7844|";

			if (my_point >= personal_t18 and not pInfo(peer)->claim_top18) top18 = "\nadd_textbox|`w#18 Earn " + Set_Count(personal_t18) + "0 points to claim this rewards:|left|\nadd_label_with_icon|small|`2250 Spring Tokens|left|7844|\nadd_small_font_button|claimperevent_18|`$Claim Reward|0|0|";
			else if (pInfo(peer)->claim_top18) top18 = "\nadd_textbox|`^#18 Earn " + Set_Count(personal_t18) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`^250 Spring Tokens|left|7844|";
			else top18 = "\nadd_textbox|`s#18 Earn " + Set_Count(personal_t18) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`s250 Spring Tokens|left|7844|";

			if (my_point >= personal_t19 and not pInfo(peer)->claim_top19) top19 = "\nadd_textbox|`w#19 Earn " + Set_Count(personal_t19) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`2300 Spring Tokens|left|7844|\nadd_small_font_button|claimperevent_19|`$Claim Reward|0|0|";
			else if (pInfo(peer)->claim_top19) top19 = "\nadd_textbox|`^#19 Earn " + Set_Count(personal_t19) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`^300 Spring Tokens|left|7844|";
			else top19 = "\nadd_textbox|`s#19 Earn " + Set_Count(personal_t19) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`s300 Spring Tokens|left|7844|";

			if (my_point >= personal_t20 and not pInfo(peer)->claim_top20) top20 = "\nadd_textbox|`w#20 Earn " + Set_Count(personal_t20) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`2400 Spring Tokens|left|7844|\nadd_label_with_icon|small|`21 Spring Master's Reward|left|7954|\nadd_small_font_button|claimperevent_20|`$Claim Reward|0|0|";
			else if (pInfo(peer)->claim_top20) top20 = "\nadd_textbox|`^#20 Earn " + Set_Count(personal_t20) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`^400 Spring Tokens|left|7844|\nadd_label_with_icon|small|`^1 Spring Trainer's Reward|left|7954|";
			else top20 = "\nadd_textbox|`s#20 Earn " + Set_Count(personal_t20) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`s400 Spring Tokens|left|7844|\nadd_label_with_icon|small|`s1 Spring Trainer's Reward|left|7954|";
		}
		if (guild_event_type == "Summer Clash") {
			if (my_point >= personal_t1 and not pInfo(peer)->claim_top1) top1 = "\nadd_textbox|`w#1 Earn " + Set_Count(personal_t1) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`25 Summer Tokens|left|6198|\nadd_small_font_button|claimperevent_1|`$Claim Reward|0|0|";
			else if (pInfo(peer)->claim_top1) top1 = "\nadd_textbox|`^#1 Earn " + Set_Count(personal_t1) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`^5 Summer Tokens|left|6198|";
			else top1 = "\nadd_textbox|`s#1 Earn " + Set_Count(personal_t1) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`s5 Summer Tokens|left|6198|";

			if (my_point >= personal_t2 and not pInfo(peer)->claim_top2) top2 = "\nadd_textbox|`w#2 Earn " + Set_Count(personal_t2) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`210 Summer Tokens|left|6198|\nadd_small_font_button|claimperevent_2|`$Claim Reward|0|0|";
			else if (pInfo(peer)->claim_top2) top2 = "\nadd_textbox|`^#2 Earn " + Set_Count(personal_t2) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`^10 Summer Tokens|left|6198|";
			else top2 = "\nadd_textbox|`s#2 Earn " + Set_Count(personal_t2) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`s10 Summer Tokens|left|6198|";

			if (my_point >= personal_t3 and not pInfo(peer)->claim_top3) top3 = "\nadd_textbox|`w#3 Earn " + Set_Count(personal_t3) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`215 Summer Tokens|left|6198|\nadd_small_font_button|claimperevent_3|`$Claim Reward|0|0|";
			else if (pInfo(peer)->claim_top3) top3 = "\nadd_textbox|`^#2 Earn " + Set_Count(personal_t3) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`^10 Summer Tokens|left|6198|";
			else top3 = "\nadd_textbox|`s#3 Earn " + Set_Count(personal_t3) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`s15 Summer Tokens|left|6198|";

			if (my_point >= personal_t4 and not pInfo(peer)->claim_top4) top4 = "\nadd_textbox|`w#4 Earn " + Set_Count(personal_t4) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`220 Summer Tokens|left|6198|\nadd_small_font_button|claimperevent_4|`$Claim Reward|0|0|";
			else if (pInfo(peer)->claim_top4) top4 = "\nadd_textbox|`^#4 Earn " + Set_Count(personal_t4) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`^20 Summer Tokens|left|6198|";
			else top4 = "\nadd_textbox|`s#4 Earn " + Set_Count(personal_t4) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`s20 Summer Tokens|left|6198|";

			if (my_point >= personal_t5 and not pInfo(peer)->claim_top5) top5 = "\nadd_textbox|`w#5 Earn " + Set_Count(personal_t5) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`225 Summer Tokens|left|6198|\nadd_label_with_icon|small|`21 Summer Student's Reward|left|6200|\nadd_small_font_button|claimperevent_5|`$Claim Reward|0|0|";
			else if (pInfo(peer)->claim_top5) top5 = "\nadd_textbox|`^#5 Earn " + Set_Count(personal_t5) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`^25 Summer Tokens|left|6198|\nadd_label_with_icon|small|`^1 Summer Student's Reward|left|6200|";
			else top5 = "\nadd_textbox|`s#5 Earn " + Set_Count(personal_t5) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`s25 Summer Tokens|left|6198|\nadd_label_with_icon|small|`s1 Summer Student's Reward|left|6200|";

			if (my_point >= personal_t6 and not pInfo(peer)->claim_top6) top6 = "\nadd_textbox|`w#6 Earn " + Set_Count(personal_t6) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`225 Summer Tokens|left|6198|\nadd_small_font_button|claimperevent_6|`$Claim Reward|0|0|";
			else if (pInfo(peer)->claim_top6) top6 = "\nadd_textbox|`^#6 Earn " + Set_Count(personal_t6) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`^25 Summer Tokens|left|6198|";
			else top6 = "\nadd_textbox|`s#6 Earn " + Set_Count(personal_t6) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`s25 Summer Tokens|left|6198|";

			if (my_point >= personal_t7 and not pInfo(peer)->claim_top7) top7 = "\nadd_textbox|`w#7 Earn " + Set_Count(personal_t7) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`230 Summer Tokens|left|6198|\nadd_small_font_button|claimperevent_7|`$Claim Reward|0|0|";
			else if (pInfo(peer)->claim_top7) top7 = "\nadd_textbox|`^#7 Earn " + Set_Count(personal_t7) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`^30 Summer Tokens|left|6198|";
			else top7 = "\nadd_textbox|`s#7 Earn " + Set_Count(personal_t7) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`s30 Summer Tokens|left|6198|";

			if (my_point >= personal_t8 and not pInfo(peer)->claim_top8) top8 = "\nadd_textbox|`w#8 Earn " + Set_Count(personal_t8) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`235 Summer Tokens|left|6198|\nadd_small_font_button|claimperevent_8|`$Claim Reward|0|0|";
			else if (pInfo(peer)->claim_top8) top8 = "\nadd_textbox|`^#8 Earn " + Set_Count(personal_t8) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`^35 Summer Tokens|left|6198|";
			else top8 = "\nadd_textbox|`s#8 Earn " + Set_Count(personal_t8) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`s35 Summer Tokens|left|6198|";

			if (my_point >= personal_t9 and not pInfo(peer)->claim_top9) top9 = "\nadd_textbox|`w#9 Earn " + Set_Count(personal_t9) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`240 Summer Tokens|left|6198|\nadd_small_font_button|claimperevent_9|`$Claim Reward|0|0|";
			else if (pInfo(peer)->claim_top9) top9 = "\nadd_textbox|`^#9 Earn " + Set_Count(personal_t9) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`^40 Summer Tokens|left|6198|";
			else top9 = "\nadd_textbox|`s#9 Earn " + Set_Count(personal_t9) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`s40 Summer Tokens|left|6198|";

			if (my_point >= personal_t10 and not pInfo(peer)->claim_top10) top10 = "\nadd_textbox|`w#10 Earn " + Set_Count(personal_t10) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`250 Summer Tokens|left|6198|\nadd_label_with_icon|small|`21 Summer Trainer's Reward|left|6200|\nadd_small_font_button|claimperevent_10|`$Claim Reward|0|0|";
			else if (pInfo(peer)->claim_top10) top10 = "\nadd_textbox|`^#10 Earn " + Set_Count(personal_t10) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`^50 Summer Tokens|left|6198|\nadd_label_with_icon|small|`^1 Summer Trainer's Reward|left|6200|";
			else top10 = "\nadd_textbox|`s#10 Earn " + Set_Count(personal_t10) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`s50 Summer Tokens|left|6198|\nadd_label_with_icon|small|`s1 Summer Trainer's Reward|left|6200|";

			if (my_point >= personal_t11 and not pInfo(peer)->claim_top11) top11 = "\nadd_textbox|`w#11 Earn " + Set_Count(personal_t11) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`260 Summer Tokens|left|6198|\nadd_small_font_button|claimperevent_11|`$Claim Reward|0|0|";
			else if (pInfo(peer)->claim_top11) top11 = "\nadd_textbox|`^#11 Earn " + Set_Count(personal_t11) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`^60 Summer Tokens|left|6198|";
			else top11 = "\nadd_textbox|`s#11 Earn " + Set_Count(personal_t11) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`s60 Summer Tokens|left|6198|";

			if (my_point >= personal_t12 and not pInfo(peer)->claim_top12) top12 = "\nadd_textbox|`w#12 Earn " + Set_Count(personal_t12) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`280 Summer Tokens|left|6198|\nadd_small_font_button|claimperevent_12|`$Claim Reward|0|0|";
			else if (pInfo(peer)->claim_top12) top12 = "\nadd_textbox|`^#12 Earn " + Set_Count(personal_t12) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`^80 Summer Tokens|left|6198|";
			else top12 = "\nadd_textbox|`s#12 Earn " + Set_Count(personal_t12) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`s80 Summer Tokens|left|6198|";

			if (my_point >= personal_t13 and not pInfo(peer)->claim_top13) top13 = "\nadd_textbox|`w#13 Earn " + Set_Count(personal_t13) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`2100 Summer Tokens|left|6198|\nadd_small_font_button|claimperevent_13|`$Claim Reward|0|0|";
			else if (pInfo(peer)->claim_top13) top13 = "\nadd_textbox|`^#13 Earn " + Set_Count(personal_t13) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`^100 Summer Tokens|left|6198|";
			else top13 = "\nadd_textbox|`s#13 Earn " + Set_Count(personal_t13) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`s100 Summer Tokens|left|6198|";

			if (my_point >= personal_t14 and not pInfo(peer)->claim_top14) top14 = "\nadd_textbox|`w#14 Earn " + Set_Count(personal_t14) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`2120 Summer Tokens|left|6198|\nadd_small_font_button|claimperevent_14|`$Claim Reward|0|0|";
			else if (pInfo(peer)->claim_top14) top14 = "\nadd_textbox|`^#14 Earn " + Set_Count(personal_t14) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`^120 Summer Tokens|left|6198|";
			else top14 = "\nadd_textbox|`s#14 Earn " + Set_Count(personal_t14) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`s120 Summer Tokens|left|6198|";

			if (my_point >= personal_t15 and not pInfo(peer)->claim_top15) top15 = "\nadd_textbox|`w#15 Earn " + Set_Count(personal_t15) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`2150 Summer Tokens|left|6198|\nadd_label_with_icon|small|`21 Summer Contender's Reward|left|6200|\nadd_small_font_button|claimperevent_15|`$Claim Reward|0|0|";
			else if (pInfo(peer)->claim_top15) top15 = "\nadd_textbox|`^#15 Earn " + Set_Count(personal_t15) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`^150 Summer Tokens|left|6198|\nadd_label_with_icon|small|`^1 Summer Contender's Reward|left|6200|";
			else top15 = "\nadd_textbox|`s#15 Earn " + Set_Count(personal_t15) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`s150 Summer Tokens|left|6198|\nadd_label_with_icon|small|`s1 Summer Contender's Reward|left|6200|";

			if (my_point >= personal_t16 and not pInfo(peer)->claim_top16) top16 = "\nadd_textbox|`w#16 Earn " + Set_Count(personal_t16) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`2180 Summer Tokens|left|6198|\nadd_small_font_button|claimperevent_16|`$Claim Reward|0|0|";
			else if (pInfo(peer)->claim_top16) top16 = "\nadd_textbox|`^#16 Earn " + Set_Count(personal_t16) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`^180 Summer Tokens|left|6198|";
			else top16 = "\nadd_textbox|`s#16 Earn " + Set_Count(personal_t16) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`s180 Summer Tokens|left|6198|";

			if (my_point >= personal_t17 and not pInfo(peer)->claim_top17) top17 = "\nadd_textbox|`w#17 Earn " + Set_Count(personal_t17) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`2220 Summer Tokens|left|6198|\nadd_small_font_button|claimperevent_17|`$Claim Reward|0|0|";
			else if (pInfo(peer)->claim_top17) top17 = "\nadd_textbox|`^#17 Earn " + Set_Count(personal_t17) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`^220 Summer Tokens|left|6198|";
			else top17 = "\nadd_textbox|`s#17 Earn " + Set_Count(personal_t17) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`s220 Summer Tokens|left|6198|";

			if (my_point >= personal_t18 and not pInfo(peer)->claim_top18) top18 = "\nadd_textbox|`w#18 Earn " + Set_Count(personal_t18) + "0 points to claim this rewards:|left|\nadd_label_with_icon|small|`2250 Summer Tokens|left|6198|\nadd_small_font_button|claimperevent_18|`$Claim Reward|0|0|";
			else if (pInfo(peer)->claim_top18) top18 = "\nadd_textbox|`^#18 Earn " + Set_Count(personal_t18) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`^250 Summer Tokens|left|6198|";
			else top18 = "\nadd_textbox|`s#18 Earn " + Set_Count(personal_t18) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`s250 Summer Tokens|left|6198|";

			if (my_point >= personal_t19 and not pInfo(peer)->claim_top19) top19 = "\nadd_textbox|`w#19 Earn " + Set_Count(personal_t19) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`2300 Summer Tokens|left|6198|\nadd_small_font_button|claimperevent_19|`$Claim Reward|0|0|";
			else if (pInfo(peer)->claim_top19) top19 = "\nadd_textbox|`^#19 Earn " + Set_Count(personal_t19) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`^300 Summer Tokens|left|6198|";
			else top19 = "\nadd_textbox|`s#19 Earn " + Set_Count(personal_t19) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`s300 Summer Tokens|left|6198|";

			if (my_point >= personal_t20 and not pInfo(peer)->claim_top20) top20 = "\nadd_textbox|`w#20 Earn " + Set_Count(personal_t20) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`2400 Summer Tokens|left|6198|\nadd_label_with_icon|small|`21 Summer Master's Reward|left|6200|\nadd_small_font_button|claimperevent_20|`$Claim Reward|0|0|";
			else if (pInfo(peer)->claim_top20) top20 = "\nadd_textbox|`^#20 Earn " + Set_Count(personal_t20) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`^400 Summer Tokens|left|6198|\nadd_label_with_icon|small|`^1 Summer Trainer's Reward|left|6200|";
			else top20 = "\nadd_textbox|`s#20 Earn " + Set_Count(personal_t20) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`s400 Summer Tokens|left|6198|\nadd_label_with_icon|small|`s1 Summer Trainer's Reward|left|6200|";
		}
		if (guild_event_type == "Winter Clash") {
			if (my_point >= personal_t1 and not pInfo(peer)->claim_top1) top1 = "\nadd_textbox|`w#1 Earn " + Set_Count(personal_t1) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`25 Winter Tokens|left|7328|\nadd_small_font_button|claimperevent_1|`$Claim Reward|0|0|";
			else if (pInfo(peer)->claim_top1) top1 = "\nadd_textbox|`^#1 Earn " + Set_Count(personal_t1) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`^5 Winter Tokens|left|7328|";
			else top1 = "\nadd_textbox|`s#1 Earn " + Set_Count(personal_t1) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`s5 Winter Tokens|left|7328|";

			if (my_point >= personal_t2 and not pInfo(peer)->claim_top2) top2 = "\nadd_textbox|`w#2 Earn " + Set_Count(personal_t2) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`210 Winter Tokens|left|7328|\nadd_small_font_button|claimperevent_2|`$Claim Reward|0|0|";
			else if (pInfo(peer)->claim_top2) top2 = "\nadd_textbox|`^#2 Earn " + Set_Count(personal_t2) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`^10 Winter Tokens|left|7328|";
			else top2 = "\nadd_textbox|`s#2 Earn " + Set_Count(personal_t2) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`s10 Winter Tokens|left|7328|";

			if (my_point >= personal_t3 and not pInfo(peer)->claim_top3) top3 = "\nadd_textbox|`w#3 Earn " + Set_Count(personal_t3) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`215 Winter Tokens|left|7328|\nadd_small_font_button|claimperevent_3|`$Claim Reward|0|0|";
			else if (pInfo(peer)->claim_top3) top3 = "\nadd_textbox|`^#2 Earn " + Set_Count(personal_t3) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`^10 Winter Tokens|left|7328|";
			else top3 = "\nadd_textbox|`s#3 Earn " + Set_Count(personal_t3) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`s15 Winter Tokens|left|7328|";

			if (my_point >= personal_t4 and not pInfo(peer)->claim_top4) top4 = "\nadd_textbox|`w#4 Earn " + Set_Count(personal_t4) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`220 Winter Tokens|left|7328|\nadd_small_font_button|claimperevent_4|`$Claim Reward|0|0|";
			else if (pInfo(peer)->claim_top4) top4 = "\nadd_textbox|`^#4 Earn " + Set_Count(personal_t4) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`^20 Winter Tokens|left|7328|";
			else top4 = "\nadd_textbox|`s#4 Earn " + Set_Count(personal_t4) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`s20 Winter Tokens|left|7328|";

			if (my_point >= personal_t5 and not pInfo(peer)->claim_top5) top5 = "\nadd_textbox|`w#5 Earn " + Set_Count(personal_t5) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`225 Winter Tokens|left|7328|\nadd_label_with_icon|small|`21 Winter Student's Reward|left|7484|\nadd_small_font_button|claimperevent_5|`$Claim Reward|0|0|";
			else if (pInfo(peer)->claim_top5) top5 = "\nadd_textbox|`^#5 Earn " + Set_Count(personal_t5) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`^25 Winter Tokens|left|7328|\nadd_label_with_icon|small|`^1 Winter Student's Reward|left|7484|";
			else top5 = "\nadd_textbox|`s#5 Earn " + Set_Count(personal_t5) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`s25 Winter Tokens|left|7328|\nadd_label_with_icon|small|`s1 Winter Student's Reward|left|7484|";

			if (my_point >= personal_t6 and not pInfo(peer)->claim_top6) top6 = "\nadd_textbox|`w#6 Earn " + Set_Count(personal_t6) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`225 Winter Tokens|left|7328|\nadd_small_font_button|claimperevent_6|`$Claim Reward|0|0|";
			else if (pInfo(peer)->claim_top6) top6 = "\nadd_textbox|`^#6 Earn " + Set_Count(personal_t6) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`^25 Winter Tokens|left|7328|";
			else top6 = "\nadd_textbox|`s#6 Earn " + Set_Count(personal_t6) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`s25 Winter Tokens|left|7328|";

			if (my_point >= personal_t7 and not pInfo(peer)->claim_top7) top7 = "\nadd_textbox|`w#7 Earn " + Set_Count(personal_t7) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`230 Winter Tokens|left|7328|\nadd_small_font_button|claimperevent_7|`$Claim Reward|0|0|";
			else if (pInfo(peer)->claim_top7) top7 = "\nadd_textbox|`^#7 Earn " + Set_Count(personal_t7) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`^30 Winter Tokens|left|7328|";
			else top7 = "\nadd_textbox|`s#7 Earn " + Set_Count(personal_t7) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`s30 Winter Tokens|left|7328|";

			if (my_point >= personal_t8 and not pInfo(peer)->claim_top8) top8 = "\nadd_textbox|`w#8 Earn " + Set_Count(personal_t8) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`235 Winter Tokens|left|7328|\nadd_small_font_button|claimperevent_8|`$Claim Reward|0|0|";
			else if (pInfo(peer)->claim_top8) top8 = "\nadd_textbox|`^#8 Earn " + Set_Count(personal_t8) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`^35 Winter Tokens|left|7328|";
			else top8 = "\nadd_textbox|`s#8 Earn " + Set_Count(personal_t8) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`s35 Winter Tokens|left|7328|";

			if (my_point >= personal_t9 and not pInfo(peer)->claim_top9) top9 = "\nadd_textbox|`w#9 Earn " + Set_Count(personal_t9) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`240 Winter Tokens|left|7328|\nadd_small_font_button|claimperevent_9|`$Claim Reward|0|0|";
			else if (pInfo(peer)->claim_top9) top9 = "\nadd_textbox|`^#9 Earn " + Set_Count(personal_t9) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`^40 Winter Tokens|left|7328|";
			else top9 = "\nadd_textbox|`s#9 Earn " + Set_Count(personal_t9) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`s40 Winter Tokens|left|7328|";

			if (my_point >= personal_t10 and not pInfo(peer)->claim_top10) top10 = "\nadd_textbox|`w#10 Earn " + Set_Count(personal_t10) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`250 Winter Tokens|left|7328|\nadd_label_with_icon|small|`21 Winter Trainer's Reward|left|7484|\nadd_small_font_button|claimperevent_10|`$Claim Reward|0|0|";
			else if (pInfo(peer)->claim_top10) top10 = "\nadd_textbox|`^#10 Earn " + Set_Count(personal_t10) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`^50 Winter Tokens|left|7328|\nadd_label_with_icon|small|`^1 Winter Trainer's Reward|left|7484|";
			else top10 = "\nadd_textbox|`s#10 Earn " + Set_Count(personal_t10) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`s50 Winter Tokens|left|7328|\nadd_label_with_icon|small|`s1 Winter Trainer's Reward|left|7484|";

			if (my_point >= personal_t11 and not pInfo(peer)->claim_top11) top11 = "\nadd_textbox|`w#11 Earn " + Set_Count(personal_t11) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`260 Winter Tokens|left|7328|\nadd_small_font_button|claimperevent_11|`$Claim Reward|0|0|";
			else if (pInfo(peer)->claim_top11) top11 = "\nadd_textbox|`^#11 Earn " + Set_Count(personal_t11) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`^60 Winter Tokens|left|7328|";
			else top11 = "\nadd_textbox|`s#11 Earn " + Set_Count(personal_t11) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`s60 Winter Tokens|left|7328|";

			if (my_point >= personal_t12 and not pInfo(peer)->claim_top12) top12 = "\nadd_textbox|`w#12 Earn " + Set_Count(personal_t12) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`280 Winter Tokens|left|7328|\nadd_small_font_button|claimperevent_12|`$Claim Reward|0|0|";
			else if (pInfo(peer)->claim_top12) top12 = "\nadd_textbox|`^#12 Earn " + Set_Count(personal_t12) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`^80 Winter Tokens|left|7328|";
			else top12 = "\nadd_textbox|`s#12 Earn " + Set_Count(personal_t12) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`s80 Winter Tokens|left|7328|";

			if (my_point >= personal_t13 and not pInfo(peer)->claim_top13) top13 = "\nadd_textbox|`w#13 Earn " + Set_Count(personal_t13) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`2100 Winter Tokens|left|7328|\nadd_small_font_button|claimperevent_13|`$Claim Reward|0|0|";
			else if (pInfo(peer)->claim_top13) top13 = "\nadd_textbox|`^#13 Earn " + Set_Count(personal_t13) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`^100 Winter Tokens|left|7328|";
			else top13 = "\nadd_textbox|`s#13 Earn " + Set_Count(personal_t13) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`s100 Winter Tokens|left|7328|";

			if (my_point >= personal_t14 and not pInfo(peer)->claim_top14) top14 = "\nadd_textbox|`w#14 Earn " + Set_Count(personal_t14) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`2120 Winter Tokens|left|7328|\nadd_small_font_button|claimperevent_14|`$Claim Reward|0|0|";
			else if (pInfo(peer)->claim_top14) top14 = "\nadd_textbox|`^#14 Earn " + Set_Count(personal_t14) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`^120 Winter Tokens|left|7328|";
			else top14 = "\nadd_textbox|`s#14 Earn " + Set_Count(personal_t14) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`s120 Winter Tokens|left|7328|";

			if (my_point >= personal_t15 and not pInfo(peer)->claim_top15) top15 = "\nadd_textbox|`w#15 Earn " + Set_Count(personal_t15) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`2150 Winter Tokens|left|7328|\nadd_label_with_icon|small|`21 Winter Contender's Reward|left|7484|\nadd_small_font_button|claimperevent_15|`$Claim Reward|0|0|";
			else if (pInfo(peer)->claim_top15) top15 = "\nadd_textbox|`^#15 Earn " + Set_Count(personal_t15) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`^150 Winter Tokens|left|7328|\nadd_label_with_icon|small|`^1 Winter Contender's Reward|left|7484|";
			else top15 = "\nadd_textbox|`s#15 Earn " + Set_Count(personal_t15) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`s150 Winter Tokens|left|7328|\nadd_label_with_icon|small|`s1 Winter Contender's Reward|left|7484|";

			if (my_point >= personal_t16 and not pInfo(peer)->claim_top16) top16 = "\nadd_textbox|`w#16 Earn " + Set_Count(personal_t16) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`2180 Winter Tokens|left|7328|\nadd_small_font_button|claimperevent_16|`$Claim Reward|0|0|";
			else if (pInfo(peer)->claim_top16) top16 = "\nadd_textbox|`^#16 Earn " + Set_Count(personal_t16) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`^180 Winter Tokens|left|7328|";
			else top16 = "\nadd_textbox|`s#16 Earn " + Set_Count(personal_t16) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`s180 Winter Tokens|left|7328|";

			if (my_point >= personal_t17 and not pInfo(peer)->claim_top17) top17 = "\nadd_textbox|`w#17 Earn " + Set_Count(personal_t17) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`2220 Winter Tokens|left|7328|\nadd_small_font_button|claimperevent_17|`$Claim Reward|0|0|";
			else if (pInfo(peer)->claim_top17) top17 = "\nadd_textbox|`^#17 Earn " + Set_Count(personal_t17) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`^220 Winter Tokens|left|7328|";
			else top17 = "\nadd_textbox|`s#17 Earn " + Set_Count(personal_t17) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`s220 Winter Tokens|left|7328|";

			if (my_point >= personal_t18 and not pInfo(peer)->claim_top18) top18 = "\nadd_textbox|`w#18 Earn " + Set_Count(personal_t18) + "0 points to claim this rewards:|left|\nadd_label_with_icon|small|`2250 Winter Tokens|left|7328|\nadd_small_font_button|claimperevent_18|`$Claim Reward|0|0|";
			else if (pInfo(peer)->claim_top18) top18 = "\nadd_textbox|`^#18 Earn " + Set_Count(personal_t18) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`^250 Winter Tokens|left|7328|";
			else top18 = "\nadd_textbox|`s#18 Earn " + Set_Count(personal_t18) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`s250 Winter Tokens|left|7328|";

			if (my_point >= personal_t19 and not pInfo(peer)->claim_top19) top19 = "\nadd_textbox|`w#19 Earn " + Set_Count(personal_t19) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`2300 Winter Tokens|left|7328|\nadd_small_font_button|claimperevent_19|`$Claim Reward|0|0|";
			else if (pInfo(peer)->claim_top19) top19 = "\nadd_textbox|`^#19 Earn " + Set_Count(personal_t19) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`^300 Winter Tokens|left|7328|";
			else top19 = "\nadd_textbox|`s#19 Earn " + Set_Count(personal_t19) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`s300 Winter Tokens|left|7328|";

			if (my_point >= personal_t20 and not pInfo(peer)->claim_top20) top20 = "\nadd_textbox|`w#20 Earn " + Set_Count(personal_t20) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`2400 Winter Tokens|left|7328|\nadd_label_with_icon|small|`21 Winter Master's Reward|left|7484|\nadd_small_font_button|claimperevent_20|`$Claim Reward|0|0|";
			else if (pInfo(peer)->claim_top20) top20 = "\nadd_textbox|`^#20 Earn " + Set_Count(personal_t20) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`^400 Winter Tokens|left|7328|\nadd_label_with_icon|small|`^1 Winter Trainer's Reward|left|7484|";
			else top20 = "\nadd_textbox|`s#20 Earn " + Set_Count(personal_t20) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`s400 Winter Tokens|left|7328|\nadd_label_with_icon|small|`s1 Winter Trainer's Reward|left|7484|";
		}
		string claim_all = my_point >= personal_t1 and not pInfo(peer)->claim_top1 or my_point >= personal_t2 and not pInfo(peer)->claim_top2 or my_point >= personal_t3 and not pInfo(peer)->claim_top3 or my_point >= personal_t4 and not pInfo(peer)->claim_top4 or my_point >= personal_t5 and not pInfo(peer)->claim_top5 or my_point >= personal_t6 and not pInfo(peer)->claim_top6 or my_point >= personal_t7 and not pInfo(peer)->claim_top7 or my_point >= personal_t8 and not pInfo(peer)->claim_top8 or my_point >= personal_t9 and not pInfo(peer)->claim_top9 or my_point >= personal_t10 and not pInfo(peer)->claim_top10 or my_point >= personal_t11 and not pInfo(peer)->claim_top11 or my_point >= personal_t12 and not pInfo(peer)->claim_top12 or my_point >= personal_t13 and not pInfo(peer)->claim_top13 or my_point >= personal_t14 and not pInfo(peer)->claim_top14 or my_point >= personal_t15 and not pInfo(peer)->claim_top15 or my_point >= personal_t16 and not pInfo(peer)->claim_top16 or my_point >= personal_t17 and not pInfo(peer)->claim_top17 or my_point >= personal_t18 and not pInfo(peer)->claim_top18 or my_point >= personal_t19 and not pInfo(peer)->claim_top19 or my_point >= personal_t20 and not pInfo(peer)->claim_top20 ? "\nadd_small_font_button|claim_all_perevent|`wClaim All Available Rewards|noflags|0|0|" : "";
		VarList::OnDialogRequest(peer, SetColor(peer) + "set_default_color|\nadd_label_with_icon|big|Personal Event Rewards|left|6012|\nadd_smalltext|`$Earn rewards by participating in montly events! The point you earn by helping GrowTech will unlock the milestones below.|left|\nadd_smalltext|`5Note: `$A new set of goals and rewards will appear each month, and progress does not carry over between events!|left|\nadd_spacer|small|\nadd_button|back|Back|noflags|0|0|\nadd_spacer|small|" + score + "\nadd_spacer|small|" + (claim_all.empty() ? "" : claim_all) + top1 + "|\nadd_spacer|small|" + top2 + "|\nadd_spacer|small|" + top3 + "|\nadd_spacer|small|" + top4 + "|\nadd_spacer|small|" + top5 + "|\nadd_spacer|small|" + top6 + "|\nadd_spacer|small|" + top7 + "|\nadd_spacer|small|" + top8 + "|\nadd_spacer|small|" + top9 + "|\nadd_spacer|small|" + top10 + "|\nadd_spacer|small|" + top11 + "|\nadd_spacer|small|" + top12 + "|\nadd_spacer|small|" + top13 + "|\nadd_spacer|small|" + top14 + "|\nadd_spacer|small|" + top15 + "|\nadd_spacer|small|" + top16 + "|\nadd_spacer|small|" + top17 + "|\nadd_spacer|small|" + top18 + "|\nadd_spacer|small|" + top19 + "|\nadd_spacer|small|" + top20 + (claim_all.empty() ? "" : claim_all) + "|\nadd_spacer|small|\nend_dialog|backto_leaderboard|Close|Back|\nadd_quick_exit|");
	}
	static void Guild_Event_Rewards(ENetPeer* peer) {
		std::string score = "\nadd_textbox|`$Your current guild score: 0|left|", top1 = "", top2 = "", top3 = "", top4 = "", top5 = "", top6 = "", top7 = "", top8 = "", top9 = "", top10 = "", top11 = "", top12 = "", top13 = "", top14 = "", top15 = "", top16 = "", top17 = "", top18 = "", top19 = "", top20 = "", top21 = "", top22 = "", top23 = "", top24 = "", top25 = "";
		int guild_point = 0;
		if (Event()->Can_Event) {
			auto it = std::find_if(last_guild_last.begin(), last_guild_last.end(), [&](const std::pair<long long int, std::string>& element) {
				return element.second == std::to_string(pInfo(peer)->guild_id);
				});
			if (it != last_guild_last.end()) {
				guild_point = it->first;
			}
		}
		else {
			auto it = std::find_if(top_guild.begin(), top_guild.end(), [&](const std::pair<long long int, std::string>& element) {
				return element.second == std::to_string(pInfo(peer)->guild_id);
				});
			if (it != top_guild.end()) {
				guild_point = it->first;
			}
		}
		if (guild_point > 0) score = "\nadd_textbox|`$Your current guild score: " + Set_Count(guild_point) + "|left|";
		if (guild_event_type == "Spring Clash") {
			if (guild_point >= guild_t1 and not pInfo(peer)->claim_top1g) top1 = "\nadd_textbox|`w#1: Earn " + Set_Count(guild_t1) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`23 Spring Tokens|left|7844|\nadd_small_font_button|claimguevent_1|`$Claim Reward|0|0|";
			else if (pInfo(peer)->claim_top1g) top1 = "\nadd_textbox|`^#1: Earn " + Set_Count(guild_t1) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`^3 Spring Tokens|left|7844|";
			else top1 = "\nadd_textbox|`s#1: Earn " + Set_Count(guild_t1) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`s3 Spring Tokens|left|7844|";

			if (guild_point >= guild_t2 and not pInfo(peer)->claim_top2g) top2 = "\nadd_textbox|`w#2: Earn " + Set_Count(guild_t2) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`28 Spring Tokens|left|7844|\nadd_small_font_button|claimguevent_2|`$Claim Reward|0|0|";
			else if (pInfo(peer)->claim_top2g) top2 = "\nadd_textbox|`^#2: Earn " + Set_Count(guild_t2) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`^8 Spring Tokens|left|7844|";
			else top2 = "\nadd_textbox|`s#2: Earn " + Set_Count(guild_t2) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`s8 Spring Tokens|left|7844|";

			if (guild_point >= guild_t3 and not pInfo(peer)->claim_top3g) top3 = "\nadd_textbox|`w#3: Earn " + Set_Count(guild_t3) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`212 Spring Tokens|left|7844|\nadd_small_font_button|claimguevent_3|`$Claim Reward|0|0|";
			else if (pInfo(peer)->claim_top3g) top3 = "\nadd_textbox|`^#3: Earn " + Set_Count(guild_t3) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`^12 Spring Tokens|left|7844|";
			else top3 = "\nadd_textbox|`s#3: Earn " + Set_Count(guild_t3) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`s12 Spring Tokens|left|7844|";

			if (guild_point >= guild_t4 and not pInfo(peer)->claim_top4g) top4 = "\nadd_textbox|`w#4: Earn " + Set_Count(guild_t4) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`218 Spring Tokens|left|7844|\nadd_small_font_button|claimguevent_4|`$Claim Reward|0|0|";
			else if (pInfo(peer)->claim_top4g) top4 = "\nadd_textbox|`^#4: Earn " + Set_Count(guild_t4) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`^18 Spring Tokens|left|7844|";
			else top4 = "\nadd_textbox|`s#4: Earn " + Set_Count(guild_t4) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`s18 Spring Tokens|left|7844|";

			if (guild_point >= guild_t5 and not pInfo(peer)->claim_top5g) top5 = "\nadd_textbox|`w#5: Earn " + Set_Count(guild_t5) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`222 Spring Tokens|left|7844|\nadd_label_with_icon|small|`21 Spring Squire's Reward|left|7954|\nadd_small_font_button|claimguevent_5|`$Claim Reward|0|0|";
			else if (pInfo(peer)->claim_top5g) top5 = "\nadd_textbox|`^#5: Earn " + Set_Count(guild_t5) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`^22 Spring Tokens|left|7844|\nadd_label_with_icon|small|`^1 Spring Squire's Reward|left|7954|";
			else top5 = "\nadd_textbox|`s#5: Earn " + Set_Count(guild_t5) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`s22 Spring Tokens|left|7844|\nadd_label_with_icon|small|`s1 Spring Squire's Reward|left|7954|";

			if (guild_point >= guild_t6 and not pInfo(peer)->claim_top6g) top6 = "\nadd_textbox|`w#6: Earn " + Set_Count(guild_t6) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`225 Spring Tokens|left|7844|\nadd_small_font_button|claimguevent_6|`$Claim Reward|0|0|";
			else if (pInfo(peer)->claim_top6g) top6 = "\nadd_textbox|`^#6: Earn " + Set_Count(guild_t6) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`^25 Spring Tokens|left|7844|";
			else top6 = "\nadd_textbox|`s#6: Earn " + Set_Count(guild_t6) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`s25 Spring Tokens|left|7844|";

			if (guild_point >= guild_t7 and not pInfo(peer)->claim_top7g) top7 = "\nadd_textbox|`w#7: Earn " + Set_Count(guild_t7) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`228 Spring Tokens|left|7844|\nadd_small_font_button|claimguevent_7|`$Claim Reward|0|0|";
			else if (pInfo(peer)->claim_top7g) top7 = "\nadd_textbox|`^#7: Earn " + Set_Count(guild_t7) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`^28 Spring Tokens|left|7844|";
			else top7 = "\nadd_textbox|`s#7: Earn " + Set_Count(guild_t7) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`s28 Spring Tokens|left|7844|";

			if (guild_point >= guild_t8 and not pInfo(peer)->claim_top8g) top8 = "\nadd_textbox|`w#8: Earn " + Set_Count(guild_t8) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`230 Spring Tokens|left|7844|\nadd_small_font_button|claimguevent_8|`$Claim Reward|0|0|";
			else if (pInfo(peer)->claim_top8g) top8 = "\nadd_textbox|`^#8: Earn " + Set_Count(guild_t8) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`^30 Spring Tokens|left|7844|";
			else top8 = "\nadd_textbox|`s#8: Earn " + Set_Count(guild_t8) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`s30 Spring Tokens|left|7844|";

			if (guild_point >= guild_t9 and not pInfo(peer)->claim_top9g) top9 = "\nadd_textbox|`w#9: Earn " + Set_Count(guild_t9) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`235 Spring Tokens|left|7844|\nadd_small_font_button|claimguevent_9|`$Claim Reward|0|0|";
			else if (pInfo(peer)->claim_top9g) top9 = "\nadd_textbox|`^#9: Earn " + Set_Count(guild_t9) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`^35 Spring Tokens|left|7844|";
			else top9 = "\nadd_textbox|`s#9: Earn " + Set_Count(guild_t9) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`s35 Spring Tokens|left|7844|";

			if (guild_point >= guild_t10 and not pInfo(peer)->claim_top10g) top10 = "\nadd_textbox|`w#10: Earn 2,090,000 points to claim this rewards:|left|\nadd_label_with_icon|small|`240 Spring Tokens|left|7844|\nadd_label_with_icon|small|`21 Spring Knight's Reward|left|7954|\nadd_small_font_button|claimguevent_10|`$Claim Reward|0|0|";
			else if (pInfo(peer)->claim_top10g) top10 = "\nadd_textbox|`^#10: Earn 2,090,000 points to claim this rewards:|left|\nadd_label_with_icon|small|`^40 Spring Tokens|left|7844|\nadd_label_with_icon|small|`^1 Spring Knight's Reward|left|7954|";
			else top10 = "\nadd_textbox|`s#10: Earn " + Set_Count(guild_t10) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`s40 Spring Tokens|left|7844|\nadd_label_with_icon|small|`s1 Spring Knight's Reward|left|7954|";

			if (guild_point >= guild_t11 and not pInfo(peer)->claim_top11g) top11 = "\nadd_textbox|`w#11: Earn " + Set_Count(guild_t11) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`250 Spring Tokens|left|7844|\nadd_small_font_button|claimguevent_11|`$Claim Reward|0|0|";
			else if (pInfo(peer)->claim_top11g) top11 = "\nadd_textbox|`^#11: Earn " + Set_Count(guild_t11) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`^50 Spring Tokens|left|7844|";
			else top11 = "\nadd_textbox|`s#11: Earn " + Set_Count(guild_t11) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`s50 Spring Tokens|left|7844|";

			if (guild_point >= guild_t12 and not pInfo(peer)->claim_top12g) top12 = "\nadd_textbox|`w#12: Earn " + Set_Count(guild_t12) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`260 Spring Tokens|left|7844|\nadd_small_font_button|claimguevent_12|`$Claim Reward|0|0|";
			else if (pInfo(peer)->claim_top12g) top12 = "\nadd_textbox|`^#12: Earn " + Set_Count(guild_t12) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`^60 Spring Tokens|left|7844|";
			else top12 = "\nadd_textbox|`s#12: Earn " + Set_Count(guild_t12) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`s60 Spring Tokens|left|7844|";

			if (guild_point >= guild_t13 and not pInfo(peer)->claim_top13g) top13 = "\nadd_textbox|`w#13: Earn " + Set_Count(guild_t13) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`275 Spring Tokens|left|7844|\nadd_small_font_button|claimguevent_13|`$Claim Reward|0|0|";
			else if (pInfo(peer)->claim_top13g) top13 = "\nadd_textbox|`^#13: Earn " + Set_Count(guild_t13) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`^75 Spring Tokens|left|7844|";
			else top13 = "\nadd_textbox|`s#13: Earn " + Set_Count(guild_t13) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`s75 Spring Tokens|left|7844|";

			if (guild_point >= guild_t14 and not pInfo(peer)->claim_top14g) top14 = "\nadd_textbox|`w#14: Earn " + Set_Count(guild_t14) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`2100 Spring Tokens|left|7844|\nadd_small_font_button|claimguevent_14|`$Claim Reward|0|0|";
			else if (pInfo(peer)->claim_top14g) top14 = "\nadd_textbox|`^#14: Earn " + Set_Count(guild_t14) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`^100 Spring Tokens|left|7844|";
			else top14 = "\nadd_textbox|`s#14: Earn " + Set_Count(guild_t14) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`s100 Spring Tokens|left|7844|";

			if (guild_point >= guild_t15 and not pInfo(peer)->claim_top15g) top15 = "\nadd_textbox|`w#15: Earn " + Set_Count(guild_t15) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`2125 Spring Tokens|left|7844|\nadd_label_with_icon|small|`21 Spring Noble's Reward|left|7954|\nadd_small_font_button|claimguevent_15|`$Claim Reward|0|0|";
			else if (pInfo(peer)->claim_top15g) top15 = "\nadd_textbox|`^#15: Earn " + Set_Count(guild_t15) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`^125 Spring Tokens|left|7844|\nadd_label_with_icon|small|`^1 Spring Noble's Reward|left|7954|";
			else top15 = "\nadd_textbox|`s#15: Earn " + Set_Count(guild_t15) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`s125 Spring Tokens|left|7844|\nadd_label_with_icon|small|`s1 Spring Noble's Reward|left|7954|";

			if (guild_point >= guild_t16 and not pInfo(peer)->claim_top16g) top16 = "\nadd_textbox|`w#16: Earn " + Set_Count(guild_t16) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`2150 Spring Tokens|left|7844|\nadd_small_font_button|claimguevent_16|`$Claim Reward|0|0|";
			else if (pInfo(peer)->claim_top16g) top16 = "\nadd_textbox|`^#16: Earn " + Set_Count(guild_t16) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`^150 Spring Tokens|left|7844|";
			else top16 = "\nadd_textbox|`s#16: Earn " + Set_Count(guild_t16) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`s150 Spring Tokens|left|7844|";

			if (guild_point >= guild_t17 and not pInfo(peer)->claim_top17g) top17 = "\nadd_textbox|`w#17: Earn " + Set_Count(guild_t17) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`2175 Spring Tokens|left|7844|\nadd_small_font_button|claimguevent_17|`$Claim Reward|0|0|";
			else if (pInfo(peer)->claim_top17g) top17 = "\nadd_textbox|`^#17: Earn " + Set_Count(guild_t17) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`^175 Spring Tokens|left|7844|";
			else top17 = "\nadd_textbox|`s#17: Earn " + Set_Count(guild_t17) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`s175 Spring Tokens|left|7844|";

			if (guild_point >= guild_t18 and not pInfo(peer)->claim_top18g) top18 = "\nadd_textbox|`w#18: Earn " + Set_Count(guild_t18) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`2200 Spring Tokens|left|7844|\nadd_small_font_button|claimguevent_18|`$Claim Reward|0|0|";
			else if (pInfo(peer)->claim_top18g) top18 = "\nadd_textbox|`^#18: Earn " + Set_Count(guild_t18) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`^200 Spring Tokens|left|7844|";
			else top18 = "\nadd_textbox|`s#18: Earn " + Set_Count(guild_t18) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`s200 Spring Tokens|left|7844|";

			if (guild_point >= guild_t19 and not pInfo(peer)->claim_top19g) top19 = "\nadd_textbox|`w#19: Earn " + Set_Count(guild_t19) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`2225 Spring Tokens|left|7844|\nadd_small_font_button|claimguevent_19|`$Claim Reward|0|0|";
			else if (pInfo(peer)->claim_top19g) top19 = "\nadd_textbox|`^#19: Earn " + Set_Count(guild_t19) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`^225 Spring Tokens|left|7844|";
			else top19 = "\nadd_textbox|`s#19: Earn " + Set_Count(guild_t19) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`s225 Spring Tokens|left|7844|";

			if (guild_point >= guild_t20 and not pInfo(peer)->claim_top20g) top20 = "\nadd_textbox|`w#20: Earn " + Set_Count(guild_t20) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`2275 Spring Tokens|left|7844|\nadd_label_with_icon|small|`21 Spring King's Reward|left|7954|\nadd_small_font_button|claimguevent_20|`$Claim Reward|0|0|";
			else if (pInfo(peer)->claim_top20g) top20 = "\nadd_textbox|`^#20: Earn " + Set_Count(guild_t20) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`^275 Spring Tokens|left|7844|\nadd_label_with_icon|small|`^1 Spring King's Reward|left|7954|";
			else top20 = "\nadd_textbox|`s#20: Earn " + Set_Count(guild_t20) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`s275 Spring Tokens|left|7844|\nadd_label_with_icon|small|`s1 Spring King's Reward|left|7954|";

			if (guild_point >= guild_t21 and not pInfo(peer)->claim_top21g) top21 = "\nadd_textbox|`w#21: Earn " + Set_Count(guild_t21) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`2400 Spring Tokens|left|7844|\nadd_small_font_button|claimguevent_21|`$Claim Reward|0|0|";
			else if (pInfo(peer)->claim_top21g) top21 = "\nadd_textbox|`^#21: Earn " + Set_Count(guild_t21) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`^400 Spring Tokens|left|7844|";
			else top21 = "\nadd_textbox|`s#21: Earn " + Set_Count(guild_t21) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`s400 Spring Tokens|left|7844|";

			if (guild_point >= guild_t22 and not pInfo(peer)->claim_top22g) top22 = "\nadd_textbox|`w#22: Earn " + Set_Count(guild_t22) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`2500 Spring Tokens|left|7844|\nadd_small_font_button|claimguevent_22|`$Claim Reward|0|0|";
			else if (pInfo(peer)->claim_top22g) top22 = "\nadd_textbox|`^#22: Earn " + Set_Count(guild_t22) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`^500 Spring Tokens|left|7844|";
			else top22 = "\nadd_textbox|`s#22: Earn " + Set_Count(guild_t22) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`s500 Spring Tokens|left|7844|";

			if (guild_point >= guild_t23 and not pInfo(peer)->claim_top23g) top23 = "\nadd_textbox|`w#23: Earn " + Set_Count(guild_t23) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`2750 Spring Tokens|left|7844|\nadd_small_font_button|claimguevent_23|`$Claim Reward|0|0|";
			else if (pInfo(peer)->claim_top23g) top23 = "\nadd_textbox|`^#23: Earn " + Set_Count(guild_t23) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`^750 Spring Tokens|left|7844|";
			else top23 = "\nadd_textbox|`s#23: Earn " + Set_Count(guild_t23) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`s750 Spring Tokens|left|7844|";

			if (guild_point >= guild_t24 and not pInfo(peer)->claim_top24g) top24 = "\nadd_textbox|`w#24: Earn " + Set_Count(guild_t24) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`21,250 Spring Tokens|left|7844|\nadd_small_font_button|claimguevent_24|`$Claim Reward|0|0|";
			else if (pInfo(peer)->claim_top24g) top24 = "\nadd_textbox|`^#24: Earn " + Set_Count(guild_t24) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`^1,250 Spring Tokens|left|7844|";
			else top24 = "\nadd_textbox|`s#24: Earn " + Set_Count(guild_t24) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`s1,250 Spring Tokens|left|7844|";

			if (guild_point >= guild_t25 and not pInfo(peer)->claim_top25g) top25 = "\nadd_textbox|`w#25: Earn " + Set_Count(guild_t25) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`21,500 Spring Tokens|left|7844|\nadd_label_with_icon|small|`21 Spring Emperor's Reward|left|7954|\nadd_small_font_button|claimguevent_25|`$Claim Reward|0|0|";
			else if (pInfo(peer)->claim_top25g) top25 = "\nadd_textbox|`^#25: Earn " + Set_Count(guild_t25) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`^1,500 Spring Tokens|left|7844|\nadd_label_with_icon|small|`^1 Spring Emperor's Reward|left|7954|";
			else top25 = "\nadd_textbox|`s#25: Earn " + Set_Count(guild_t25) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`s1,500 Spring Tokens|left|7844|\nadd_label_with_icon|small|`s1 Spring Emperor's Reward|left|7954|";
		}
		if (guild_event_type == "Summer Clash") {
			if (guild_point >= guild_t1 and not pInfo(peer)->claim_top1g) top1 = "\nadd_textbox|`w#1: Earn " + Set_Count(guild_t1) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`23 Summer Tokens|left|6198|\nadd_small_font_button|claimguevent_1|`$Claim Reward|0|0|";
			else if (pInfo(peer)->claim_top1g) top1 = "\nadd_textbox|`^#1: Earn " + Set_Count(guild_t1) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`^3 Summer Tokens|left|6198|";
			else top1 = "\nadd_textbox|`s#1: Earn " + Set_Count(guild_t1) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`s3 Summer Tokens|left|6198|";

			if (guild_point >= guild_t2 and not pInfo(peer)->claim_top2g) top2 = "\nadd_textbox|`w#2: Earn " + Set_Count(guild_t2) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`28 Summer Tokens|left|6198|\nadd_small_font_button|claimguevent_2|`$Claim Reward|0|0|";
			else if (pInfo(peer)->claim_top2g) top2 = "\nadd_textbox|`^#2: Earn " + Set_Count(guild_t2) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`^8 Summer Tokens|left|6198|";
			else top2 = "\nadd_textbox|`s#2: Earn " + Set_Count(guild_t2) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`s8 Summer Tokens|left|6198|";

			if (guild_point >= guild_t3 and not pInfo(peer)->claim_top3g) top3 = "\nadd_textbox|`w#3: Earn " + Set_Count(guild_t3) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`212 Summer Tokens|left|6198|\nadd_small_font_button|claimguevent_3|`$Claim Reward|0|0|";
			else if (pInfo(peer)->claim_top3g) top3 = "\nadd_textbox|`^#3: Earn " + Set_Count(guild_t3) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`^12 Summer Tokens|left|6198|";
			else top3 = "\nadd_textbox|`s#3: Earn " + Set_Count(guild_t3) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`s12 Summer Tokens|left|6198|";

			if (guild_point >= guild_t4 and not pInfo(peer)->claim_top4g) top4 = "\nadd_textbox|`w#4: Earn " + Set_Count(guild_t4) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`218 Summer Tokens|left|6198|\nadd_small_font_button|claimguevent_4|`$Claim Reward|0|0|";
			else if (pInfo(peer)->claim_top4g) top4 = "\nadd_textbox|`^#4: Earn " + Set_Count(guild_t4) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`^18 Summer Tokens|left|6198|";
			else top4 = "\nadd_textbox|`s#4: Earn " + Set_Count(guild_t4) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`s18 Summer Tokens|left|6198|";

			if (guild_point >= guild_t5 and not pInfo(peer)->claim_top5g) top5 = "\nadd_textbox|`w#5: Earn " + Set_Count(guild_t5) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`222 Summer Tokens|left|6198|\nadd_label_with_icon|small|`21 Summer Squire's Reward|left|6200|\nadd_small_font_button|claimguevent_5|`$Claim Reward|0|0|";
			else if (pInfo(peer)->claim_top5g) top5 = "\nadd_textbox|`^#5: Earn " + Set_Count(guild_t5) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`^22 Summer Tokens|left|6198|\nadd_label_with_icon|small|`^1 Summer Squire's Reward|left|6200|";
			else top5 = "\nadd_textbox|`s#5: Earn " + Set_Count(guild_t5) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`s22 Summer Tokens|left|6198|\nadd_label_with_icon|small|`s1 Summer Squire's Reward|left|6200|";

			if (guild_point >= guild_t6 and not pInfo(peer)->claim_top6g) top6 = "\nadd_textbox|`w#6: Earn " + Set_Count(guild_t6) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`225 Summer Tokens|left|6198|\nadd_small_font_button|claimguevent_6|`$Claim Reward|0|0|";
			else if (pInfo(peer)->claim_top6g) top6 = "\nadd_textbox|`^#6: Earn " + Set_Count(guild_t6) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`^25 Summer Tokens|left|6198|";
			else top6 = "\nadd_textbox|`s#6: Earn " + Set_Count(guild_t6) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`s25 Summer Tokens|left|6198|";

			if (guild_point >= guild_t7 and not pInfo(peer)->claim_top7g) top7 = "\nadd_textbox|`w#7: Earn " + Set_Count(guild_t7) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`228 Summer Tokens|left|6198|\nadd_small_font_button|claimguevent_7|`$Claim Reward|0|0|";
			else if (pInfo(peer)->claim_top7g) top7 = "\nadd_textbox|`^#7: Earn " + Set_Count(guild_t7) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`^28 Summer Tokens|left|6198|";
			else top7 = "\nadd_textbox|`s#7: Earn " + Set_Count(guild_t7) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`s28 Summer Tokens|left|6198|";

			if (guild_point >= guild_t8 and not pInfo(peer)->claim_top8g) top8 = "\nadd_textbox|`w#8: Earn " + Set_Count(guild_t8) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`230 Summer Tokens|left|6198|\nadd_small_font_button|claimguevent_8|`$Claim Reward|0|0|";
			else if (pInfo(peer)->claim_top8g) top8 = "\nadd_textbox|`^#8: Earn " + Set_Count(guild_t8) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`^30 Summer Tokens|left|6198|";
			else top8 = "\nadd_textbox|`s#8: Earn " + Set_Count(guild_t8) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`s30 Summer Tokens|left|6198|";

			if (guild_point >= guild_t9 and not pInfo(peer)->claim_top9g) top9 = "\nadd_textbox|`w#9: Earn " + Set_Count(guild_t9) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`235 Summer Tokens|left|6198|\nadd_small_font_button|claimguevent_9|`$Claim Reward|0|0|";
			else if (pInfo(peer)->claim_top9g) top9 = "\nadd_textbox|`^#9: Earn " + Set_Count(guild_t9) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`^35 Summer Tokens|left|6198|";
			else top9 = "\nadd_textbox|`s#9: Earn " + Set_Count(guild_t9) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`s35 Summer Tokens|left|6198|";

			if (guild_point >= guild_t10 and not pInfo(peer)->claim_top10g) top10 = "\nadd_textbox|`w#10: Earn 2,090,000 points to claim this rewards:|left|\nadd_label_with_icon|small|`240 Summer Tokens|left|6198|\nadd_label_with_icon|small|`21 Summer Knight's Reward|left|6200|\nadd_small_font_button|claimguevent_10|`$Claim Reward|0|0|";
			else if (pInfo(peer)->claim_top10g) top10 = "\nadd_textbox|`^#10: Earn 2,090,000 points to claim this rewards:|left|\nadd_label_with_icon|small|`^40 Summer Tokens|left|6198|\nadd_label_with_icon|small|`^1 Summer Knight's Reward|left|6200|";
			else top10 = "\nadd_textbox|`s#10: Earn " + Set_Count(guild_t10) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`s40 Summer Tokens|left|6198|\nadd_label_with_icon|small|`s1 Summer Knight's Reward|left|6200|";

			if (guild_point >= guild_t11 and not pInfo(peer)->claim_top11g) top11 = "\nadd_textbox|`w#11: Earn " + Set_Count(guild_t11) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`250 Summer Tokens|left|6198|\nadd_small_font_button|claimguevent_11|`$Claim Reward|0|0|";
			else if (pInfo(peer)->claim_top11g) top11 = "\nadd_textbox|`^#11: Earn " + Set_Count(guild_t11) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`^50 Summer Tokens|left|6198|";
			else top11 = "\nadd_textbox|`s#11: Earn " + Set_Count(guild_t11) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`s50 Summer Tokens|left|6198|";

			if (guild_point >= guild_t12 and not pInfo(peer)->claim_top12g) top12 = "\nadd_textbox|`w#12: Earn " + Set_Count(guild_t12) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`260 Summer Tokens|left|6198|\nadd_small_font_button|claimguevent_12|`$Claim Reward|0|0|";
			else if (pInfo(peer)->claim_top12g) top12 = "\nadd_textbox|`^#12: Earn " + Set_Count(guild_t12) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`^60 Summer Tokens|left|6198|";
			else top12 = "\nadd_textbox|`s#12: Earn " + Set_Count(guild_t12) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`s60 Summer Tokens|left|6198|";

			if (guild_point >= guild_t13 and not pInfo(peer)->claim_top13g) top13 = "\nadd_textbox|`w#13: Earn " + Set_Count(guild_t13) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`275 Summer Tokens|left|6198|\nadd_small_font_button|claimguevent_13|`$Claim Reward|0|0|";
			else if (pInfo(peer)->claim_top13g) top13 = "\nadd_textbox|`^#13: Earn " + Set_Count(guild_t13) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`^75 Summer Tokens|left|6198|";
			else top13 = "\nadd_textbox|`s#13: Earn " + Set_Count(guild_t13) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`s75 Summer Tokens|left|6198|";

			if (guild_point >= guild_t14 and not pInfo(peer)->claim_top14g) top14 = "\nadd_textbox|`w#14: Earn " + Set_Count(guild_t14) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`2100 Summer Tokens|left|6198|\nadd_small_font_button|claimguevent_14|`$Claim Reward|0|0|";
			else if (pInfo(peer)->claim_top14g) top14 = "\nadd_textbox|`^#14: Earn " + Set_Count(guild_t14) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`^100 Summer Tokens|left|6198|";
			else top14 = "\nadd_textbox|`s#14: Earn " + Set_Count(guild_t14) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`s100 Summer Tokens|left|6198|";

			if (guild_point >= guild_t15 and not pInfo(peer)->claim_top15g) top15 = "\nadd_textbox|`w#15: Earn 8,930,000 points to claim this rewards:|left|\nadd_label_with_icon|small|`2125 Summer Tokens|left|6198|\nadd_label_with_icon|small|`21 Summer Noble's Reward|left|6200|\nadd_small_font_button|claimguevent_15|`$Claim Reward|0|0|";
			else if (pInfo(peer)->claim_top15g) top15 = "\nadd_textbox|`^#15: Earn 8,930,000 points to claim this rewards:|left|\nadd_label_with_icon|small|`^125 Summer Tokens|left|6198|\nadd_label_with_icon|small|`^1 Summer Noble's Reward|left|6200|";
			else top15 = "\nadd_textbox|`s#15: Earn " + Set_Count(guild_t15) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`s125 Summer Tokens|left|6198|\nadd_label_with_icon|small|`s1 Summer Noble's Reward|left|6200|";

			if (guild_point >= guild_t16 and not pInfo(peer)->claim_top16g) top16 = "\nadd_textbox|`w#16: Earn " + Set_Count(guild_t16) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`2150 Summer Tokens|left|6198|\nadd_small_font_button|claimguevent_16|`$Claim Reward|0|0|";
			else if (pInfo(peer)->claim_top16g) top16 = "\nadd_textbox|`^#16: Earn " + Set_Count(guild_t16) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`^150 Summer Tokens|left|6198|";
			else top16 = "\nadd_textbox|`s#16: Earn " + Set_Count(guild_t16) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`s150 Summer Tokens|left|6198|";

			if (guild_point >= guild_t17 and not pInfo(peer)->claim_top17g) top17 = "\nadd_textbox|`w#17: Earn " + Set_Count(guild_t17) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`2175 Summer Tokens|left|6198|\nadd_small_font_button|claimguevent_17|`$Claim Reward|0|0|";
			else if (pInfo(peer)->claim_top17g) top17 = "\nadd_textbox|`^#17: Earn " + Set_Count(guild_t17) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`^175 Summer Tokens|left|6198|";
			else top17 = "\nadd_textbox|`s#17: Earn " + Set_Count(guild_t17) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`s175 Summer Tokens|left|6198|";

			if (guild_point >= guild_t18 and not pInfo(peer)->claim_top18g) top18 = "\nadd_textbox|`w#18: Earn " + Set_Count(guild_t18) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`2200 Summer Tokens|left|6198|\nadd_small_font_button|claimguevent_18|`$Claim Reward|0|0|";
			else if (pInfo(peer)->claim_top18g) top18 = "\nadd_textbox|`^#18: Earn " + Set_Count(guild_t18) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`^200 Summer Tokens|left|6198|";
			else top18 = "\nadd_textbox|`s#18: Earn " + Set_Count(guild_t18) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`s200 Summer Tokens|left|6198|";

			if (guild_point >= guild_t19 and not pInfo(peer)->claim_top19g) top19 = "\nadd_textbox|`w#19: Earn " + Set_Count(guild_t19) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`2225 Summer Tokens|left|6198|\nadd_small_font_button|claimguevent_19|`$Claim Reward|0|0|";
			else if (pInfo(peer)->claim_top19g) top19 = "\nadd_textbox|`^#19: Earn " + Set_Count(guild_t19) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`^225 Summer Tokens|left|6198|";
			else top19 = "\nadd_textbox|`s#19: Earn " + Set_Count(guild_t19) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`s225 Summer Tokens|left|6198|";

			if (guild_point >= guild_t20 and not pInfo(peer)->claim_top20g) top20 = "\nadd_textbox|`w#20: Earn " + Set_Count(guild_t20) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`2275 Summer Tokens|left|6198|\nadd_label_with_icon|small|`21 Summer King's Reward|left|6200|\nadd_small_font_button|claimguevent_20|`$Claim Reward|0|0|";
			else if (pInfo(peer)->claim_top20g) top20 = "\nadd_textbox|`^#20: Earn " + Set_Count(guild_t20) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`^275 Summer Tokens|left|6198|\nadd_label_with_icon|small|`^1 Summer King's Reward|left|6200|";
			else top20 = "\nadd_textbox|`s#20: Earn " + Set_Count(guild_t20) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`s275 Summer Tokens|left|6198|\nadd_label_with_icon|small|`s1 Summer King's Reward|left|6200|";

			if (guild_point >= guild_t21 and not pInfo(peer)->claim_top21g) top21 = "\nadd_textbox|`w#21: Earn " + Set_Count(guild_t21) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`2400 Summer Tokens|left|6198|\nadd_small_font_button|claimguevent_21|`$Claim Reward|0|0|";
			else if (pInfo(peer)->claim_top21g) top21 = "\nadd_textbox|`^#21: Earn " + Set_Count(guild_t21) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`^400 Summer Tokens|left|6198|";
			else top21 = "\nadd_textbox|`s#21: Earn " + Set_Count(guild_t21) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`s400 Summer Tokens|left|6198|";

			if (guild_point >= guild_t22 and not pInfo(peer)->claim_top22g) top22 = "\nadd_textbox|`w#22: Earn " + Set_Count(guild_t22) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`2500 Summer Tokens|left|6198|\nadd_small_font_button|claimguevent_22|`$Claim Reward|0|0|";
			else if (pInfo(peer)->claim_top22g) top22 = "\nadd_textbox|`^#22: Earn " + Set_Count(guild_t22) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`^500 Summer Tokens|left|6198|";
			else top22 = "\nadd_textbox|`s#22: Earn " + Set_Count(guild_t22) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`s500 Summer Tokens|left|6198|";

			if (guild_point >= guild_t23 and not pInfo(peer)->claim_top23g) top23 = "\nadd_textbox|`w#23: Earn " + Set_Count(guild_t23) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`2750 Summer Tokens|left|6198|\nadd_small_font_button|claimguevent_23|`$Claim Reward|0|0|";
			else if (pInfo(peer)->claim_top23g) top23 = "\nadd_textbox|`^#23: Earn " + Set_Count(guild_t23) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`^750 Summer Tokens|left|6198|";
			else top23 = "\nadd_textbox|`s#23: Earn " + Set_Count(guild_t23) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`s750 Summer Tokens|left|6198|";

			if (guild_point >= guild_t24 and not pInfo(peer)->claim_top24g) top24 = "\nadd_textbox|`w#24: Earn " + Set_Count(guild_t24) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`21,250 Summer Tokens|left|6198|\nadd_small_font_button|claimguevent_24|`$Claim Reward|0|0|";
			else if (pInfo(peer)->claim_top24g) top24 = "\nadd_textbox|`^#24: Earn " + Set_Count(guild_t24) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`^1,250 Summer Tokens|left|6198|";
			else top24 = "\nadd_textbox|`s#24: Earn " + Set_Count(guild_t24) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`s1,250 Summer Tokens|left|6198|";

			if (guild_point >= guild_t25 and not pInfo(peer)->claim_top25g) top25 = "\nadd_textbox|`w#25: Earn " + Set_Count(guild_t25) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`21,500 Summer Tokens|left|6198|\nadd_label_with_icon|small|`21 Summer Emperor's Reward|left|6200|\nadd_small_font_button|claimguevent_25|`$Claim Reward|0|0|";
			else if (pInfo(peer)->claim_top25g) top25 = "\nadd_textbox|`^#25: Earn " + Set_Count(guild_t25) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`^1,500 Summer Tokens|left|6198|\nadd_label_with_icon|small|`^1 Summer Emperor's Reward|left|6200|";
			else top25 = "\nadd_textbox|`s#25: Earn " + Set_Count(guild_t25) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`s1,500 Summer Tokens|left|6198|\nadd_label_with_icon|small|`s1 Summer Emperor's Reward|left|6200|";
		}
		if (guild_event_type == "Winter Clash") {
			if (guild_point >= guild_t1 and not pInfo(peer)->claim_top1g) top1 = "\nadd_textbox|`w#1: Earn " + Set_Count(guild_t1) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`23 Winter Tokens|left|7328|\nadd_small_font_button|claimguevent_1|`$Claim Reward|0|0|";
			else if (pInfo(peer)->claim_top1g) top1 = "\nadd_textbox|`^#1: Earn " + Set_Count(guild_t1) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`^3 Winter Tokens|left|7328|";
			else top1 = "\nadd_textbox|`s#1: Earn " + Set_Count(guild_t1) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`s3 Winter Tokens|left|7328|";

			if (guild_point >= guild_t2 and not pInfo(peer)->claim_top2g) top2 = "\nadd_textbox|`w#2: Earn " + Set_Count(guild_t2) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`28 Winter Tokens|left|7328|\nadd_small_font_button|claimguevent_2|`$Claim Reward|0|0|";
			else if (pInfo(peer)->claim_top2g) top2 = "\nadd_textbox|`^#2: Earn " + Set_Count(guild_t2) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`^8 Winter Tokens|left|7328|";
			else top2 = "\nadd_textbox|`s#2: Earn " + Set_Count(guild_t2) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`s8 Winter Tokens|left|7328|";

			if (guild_point >= guild_t3 and not pInfo(peer)->claim_top3g) top3 = "\nadd_textbox|`w#3: Earn " + Set_Count(guild_t3) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`212 Winter Tokens|left|7328|\nadd_small_font_button|claimguevent_3|`$Claim Reward|0|0|";
			else if (pInfo(peer)->claim_top3g) top3 = "\nadd_textbox|`^#3: Earn " + Set_Count(guild_t3) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`^12 Winter Tokens|left|7328|";
			else top3 = "\nadd_textbox|`s#3: Earn " + Set_Count(guild_t3) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`s12 Winter Tokens|left|7328|";

			if (guild_point >= guild_t4 and not pInfo(peer)->claim_top4g) top4 = "\nadd_textbox|`w#4: Earn " + Set_Count(guild_t4) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`218 Winter Tokens|left|7328|\nadd_small_font_button|claimguevent_4|`$Claim Reward|0|0|";
			else if (pInfo(peer)->claim_top4g) top4 = "\nadd_textbox|`^#4: Earn " + Set_Count(guild_t4) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`^18 Winter Tokens|left|7328|";
			else top4 = "\nadd_textbox|`s#4: Earn " + Set_Count(guild_t4) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`s18 Winter Tokens|left|7328|";

			if (guild_point >= guild_t5 and not pInfo(peer)->claim_top5g) top5 = "\nadd_textbox|`w#5: Earn " + Set_Count(guild_t5) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`222 Winter Tokens|left|7328|\nadd_label_with_icon|small|`21 Winter Squire's Reward|left|7484|\nadd_small_font_button|claimguevent_5|`$Claim Reward|0|0|";
			else if (pInfo(peer)->claim_top5g) top5 = "\nadd_textbox|`^#5: Earn " + Set_Count(guild_t5) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`^22 Winter Tokens|left|7328|\nadd_label_with_icon|small|`^1 Winter Squire's Reward|left|7484|";
			else top5 = "\nadd_textbox|`s#5: Earn " + Set_Count(guild_t5) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`s22 Winter Tokens|left|7328|\nadd_label_with_icon|small|`s1 Winter Squire's Reward|left|7484|";

			if (guild_point >= guild_t6 and not pInfo(peer)->claim_top6g) top6 = "\nadd_textbox|`w#6: Earn " + Set_Count(guild_t6) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`225 Winter Tokens|left|7328|\nadd_small_font_button|claimguevent_6|`$Claim Reward|0|0|";
			else if (pInfo(peer)->claim_top6g) top6 = "\nadd_textbox|`^#6: Earn " + Set_Count(guild_t6) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`^25 Winter Tokens|left|7328|";
			else top6 = "\nadd_textbox|`s#6: Earn " + Set_Count(guild_t6) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`s25 Winter Tokens|left|7328|";

			if (guild_point >= guild_t7 and not pInfo(peer)->claim_top7g) top7 = "\nadd_textbox|`w#7: Earn " + Set_Count(guild_t7) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`228 Winter Tokens|left|7328|\nadd_small_font_button|claimguevent_7|`$Claim Reward|0|0|";
			else if (pInfo(peer)->claim_top7g) top7 = "\nadd_textbox|`^#7: Earn " + Set_Count(guild_t7) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`^28 Winter Tokens|left|7328|";
			else top7 = "\nadd_textbox|`s#7: Earn " + Set_Count(guild_t7) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`s28 Winter Tokens|left|7328|";

			if (guild_point >= guild_t8 and not pInfo(peer)->claim_top8g) top8 = "\nadd_textbox|`w#8: Earn " + Set_Count(guild_t8) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`230 Winter Tokens|left|7328|\nadd_small_font_button|claimguevent_8|`$Claim Reward|0|0|";
			else if (pInfo(peer)->claim_top8g) top8 = "\nadd_textbox|`^#8: Earn " + Set_Count(guild_t8) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`^30 Winter Tokens|left|7328|";
			else top8 = "\nadd_textbox|`s#8: Earn " + Set_Count(guild_t8) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`s30 Winter Tokens|left|7328|";

			if (guild_point >= guild_t9 and not pInfo(peer)->claim_top9g) top9 = "\nadd_textbox|`w#9: Earn " + Set_Count(guild_t9) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`235 Winter Tokens|left|7328|\nadd_small_font_button|claimguevent_9|`$Claim Reward|0|0|";
			else if (pInfo(peer)->claim_top9g) top9 = "\nadd_textbox|`^#9: Earn " + Set_Count(guild_t9) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`^35 Winter Tokens|left|7328|";
			else top9 = "\nadd_textbox|`s#9: Earn " + Set_Count(guild_t9) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`s35 Winter Tokens|left|7328|";

			if (guild_point >= guild_t10 and not pInfo(peer)->claim_top10g) top10 = "\nadd_textbox|`w#10: Earn 2,090,000 points to claim this rewards:|left|\nadd_label_with_icon|small|`240 Winter Tokens|left|7328|\nadd_label_with_icon|small|`21 Winter Knight's Reward|left|7484|\nadd_small_font_button|claimguevent_10|`$Claim Reward|0|0|";
			else if (pInfo(peer)->claim_top10g) top10 = "\nadd_textbox|`^#10: Earn 2,090,000 points to claim this rewards:|left|\nadd_label_with_icon|small|`^40 Winter Tokens|left|7328|\nadd_label_with_icon|small|`^1 Winter Knight's Reward|left|7484|";
			else top10 = "\nadd_textbox|`s#10: Earn " + Set_Count(guild_t10) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`s40 Winter Tokens|left|7328|\nadd_label_with_icon|small|`s1 Winter Knight's Reward|left|7484|";

			if (guild_point >= guild_t11 and not pInfo(peer)->claim_top11g) top11 = "\nadd_textbox|`w#11: Earn " + Set_Count(guild_t11) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`250 Winter Tokens|left|7328|\nadd_small_font_button|claimguevent_11|`$Claim Reward|0|0|";
			else if (pInfo(peer)->claim_top11g) top11 = "\nadd_textbox|`^#11: Earn " + Set_Count(guild_t11) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`^50 Winter Tokens|left|7328|";
			else top11 = "\nadd_textbox|`s#11: Earn " + Set_Count(guild_t11) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`s50 Winter Tokens|left|7328|";

			if (guild_point >= guild_t12 and not pInfo(peer)->claim_top12g) top12 = "\nadd_textbox|`w#12: Earn " + Set_Count(guild_t12) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`260 Winter Tokens|left|7328|\nadd_small_font_button|claimguevent_12|`$Claim Reward|0|0|";
			else if (pInfo(peer)->claim_top12g) top12 = "\nadd_textbox|`^#12: Earn " + Set_Count(guild_t12) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`^60 Winter Tokens|left|7328|";
			else top12 = "\nadd_textbox|`s#12: Earn " + Set_Count(guild_t12) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`s60 Winter Tokens|left|7328|";

			if (guild_point >= guild_t13 and not pInfo(peer)->claim_top13g) top13 = "\nadd_textbox|`w#13: Earn " + Set_Count(guild_t13) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`275 Winter Tokens|left|7328|\nadd_small_font_button|claimguevent_13|`$Claim Reward|0|0|";
			else if (pInfo(peer)->claim_top13g) top13 = "\nadd_textbox|`^#13: Earn " + Set_Count(guild_t13) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`^75 Winter Tokens|left|7328|";
			else top13 = "\nadd_textbox|`s#13: Earn " + Set_Count(guild_t13) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`s75 Winter Tokens|left|7328|";

			if (guild_point >= guild_t14 and not pInfo(peer)->claim_top14g) top14 = "\nadd_textbox|`w#14: Earn " + Set_Count(guild_t14) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`2100 Winter Tokens|left|7328|\nadd_small_font_button|claimguevent_14|`$Claim Reward|0|0|";
			else if (pInfo(peer)->claim_top14g) top14 = "\nadd_textbox|`^#14: Earn " + Set_Count(guild_t14) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`^100 Winter Tokens|left|7328|";
			else top14 = "\nadd_textbox|`s#14: Earn " + Set_Count(guild_t14) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`s100 Winter Tokens|left|7328|";

			if (guild_point >= guild_t15 and not pInfo(peer)->claim_top15g) top15 = "\nadd_textbox|`w#15: Earn 8,930,000 points to claim this rewards:|left|\nadd_label_with_icon|small|`2125 Winter Tokens|left|7328|\nadd_label_with_icon|small|`21 Winter Noble's Reward|left|7484|\nadd_small_font_button|claimguevent_15|`$Claim Reward|0|0|";
			else if (pInfo(peer)->claim_top15g) top15 = "\nadd_textbox|`^#15: Earn 8,930,000 points to claim this rewards:|left|\nadd_label_with_icon|small|`^125 Winter Tokens|left|7328|\nadd_label_with_icon|small|`^1 Winter Noble's Reward|left|7484|";
			else top15 = "\nadd_textbox|`s#15: Earn " + Set_Count(guild_t15) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`s125 Winter Tokens|left|7328|\nadd_label_with_icon|small|`s1 Winter Noble's Reward|left|7484|";

			if (guild_point >= guild_t16 and not pInfo(peer)->claim_top16g) top16 = "\nadd_textbox|`w#16: Earn " + Set_Count(guild_t16) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`2150 Winter Tokens|left|7328|\nadd_small_font_button|claimguevent_16|`$Claim Reward|0|0|";
			else if (pInfo(peer)->claim_top16g) top16 = "\nadd_textbox|`^#16: Earn " + Set_Count(guild_t16) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`^150 Winter Tokens|left|7328|";
			else top16 = "\nadd_textbox|`s#16: Earn " + Set_Count(guild_t16) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`s150 Winter Tokens|left|7328|";

			if (guild_point >= guild_t17 and not pInfo(peer)->claim_top17g) top17 = "\nadd_textbox|`w#17: Earn " + Set_Count(guild_t17) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`2175 Winter Tokens|left|7328|\nadd_small_font_button|claimguevent_17|`$Claim Reward|0|0|";
			else if (pInfo(peer)->claim_top17g) top17 = "\nadd_textbox|`^#17: Earn " + Set_Count(guild_t17) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`^175 Winter Tokens|left|7328|";
			else top17 = "\nadd_textbox|`s#17: Earn " + Set_Count(guild_t17) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`s175 Winter Tokens|left|7328|";

			if (guild_point >= guild_t18 and not pInfo(peer)->claim_top18g) top18 = "\nadd_textbox|`w#18: Earn " + Set_Count(guild_t18) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`2200 Winter Tokens|left|7328|\nadd_small_font_button|claimguevent_18|`$Claim Reward|0|0|";
			else if (pInfo(peer)->claim_top18g) top18 = "\nadd_textbox|`^#18: Earn " + Set_Count(guild_t18) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`^200 Winter Tokens|left|7328|";
			else top18 = "\nadd_textbox|`s#18: Earn " + Set_Count(guild_t18) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`s200 Winter Tokens|left|7328|";

			if (guild_point >= guild_t19 and not pInfo(peer)->claim_top19g) top19 = "\nadd_textbox|`w#19: Earn " + Set_Count(guild_t19) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`2225 Winter Tokens|left|7328|\nadd_small_font_button|claimguevent_19|`$Claim Reward|0|0|";
			else if (pInfo(peer)->claim_top19g) top19 = "\nadd_textbox|`^#19: Earn " + Set_Count(guild_t19) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`^225 Winter Tokens|left|7328|";
			else top19 = "\nadd_textbox|`s#19: Earn " + Set_Count(guild_t19) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`s225 Winter Tokens|left|7328|";

			if (guild_point >= guild_t20 and not pInfo(peer)->claim_top20g) top20 = "\nadd_textbox|`w#20: Earn " + Set_Count(guild_t20) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`2275 Winter Tokens|left|7328|\nadd_label_with_icon|small|`21 Winter King's Reward|left|7484|\nadd_small_font_button|claimguevent_20|`$Claim Reward|0|0|";
			else if (pInfo(peer)->claim_top20g) top20 = "\nadd_textbox|`^#20: Earn " + Set_Count(guild_t20) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`^275 Winter Tokens|left|7328|\nadd_label_with_icon|small|`^1 Winter King's Reward|left|7484|";
			else top20 = "\nadd_textbox|`s#20: Earn " + Set_Count(guild_t20) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`s275 Winter Tokens|left|7328|\nadd_label_with_icon|small|`s1 Winter King's Reward|left|7484|";

			if (guild_point >= guild_t21 and not pInfo(peer)->claim_top21g) top21 = "\nadd_textbox|`w#21: Earn " + Set_Count(guild_t21) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`2400 Winter Tokens|left|7328|\nadd_small_font_button|claimguevent_21|`$Claim Reward|0|0|";
			else if (pInfo(peer)->claim_top21g) top21 = "\nadd_textbox|`^#21: Earn " + Set_Count(guild_t21) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`^400 Winter Tokens|left|7328|";
			else top21 = "\nadd_textbox|`s#21: Earn " + Set_Count(guild_t21) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`s400 Winter Tokens|left|7328|";

			if (guild_point >= guild_t22 and not pInfo(peer)->claim_top22g) top22 = "\nadd_textbox|`w#22: Earn " + Set_Count(guild_t22) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`2500 Winter Tokens|left|7328|\nadd_small_font_button|claimguevent_22|`$Claim Reward|0|0|";
			else if (pInfo(peer)->claim_top22g) top22 = "\nadd_textbox|`^#22: Earn " + Set_Count(guild_t22) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`^500 Winter Tokens|left|7328|";
			else top22 = "\nadd_textbox|`s#22: Earn " + Set_Count(guild_t22) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`s500 Winter Tokens|left|7328|";

			if (guild_point >= guild_t23 and not pInfo(peer)->claim_top23g) top23 = "\nadd_textbox|`w#23: Earn " + Set_Count(guild_t23) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`2750 Winter Tokens|left|7328|\nadd_small_font_button|claimguevent_23|`$Claim Reward|0|0|";
			else if (pInfo(peer)->claim_top23g) top23 = "\nadd_textbox|`^#23: Earn " + Set_Count(guild_t23) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`^750 Winter Tokens|left|7328|";
			else top23 = "\nadd_textbox|`s#23: Earn " + Set_Count(guild_t23) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`s750 Winter Tokens|left|7328|";

			if (guild_point >= guild_t24 and not pInfo(peer)->claim_top24g) top24 = "\nadd_textbox|`w#24: Earn " + Set_Count(guild_t24) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`21,250 Winter Tokens|left|7328|\nadd_small_font_button|claimguevent_24|`$Claim Reward|0|0|";
			else if (pInfo(peer)->claim_top24g) top24 = "\nadd_textbox|`^#24: Earn " + Set_Count(guild_t24) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`^1,250 Winter Tokens|left|7328|";
			else top24 = "\nadd_textbox|`s#24: Earn " + Set_Count(guild_t24) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`s1,250 Winter Tokens|left|7328|";

			if (guild_point >= guild_t25 and not pInfo(peer)->claim_top25g) top25 = "\nadd_textbox|`w#25: Earn " + Set_Count(guild_t25) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`21,500 Winter Tokens|left|7328|\nadd_label_with_icon|small|`21 Winter Emperor's Reward|left|7484|\nadd_small_font_button|claimguevent_25|`$Claim Reward|0|0|";
			else if (pInfo(peer)->claim_top25g) top25 = "\nadd_textbox|`^#25: Earn " + Set_Count(guild_t25) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`^1,500 Winter Tokens|left|7328|\nadd_label_with_icon|small|`^1 Winter Emperor's Reward|left|7484|";
			else top25 = "\nadd_textbox|`s#25: Earn " + Set_Count(guild_t25) + " points to claim this rewards:|left|\nadd_label_with_icon|small|`s1,500 Winter Tokens|left|7328|\nadd_label_with_icon|small|`s1 Winter Emperor's Reward|left|7484|";
		}
		string claim_all = guild_point >= guild_t1 and not pInfo(peer)->claim_top1g or guild_point >= guild_t2 and not pInfo(peer)->claim_top2g or guild_point >= guild_t3 and not pInfo(peer)->claim_top3g or guild_point >= guild_t4 and not pInfo(peer)->claim_top4g or guild_point >= guild_t5 and not pInfo(peer)->claim_top5g or guild_point >= guild_t6 and not pInfo(peer)->claim_top6g or guild_point >= guild_t7 and not pInfo(peer)->claim_top7g or guild_point >= guild_t8 and not pInfo(peer)->claim_top8g or guild_point >= guild_t9 and not pInfo(peer)->claim_top9g or guild_point >= guild_t10 and not pInfo(peer)->claim_top10g or guild_point >= guild_t11 and not pInfo(peer)->claim_top11g or guild_point >= guild_t12 and not pInfo(peer)->claim_top12g or guild_point >= guild_t13 and not pInfo(peer)->claim_top13g or guild_point >= guild_t14 and not pInfo(peer)->claim_top14g or guild_point >= guild_t15 and not pInfo(peer)->claim_top15g or guild_point >= guild_t16 and not pInfo(peer)->claim_top16g or guild_point >= guild_t17 and not pInfo(peer)->claim_top17g or guild_point >= guild_t18 and not pInfo(peer)->claim_top18g or guild_point >= guild_t19 and not pInfo(peer)->claim_top19g or guild_point >= guild_t20 and not pInfo(peer)->claim_top20g or guild_point >= guild_t20 and not pInfo(peer)->claim_top21g or guild_point >= guild_t22 and not pInfo(peer)->claim_top22g or guild_point >= guild_t23 and not pInfo(peer)->claim_top23g or guild_point >= guild_t24 and not pInfo(peer)->claim_top24g or guild_point >= guild_t25 and not pInfo(peer)->claim_top25g ? "\nadd_small_font_button|claim_all_guevent|`wClaim All Available Rewards|noflags|0|0|" : "";
		VarList::OnDialogRequest(peer, SetColor(peer) + "set_default_color|\nadd_label_with_icon|big|`wGuild Event Rewards|left|6012|\nadd_smalltext|`$Earn rewards with your guild by participating in monthly events! The points you and your guildmates earn by helping GrowTech will unlock the milestone below.|left|\nadd_smalltext|`5Note: `$A new set of goals and rewards will appear each month, and progress does not carry over between events!|left|\nadd_spacer|small|\nadd_button|back|Back|noflags|0|0|\nadd_spacer|small|" + score + "|\nadd_spacer|small|" + (claim_all.empty() ? "" : claim_all) + top1 + "|\nadd_spacer|small|" + top2 + "|\nadd_spacer|small|" + top3 + "|\nadd_spacer|small|" + top4 + "|\nadd_spacer|small|" + top5 + "|\nadd_spacer|small|" + top6 + "|\nadd_spacer|small|" + top7 + "|\nadd_spacer|small|" + top8 + "|\nadd_spacer|small|" + top9 + "|\nadd_spacer|small|" + top10 + "|\nadd_spacer|small|" + top11 + "|\nadd_spacer|small|" + top12 + "|\nadd_spacer|small|" + top13 + "|\nadd_spacer|small|" + top14 + "|\nadd_spacer|small|" + top15 + "|\nadd_spacer|small|" + top16 + "|\nadd_spacer|small|" + top17 + "|\nadd_spacer|small|" + top18 + "|\nadd_spacer|small|" + top19 + "|\nadd_spacer|small|" + top20 + "|\nadd_spacer|small|" + top21 + "|\nadd_spacer|small|" + top22 + "|\nadd_spacer|small|" + top23 + "|\nadd_spacer|small|" + top24 + "|\nadd_spacer|small|" + top25 + (claim_all.empty() ? "" : claim_all) + "|\nadd_spacer|small|\nend_dialog|backto_leaderboard|Close|Back|\nadd_quick_exit|");
	}
	static void Event_Leaderboard(ENetPeer* peer, std::string type = "Seasonal_Clash", int delay = 0) {
		std::string tabs = SetColor(peer) + "set_default_color|`o\nstart_custom_tabs|"
			"\nadd_custom_button|Seasonal_Clash|image:interface/large/gui_button_tabs.rttex;image_size:228,92;frame:" + a + (type == "Seasonal_Clash" ? "1,25" : "0,25") + ";width:0.14;min_width:60;|"
			"\nadd_custom_button|Recycle_Lock|image:interface/large/gui_button_tabs.rttex;image_size:228,92;frame:" + a + (type == "Recycle_Lock" ? "1,24" : "0,24") + ";width:0.14;min_width:60;|"
			"\nadd_custom_button|Punched|image:interface/large/gui_button_tabs.rttex;image_size:228,92;frame:" + a + (type == "Punched" ? "1,26" : "0,26") + ";width:0.14;min_width:60;|"
			"\nadd_custom_button|Richest|image:interface/large/gui_button_tabs.rttex;image_size:228,92;frame:" + a + (type == "Richest" ? "1,27" : "0,27") + ";width:0.14;min_width:60;|"
			"\nend_custom_tabs|";
		if (type == "Seasonal_Clash") {
			EventPool::Load::Guild_Leaderboard();
			pInfo(peer)->personal_event.clear(), pInfo(peer)->guild_event.clear();
			long long time_ = time(nullptr);
			std::string prize_guild = "", prize_personal = "", last_guild = "", last_person = "\nadd_smalltext|`oPersonal Event Rank: N/A   Contribution: 0|left|";
			if (top_basher.size() == 0 && Event()->Can_Event) {
				/*Guild Event*/
				{
					if (pInfo(peer)->guild_id != 0) {
						if (last_guild.empty()) last_guild = "\nadd_smalltext|`oGuild Event Rank: N/A   Contribution: 0|left|";
						std::vector<std::pair<long long int, std::string>> top_tiers = last_guild_last;
						sort(top_tiers.begin(), top_tiers.end());
						reverse(top_tiers.begin(), top_tiers.end());
						top_tiers.resize((top_tiers.size() >= 10 ? 10 : top_tiers.size()));
						for (uint8_t i = 0; i < top_tiers.size(); i++) {
							if (pInfo(peer)->guild_id == atoi(top_tiers[i].second.c_str())) {
								if (top_tiers[i].first > 0) last_guild = "\nadd_smalltext|Guild Event Rank: " + to_string(i + 1) + "    Contribution: " + Set_Count(top_tiers[i].first) + "|";
								else last_guild = "\nadd_smalltext|`oGuild Event Rank: N/A   Contribution: 0|left|";
							}
						}
					}
				}
				/*Personal Event*/
				{
					if (last_person.empty()) last_person = "\nadd_smalltext|`oPersonal Event Rank: N/A   Contribution: 0|left|";
					std::vector<std::pair<long long int, std::string>> top_tiers = last_basher_list;
					sort(top_tiers.begin(), top_tiers.end());
					reverse(top_tiers.begin(), top_tiers.end());
					top_tiers.resize((top_tiers.size() >= 10 ? 10 : top_tiers.size()));
					for (uint8_t i = 0; i < top_tiers.size(); i++) {
						if (top_tiers[i].second == pInfo(peer)->tankIDName) {
							if (top_tiers[i].first > 0) last_person = "\nadd_smalltext|Personal Event Rank: " + to_string(i + 1) + "    Contribution: " + Set_Count(top_tiers[i].first) + "|";
							else last_person = "\nadd_smalltext|`oPersonal Event Rank: N/A   Contribution: 0|left|";
						}
					}
				}
				/*Claim Prize*/
				if (pInfo(peer)->participated == event_item) {// GUILD
					if (pInfo(peer)->guild_id != 0) {
						vector<pair<int, string>>::iterator p = find_if(top_guild_winners.begin(), top_guild_winners.end(), [&](const pair < int, string>& element) { return element.second == to_string(pInfo(peer)->guild_id); });
						if (p != top_guild_winners.end()) {
							if (top_guild_winners[p - top_guild_winners.begin()].first != 0) prize_guild += "\nadd_button|claim_event_guild|`0Claim Your Guild Leaderboard Reward``|noflags|0|0|";
						}
					}
					if (not pInfo(peer)->participated_personal) {// PERSONAL
						vector<pair<int, string>>::iterator p = find_if(top_basher_winners.begin(), top_basher_winners.end(), [&](const pair < int, string>& element) { return element.second == pInfo(peer)->tankIDName; });
						if (p != top_basher_winners.end()) {
							if (top_basher_winners[p - top_basher_winners.begin()].first != 0) prize_personal += "\nadd_button|claim_event_personal|`0Claim Your Leaderboard Reward``|noflags|0|0|";
						}
					}
				}
			}
			/*Personal Event*/
			{
				if (pInfo(peer)->personal_event.empty()) pInfo(peer)->personal_event = "\nadd_smalltext|`oPersonal Event Rank: N/A   Contribution: 0|left|";
				std::vector<std::pair<long long int, std::string>> top_tiers = top_basher;
				sort(top_tiers.begin(), top_tiers.end());
				reverse(top_tiers.begin(), top_tiers.end());
				top_tiers.resize((top_tiers.size() >= 10 ? 10 : top_tiers.size()));
				for (uint8_t i = 0; i < top_tiers.size(); i++) {
					if (top_tiers[i].second == pInfo(peer)->tankIDName) {
						if (top_tiers[i].first > 0) pInfo(peer)->personal_event = "\nadd_smalltext|Personal Event Rank: " + to_string(i + 1) + "    Contribution: " + Set_Count(top_tiers[i].first) + "|";
						else pInfo(peer)->personal_event = "\nadd_smalltext|`oPersonal Event Rank: N/A   Contribution: 0|left|";
					}
				}
			}
			/*Guild Event*/
			{
				if (pInfo(peer)->guild_id != 0) {
					if (pInfo(peer)->guild_event.empty()) pInfo(peer)->guild_event = "\nadd_smalltext|`oGuild Event Rank: N/A   Contribution: 0|left|";
					std::vector<std::pair<long long int, std::string>> top_tiers = top_guild;
					sort(top_tiers.begin(), top_tiers.end());
					reverse(top_tiers.begin(), top_tiers.end());
					top_tiers.resize((top_tiers.size() >= 10 ? 10 : top_tiers.size()));
					for (uint8_t i = 0; i < top_tiers.size(); i++) {
						if (pInfo(peer)->guild_id == atoi(top_tiers[i].second.c_str())) {
							if (top_tiers[i].first > 0) pInfo(peer)->guild_event = "\nadd_smalltext|Guild Event Rank: " + to_string(i + 1) + "    Contribution: " + Set_Count(top_tiers[i].first) + "|";
							else pInfo(peer)->guild_event = "\nadd_smalltext|`oGuild Event Rank: N/A   Contribution: 0|left|";
						}
					}
				}
			}
			VarList::OnDialogRequest(peer, tabs + "set_default_color|`o\n\nadd_label_with_icon|big|`0" + (top_basher.size() == 0 && Event()->Can_Event ? "`6" + guild_event_type : items[event_item].hand_scythe_text) + "``|left|" + (top_basher.size() == 0 && Event()->Can_Event ? to_string(guild_event_id) : "6012|") + (top_basher.size() == 0 && Event()->Can_Event ? "\nadd_textbox|`oThe Event has ended!|left|" + a + (pInfo(peer)->guild_id != 0 and not prize_guild.empty() ? "\nadd_textbox|`6Remember: `oAny guild members added during an event will not contribute any Points!|left|" : "") + "\nadd_textbox|`oMake sure to claim ALL your Grow Event rewards.|left|" + a + (prize_personal != "" or prize_guild != "" ? "\nadd_textbox|`4You have unclaimed rewards! `oPlease collect them before the next event starts!|left|" : "") : "\nadd_smalltext|`oGrowTech has found anomalies in all of YOU!|left|\nadd_smalltext|`5Rules:``|\nadd_smalltext|" + items[event_item].description + "|") + "\nadd_spacer|small|\nadd_textbox|`o" + (Event()->Can_Event and not Event()->Wait_Next and wait_event != 0 ? "Time remaining to claim rewards: `2" + Time::Event(wait_event - time_) + "``" : Event()->Can_Event and Event()->Wait_Next and next_event != 0 ? "Next event starts in: `2" + Time::Event(next_event - time_) + "``" : "Event Time remaining: `2" + Time::Event(current_event - time_) + "``") + "``|left|\nadd_spacer|small|" + (top_basher.size() == 0 && Event()->Can_Event ? last_person + last_guild : pInfo(peer)->personal_event + pInfo(peer)->guild_event) + "|\nadd_spacer|small|\nadd_button|limited_rewards|`0" + Environment()->server_name + " Limited Rewards|noflags|0|0|1|\nadd_button|event_clash_rewards|`0" + guild_event_type + " Rewards|noflags|0|0|\nadd_button|event_leaderboard|`0Event Leaderboards|noflags|0|0|\nadd_button|personal_event_rewards|`0Personal Event Rewards``|noflags|0|0|\nadd_button|guild_event_rewards|`0Guild Event Rewards``|noflags|0|0|" + prize_personal + "|" + prize_guild + "|\nadd_spacer|small|\nadd_textbox||left|\nadd_spacer|small|\nend_dialog|zz|||\nadd_quick_exit|", delay);
		}
		if (type == "Recycle_Lock") {
			EventPool::Load::Recycle_Leaderboard();
			string contribute = "", claim_rewards = "";
			std::vector<std::pair<long long int, std::string>>::iterator pa2 = find_if(top_wls.begin(), top_wls.end(), [&](const pair < long long int, string>& element) { return to_lower(element.second) == to_lower(pInfo(peer)->tankIDName); });
			if (pa2 != top_wls.end()) contribute = "\nadd_smalltext|Recycle Event Rank: " + to_string(distance(top_wls.begin(), pa2) + 1) + "    Contribution: " + Set_Count(top_wls[pa2 - top_wls.begin()].first) + "|";
			else contribute = "\nadd_smalltext|`oRecycle Event Rank: N/A   Contribution: 0|left|";
			std::vector<std::pair<long long int, std::string>>::iterator p = find_if(top_wls.begin(), top_wls.end(), [&](const pair < long long int, string>& element) { return element.second == pInfo(peer)->tankIDName; });
			int prize = 0;
			for (uint16_t i = 0; i < top_wls.size(); i++) {
				if (to_lower(top_wls[i].second) == to_lower(pInfo(peer)->tankIDName)) {
					prize = i + 1;
					break;
				}
			}
			if (pInfo(peer)->wls_participated) {
				if (not pInfo(peer)->has_claim_event_wls and prize != 0) claim_rewards += "\nadd_button|claim_event_wls|`0Claim Reward``|noflags|0|0|";
			}
			VarList::OnDialogRequest(peer, tabs + "\nadd_label_with_icon|big|`wRecycle Locks``|left|8470|\nadd_smalltext|Hey, thanks for participating in our World Locks Recycle Event! By participating you will help the server fight with economy and inflation of World Locks! Of course we added `2extremely`` rare prizes for the top contributors!|" + (wls_event_time - time(nullptr) <= 0 ? "" : "\nadd_spacer|\nadd_smalltext|Total World Locks recycled `2" + Set_Count(total_wls_recycled) + "``|left||") + "\nadd_spacer|\nadd_label_with_icon|small|" + (wls_event_time - time(nullptr) <= 0 ? "The event is over!" : "Event Time remaining: `2" + Time::Event(wls_event_time - time(nullptr)) + "``") + "|left|3804|\nadd_spacer|" + contribute + "|\nadd_spacer|" + (wls_event_time - time(nullptr) <= 0 and prize != 0 ? claim_rewards : "") + (wls_event_time - time(nullptr) > 0 ? "\nadd_button|event_recycle|`wRecycle Lock|noflags|0|0|\nadd_spacer|small|" : "") + "\nadd_button|event_rewards_topwls|`wRecycle Lock Rewards|\nadd_button|showwlspersonalleaderboard|`wPersonal Leaderboard|\nadd_spacer|small|\nadd_textbox||left|\nadd_spacer|small|\nend_dialog|wls||\nadd_quick_exit|", 500);
		}
		if (type == "Richest") {
			EventPool::Load::Rich_Leaderboard();
			string contribute = "";
			std::vector<std::pair<long long int, std::string>>::iterator pa2 = find_if(top_richest.begin(), top_richest.end(), [&](const pair < long long int, string>& element) { return to_lower(element.second) == to_lower(pInfo(peer)->tankIDName); });
			if (pa2 != top_richest.end()) contribute = "\nadd_smalltext|Richest Rank: " + to_string(distance(top_richest.begin(), pa2) + 1) + "    Net Worth: " + Set_Count(top_richest[pa2 - top_richest.begin()].first) + "|";
			else contribute = "\nadd_smalltext|`oRichest Rank: N/A   Net Worth: 0|left|";
			VarList::OnDialogRequest(peer, tabs + "\nadd_label_with_icon|big|`0Top Richest|left|9474|\nadd_spacer|\nadd_image_button||interface/large/top_richest.rttex|bannerlayout|||\nadd_custom_margin|x:0;y:0|\nadd_spacer|small|" + contribute + "|\nadd_spacer|\nadd_button|rich_leaderboard|`wRichest Leaderboard``|0|0|\nadd_spacer|small|\nadd_textbox||left|\nadd_spacer|small|\nend_dialog|Richest_Event|||\nadd_quick_exit|", 500);
		}
		if (type == "Punched") {
			EventPool::Load::Punch_Leaderboard();
			string score = "";
			{
				std::vector<std::pair<long long int, std::string>>::iterator pa = find_if(top_punch.begin(), top_punch.end(), [&](const pair < long long int, string>& element) { return element.second == pInfo(peer)->tankIDName; });
				if (pa != top_punch.end()) {
					if (top_punch[pa - top_punch.begin()].first > 0) score = "\nadd_smalltext|Punch Event Rank: " + to_string(distance(top_punch.begin(), pa) + 1) + "    Total Punch: " + Set_Count(top_punch[pa - top_punch.begin()].first) + "|";
				}
				else score = "\nadd_smalltext|`oPunch Event Rank: N/A   Total Punch: 0|left|";
			}
			VarList::OnDialogRequest(peer, tabs + "\nadd_label_with_icon|big|`wPunch Event``|left|18|\nadd_spacer|small|\nadd_image_button||interface/large/top_punched.rttex|bannerlayout|||\nadd_custom_margin|x:0;y:0|\nadd_smalltext|`5Rules:|left|\nadd_smalltext|`oEarn points by breaking any blocks With all hand items including boxing, the bigger the score! Players can earn points by `2Breaking`o.|left|\nadd_spacer|small|" + score + "|\nadd_spacer|small|\nadd_button|punch_event_leaderboard|`wEvent Leaderboard|0|0|\nadd_button|punch_event_rewards|`wPunch Event Rewards|0|0|\nadd_spacer|small|\nadd_textbox||left|\nadd_spacer|small|\nend_dialog|Punch_Event|||\nadd_quick_exit|", 500);
		}
	}
	static void Limited_Clash(ENetPeer* peer) {
		std::string item1 = "";
		if (pInfo(peer)->claim_limited_clash) item1 += "\nadd_button_with_icon||" + items[14586].name + "|staticYellowFrame|6292||\n";
		else item1 += "\nadd_button_with_icon|limititem_1|" + items[14586].name + "|staticYellowFrame|14586|1|\n";
		item1 += "\nadd_custom_margin|x:5;y:0|\nadd_button_with_icon||END_ROW|noflags|0||\n";
		VarList::OnDialogRequest(peer, SetColor(peer) + "set_default_color|`o\nadd_label_with_icon|big|`w" + Environment()->server_name + " Limited Rewards|left|5956|\nadd_spacer|small|\nadd_smalltext|`oExchange `2Legendary Clash Key ``earned from monthly clash events for special rewards in our Reward Trees! Every branch has increaseingly great goodles, and a finale ticket for every branch that you complete! Test your skill in The finale for a change at the best prizes.|left|\nadd_smalltext|`5Note: `oYou can work on any active branch you like, but the rewards in each branch MUST be unlocked in order!|left|\nadd_spacer|small|\nadd_label_with_icon|small|`wYour Legendary Keys: `2" + Set_Count(pInfo(peer)->Legendary_Keys) + "|left|8504|\nadd_spacer|small|\nadd_textbox|`5Live Branch: Spend Legendary Clash Key here for limited rewards!|left|\ntext_scaling_string|aaaaaaaaaaaaaaa|" + item1 + "\nadd_spacer|small|\nend_dialog|backto_leaderboard|Close|Back|\nadd_quick_exit|");
	}
	static void Spring_Clash(ENetPeer* peer) {
		std::string row1 = "", row2 = "", row3 = "", row4 = "", row5 = "";
		/*Row 1*/
		row1 += "\nadd_textbox|`2Live Branch: Spend Spring Tokens here for special rewards!|left|";
		if (pInfo(peer)->row1_items1_claim) row1 += "\nadd_button_with_icon|||staticBlueFrame,no_padding_x,is_count_label|6292||\n";
		else row1 += "\nadd_button_with_icon|row1enter_1||staticBlueFrame,no_padding_x,is_count_label|7934|1|\n";
		row1 += "\nadd_custom_margin|x:5;y:0|\n";
		if (not pInfo(peer)->row1_items1_claim) row1 += "\nadd_button_with_icon|||staticBlueFrame,no_padding_x,is_count_label,disabled|5202|1|\n";
		else if (pInfo(peer)->row1_items2_claim) row1 += "\nadd_button_with_icon|||staticBlueFrame,no_padding_x,is_count_label|6292||\n";
		else row1 += "\nadd_button_with_icon|row1enter_2||staticBlueFrame,no_padding_x,is_count_label|5202|1|\n";
		row1 += "\nadd_custom_margin|x:5;y:0|\n";
		if (not pInfo(peer)->row1_items2_claim) row1 += "\nadd_button_with_icon|||staticBlueFrame,no_padding_x,is_count_label,disabled|6286|1|\n";
		else if (pInfo(peer)->row1_items3_claim) row1 += "\nadd_button_with_icon|||staticBlueFrame,no_padding_x,is_count_label|6292||\n";
		else row1 += "\nadd_button_with_icon|row1enter_3||staticBlueFrame,no_padding_x,is_count_label|6286|1|\n";
		row1 += "\nadd_custom_margin|x:5;y:0|\n";
		if (not pInfo(peer)->row1_items3_claim) row1 += "\nadd_button_with_icon|||staticBlueFrame,no_padding_x,is_count_label,disabled|7942|10|\n";
		else if (pInfo(peer)->row1_items4_claim) row1 += "\nadd_button_with_icon|||staticBlueFrame,no_padding_x,is_count_label|6292||\n";
		else row1 += "\nadd_button_with_icon|row1enter_4||staticBlueFrame,no_padding_x,is_count_label|7942|10|\n";
		row1 += "\nadd_custom_margin|x:5;y:0|\n";
		if (not pInfo(peer)->row1_items4_claim) row1 += "\nadd_button_with_icon|||staticBlueFrame,no_padding_x,is_count_label,disabled|7936|1|\n";
		else if (pInfo(peer)->row1_items5_claim) row1 += "\nadd_button_with_icon|||staticBlueFrame,no_padding_x,is_count_label|6292||\n";
		else row1 += "\nadd_button_with_icon|row1enter_5||staticBlueFrame,no_padding_x,is_count_label|7936|1|\n";
		row1 += "\nadd_custom_margin|x:5;y:0|\n";
		if (not pInfo(peer)->row1_items5_claim) row1 += "\nadd_button_with_icon|||staticBlueFrame,no_padding_x,is_count_label|9218|1|\n";
		else if (pInfo(peer)->row1_items6_claim) row1 += "\nadd_button_with_icon|||staticBlueFrame,no_padding_x,is_count_label|6292||\n";
		else row1 += "\nadd_button_with_icon|row1enter_6||staticBlueFrame,no_padding_x,is_count_label|9218|1|\n";
		row1 += "\nadd_button_with_icon||END_LIST|noflags|0||\n";
		/*Row 2*/
		row2 += "\nadd_textbox|`2Live Branch: Spend Spring Tokens here for special rewards!|left|";
		if (pInfo(peer)->row2_items1_claim) row2 += "\nadd_button_with_icon|||staticBlueFrame,no_padding_x,is_count_label|6292||\n";
		else row2 += "\nadd_button_with_icon|row2enter_1||staticBlueFrame,no_padding_x,is_count_label|7944|1|\n";
		row2 += "\nadd_custom_margin|x:5;y:0|\n";
		if (not pInfo(peer)->row2_items1_claim) row2 += "\nadd_button_with_icon|||staticBlueFrame,no_padding_x,is_count_label,disabled|5202|1|\n";
		else if (pInfo(peer)->row2_items2_claim) row2 += "\nadd_button_with_icon|||staticBlueFrame,no_padding_x,is_count_label|6292||\n";
		else row2 += "\nadd_button_with_icon|row2enter_2||staticBlueFrame,no_padding_x,is_count_label|5202|1|\n";
		row2 += "\nadd_custom_margin|x:5;y:0|\n";
		if (not pInfo(peer)->row2_items2_claim) row2 += "\nadd_button_with_icon|||staticBlueFrame,no_padding_x,is_count_label,disabled|6286|1|\n";
		else if (pInfo(peer)->row2_items3_claim) row2 += "\nadd_button_with_icon|||staticBlueFrame,no_padding_x,is_count_label|6292||\n";
		else row2 += "\nadd_button_with_icon|row2enter_3||staticBlueFrame,no_padding_x,is_count_label|6286|1|\n";
		row2 += "\nadd_custom_margin|x:5;y:0|\n";
		if (not pInfo(peer)->row2_items3_claim) row2 += "\nadd_button_with_icon|||staticBlueFrame,no_padding_x,is_count_label,disabled|7952|10|\n";
		else if (pInfo(peer)->row2_items4_claim) row2 += "\nadd_button_with_icon|||staticBlueFrame,no_padding_x,is_count_label|6292||\n";
		else row2 += "\nadd_button_with_icon|row2enter_4||staticBlueFrame,no_padding_x,is_count_label|7952|10|\n";
		row2 += "\nadd_custom_margin|x:5;y:0|\n";
		if (not pInfo(peer)->row2_items4_claim) row2 += "\nadd_button_with_icon|||staticBlueFrame,no_padding_x,is_count_label,disabled|7946|1|\n";
		else if (pInfo(peer)->row2_items5_claim) row2 += "\nadd_button_with_icon|||staticBlueFrame,no_padding_x,is_count_label|6292||\n";
		else row2 += "\nadd_button_with_icon|row2enter_5||staticBlueFrame,no_padding_x,is_count_label|7946|1|\n";
		row2 += "\nadd_custom_margin|x:5;y:0|\n";
		if (not pInfo(peer)->row2_items5_claim) row2 += "\nadd_button_with_icon|||staticBlueFrame,no_padding_x,is_count_label|9218|1|\n";
		else if (pInfo(peer)->row2_items6_claim) row2 += "\nadd_button_with_icon|||staticBlueFrame,no_padding_x,is_count_label|6292||\n";
		else row2 += "\nadd_button_with_icon|row2enter_6||staticBlueFrame,no_padding_x,is_count_label|9218|1|\n";
		row2 += "\nadd_button_with_icon||END_LIST|noflags|0||\n";
		/*Row 3*/
		row3 += "\nadd_textbox|`2Live Branch: Spend Spring Tokens here for special rewards!|left|";
		if (pInfo(peer)->row3_items1_claim) row3 += "\nadd_button_with_icon|||staticBlueFrame,no_padding_x,is_count_label|6292||\n";
		else row3 += "\nadd_button_with_icon|row3enter_1||staticBlueFrame,no_padding_x,is_count_label|8014|1|\n";
		row3 += "\nadd_custom_margin|x:5;y:0|\n";
		if (not pInfo(peer)->row3_items1_claim) row3 += "\nadd_button_with_icon|||staticBlueFrame,no_padding_x,is_count_label,disabled|5202|1|\n";
		else if (pInfo(peer)->row3_items2_claim) row3 += "\nadd_button_with_icon|||staticBlueFrame,no_padding_x,is_count_label|6292||\n";
		else row3 += "\nadd_button_with_icon|row3enter_2||staticBlueFrame,no_padding_x,is_count_label|5202|1|\n";
		row3 += "\nadd_custom_margin|x:5;y:0|\n";
		if (not pInfo(peer)->row3_items2_claim) row3 += "\nadd_button_with_icon|||staticBlueFrame,no_padding_x,is_count_label,disabled|6286|1|\n";
		else if (pInfo(peer)->row3_items3_claim) row3 += "\nadd_button_with_icon|||staticBlueFrame,no_padding_x,is_count_label|6292||\n";
		else row3 += "\nadd_button_with_icon|row3enter_3||staticBlueFrame,no_padding_x,is_count_label|6286|1|\n";
		row3 += "\nadd_custom_margin|x:5;y:0|\n";
		if (not pInfo(peer)->row3_items3_claim) row3 += "\nadd_button_with_icon|||staticBlueFrame,no_padding_x,is_count_label,disabled|8020|10|\n";
		else if (pInfo(peer)->row3_items4_claim) row3 += "\nadd_button_with_icon|||staticBlueFrame,no_padding_x,is_count_label|6292||\n";
		else row3 += "\nadd_button_with_icon|row3enter_4||staticBlueFrame,no_padding_x,is_count_label|8020|10|\n";
		row3 += "\nadd_custom_margin|x:5;y:0|\n";
		if (not pInfo(peer)->row3_items4_claim) row3 += "\nadd_button_with_icon|||staticBlueFrame,no_padding_x,is_count_label,disabled|8016|1|\n";
		else if (pInfo(peer)->row3_items5_claim) row3 += "\nadd_button_with_icon|||staticBlueFrame,no_padding_x,is_count_label|6292||\n";
		else row3 += "\nadd_button_with_icon|row3enter_5||staticBlueFrame,no_padding_x,is_count_label|8016|1|\n";
		row3 += "\nadd_custom_margin|x:5;y:0|\n";
		if (not pInfo(peer)->row3_items5_claim) row3 += "\nadd_button_with_icon|||staticBlueFrame,no_padding_x,is_count_label|9218|1|\n";
		else if (pInfo(peer)->row3_items6_claim) row3 += "\nadd_button_with_icon|||staticBlueFrame,no_padding_x,is_count_label|6292||\n";
		else row3 += "\nadd_button_with_icon|row3enter_6||staticBlueFrame,no_padding_x,is_count_label|9218|1|\n";
		row3 += "\nadd_button_with_icon||END_LIST|noflags|0||\n";
		/*Row 4*/
		row4 += "\nadd_textbox|`2Live Branch: Spend Spring Tokens here for special rewards!|left|";
		if (pInfo(peer)->row4_items1_claim) row4 += "\nadd_button_with_icon|||staticBlueFrame,no_padding_x,is_count_label|6292||\n";
		else row4 += "\nadd_button_with_icon|row4enter_1||staticBlueFrame,no_padding_x,is_count_label|8296|1|\n";
		row4 += "\nadd_custom_margin|x:5;y:0|\n";
		if (not pInfo(peer)->row4_items1_claim) row4 += "\nadd_button_with_icon|||staticBlueFrame,no_padding_x,is_count_label,disabled|5202|1|\n";
		else if (pInfo(peer)->row4_items2_claim) row4 += "\nadd_button_with_icon|||staticBlueFrame,no_padding_x,is_count_label|6292||\n";
		else row4 += "\nadd_button_with_icon|row4enter_2||staticBlueFrame,no_padding_x,is_count_label|5202|1|\n";
		row4 += "\nadd_custom_margin|x:5;y:0|\n";
		if (not pInfo(peer)->row4_items2_claim) row4 += "\nadd_button_with_icon|||staticBlueFrame,no_padding_x,is_count_label,disabled|6286|1|\n";
		else if (pInfo(peer)->row4_items3_claim) row4 += "\nadd_button_with_icon|||staticBlueFrame,no_padding_x,is_count_label|6292||\n";
		else row4 += "\nadd_button_with_icon|row4enter_3||staticBlueFrame,no_padding_x,is_count_label|6286|1|\n";
		row4 += "\nadd_custom_margin|x:5;y:0|\n";
		if (not pInfo(peer)->row4_items3_claim) row4 += "\nadd_button_with_icon|||staticBlueFrame,no_padding_x,is_count_label,disabled|8300|10|\n";
		else if (pInfo(peer)->row4_items4_claim) row4 += "\nadd_button_with_icon|||staticBlueFrame,no_padding_x,is_count_label|6292||\n";
		else row4 += "\nadd_button_with_icon|row4enter_4||staticBlueFrame,no_padding_x,is_count_label|8300|10|\n";
		row4 += "\nadd_custom_margin|x:5;y:0|\n";
		if (not pInfo(peer)->row4_items4_claim) row4 += "\nadd_button_with_icon|||staticBlueFrame,no_padding_x,is_count_label,disabled|8298|1|\n";
		else if (pInfo(peer)->row4_items5_claim) row4 += "\nadd_button_with_icon|||staticBlueFrame,no_padding_x,is_count_label|6292||\n";
		else row4 += "\nadd_button_with_icon|row4enter_5||staticBlueFrame,no_padding_x,is_count_label|8298|1|\n";
		row4 += "\nadd_custom_margin|x:5;y:0|\n";
		if (not pInfo(peer)->row4_items5_claim) row4 += "\nadd_button_with_icon|||staticBlueFrame,no_padding_x,is_count_label|9218|1|\n";
		else if (pInfo(peer)->row4_items6_claim) row4 += "\nadd_button_with_icon|||staticBlueFrame,no_padding_x,is_count_label|6292||\n";
		else row4 += "\nadd_button_with_icon|row4enter_6||staticBlueFrame,no_padding_x,is_count_label|9218|1|\n";
		row4 += "\nadd_button_with_icon||END_LIST|noflags|0||\n";
		/*Row 5*/
		if (pInfo(peer)->raw5_legendary_claim) row5 += "\nadd_textbox|`5Legendary Item: You have completed all branches! A legendary prize awaits.|left|\nadd_button_with_icon|||staticBlueFrame|6292||\nadd_button_with_icon||END_LIST|noflags|0||\n";
		else row5 += "\nadd_textbox|`5Series 6 - Legendary Branch!|left|\nadd_smalltext|`oExchange `210 Legendary Clash Keys ``earned from monthly Clash events for a Legendary prize!|left|\nadd_label_with_icon|small|`wYour Legendary Keys: `2" + Set_Count(pInfo(peer)->Legendary_Keys) + "|left|8504|\nadd_spacer|small|\nadd_button_with_icon|row1enter_7||staticBlueFrame|14414|1|\nadd_button_with_icon||END_LIST|noflags|0||\n";
		VarList::OnDialogRequest(peer, SetColor(peer) + "set_default_color|\nadd_label_with_icon|big|`wSpring Clash Rewards|left|7844|\nadd_spacer|small|\nadd_smalltext|`oExchange Spring Tokens earned from monthly clash events for special rewards in our Reward Trees! Every branch has increaseingly great goodles, and a finale ticket for every branch that you complete! Test your skill in The finale for a change at the best prizes.|left|\nadd_smalltext|`5Note: `oYou can work on any active branch you like, but the rewards in each branch MUST be unlocked in order!|left|\nadd_spacer|small|\nadd_label_with_icon|small|`wYour Spring Tokens: `2" + Set_Count(pInfo(peer)->spring_token) + "|left|7844|\nadd_spacer|small|\nadd_smalltext|`oSpring Clash lasts for 4 month, and these rewards are ONLY available in that time! They can't be claimed after the season ends, and you'll lose ANY remaining Spring Tokens!|left|\nadd_spacer|small|" + row1 + "|" + row2 + "|" + row3 + "|" + row4 + "|\nadd_spacer|small|" + row5 + "|\nend_dialog|backto_leaderboard|Close|Back|\nadd_quick_exit|");
	}
	static void Summer_Clash(ENetPeer* peer) {
		std::string row1 = "", row2 = "", row3 = "", row4 = "", row5 = "";
		/*Row 1*/
		row1 += "\nadd_textbox|`2Live Branch: Spend Summer Tokens here for special rewards!|left|";
		if (pInfo(peer)->row1_items1_claim) row1 += "\nadd_button_with_icon|||staticBlueFrame,no_padding_x,is_count_label|6292||\n";
		else row1 += "\nadd_button_with_icon|row1enter_1||staticBlueFrame,no_padding_x,is_count_label|6264|1|\n";
		row1 += "\nadd_custom_margin|x:5;y:0|\n";
		if (not pInfo(peer)->row1_items1_claim) row1 += "\nadd_button_with_icon|||staticBlueFrame,no_padding_x,is_count_label,disabled|5202|1|\n";
		else if (pInfo(peer)->row1_items2_claim) row1 += "\nadd_button_with_icon|||staticBlueFrame,no_padding_x,is_count_label|6292||\n";
		else row1 += "\nadd_button_with_icon|row1enter_2||staticBlueFrame,no_padding_x,is_count_label|5202|1|\n";
		row1 += "\nadd_custom_margin|x:5;y:0|\n";
		if (not pInfo(peer)->row1_items2_claim) row1 += "\nadd_button_with_icon|||staticBlueFrame,no_padding_x,is_count_label,disabled|6286|1|\n";
		else if (pInfo(peer)->row1_items3_claim) row1 += "\nadd_button_with_icon|||staticBlueFrame,no_padding_x,is_count_label|6292||\n";
		else row1 += "\nadd_button_with_icon|row1enter_3||staticBlueFrame,no_padding_x,is_count_label|6286|1|\n";
		row1 += "\nadd_custom_margin|x:5;y:0|\n";
		if (not pInfo(peer)->row1_items3_claim) row1 += "\nadd_button_with_icon|||staticBlueFrame,no_padding_x,is_count_label,disabled|6154|10|\n";
		else if (pInfo(peer)->row1_items4_claim) row1 += "\nadd_button_with_icon|||staticBlueFrame,no_padding_x,is_count_label|6292||\n";
		else row1 += "\nadd_button_with_icon|row1enter_4||staticBlueFrame,no_padding_x,is_count_label|6154|10|\n";
		row1 += "\nadd_custom_margin|x:5;y:0|\n";
		if (not pInfo(peer)->row1_items4_claim) row1 += "\nadd_button_with_icon|||staticBlueFrame,no_padding_x,is_count_label,disabled|6266|1|\n";
		else if (pInfo(peer)->row1_items5_claim) row1 += "\nadd_button_with_icon|||staticBlueFrame,no_padding_x,is_count_label|6292||\n";
		else row1 += "\nadd_button_with_icon|row1enter_5||staticBlueFrame,no_padding_x,is_count_label|6266|1|\n";
		row1 += "\nadd_custom_margin|x:5;y:0|\n";
		if (not pInfo(peer)->row1_items5_claim) row1 += "\nadd_button_with_icon|||staticBlueFrame,no_padding_x,is_count_label|9218|1|\n";
		else if (pInfo(peer)->row1_items6_claim) row1 += "\nadd_button_with_icon|||staticBlueFrame,no_padding_x,is_count_label|6292||\n";
		else row1 += "\nadd_button_with_icon|row1enter_6||staticBlueFrame,no_padding_x,is_count_label|9218|1|\n";
		row1 += "\nadd_button_with_icon||END_LIST|noflags|0||\n";
		/*Row 2*/
		row2 += "\nadd_textbox|`2Live Branch: Spend Summer Tokens here for special rewards!|left|";
		if (pInfo(peer)->row2_items1_claim) row2 += "\nadd_button_with_icon|||staticBlueFrame,no_padding_x,is_count_label|6292||\n";
		else row2 += "\nadd_button_with_icon|row2enter_1||staticBlueFrame,no_padding_x,is_count_label|6268|1|\n";
		row2 += "\nadd_custom_margin|x:5;y:0|\n";
		if (not pInfo(peer)->row2_items1_claim) row2 += "\nadd_button_with_icon|||staticBlueFrame,no_padding_x,is_count_label,disabled|5202|1|\n";
		else if (pInfo(peer)->row2_items2_claim) row2 += "\nadd_button_with_icon|||staticBlueFrame,no_padding_x,is_count_label|6292||\n";
		else row2 += "\nadd_button_with_icon|row2enter_2||staticBlueFrame,no_padding_x,is_count_label|5202|1|\n";
		row2 += "\nadd_custom_margin|x:5;y:0|\n";
		if (not pInfo(peer)->row2_items2_claim) row2 += "\nadd_button_with_icon|||staticBlueFrame,no_padding_x,is_count_label,disabled|6286|1|\n";
		else if (pInfo(peer)->row2_items3_claim) row2 += "\nadd_button_with_icon|||staticBlueFrame,no_padding_x,is_count_label|6292||\n";
		else row2 += "\nadd_button_with_icon|row2enter_3||staticBlueFrame,no_padding_x,is_count_label|6286|1|\n";
		row2 += "\nadd_custom_margin|x:5;y:0|\n";
		if (not pInfo(peer)->row2_items3_claim) row2 += "\nadd_button_with_icon|||staticBlueFrame,no_padding_x,is_count_label,disabled|6156|10|\n";
		else if (pInfo(peer)->row2_items4_claim) row2 += "\nadd_button_with_icon|||staticBlueFrame,no_padding_x,is_count_label|6292||\n";
		else row2 += "\nadd_button_with_icon|row2enter_4||staticBlueFrame,no_padding_x,is_count_label|6156|10|\n";
		row2 += "\nadd_custom_margin|x:5;y:0|\n";
		if (not pInfo(peer)->row2_items4_claim) row2 += "\nadd_button_with_icon|||staticBlueFrame,no_padding_x,is_count_label,disabled|6270|1|\n";
		else if (pInfo(peer)->row2_items5_claim) row2 += "\nadd_button_with_icon|||staticBlueFrame,no_padding_x,is_count_label|6292||\n";
		else row2 += "\nadd_button_with_icon|row2enter_5||staticBlueFrame,no_padding_x,is_count_label|6270|1|\n";
		row2 += "\nadd_custom_margin|x:5;y:0|\n";
		if (not pInfo(peer)->row2_items5_claim) row2 += "\nadd_button_with_icon|||staticBlueFrame,no_padding_x,is_count_label|9218|1|\n";
		else if (pInfo(peer)->row2_items6_claim) row2 += "\nadd_button_with_icon|||staticBlueFrame,no_padding_x,is_count_label|6292||\n";
		else row2 += "\nadd_button_with_icon|row2enter_6||staticBlueFrame,no_padding_x,is_count_label|9218|1|\n";
		row2 += "\nadd_button_with_icon||END_LIST|noflags|0||\n";
		/*Row 3*/
		row3 += "\nadd_textbox|`2Live Branch: Spend Summer Tokens here for special rewards!|left|";
		if (pInfo(peer)->row3_items1_claim) row3 += "\nadd_button_with_icon|||staticBlueFrame,no_padding_x,is_count_label|6292||\n";
		else row3 += "\nadd_button_with_icon|row3enter_1||staticBlueFrame,no_padding_x,is_count_label|6302|1|\n";
		row3 += "\nadd_custom_margin|x:5;y:0|\n";
		if (not pInfo(peer)->row3_items1_claim) row3 += "\nadd_button_with_icon|||staticBlueFrame,no_padding_x,is_count_label,disabled|5202|1|\n";
		else if (pInfo(peer)->row3_items2_claim) row3 += "\nadd_button_with_icon|||staticBlueFrame,no_padding_x,is_count_label|6292||\n";
		else row3 += "\nadd_button_with_icon|row3enter_2||staticBlueFrame,no_padding_x,is_count_label|5202|1|\n";
		row3 += "\nadd_custom_margin|x:5;y:0|\n";
		if (not pInfo(peer)->row3_items2_claim) row3 += "\nadd_button_with_icon|||staticBlueFrame,no_padding_x,is_count_label,disabled|6286|1|\n";
		else if (pInfo(peer)->row3_items3_claim) row3 += "\nadd_button_with_icon|||staticBlueFrame,no_padding_x,is_count_label|6292||\n";
		else row3 += "\nadd_button_with_icon|row3enter_3||staticBlueFrame,no_padding_x,is_count_label|6286|1|\n";
		row3 += "\nadd_custom_margin|x:5;y:0|\n";
		if (not pInfo(peer)->row3_items3_claim) row3 += "\nadd_button_with_icon|||staticBlueFrame,no_padding_x,is_count_label,disabled|6296|10|\n";
		else if (pInfo(peer)->row3_items4_claim) row3 += "\nadd_button_with_icon|||staticBlueFrame,no_padding_x,is_count_label|6292||\n";
		else row3 += "\nadd_button_with_icon|row3enter_4||staticBlueFrame,no_padding_x,is_count_label|6296|10|\n";
		row3 += "\nadd_custom_margin|x:5;y:0|\n";
		if (not pInfo(peer)->row3_items4_claim) row3 += "\nadd_button_with_icon|||staticBlueFrame,no_padding_x,is_count_label,disabled|6304|1|\n";
		else if (pInfo(peer)->row3_items5_claim) row3 += "\nadd_button_with_icon|||staticBlueFrame,no_padding_x,is_count_label|6292||\n";
		else row3 += "\nadd_button_with_icon|row3enter_5||staticBlueFrame,no_padding_x,is_count_label|6304|1|\n";
		row3 += "\nadd_custom_margin|x:5;y:0|\n";
		if (not pInfo(peer)->row3_items5_claim) row3 += "\nadd_button_with_icon|||staticBlueFrame,no_padding_x,is_count_label|9218|1|\n";
		else if (pInfo(peer)->row3_items6_claim) row3 += "\nadd_button_with_icon|||staticBlueFrame,no_padding_x,is_count_label|6292||\n";
		else row3 += "\nadd_button_with_icon|row3enter_6||staticBlueFrame,no_padding_x,is_count_label|9218|1|\n";
		row3 += "\nadd_button_with_icon||END_LIST|noflags|0||\n";
		/*Row 4*/
		row4 += "\nadd_textbox|`2Live Branch: Spend Summer Tokens here for special rewards!|left|";
		if (pInfo(peer)->row4_items1_claim) row4 += "\nadd_button_with_icon|||staticBlueFrame,no_padding_x,is_count_label|6292||\n";
		else row4 += "\nadd_button_with_icon|row4enter_1||staticBlueFrame,no_padding_x,is_count_label|6750|1|\n";
		row4 += "\nadd_custom_margin|x:5;y:0|\n";
		if (not pInfo(peer)->row4_items1_claim) row4 += "\nadd_button_with_icon|||staticBlueFrame,no_padding_x,is_count_label,disabled|5202|1|\n";
		else if (pInfo(peer)->row4_items2_claim) row4 += "\nadd_button_with_icon|||staticBlueFrame,no_padding_x,is_count_label|6292||\n";
		else row4 += "\nadd_button_with_icon|row4enter_2||staticBlueFrame,no_padding_x,is_count_label|5202|1|\n";
		row4 += "\nadd_custom_margin|x:5;y:0|\n";
		if (not pInfo(peer)->row4_items2_claim) row4 += "\nadd_button_with_icon|||staticBlueFrame,no_padding_x,is_count_label,disabled|6286|1|\n";
		else if (pInfo(peer)->row4_items3_claim) row4 += "\nadd_button_with_icon|||staticBlueFrame,no_padding_x,is_count_label|6292||\n";
		else row4 += "\nadd_button_with_icon|row4enter_3||staticBlueFrame,no_padding_x,is_count_label|6286|1|\n";
		row4 += "\nadd_custom_margin|x:5;y:0|\n";
		if (not pInfo(peer)->row4_items3_claim) row4 += "\nadd_button_with_icon|||staticBlueFrame,no_padding_x,is_count_label,disabled|6772|10|\n";
		else if (pInfo(peer)->row4_items4_claim) row4 += "\nadd_button_with_icon|||staticBlueFrame,no_padding_x,is_count_label|6292||\n";
		else row4 += "\nadd_button_with_icon|row4enter_4||staticBlueFrame,no_padding_x,is_count_label|6772|10|\n";
		row4 += "\nadd_custom_margin|x:5;y:0|\n";
		if (not pInfo(peer)->row4_items4_claim) row4 += "\nadd_button_with_icon|||staticBlueFrame,no_padding_x,is_count_label,disabled|6752|1|\n";
		else if (pInfo(peer)->row4_items5_claim) row4 += "\nadd_button_with_icon|||staticBlueFrame,no_padding_x,is_count_label|6292||\n";
		else row4 += "\nadd_button_with_icon|row4enter_5||staticBlueFrame,no_padding_x,is_count_label|6752|1|\n";
		row4 += "\nadd_custom_margin|x:5;y:0|\n";
		if (not pInfo(peer)->row4_items5_claim) row4 += "\nadd_button_with_icon|||staticBlueFrame,no_padding_x,is_count_label|9218|1|\n";
		else if (pInfo(peer)->row4_items6_claim) row4 += "\nadd_button_with_icon|||staticBlueFrame,no_padding_x,is_count_label|6292||\n";
		else row4 += "\nadd_button_with_icon|row4enter_6||staticBlueFrame,no_padding_x,is_count_label|9218|1|\n";
		row4 += "\nadd_button_with_icon||END_LIST|noflags|0||\n";
		/*Row 5*/
		if (pInfo(peer)->raw5_legendary_claim) row5 += "\nadd_textbox|`5Legendary Item: You have completed all branches! A legendary prize awaits.|left|\nadd_button_with_icon|||staticBlueFrame|6292||\nadd_button_with_icon||END_LIST|noflags|0||\n";
		else row5 += "\nadd_textbox|`5Series 6 - Legendary Branch!|left|\nadd_smalltext|`oExchange `210 Legendary Clash Keys ``earned from monthly Clash events for a Legendary prize!|left|\nadd_label_with_icon|small|`wYour Legendary Keys: `2" + Set_Count(pInfo(peer)->Legendary_Keys) + "|left|8504|\nadd_spacer|small|\nadd_button_with_icon|row1enter_7||staticBlueFrame|14414|1|\nadd_button_with_icon||END_LIST|noflags|0||\n";
		VarList::OnDialogRequest(peer, SetColor(peer) + "set_default_color|\nadd_label_with_icon|big|`wSummer Clash Rewards|left|6198|\nadd_spacer|small|\nadd_smalltext|`oExchange Summer Tokens earned from monthly clash events for special rewards in our Reward Trees! Every branch has increaseingly great goodles, and a finale ticket for every branch that you complete! Test your skill in The finale for a change at the best prizes.|left|\nadd_smalltext|`5Note: `oYou can work on any active branch you like, but the rewards in each branch MUST be unlocked in order!|left|\nadd_spacer|small|\nadd_label_with_icon|small|`wYour Summer Tokens: `2" + Set_Count(pInfo(peer)->summer_token) + "|left|6198|\nadd_spacer|small|\nadd_smalltext|`oSummer Clash lasts for 4 month, and these rewards are ONLY available in that time! They can't be claimed after the season ends, and you'll lose ANY remaining Summer Tokens!|left|\nadd_spacer|small|" + row1 + "|" + row2 + "|" + row3 + "|" + row4 + "|\nadd_spacer|small|" + row5 + "|\nend_dialog|backto_leaderboard|Close|Back|\nadd_quick_exit|");
	}
	static void Winter_Clash(ENetPeer* peer) {
		std::string row1 = "", row2 = "", row3 = "", row4 = "", row5 = "";
		/*Row 1*/
		row1 += "\nadd_textbox|`2Live Branch: Spend Winter Tokens here for special rewards!|left|";
		if (pInfo(peer)->row1_items1_claim) row1 += "\nadd_button_with_icon|||staticBlueFrame,no_padding_x,is_count_label|6292||\n";
		else row1 += "\nadd_button_with_icon|row1enter_1||staticBlueFrame,no_padding_x,is_count_label|7198|1|\n";
		row1 += "\nadd_custom_margin|x:5;y:0|\n";
		if (not pInfo(peer)->row1_items1_claim) row1 += "\nadd_button_with_icon|||staticBlueFrame,no_padding_x,is_count_label,disabled|5202|1|\n";
		else if (pInfo(peer)->row1_items2_claim) row1 += "\nadd_button_with_icon|||staticBlueFrame,no_padding_x,is_count_label|6292||\n";
		else row1 += "\nadd_button_with_icon|row1enter_2||staticBlueFrame,no_padding_x,is_count_label|5202|1|\n";
		row1 += "\nadd_custom_margin|x:5;y:0|\n";
		if (not pInfo(peer)->row1_items2_claim) row1 += "\nadd_button_with_icon|||staticBlueFrame,no_padding_x,is_count_label,disabled|6286|1|\n";
		else if (pInfo(peer)->row1_items3_claim) row1 += "\nadd_button_with_icon|||staticBlueFrame,no_padding_x,is_count_label|6292||\n";
		else row1 += "\nadd_button_with_icon|row1enter_3||staticBlueFrame,no_padding_x,is_count_label|6286|1|\n";
		row1 += "\nadd_custom_margin|x:5;y:0|\n";
		if (not pInfo(peer)->row1_items3_claim) row1 += "\nadd_button_with_icon|||staticBlueFrame,no_padding_x,is_count_label,disabled|7202|10|\n";
		else if (pInfo(peer)->row1_items4_claim) row1 += "\nadd_button_with_icon|||staticBlueFrame,no_padding_x,is_count_label|6292||\n";
		else row1 += "\nadd_button_with_icon|row1enter_4||staticBlueFrame,no_padding_x,is_count_label|7202|10|\n";
		row1 += "\nadd_custom_margin|x:5;y:0|\n";
		if (not pInfo(peer)->row1_items4_claim) row1 += "\nadd_button_with_icon|||staticBlueFrame,no_padding_x,is_count_label,disabled|7200|1|\n";
		else if (pInfo(peer)->row1_items5_claim) row1 += "\nadd_button_with_icon|||staticBlueFrame,no_padding_x,is_count_label|6292||\n";
		else row1 += "\nadd_button_with_icon|row1enter_5||staticBlueFrame,no_padding_x,is_count_label|7200|1|\n";
		row1 += "\nadd_custom_margin|x:5;y:0|\n";
		if (not pInfo(peer)->row1_items5_claim) row1 += "\nadd_button_with_icon|||staticBlueFrame,no_padding_x,is_count_label|9214|1|\n";
		else if (pInfo(peer)->row1_items6_claim) row1 += "\nadd_button_with_icon|||staticBlueFrame,no_padding_x,is_count_label|6292||\n";
		else row1 += "\nadd_button_with_icon|row1enter_6||staticBlueFrame,no_padding_x,is_count_label|9214|1|\n";
		row1 += "\nadd_button_with_icon||END_LIST|noflags|0||\n";
		/*Row 2*/
		row2 += "\nadd_textbox|`2Live Branch: Spend Winter Tokens here for special rewards!|left|";
		if (pInfo(peer)->row2_items1_claim) row2 += "\nadd_button_with_icon|||staticBlueFrame,no_padding_x,is_count_label|6292||\n";
		else row2 += "\nadd_button_with_icon|row2enter_1||staticBlueFrame,no_padding_x,is_count_label|7208|1|\n";
		row2 += "\nadd_custom_margin|x:5;y:0|\n";
		if (not pInfo(peer)->row2_items1_claim) row2 += "\nadd_button_with_icon|||staticBlueFrame,no_padding_x,is_count_label,disabled|5202|1|\n";
		else if (pInfo(peer)->row2_items2_claim) row2 += "\nadd_button_with_icon|||staticBlueFrame,no_padding_x,is_count_label|6292||\n";
		else row2 += "\nadd_button_with_icon|row2enter_2||staticBlueFrame,no_padding_x,is_count_label|5202|1|\n";
		row2 += "\nadd_custom_margin|x:5;y:0|\n";
		if (not pInfo(peer)->row2_items2_claim) row2 += "\nadd_button_with_icon|||staticBlueFrame,no_padding_x,is_count_label,disabled|6286|1|\n";
		else if (pInfo(peer)->row2_items3_claim) row2 += "\nadd_button_with_icon|||staticBlueFrame,no_padding_x,is_count_label|6292||\n";
		else row2 += "\nadd_button_with_icon|row2enter_3||staticBlueFrame,no_padding_x,is_count_label|6286|1|\n";
		row2 += "\nadd_custom_margin|x:5;y:0|\n";
		if (not pInfo(peer)->row2_items3_claim) row2 += "\nadd_button_with_icon|||staticBlueFrame,no_padding_x,is_count_label,disabled|7212|10|\n";
		else if (pInfo(peer)->row2_items4_claim) row2 += "\nadd_button_with_icon|||staticBlueFrame,no_padding_x,is_count_label|6292||\n";
		else row2 += "\nadd_button_with_icon|row2enter_4||staticBlueFrame,no_padding_x,is_count_label|7212|10|\n";
		row2 += "\nadd_custom_margin|x:5;y:0|\n";
		if (not pInfo(peer)->row2_items4_claim) row2 += "\nadd_button_with_icon|||staticBlueFrame,no_padding_x,is_count_label,disabled|7210|1|\n";
		else if (pInfo(peer)->row2_items5_claim) row2 += "\nadd_button_with_icon|||staticBlueFrame,no_padding_x,is_count_label|6292||\n";
		else row2 += "\nadd_button_with_icon|row2enter_5||staticBlueFrame,no_padding_x,is_count_label|7210|1|\n";
		row2 += "\nadd_custom_margin|x:5;y:0|\n";
		if (not pInfo(peer)->row2_items5_claim) row2 += "\nadd_button_with_icon|||staticBlueFrame,no_padding_x,is_count_label|9214|1|\n";
		else if (pInfo(peer)->row2_items6_claim) row2 += "\nadd_button_with_icon|||staticBlueFrame,no_padding_x,is_count_label|6292||\n";
		else row2 += "\nadd_button_with_icon|row2enter_6||staticBlueFrame,no_padding_x,is_count_label|9214|1|\n";
		row2 += "\nadd_button_with_icon||END_LIST|noflags|0||\n";
		/*Row 3*/
		row3 += "\nadd_textbox|`2Live Branch: Spend Winter Tokens here for special rewards!|left|";
		if (pInfo(peer)->row3_items1_claim) row3 += "\nadd_button_with_icon|||staticBlueFrame,no_padding_x,is_count_label|6292||\n";
		else row3 += "\nadd_button_with_icon|row3enter_1||staticBlueFrame,no_padding_x,is_count_label|7388|1|\n";
		row3 += "\nadd_custom_margin|x:5;y:0|\n";
		if (not pInfo(peer)->row3_items1_claim) row3 += "\nadd_button_with_icon|||staticBlueFrame,no_padding_x,is_count_label,disabled|5202|1|\n";
		else if (pInfo(peer)->row3_items2_claim) row3 += "\nadd_button_with_icon|||staticBlueFrame,no_padding_x,is_count_label|6292||\n";
		else row3 += "\nadd_button_with_icon|row3enter_2||staticBlueFrame,no_padding_x,is_count_label|5202|1|\n";
		row3 += "\nadd_custom_margin|x:5;y:0|\n";
		if (not pInfo(peer)->row3_items2_claim) row3 += "\nadd_button_with_icon|||staticBlueFrame,no_padding_x,is_count_label,disabled|6286|1|\n";
		else if (pInfo(peer)->row3_items3_claim) row3 += "\nadd_button_with_icon|||staticBlueFrame,no_padding_x,is_count_label|6292||\n";
		else row3 += "\nadd_button_with_icon|row3enter_3||staticBlueFrame,no_padding_x,is_count_label|6286|1|\n";
		row3 += "\nadd_custom_margin|x:5;y:0|\n";
		if (not pInfo(peer)->row3_items3_claim) row3 += "\nadd_button_with_icon|||staticBlueFrame,no_padding_x,is_count_label,disabled|7394|10|\n";
		else if (pInfo(peer)->row3_items4_claim) row3 += "\nadd_button_with_icon|||staticBlueFrame,no_padding_x,is_count_label|6292||\n";
		else row3 += "\nadd_button_with_icon|row3enter_4||staticBlueFrame,no_padding_x,is_count_label|7394|10|\n";
		row3 += "\nadd_custom_margin|x:5;y:0|\n";
		if (not pInfo(peer)->row3_items4_claim) row3 += "\nadd_button_with_icon|||staticBlueFrame,no_padding_x,is_count_label,disabled|7386|1|\n";
		else if (pInfo(peer)->row3_items5_claim) row3 += "\nadd_button_with_icon|||staticBlueFrame,no_padding_x,is_count_label|6292||\n";
		else row3 += "\nadd_button_with_icon|row3enter_5||staticBlueFrame,no_padding_x,is_count_label|7386|1|\n";
		row3 += "\nadd_custom_margin|x:5;y:0|\n";
		if (not pInfo(peer)->row3_items5_claim) row3 += "\nadd_button_with_icon|||staticBlueFrame,no_padding_x,is_count_label|9214|1|\n";
		else if (pInfo(peer)->row3_items6_claim) row3 += "\nadd_button_with_icon|||staticBlueFrame,no_padding_x,is_count_label|6292||\n";
		else row3 += "\nadd_button_with_icon|row3enter_6||staticBlueFrame,no_padding_x,is_count_label|9214|1|\n";
		row3 += "\nadd_button_with_icon||END_LIST|noflags|0||\n";
		/*Row 4*/
		row4 += "\nadd_textbox|`2Live Branch: Spend Winter Tokens here for special rewards!|left|";
		if (pInfo(peer)->row4_items1_claim) row4 += "\nadd_button_with_icon|||staticBlueFrame,no_padding_x,is_count_label|6292||\n";
		else row4 += "\nadd_button_with_icon|row4enter_1||staticBlueFrame,no_padding_x,is_count_label|7576|1|\n";
		row4 += "\nadd_custom_margin|x:5;y:0|\n";
		if (not pInfo(peer)->row4_items1_claim) row4 += "\nadd_button_with_icon|||staticBlueFrame,no_padding_x,is_count_label,disabled|5202|1|\n";
		else if (pInfo(peer)->row4_items2_claim) row4 += "\nadd_button_with_icon|||staticBlueFrame,no_padding_x,is_count_label|6292||\n";
		else row4 += "\nadd_button_with_icon|row4enter_2||staticBlueFrame,no_padding_x,is_count_label|5202|1|\n";
		row4 += "\nadd_custom_margin|x:5;y:0|\n";
		if (not pInfo(peer)->row4_items2_claim) row4 += "\nadd_button_with_icon|||staticBlueFrame,no_padding_x,is_count_label,disabled|6286|1|\n";
		else if (pInfo(peer)->row4_items3_claim) row4 += "\nadd_button_with_icon|||staticBlueFrame,no_padding_x,is_count_label|6292||\n";
		else row4 += "\nadd_button_with_icon|row4enter_3||staticBlueFrame,no_padding_x,is_count_label|6286|1|\n";
		row4 += "\nadd_custom_margin|x:5;y:0|\n";
		if (not pInfo(peer)->row4_items3_claim) row4 += "\nadd_button_with_icon|||staticBlueFrame,no_padding_x,is_count_label,disabled|7580|10|\n";
		else if (pInfo(peer)->row4_items4_claim) row4 += "\nadd_button_with_icon|||staticBlueFrame,no_padding_x,is_count_label|6292||\n";
		else row4 += "\nadd_button_with_icon|row4enter_4||staticBlueFrame,no_padding_x,is_count_label|7580|10|\n";
		row4 += "\nadd_custom_margin|x:5;y:0|\n";
		if (not pInfo(peer)->row4_items4_claim) row4 += "\nadd_button_with_icon|||staticBlueFrame,no_padding_x,is_count_label,disabled|7578|1|\n";
		else if (pInfo(peer)->row4_items5_claim) row4 += "\nadd_button_with_icon|||staticBlueFrame,no_padding_x,is_count_label|6292||\n";
		else row4 += "\nadd_button_with_icon|row4enter_5||staticBlueFrame,no_padding_x,is_count_label|7578|1|\n";
		row4 += "\nadd_custom_margin|x:5;y:0|\n";
		if (not pInfo(peer)->row4_items5_claim) row4 += "\nadd_button_with_icon|||staticBlueFrame,no_padding_x,is_count_label|9214|1|\n";
		else if (pInfo(peer)->row4_items6_claim) row4 += "\nadd_button_with_icon|||staticBlueFrame,no_padding_x,is_count_label|6292||\n";
		else row4 += "\nadd_button_with_icon|row4enter_6||staticBlueFrame,no_padding_x,is_count_label|9214|1|\n";
		row4 += "\nadd_button_with_icon||END_LIST|noflags|0||\n";
		/*Row 5*/
		if (pInfo(peer)->raw5_legendary_claim) row5 += "\nadd_textbox|`5Legendary Item: You have completed all branches! A legendary prize awaits.|left|\nadd_button_with_icon|||staticBlueFrame|6292||\nadd_button_with_icon||END_LIST|noflags|0||\n";
		else row5 += "\nadd_textbox|`5Series 6 - Legendary Branch!|left|\nadd_smalltext|`oExchange `210 Legendary Clash Keys ``earned from monthly Clash events for a Legendary prize!|left|\nadd_label_with_icon|small|`wYour Legendary Keys: `2" + Set_Count(pInfo(peer)->Legendary_Keys) + "|left|8504|\nadd_spacer|small|\nadd_button_with_icon|row1enter_7||staticBlueFrame|14414|1|\nadd_button_with_icon||END_LIST|noflags|0||\n";
		VarList::OnDialogRequest(peer, SetColor(peer) + "set_default_color|\nadd_label_with_icon|big|`wWinter Clash Rewards|left|7328|\nadd_spacer|small|\nadd_smalltext|`oExchange Winter Tokens earned from monthly clash events for special rewards in our Reward Trees! Every branch has increaseingly great goodles, and a finale ticket for every branch that you complete! Test your skill in The finale for a change at the best prizes.|left|\nadd_smalltext|`5Note: `oYou can work on any active branch you like, but the rewards in each branch MUST be unlocked in order!|left|\nadd_spacer|small|\nadd_label_with_icon|small|`wYour Winter Tokens: `2" + Set_Count(pInfo(peer)->winter_token) + "|left|7328|\nadd_spacer|small|\nadd_smalltext|`oWinter Clash lasts for 4 month, and these rewards are ONLY available in that time! They can't be claimed after the season ends, and you'll lose ANY remaining Winter Tokens!|left|\nadd_spacer|small|" + row1 + "|" + row2 + "|" + row3 + "|" + row4 + "|\nadd_spacer|small|" + row5 + "|\nend_dialog|backto_leaderboard|Close|Back|\nadd_quick_exit|");
	}
	static void SetEvent(ENetPeer* peer) {
		std::string dialog = "", dialog2 = "", dialog3 = "";
		if (Event()->Gems_Event) dialog2 += "\nadd_inner_image_label_button|gems_event| `$Gems Event``|game/tiles_page14.rttex|1.6|28|23|32|\n";
		else dialog2 += "\nadd_inner_image_label_button|gems_event| `$Gems Event``|game/tiles_page14.rttex|1.6|30|23|32|\n";
		if (Event()->Xp_Event) dialog2 += "\nadd_inner_image_label_button|xp_event| `$Xp Event``|game/tiles_page14.rttex|1.6|28|23|32|\n";
		else dialog2 += "\nadd_inner_image_label_button|xp_event| `$Xp Event``|game/tiles_page14.rttex|1.6|30|23|32|\n";
		if (Event()->Exchange_Event) dialog2 += "\nadd_inner_image_label_button|exchange_event| `$Exchange Event``|game/tiles_page14.rttex|1.6|28|23|32|\n";
		else dialog2 += "\nadd_inner_image_label_button|exchange_event| `$Exchange Event``|game/tiles_page14.rttex|1.6|30|23|32|\n";

		if (wls_event_time - time(nullptr) <= 0) dialog3 += "\nadd_inner_image_label_button|wls_event| `$Recycle Wls Event``|game/tiles_page14.rttex|1.6|30|23|32|\n";
		else dialog3 += "\nadd_inner_image_label_button|wls_event| `$Recycle Wls Event``|game/tiles_page14.rttex|1.6|28|23|32|\n";
		if (Event()->Can_Event == true) dialog3 += "\nadd_inner_image_label_button|guild_event| `$Guild Event``|game/tiles_page14.rttex|1.6|30|23|32|\n";
		else dialog3 += "\nadd_inner_image_label_button|guild_event| `$Guild Event``|game/tiles_page14.rttex|1.6|28|23|32|\n";
		if (Event()->DailyChallenge == false) dialog3 += "\nadd_inner_image_label_button|daily_challenge| `$Daily Challenge``|game/tiles_page14.rttex|1.6|30|23|32|\n";
		else dialog3 += "\nadd_inner_image_label_button|daily_challenge| `$Daily Challenge``|game/tiles_page14.rttex|1.6|28|23|32|\n";

		if (Event()->Carnival) dialog += "\nadd_inner_image_label_button|event1| `$Carnival``|game/tiles_page14.rttex|1.6|28|23|32|\n";
		else dialog += "\nadd_inner_image_label_button|event1| `$Carnival``|game/tiles_page14.rttex|1.6|30|23|32|\n";
		if (Event()->Halloween) dialog += "\nadd_inner_image_label_button|event2| `$Growganoth``|game/tiles_page14.rttex|1.6|28|23|32|\n";
		else dialog += "\nadd_inner_image_label_button|event2| `$Growganoth``|game/tiles_page14.rttex|1.6|30|23|32|\n";
		if (Event()->Zombie_Apocalypse) dialog += "\nadd_inner_image_label_button|event6| `$Zombie Apocalypse``|game/tiles_page14.rttex|1.6|28|23|32|\n";
		else dialog += "\nadd_inner_image_label_button|event6| `$Zombie Apocalypse``|game/tiles_page14.rttex|1.6|30|23|32|\n";
		if (Event()->Locke_Salesman) dialog += "\nadd_inner_image_label_button|event7| `$Locke the Traveling Salesman``|game/tiles_page14.rttex|1.6|28|23|32|\n";
		else dialog += "\nadd_inner_image_label_button|event7| `$Locke the Traveling Salesman``|game/tiles_page14.rttex|1.6|30|23|32|\n";
		if (WinterFest.Active) dialog += "\nadd_inner_image_label_button|event3| `$Winterfest``|game/tiles_page14.rttex|1.6|28|23|32|\n";
		else dialog += "\nadd_inner_image_label_button|event3| `$Winterfest``|game/tiles_page14.rttex|1.6|30|23|32|\n";
		if (Event()->Valentine) dialog += "\nadd_inner_image_label_button|event4| `$Valentine``|game/tiles_page14.rttex|1.6|28|23|32|\n";
		else dialog += "\nadd_inner_image_label_button|event4| `$Valentine``|game/tiles_page14.rttex|1.6|30|23|32|\n";
		if (Event()->Summerfest) dialog += "\nadd_inner_image_label_button|event5| `$Summerfest``|game/tiles_page14.rttex|1.6|28|23|32|\n";
		else dialog += "\nadd_inner_image_label_button|event5| `$Summerfest``|game/tiles_page14.rttex|1.6|30|23|32|\n";
		if (Event()->Harvest_Festival) dialog += "\nadd_inner_image_label_button|event8| `$Harvest Festival``|game/tiles_page14.rttex|1.6|28|23|32|\n";
		else dialog += "\nadd_inner_image_label_button|event8| `$Harvest Festival``|game/tiles_page14.rttex|1.6|30|23|32|\n";
		if (Event()->Anniversary) dialog += "\nadd_inner_image_label_button|event9| `$Anniversary``|game/tiles_page14.rttex|1.6|28|23|32|\n";
		else dialog += "\nadd_inner_image_label_button|event9| `$Anniversary``|game/tiles_page14.rttex|1.6|30|23|32|\n";
		VarList::OnDialogRequest(peer, SetColor(peer) + "set_default_color|\nadd_label_with_icon|big|Set Event Panel|left|12436|\nadd_spacer|small|" + dialog2 + "|\nadd_spacer|small|" + dialog3 + "|\nadd_spacer|small|" + dialog + "|\nadd_spacer|small|\nadd_quick_exit|\nend_dialog|server_events|Close||");
	}
	static void Giveaway(ENetPeer* peer) {
		std::string listItems = ""; int jumlahItem = 0;
		for (const auto& item : giveaway.Items) {
			listItems += "\nadd_button_with_icon|" + to_string(jumlahItem) + "|`0" + items[item.first].ori_name + "| staticYellowFrame |" + to_string(item.first) + "|" + to_string(item.second) + "|\n";
			jumlahItem++;
		}
		if (!jumlahItem) listItems = "\nadd_smalltext|No items have been added yet!|\n";
		VarList::OnDialogRequest(peer, SetColor(peer) + "set_default_color|`o\nadd_label_with_icon|big|`wGiveaway Settings!|left|2306|\nadd_smalltext|Here you can organize or arrange items according to your wishes.|\nadd_spacer|small|\nadd_textbox|`4NOTE: ``Items will be distributed to all online players on the server.|\nadd_progress_bar||small|Capacity|" + to_string(jumlahItem) + "|10|(" + to_string(jumlahItem) + " / 10)|255000000|\nadd_item_picker|ItemID|`2Add Item|Choose an item to add|\nadd_spacer|small|\nadd_textbox|List Items:|" + listItems + "\nadd_custom_break|\nadd_spacer|small|\nadd_textbox|Further Settings `5(Opsional)``:|\nadd_text_input|randomCount|Total items:|0|2|\nadd_smalltext|Check the checkbox below to use this feature!|\nadd_checkbox|randomItem|Give random items in quantity (10/item)|0\nadd_smalltext|Items will be given with a time difference of 1 second.|\nend_dialog|giveaway_setting|Nevermind|`2Apply|\nadd_quick_exit|", 200);
	}
	static void Community_Hub(ENetPeer* peer, std::string tab_name = "community_influencervideos") {
		if (tab_name == "community_influencervideos") { //Tiktok Content Creator
			VarList::OnCommunityHubRequest(peer, "set_description_text|Check out the amazing content from the official " + Environment()->server_name + " Tiktok Content Creators!|\nadd_tab_button|community_official|community official|interface/large/btn_community_hub.rttex||0|2|0|0||\nadd_tab_button|community_influencervideos|influencer videos|interface/large/btn_community_hub.rttex||1|3|0|0||\nadd_cmmnty_inflncr_bttn|https://www.tiktok.com/explore|IG_OFFICIAL|interface/large/social_buttons05.rttex|Check out our famous content creator TikTok for awesome videos about " + Environment()->server_name + "!<CR><CR><CR><CR>Would you like to open this link in your browser?|0|0|\nadd_cmmnty_inflncr_bttn|https://www.tiktok.com/explore|IG_OFFICIAL|interface/large/social_buttons05.rttex|Check out our famous content creator TikTok for awesome videos about " + Environment()->server_name + "!<CR><CR><CR><CR>Would you like to open this link in your browser?|1|0|\n");
		}
		if (tab_name == "community_official") { //Youtube Content Creator
			VarList::OnCommunityHubRequest(peer, "set_description_text|Still learning the ropes? That's okay - " + Environment()->server_name + " is HUGE! Check out the amazing content from the official " + Environment()->server_name + " Youtube Content Creators!|\nadd_tab_button|community_official|community official|interface/large/btn_community_hub.rttex||1|2|0|0||\nadd_tab_button|community_influencervideos|influencer videos|interface/large/btn_community_hub.rttex||0|3|0|0||\nadd_commnty_growtorial_bttn|https://www.youtube.com/@TeryWasTaken|YT_OFFCIAL|interface/large/social_buttons01.rttex|Check out our famous content creator YouTube channel for awesome videos about " + Environment()->server_name + "!<CR><CR><CR><CR>Would you like to open this in YouTube?|1|0|\nadd_commnty_growtorial_bttn|https://www.youtube.com/@BenBarrage|YT_OFFCIAL|interface/large/social_buttons01.rttex|Check out our famous content creator YouTube channel for awesome videos about " + Environment()->server_name + "!<CR><CR><CR><CR>Would you like to open this in YouTube?|0|1|\n");
		}
	}
	static void Wrench_Customs(ENetPeer* peer) {
		pInfo(peer)->Set_Wrench_Bg = 0, pInfo(peer)->Set_Wrench_Fg = 0;
		VarList::OnDialogRequest(peer, SetColor(peer) + "set_default_color|`$\nadd_label_with_icon|big|`wWrench Customization``|left|32|\nadd_spacer|small|\nadd_textbox|Select your custom wrench!|left|\nadd_spacer|small|\nadd_label|big|Wrench Style:|left|\nadd_custom_margin|x:10;y:0|\nadd_custom_button|wrench_reset|icon:32;border:yellow;margin:0,0;|" + a + (Has_Claimed::W_Style(peer, 14360) ? "\nadd_custom_button|wrench_prismatic|icon:14360;border:yellow;margin:0,0;|" : "") + (Has_Claimed::W_Style(peer, 14492) ? "\nadd_custom_button|wrench_shinny|icon:14492;border:yellow;margin:0,0;|" : "") + (Has_Claimed::W_Style(peer, 14496) ? "\nadd_custom_button|wrench_wrecked|icon:14496;border:yellow;margin:0,0;|" : "") + (Has_Claimed::W_Style(peer, 14500) ? "\nadd_custom_button|wrench_fresh|icon:14500;border:yellow;margin:0,0;|" : "") + (Has_Claimed::W_Style(peer, 14504) ? "\nadd_custom_button|wrench_beautiful|icon:14504;border:yellow;margin:0,0;|" : "") + (Has_Claimed::W_Style(peer, 14824) ? "\nadd_custom_button|wrench_shocking|icon:14824;border:yellow;margin:0,0;|" : "") + (Has_Claimed::W_Style(peer, 14560) ? "\nadd_custom_button|wrench_musical|icon:14560;border:yellow;margin:0,0;|" : "") + (Has_Claimed::W_Style(peer, 14714) ? "\nadd_custom_button|wrench_runic|icon:14714;border:yellow;margin:0,0;|" : "") + (Has_Claimed::W_Style(peer, 14726) ? "\nadd_custom_button|wrench_mechanical|icon:14726;border:yellow;margin:0,0;|" : "") + (Has_Claimed::W_Style(peer, 15014) ? "\nadd_custom_button|wrench_icy|icon:15014;border:yellow;margin:0,0;|" : "") + "\nreset_placement_x|\nadd_custom_margin|x:0;y:89|\nadd_label|big|Decoration:|left|\nreset_placement_x|\nadd_custom_button|wrenchforeground_reset|icon:1398;border:yellow;margin:0,0;|" + (Has_Claimed::W_Deco(peer, 14358) ? "\nadd_custom_button|wrenchforeground_prismatic_decoration|icon:14358;border:yellow;margin:0,0;|" : "") + (Has_Claimed::W_Deco(peer, 14490) ? "\nadd_custom_button|wrenchforeground_shinny_decoration|icon:14490;border:yellow;margin:0,0;|" : "") + (Has_Claimed::W_Deco(peer, 14494) ? "\nadd_custom_button|wrenchforeground_wrecked_decoration|icon:14494;border:yellow;margin:0,0;|" : "") + (Has_Claimed::W_Deco(peer, 14498) ? "\nadd_custom_button|wrenchforeground_fresh_decoration|icon:14498;border:yellow;margin:0,0;|" : "") + (Has_Claimed::W_Deco(peer, 14502) ? "\nadd_custom_button|wrenchforeground_beautiful_decoration|icon:14502;border:yellow;margin:0,0;|" : "") + (Has_Claimed::W_Deco(peer, 14822) ? "\nadd_custom_button|wrenchforeground_shocking_decoration|icon:14822;border:yellow;margin:0,0;|" : "") + (Has_Claimed::W_Deco(peer, 14558) ? "\nadd_custom_button|wrenchforeground_musical_decoration|icon:14558;border:yellow;margin:0,0;|" : "") + (Has_Claimed::W_Deco(peer, 14712) ? "\nadd_custom_button|wrenchforeground_runic_decoration|icon:14712;border:yellow;margin:0,0;|" : "") + (Has_Claimed::W_Deco(peer, 14724) ? "\nadd_custom_button|wrenchforeground_mechanical_decoration|icon:14724;border:yellow;margin:0,0;|" : "") + (Has_Claimed::W_Deco(peer, 15012) ? "\nadd_custom_button|wrenchforeground_icy_decoration|icon:15012;border:yellow;margin:0,0;|" : "") + "\nreset_placement_x|\nadd_custom_margin|x:0;y:89|\nadd_spacer|small|\nadd_textbox|Create your own custom wrench!|left|\nadd_button|create_own_cwrench|Create Custom Wrench|noflags|0|0|1|\nadd_spacer|small|\nadd_button|cancel|Back|noflags|0|0|\nadd_spacer|small|\nadd_spacer|small|\nend_dialog|wrench_customization_select|||\nadd_quick_exit|");
	}
	static void Create_Wrench_Customs(ENetPeer* peer, std::string error = "") {
		VarList::OnDialogRequest(peer, SetColor(peer) + "set_default_color|`o\nadd_dual_layer_icon_label|big|`wCreate your Own Custom Wrench|left|" + (pInfo(peer)->Set_Wrench_Bg != 0 or pInfo(peer)->Set_Wrench_Fg != 0 ? to_string(pInfo(peer)->Set_Wrench_Bg) : to_string(pInfo(peer)->wrench_foreground_custom)) + "|" + (pInfo(peer)->Set_Wrench_Fg != 0 or pInfo(peer)->Set_Wrench_Bg != 0 ? to_string(pInfo(peer)->Set_Wrench_Fg) : to_string(pInfo(peer)->wrench_custom)) + "|1.2|0|\nadd_spacer|small|" + (error.empty() ? "" : "\nadd_textbox|`4ERROR: `$" + error + "|left|\nadd_spacer|small|") + "\nadd_smalltext|Create a Custom Wrench! Only `925,000 Gems!``|left|\nadd_smalltext|Choose items from your inventory to use as your Custom Wrench.|left|\nadd_spacer|small|\nadd_item_picker|select_bg|`wChoose Background Wrench``|Choose the item for background Wrench!|\nadd_item_picker|select_fg|`wChoose Foreground Wrench``|Choose the item for foreground Wrench!|" + (pInfo(peer)->Set_Wrench_Fg + pInfo(peer)->Set_Wrench_Bg != 0 ? "\nadd_spacer|small|\nadd_dual_layer_icon_label|small|`wCustom Wrench Preview:``|left|" + to_string(pInfo(peer)->Set_Wrench_Bg) + "|" + to_string(pInfo(peer)->Set_Wrench_Fg) + "|5.0|1|" : pInfo(peer)->wrench_custom + pInfo(peer)->wrench_foreground_custom != 0 ? "\nadd_spacer|small|\nadd_dual_layer_icon_label|small|`wCustom Wrench Preview:``|left|" + to_string(pInfo(peer)->wrench_foreground_custom) + "|" + to_string(pInfo(peer)->wrench_custom) + "|5.0|1|" : "") + "\nadd_spacer|small|" + (pInfo(peer)->Set_Wrench_Fg + pInfo(peer)->Set_Wrench_Bg == 0 ? "\nadd_textbox|`oYou have not yet changed your Custom Wrench!|left|" : "\nadd_button|confirm_create_cwrench|`$Confirm Custom Wrench``|noflags|0|0|") + "\nadd_button|backto_wrench|`$Back|0|0|\nend_dialog|wrench_customization_select|||\nadd_quick_exit|");
	}
	static void RedeemCode(ENetPeer* peer) {
		long long time_ = time(nullptr);
		std::string code_list = "", user_list = "";
		for (int c_ = 0; c_ < redeem_codev2.redeemcode.size(); c_++) {
			if (redeem_codev2.redeemcode[c_].code != "") {
				code_list += "\nadd_custom_textbox|`5#" + to_string(c_ + 1) + " `oCODE: `1" + redeem_codev2.redeemcode[c_].code + "``, TIME REMAINING: `1" + (redeem_codev2.redeemcode[c_].time - time_ >= 1 ? Time::Playmod(redeem_codev2.redeemcode[c_].time - time_) : "`4EXPIRED!") + "``, REQUIRING LEVEL: `1" + to_string(redeem_codev2.redeemcode[c_].RequiringLvl) + "``, [MAX ENTER: `1" + to_string(redeem_codev2.redeemcode[c_].MaximumEnter) + "``, PLAYER ENTER: `1" + to_string(redeem_codev2.redeemcode[c_].PoepleEnter) + "``]|size:small;|\ntext_scaling_string|Subscribtions++++++++|\n";
				if (redeem_codev2.redeemcode[c_].Gemss != 0) code_list += "\nadd_button_with_icon|redeem_" + to_string(c_) + "_14590|`2Gems|staticPurpleFrame|14590|" + to_string(redeem_codev2.redeemcode[c_].Gemss) + "|\n";
				if (redeem_codev2.redeemcode[c_].Levell != 0) code_list += "\nadd_button_with_icon|redeem_" + to_string(c_) + "_1488|`2Level|staticPurpleFrame|1488|" + to_string(redeem_codev2.redeemcode[c_].Levell) + "|\n";
				if (redeem_codev2.redeemcode[c_].Coin != 0) code_list += "\nadd_button_with_icon|redeem_" + to_string(c_) + "_244|`2" + Environment()->server_name + " Coin|staticPurpleFrame|244|" + to_string(redeem_codev2.redeemcode[c_].Coin) + "|\n";
				if (redeem_codev2.redeemcode[c_].Seasonals_Token != 0) code_list += "\nadd_button_with_icon|redeem_" + to_string(c_) + "_" + to_string(guild_event_id) + "|`2" + guild_event_type + " Tokens|staticPurpleFrame|" + to_string(guild_event_id) + "|" + to_string(redeem_codev2.redeemcode[c_].Seasonals_Token) + "|\n";
				if (redeem_codev2.redeemcode[c_].GrowPass == true) code_list += "\nadd_button_with_icon|redeem_" + to_string(c_) + "_11304|`2GrowPass|staticPurpleFrame|11304|1|\n";
				if (redeem_codev2.redeemcode[c_].RoadToGlory == true) code_list += "\nadd_button_with_icon|redeem_" + to_string(c_) + "_9436|`2Road To Glory|staticPurpleFrame|9436|1|\n";
				if (redeem_codev2.redeemcode[c_].Player_Role != 0) code_list += "\nadd_button_with_icon|redeem_" + to_string(c_) + "_278|`2Role (" + a + (redeem_codev2.redeemcode[c_].Player_Role == 1 ? "`w[`1VIP`w]" : redeem_codev2.redeemcode[c_].Player_Role == 2 ? "`#@Moderator" : redeem_codev2.redeemcode[c_].Player_Role == 3 ? "`e@Administrator" : redeem_codev2.redeemcode[c_].Player_Role == 4 ? "`6@Developer" : redeem_codev2.redeemcode[c_].Player_Role == 5 ? "`b@Owner Server" : "Cheater") + "`2)|staticPurpleFrame|" + (redeem_codev2.redeemcode[c_].Player_Role == 1 ? "9882" : redeem_codev2.redeemcode[c_].Player_Role == 2 ? "9852" : redeem_codev2.redeemcode[c_].Player_Role == 3 ? "274" : redeem_codev2.redeemcode[c_].Player_Role == 4 ? "276" : redeem_codev2.redeemcode[c_].Player_Role == 5 ? "278" : "10400") + "|1|\n";
				for (int i_ = 0; i_ < redeem_codev2.redeemcode[c_].items.size(); i_++) {
					code_list += "\nadd_button_with_icon|r_" + to_string(c_) + "_" + to_string(i_) + "|`2" + items[redeem_codev2.redeemcode[c_].items[i_].first].name + "|staticPurpleFrame|" + to_string(redeem_codev2.redeemcode[c_].items[i_].first) + "|" + to_string(redeem_codev2.redeemcode[c_].items[i_].second) + "|\n";
				}
				code_list += "\nadd_button_with_icon||END_LIST|noflags|0||\nadd_small_font_button|remove_code_" + redeem_codev2.redeemcode[c_].code + "|            `4REMOVE CODE           |noflags|0|0|\nadd_spacer|small|";
			}
		}
		if (code_list.empty()) code_list = "\nadd_smalltext|None!|left|\n";
		std::string list = "", str_list = ""; int kiekItemuBus = 0;
		for (int i_ = 0; i_ < pInfo(peer)->r_items.size(); i_++) {
			kiekItemuBus++;
			list += "\nadd_button_with_icon||`$" + items[pInfo(peer)->r_items[i_].first].name + "|staticYellowFrame|" + to_string(pInfo(peer)->r_items[i_].first) + "|" + to_string(pInfo(peer)->r_items[i_].second) + "|\n";
		}
		str_list += "" + (kiekItemuBus >= 1 ? "\ntext_scaling_string|Subscribtions++++++++|" + list + "\nadd_button_with_icon||END_LIST|noflags|0||\n" : "") + "|\n";
		VarList::OnDialogRequest(peer, SetColor(peer) + "set_default_color|\nadd_label_with_icon|big|`wRedeem Code|left|12436|\nadd_spacer|small|\nadd_textbox|`oList of Redeem Code:|left|" + code_list + "|\nadd_spacer|small|\nadd_textbox|`oCreate New Code/Remove Code:|left|\nadd_spacer|small|\nadd_item_picker|itemid|`2Add Items|Pick items for Prize Redeem Code!|\nadd_spacer|small|" + str_list + "\nadd_spacer|small|\nadd_smalltext|`oTime: if you input 1 it is equal to 1 day.|left|\nadd_text_input|Time_Redeem|`oTime:||3|\nadd_custom_textbox|`oLevel Requiring to Claim Code (1-1000):|size:small;|\nadd_text_input|Level_Requi|`oLevel:||5|\nadd_custom_textbox|`oMaximum Player to Claim Code:|size:small;|\nadd_text_input|Maximum_Enter|`oMax:||5|\nadd_text_input|Redeem_CodeV2|`oCode:||10|\nadd_spacer|small|\nadd_custom_textbox|`oAnother Prize:|size:small;|\ntext_scaling_string|DEFIBRILLATOR|\nadd_checkicon|GrowPass|`oGROWPASS||11304||0||\nadd_checkicon|RoadToGlory|`oROAD TO GLORY||9436||0||\nadd_button_with_icon||END_LIST|noflags|0||\nadd_smalltext|`oROLE ID: [1 = VIP, 2 = MODERATOR, 3 = ADMIN, 4 = DEVELOPER, 5 = OWNER SERVER, 6 = CHEATER]|left|\nadd_text_input|Role_Id|`oRole ID:||10|\nadd_text_input|Amount_Gems|`oGems:||10|\nadd_text_input|Amount_Level|`oLevel||10|\nadd_text_input|Amount_Wls|`o" + Environment()->server_name + " Coin||10|\nadd_text_input|Amount_Token|`o" + guild_event_type + " Tokens:||10|\nend_dialog|set_redeem|Close|Create|\nand_quick_exit|");
	}
	static void NewbieGet(ENetPeer* peer) {
		long long time_ = time(nullptr);
		int jumlahItem = 0;
		std::string new_list = "\ntext_scaling_string|Subscribtions++++++++|";
		for (int c_ = 0; c_ < new_get.list.size(); c_++) {
			if (new_get.list[c_].Gemss != 0) new_list += "\nadd_button_with_icon|a_" + to_string(c_) + "_14590|`2Gems|staticYellowFrame|14590|" + to_string(new_get.list[c_].Gemss) + "|\n";
			if (new_get.list[c_].Coin != 0) new_list += "\nadd_button_with_icon|a_" + to_string(c_) + "_244|`2" + Environment()->server_name + " Coin|staticYellowFrame|244|" + to_string(new_get.list[c_].Coin) + "|\n";
			if (new_get.list[c_].Seasonals_Token != 0) new_list += "\nadd_button_with_icon|a_" + to_string(c_) + "_" + to_string(guild_event_id) + "|`2" + guild_event_type + " Tokens|staticYellowFrame|" + to_string(guild_event_id) + "|" + to_string(new_get.list[c_].Seasonals_Token) + "|\n";
			for (int i_ = 0; i_ < new_get.list[c_].items.size(); i_++) {
				new_list += "\nadd_button_with_icon|" + to_string(jumlahItem) + "|`2" + items[new_get.list[c_].items[i_].first].name + "|staticYellowFrame|" + to_string(new_get.list[c_].items[i_].first) + "|" + to_string(new_get.list[c_].items[i_].second) + "|\n";
				jumlahItem++;
			}
			new_list += "\nadd_button_with_icon||END_LIST|noflags|0||\nadd_small_font_button|remove_newget|            `4REMOVE NEW GET           |noflags|0|0|";
		}
		if (new_list.empty()) new_list = "\nadd_smalltext|None!|left|\n";
		std::string list = "", str_list = ""; int kiekItemuBus = 0;
		for (int i_ = 0; i_ < pInfo(peer)->n_items.size(); i_++) {
			kiekItemuBus++;
			list += "\nadd_button_with_icon||`$" + items[pInfo(peer)->n_items[i_].first].name + "|staticYellowFrame|" + to_string(pInfo(peer)->n_items[i_].first) + "|" + to_string(pInfo(peer)->n_items[i_].second) + "|\n";
		}
		str_list += "" + (kiekItemuBus >= 1 ? "\ntext_scaling_string|Subscribtions++++++++|" + list + "\nadd_button_with_icon||END_LIST|noflags|0||\nadd_spacer|small|\n" : "") + "|\n";
		VarList::OnDialogRequest(peer, SetColor(peer) + "set_default_color|\nadd_label_with_icon|big|`wNewbie Get|left|12436|\nadd_spacer|small|\nadd_textbox|`oList of Newbie Get:|left|" + new_list + "|\nadd_spacer|small|\nadd_textbox|" + (new_get.list.size() == 0 ? "`oAdd Newbie Get" : "") + "|left|" + (new_get.list.size() == 0 ? "\nadd_spacer|small|\nadd_item_picker|itemid|`2Add Items|Pick items for Newbie Get!|\nadd_spacer|small|" : "") + "" + str_list + "" + (new_get.list.size() == 0 ? "\nadd_custom_textbox|`oAnother Prize:|size:small;|\nadd_text_input|Amount_Gems|`oGems:||10|\nadd_text_input|Amount_Wls|`o" + Environment()->server_name + " Coin||10|\nadd_text_input|Amount_Token|`o" + guild_event_type + " Tokens:||10|" : "") + "\nend_dialog|set_newget|Close|" + (new_get.list.size() == 0 ? "Update" : "") + "|\nand_quick_exit|");
	}
	static void Daily_Login(ENetPeer* peer) {
		VarList::OnDialogRequest(peer, SetColor(peer) + "set_default_color|\nadd_label|big|              `wDAILY LOGIN BONUS              |left|\nadd_spacer|small|"
			"\nadd_image_button|daily|interface/large/gui_daily_login.rttex|bannerlayout||||"
			"\nadd_textured_progress_bar|interface/large/gui_event_bar2.rttex|0|0||" + to_string(pInfo(peer)->is_day) + "|7|customSizeAndPos|0.55,1|0.265,-0.55||1000|64|0.005|barBG_daily|_button_image_button_daily|\n"

			"\nadd_custom_button|btn_1|icon:" + (Has_Claimed::Daily(peer, 1) ? "6292" : "9266") + ";state:disabled;color:255,255,255,255;margin_rself:-0.5,0;" + (Has_Claimed::Daily(peer, 1) ? "border:green;" : "border:red;") + "anchor:barBG_daily;top:-2.7;left:0.142857;display:inline_free;|\n"
			+ (not Has_Claimed::Daily(peer, 1) ? "\nadd_custom_label|`b1|target:btn_1;top:0.25;left:0.25;size:small|" : "") +
			"\nadd_custom_button|daily_bg_img_1|image:interface/large/" + (Has_Claimed::Daily(peer, 1) ? "gui_finished_milestone_bg.rttex" : "gui_next_milestone_bg.rttex") + ";image_size:107,108;frame:0,0;width:0.05;state:disabled;margin_rself:0,0.3;iconAlignment:CENTER;anchor:barBG_daily;top:0;left:0.142857;display:inline_free;|\n"
			+ (not Has_Claimed::Daily(peer, 1) and not Has_Claimed::Daily(peer, 2) and not Has_Claimed::Daily(peer, 3) and not Has_Claimed::Daily(peer, 4) and not Has_Claimed::Daily(peer, 5) and not Has_Claimed::Daily(peer, 6) ?
				"\nadd_entity_animation|target:daily_bg_img_1;type:scale2d;multiply:1.2,1.2;duration:600;interpolationType:INTERPOLATE_SMOOTHSTEP;finishType:ON_FINISH_BOUNCE;|\n" : "\n") +
			"\nadd_custom_label|`w1``|target:daily_bg_img_1;top:-0.05;left:0;size:small|\n"

			"\nadd_custom_button|btn_2|icon:" + (Has_Claimed::Daily(peer, 2) ? "6292" : "14084") + ";state:disabled;color:255,255,255,255;margin_rself:-0.5,0;" + (Has_Claimed::Daily(peer, 2) ? "border:green;" : "border:red;") + "anchor:barBG_daily;top:-2.7;left:0.285714;display:inline_free;|\n"
			+ (not Has_Claimed::Daily(peer, 2) ? "\nadd_custom_label|`b15|target:btn_2;top:0.25;left:0.25;size:small|" : "") +
			"\nadd_custom_button|daily_bg_img_2|image:interface/large/" + (Has_Claimed::Daily(peer, 2) ? "gui_finished_milestone_bg.rttex" : "gui_next_milestone_bg.rttex") + ";image_size:107,108;frame:0,0;width:0.05;state:disabled;margin_rself:0,0.3;iconAlignment:CENTER;anchor:barBG_daily;top:0;left:0.285714;display:inline_free;|\n"
			+ (Has_Claimed::Daily(peer, 1) and not Has_Claimed::Daily(peer, 2) and not Has_Claimed::Daily(peer, 3) and not Has_Claimed::Daily(peer, 4) and not Has_Claimed::Daily(peer, 5) and not Has_Claimed::Daily(peer, 6) ?
				"\nadd_entity_animation|target:daily_bg_img_2;type:scale2d;multiply:1.2,1.2;duration:600;interpolationType:INTERPOLATE_SMOOTHSTEP;finishType:ON_FINISH_BOUNCE;|\n" : "\n") +
			"\nadd_custom_label|`w2``|target:daily_bg_img_2;top:-0.05;left:0;size:small|\n"

			"\nadd_custom_button|btn_3|icon:" + (Has_Claimed::Daily(peer, 3) ? "6292" : "242") + ";state:disabled;color:255,255,255,255;margin_rself:-0.5,0;" + (Has_Claimed::Daily(peer, 3) ? "border:green;" : "border:red;") + "anchor:barBG_daily;top:-2.7;left:0.428571;display:inline_free;|\n"
			+ (not Has_Claimed::Daily(peer, 3) ? "\nadd_custom_label|`b20|target:btn_3;top:0.25;left:0.25;size:small|" : "") +
			"\nadd_custom_button|daily_bg_img_3|image:interface/large/" + (Has_Claimed::Daily(peer, 3) ? "gui_finished_milestone_bg.rttex" : "gui_next_milestone_bg.rttex") + ";image_size:107,108;frame:0,0;width:0.05;state:disabled;margin_rself:0,0.3;iconAlignment:CENTER;anchor:barBG_daily;top:0;left:0.428571;display:inline_free;|\n"
			+ (Has_Claimed::Daily(peer, 1) and Has_Claimed::Daily(peer, 2) and not Has_Claimed::Daily(peer, 3) and not Has_Claimed::Daily(peer, 4) and not Has_Claimed::Daily(peer, 5) and not Has_Claimed::Daily(peer, 6) ?
				"\nadd_entity_animation|target:daily_bg_img_3;type:scale2d;multiply:1.2,1.2;duration:600;interpolationType:INTERPOLATE_SMOOTHSTEP;finishType:ON_FINISH_BOUNCE;|\n" : "\n") +
			"\nadd_custom_label|`w3``|target:daily_bg_img_3;top:-0.05;left:0;size:small|\n"

			"\nadd_custom_button|btn_4|icon:" + (Has_Claimed::Daily(peer, 4) ? "6292" : "7960") + ";state:disabled;color:255,255,255,255;margin_rself:-0.5,0;" + (Has_Claimed::Daily(peer, 4) ? "border:green;" : "border:red;") + "anchor:barBG_daily;top:-2.7;left:0.571429;display:inline_free;|\n"
			+ (not Has_Claimed::Daily(peer, 4) ? "\nadd_custom_label|`b10|target:btn_4;top:0.25;left:0.25;size:small|" : "") +
			"\nadd_custom_button|daily_bg_img_4|image:interface/large/" + (Has_Claimed::Daily(peer, 4) ? "gui_finished_milestone_bg.rttex" : "gui_next_milestone_bg.rttex") + ";image_size:107,108;frame:0,0;width:0.05;state:disabled;margin_rself:0,0.3;iconAlignment:CENTER;anchor:barBG_daily;top:0;left:0.571429;display:inline_free;|\n"
			+ (Has_Claimed::Daily(peer, 1) and Has_Claimed::Daily(peer, 2) and Has_Claimed::Daily(peer, 3) and not Has_Claimed::Daily(peer, 4) and not Has_Claimed::Daily(peer, 5) and not Has_Claimed::Daily(peer, 6) ?
				"\nadd_entity_animation|target:daily_bg_img_4;type:scale2d;multiply:1.2,1.2;duration:600;interpolationType:INTERPOLATE_SMOOTHSTEP;finishType:ON_FINISH_BOUNCE;|\n" : "\n") +
			"\nadd_custom_label|`w4``|target:daily_bg_img_4;top:-0.05;left:0;size:small|\n"

			"\nadd_custom_button|btn_5|icon:" + (Has_Claimed::Daily(peer, 5) ? "6292" : "1796") + ";state:disabled;color:255,255,255,255;margin_rself:-0.5,0;" + (Has_Claimed::Daily(peer, 5) ? "border:green;" : "border:red;") + "anchor:barBG_daily;top:-2.7;left:0.714286;display:inline_free;|\n"
			+ (not Has_Claimed::Daily(peer, 5) ? "\nadd_custom_label|`b1|target:btn_5;top:0.25;left:0.25;size:small|" : "") +
			"\nadd_custom_button|daily_bg_img_5|image:interface/large/" + (Has_Claimed::Daily(peer, 5) ? "gui_finished_milestone_bg.rttex" : "gui_next_milestone_bg.rttex") + ";image_size:107,108;frame:0,0;width:0.05;state:disabled;margin_rself:0,0.3;iconAlignment:CENTER;anchor:barBG_daily;top:0;left:0.714286;display:inline_free;|\n"
			+ (Has_Claimed::Daily(peer, 1) and Has_Claimed::Daily(peer, 2) and Has_Claimed::Daily(peer, 3) and Has_Claimed::Daily(peer, 4) and not Has_Claimed::Daily(peer, 5) and not Has_Claimed::Daily(peer, 6) ?
				"\nadd_entity_animation|target:daily_bg_img_5;type:scale2d;multiply:1.2,1.2;duration:600;interpolationType:INTERPOLATE_SMOOTHSTEP;finishType:ON_FINISH_BOUNCE;|\n" : "\n") +
			"\nadd_custom_label|`w5``|target:daily_bg_img_5;top:-0.05;left:0;size:small|\n"

			"\nadd_custom_button|btn_6|icon:" + (Has_Claimed::Daily(peer, 6) ? "6292" : "10400") + ";state:disabled;color:255,255,255,255;margin_rself:-0.5,0;" + (Has_Claimed::Daily(peer, 6) ? "border:green;" : "border:red;") + "anchor:barBG_daily;top:-2.7;left:0.857143;display:inline_free;|\n"
			+ (not Has_Claimed::Daily(peer, 6) ? "\nadd_custom_label|`b1|target:btn_6;top:0.25;left:0.25;size:small|" : "") +
			"\nadd_custom_button|daily_bg_img_6|image:interface/large/" + (Has_Claimed::Daily(peer, 6) ? "gui_finished_milestone_bg.rttex" : "gui_next_milestone_bg.rttex") + ";image_size:107,108;frame:0,0;width:0.05;state:disabled;margin_rself:0,0.3;iconAlignment:CENTER;anchor:barBG_daily;top:0;left:0.857143;display:inline_free;|\n"
			+ (Has_Claimed::Daily(peer, 1) and Has_Claimed::Daily(peer, 2) and Has_Claimed::Daily(peer, 3) and Has_Claimed::Daily(peer, 4) and Has_Claimed::Daily(peer, 5) and not Has_Claimed::Daily(peer, 6) ?
				"\nadd_entity_animation|target:daily_bg_img_6;type:scale2d;multiply:1.2,1.2;duration:600;interpolationType:INTERPOLATE_SMOOTHSTEP;finishType:ON_FINISH_BOUNCE;|\n" : "\n") +
			"\nadd_custom_label|`w6``|target:daily_bg_img_6;top:-0.05;left:0;size:small|\n"

			"\nreset_placement_x|\n"
			"\nadd_custom_button|claim_dailybonus|image:interface/large/gui_btn_claim.rttex;image_size:1080,256;width:0.3;margin:300,0;|\nadd_entity_animation|target:claim_dailybonus;type:scale2d;multiply:1.2,1.2;duration:600;interpolationType:INTERPOLATE_SMOOTHSTEP;finishType:ON_FINISH_BOUNCE;|\n"
			"\nend_dialog|daily_login|||\n"
		);
	}
	static void VipDaily_Rewards(ENetPeer* peer) {
		VarList::OnDialogRequest(peer, SetColor(peer) + "set_default_color|`o\nadd_label_with_icon|big|Vip Daily Rewards|left|9854|\nadd_spacer|small|\nadd_textbox|`5Vip Daily rewards programs offer incentives or bonuses to users just for logging in every day.|left|"
			"\nadd_spacer|big|\n"
			"\nadd_spacer|big|\n"
			"\nadd_textured_progress_bar|interface/large/gui_event_bar.rttex|0|6|`5Day: " + to_string(pInfo(peer)->vip_day) + "/7|" + to_string(pInfo(peer)->vip_day) + "|7|pre_icon|6|0.05|0|1000|64|0.005|barBG_0|\n"
			"\nadd_custom_margin|x:0;y:150|\n"

			"\nadd_custom_button|claim_1|icon:" + (Has_Claimed::Vip_Daily(peer, 1) ? "6292" : "6856") + ";color:" + (pInfo(peer)->vip_day >= 1 and (not Has_Claimed::Vip_Daily(peer, 1) or Has_Claimed::Vip_Daily(peer, 1)) ? "255,255,255,255" : "128,128,128,180") + ";border:red;preset:listitem;margin_rself:0,-0.5;anchor:barBG_0;top:-1.0;" + (pInfo(peer)->vip_day >= 1 and Has_Claimed::Vip_Daily(peer, 1) ? "state:disabled;" : pInfo(peer)->vip_day >= 1 and not Has_Claimed::Vip_Daily(peer, 1) ? "state:enable;" : "state:disabled;") + "|\n"
			+ (not Has_Claimed::Vip_Daily(peer, 1) ? "\nadd_custom_label|1|target:claim_1;top:0.25;left:0.25;size:small|\n" : "") +
			"\nadd_custom_label|`5DAY 1|target:claim_1;top:0.62;|\n"
			+ (not Has_Claimed::Vip_Daily(peer, 1) and not Has_Claimed::Vip_Daily(peer, 2) and not Has_Claimed::Vip_Daily(peer, 3) and not Has_Claimed::Vip_Daily(peer, 4) and not Has_Claimed::Vip_Daily(peer, 5) and not Has_Claimed::Vip_Daily(peer, 6) and not Has_Claimed::Vip_Daily(peer, 7) ?
				"\nadd_entity_animation|target:claim_1;type:scale2d;multiply:1.2,1.2;duration:600;interpolationType:INTERPOLATE_SMOOTHSTEP;finishType:ON_FINISH_BOUNCE;|\n" : "") +

			"\nadd_custom_button|claim_2|icon:" + (Has_Claimed::Vip_Daily(peer, 2) ? "6292" : "10944") + ";color:" + (pInfo(peer)->vip_day >= 2 and (not Has_Claimed::Vip_Daily(peer, 2) or Has_Claimed::Vip_Daily(peer, 2)) ? "255,255,255,255" : "128,128,128,180") + ";border:red;preset:listitem;margin_rself:0,0.25;anchor:barBG_0;top:1.0;left:0.222222;" + (pInfo(peer)->vip_day >= 2 and Has_Claimed::Vip_Daily(peer, 2) ? "state:disabled;" : pInfo(peer)->vip_day >= 2 and not Has_Claimed::Vip_Daily(peer, 2) ? "state:enable;" : "state:disabled;") + "|\n"
			+ (not Has_Claimed::Vip_Daily(peer, 2) ? "\nadd_custom_label|1|target:claim_2;top:0.25;left:0.25;size:small|\n" : "") +
			"\nadd_custom_label|`5DAY 2|target:claim_2;top:0.62;|\n"
			+ (Has_Claimed::Vip_Daily(peer, 1) and not Has_Claimed::Vip_Daily(peer, 2) and not Has_Claimed::Vip_Daily(peer, 3) and not Has_Claimed::Vip_Daily(peer, 4) and not Has_Claimed::Vip_Daily(peer, 5) and not Has_Claimed::Vip_Daily(peer, 6) and not Has_Claimed::Vip_Daily(peer, 7) ?
				"\nadd_entity_animation|target:claim_2;type:scale2d;multiply:1.2,1.2;duration:600;interpolationType:INTERPOLATE_SMOOTHSTEP;finishType:ON_FINISH_BOUNCE;|\n" : "") +

			"\nadd_custom_button|claim_3|icon:" + (Has_Claimed::Vip_Daily(peer, 3) ? "6292" : "14534") + ";color:" + (pInfo(peer)->vip_day >= 3 and (not Has_Claimed::Vip_Daily(peer, 3) or Has_Claimed::Vip_Daily(peer, 3)) ? "255,255,255,255" : "128,128,128,180") + ";border:red;preset:listitem;margin_rself:0,-0.5;anchor:barBG_0;top:-1.0;left:0.355555;" + (pInfo(peer)->vip_day >= 3 and Has_Claimed::Vip_Daily(peer, 3) ? "state:disabled;" : pInfo(peer)->vip_day >= 3 and not Has_Claimed::Vip_Daily(peer, 3) ? "state:enable;" : "state:disabled;") + "|\n"
			+ (not Has_Claimed::Vip_Daily(peer, 3) ? "\nadd_custom_label|100|target:claim_3;top:0.25;left:0.15;size:small|\n" : "") +
			"\nadd_custom_label|`5DAY 3|target:claim_3;top:0.62;|\n"
			+ (Has_Claimed::Vip_Daily(peer, 1) and Has_Claimed::Vip_Daily(peer, 2) and not Has_Claimed::Vip_Daily(peer, 3) and not Has_Claimed::Vip_Daily(peer, 4) and not Has_Claimed::Vip_Daily(peer, 5) and not Has_Claimed::Vip_Daily(peer, 6) and not Has_Claimed::Vip_Daily(peer, 7) ?
				"\nadd_entity_animation|target:claim_3;type:scale2d;multiply:1.2,1.2;duration:600;interpolationType:INTERPOLATE_SMOOTHSTEP;finishType:ON_FINISH_BOUNCE;|\n" : "") +

			"\nadd_custom_button|claim_4|icon:" + (Has_Claimed::Vip_Daily(peer, 4) ? "6292" : "5136") + ";color:" + (pInfo(peer)->vip_day >= 4 and (not Has_Claimed::Vip_Daily(peer, 4) or Has_Claimed::Vip_Daily(peer, 4)) ? "255,255,255,255" : "128,128,128,180") + ";border:red;preset:listitem;margin_rself:0,0.25;anchor:barBG_0;top:1.0;left:0.555555;" + (pInfo(peer)->vip_day >= 4 and Has_Claimed::Vip_Daily(peer, 4) ? "state:disabled;" : pInfo(peer)->vip_day >= 4 and not Has_Claimed::Vip_Daily(peer, 4) ? "state:enable;" : "state:disabled;") + "|\n"
			+ (not Has_Claimed::Vip_Daily(peer, 4) ? "\nadd_custom_label|5|target:claim_4;top:0.25;left:0.25;size:small|\n" : "") +
			"\nadd_custom_label|`5DAY 4|target:claim_4;top:0.62;|\n"
			+ (Has_Claimed::Vip_Daily(peer, 1) and Has_Claimed::Vip_Daily(peer, 2) and Has_Claimed::Vip_Daily(peer, 3) and not Has_Claimed::Vip_Daily(peer, 4) and not Has_Claimed::Vip_Daily(peer, 5) and not Has_Claimed::Vip_Daily(peer, 6) and not Has_Claimed::Vip_Daily(peer, 7) ?
				"\nadd_entity_animation|target:claim_4;type:scale2d;multiply:1.2,1.2;duration:600;interpolationType:INTERPOLATE_SMOOTHSTEP;finishType:ON_FINISH_BOUNCE;|\n" : "") +

			"\nadd_custom_button|claim_5|icon:" + (Has_Claimed::Vip_Daily(peer, 5) ? "6292" : "1796") + ";color:" + (pInfo(peer)->vip_day >= 5 and (not Has_Claimed::Vip_Daily(peer, 5) or Has_Claimed::Vip_Daily(peer, 5)) ? "255,255,255,255" : "128,128,128,180") + ";border:red;preset:listitem;margin_rself:0,-0.5;anchor:barBG_0;top:-1.0;left:0.666666;" + (pInfo(peer)->vip_day >= 5 and Has_Claimed::Vip_Daily(peer, 5) ? "state:disabled;" : pInfo(peer)->vip_day >= 5 and not Has_Claimed::Vip_Daily(peer, 5) ? "state:enable;" : "state:disabled;") + "|\n"
			+ (not Has_Claimed::Vip_Daily(peer, 5) ? "\nadd_custom_label|1|target:claim_5;top:0.25;left:0.25;size:small|\n" : "") +
			"\nadd_custom_label|`5DAY 5|target:claim_5;top:0.62;|\n"
			+ (Has_Claimed::Vip_Daily(peer, 1) and Has_Claimed::Vip_Daily(peer, 2) and Has_Claimed::Vip_Daily(peer, 3) and Has_Claimed::Vip_Daily(peer, 4) and not Has_Claimed::Vip_Daily(peer, 5) and not Has_Claimed::Vip_Daily(peer, 6) and not Has_Claimed::Vip_Daily(peer, 7) ?
				"\nadd_entity_animation|target:claim_5;type:scale2d;multiply:1.2,1.2;duration:600;interpolationType:INTERPOLATE_SMOOTHSTEP;finishType:ON_FINISH_BOUNCE;|\n" : "") +

			"\nadd_custom_button|claim_6|icon:" + (Has_Claimed::Vip_Daily(peer, 6) ? "6292" : "14220") + ";color:" + (pInfo(peer)->vip_day >= 6 and (not Has_Claimed::Vip_Daily(peer, 6) or Has_Claimed::Vip_Daily(peer, 6)) ? "255,255,255,255" : "128,128,128,180") + ";border:red;preset:listitem;margin_rself:0,0.25;anchor:barBG_0;top:1.0;left:0.888888;" + (pInfo(peer)->vip_day >= 6 and Has_Claimed::Vip_Daily(peer, 6) ? "state:disabled;" : pInfo(peer)->vip_day >= 6 and not Has_Claimed::Vip_Daily(peer, 6) ? "state:enable;" : "state:disabled;") + "|\n"
			+ (not Has_Claimed::Vip_Daily(peer, 6) ? "\nadd_custom_label|1|target:claim_6;top:0.25;left:0.25;size:small|\n" : "") +
			"\nadd_custom_label|`5DAY 6|target:claim_6;top:0.62;|\n"
			+ (Has_Claimed::Vip_Daily(peer, 1) and Has_Claimed::Vip_Daily(peer, 2) and Has_Claimed::Vip_Daily(peer, 3) and Has_Claimed::Vip_Daily(peer, 4) and Has_Claimed::Vip_Daily(peer, 5) and not Has_Claimed::Vip_Daily(peer, 6) and not Has_Claimed::Vip_Daily(peer, 7) ?
				"\nadd_entity_animation|target:claim_6;type:scale2d;multiply:1.2,1.2;duration:600;interpolationType:INTERPOLATE_SMOOTHSTEP;finishType:ON_FINISH_BOUNCE;|\n" : "") +

			"\nadd_custom_button|claim_7|icon:" + (Has_Claimed::Vip_Daily(peer, 7) ? "6292" : "10400") + ";color:" + (pInfo(peer)->vip_day >= 7 and (not Has_Claimed::Vip_Daily(peer, 7) or Has_Claimed::Vip_Daily(peer, 7)) ? "255,255,255,255" : "128,128,128,180") + ";border:red;preset:listitem;margin_rself:0,-0.5;anchor:barBG_0;top:-1.0;left:0.999999;" + (pInfo(peer)->vip_day >= 7 and Has_Claimed::Vip_Daily(peer, 7) ? "state:disabled;" : pInfo(peer)->vip_day >= 7 and not Has_Claimed::Vip_Daily(peer, 7) ? "state:enable;" : "state:disabled;") + "|\n"
			+ (not Has_Claimed::Vip_Daily(peer, 7) ? "\nadd_custom_label|1|target:claim_7;top:0.25;left:0.25;size:small|\n" : "") +
			"\nadd_custom_label|`5DAY 7|target:claim_7;top:0.62;|\n"
			+ (Has_Claimed::Vip_Daily(peer, 1) and Has_Claimed::Vip_Daily(peer, 2) and Has_Claimed::Vip_Daily(peer, 3) and Has_Claimed::Vip_Daily(peer, 4) and Has_Claimed::Vip_Daily(peer, 5) and Has_Claimed::Vip_Daily(peer, 6) and not Has_Claimed::Vip_Daily(peer, 7) ?
				"\nadd_entity_animation|target:claim_7;type:scale2d;multiply:1.2,1.2;duration:600;interpolationType:INTERPOLATE_SMOOTHSTEP;finishType:ON_FINISH_BOUNCE;|\n" : "") +
			"\nadd_spacer|small|\n"
			"\nadd_textbox||left|\nend_dialog|VipDailyRewards|||\n"
		);
	}
	static void MarketPlace(ENetPeer* peer, int time = 0) {
		int kiekItemuBus = 0, kiekItemuBus_ = 0;
		std::string str_dial = "set_default_color|", market_list = "", item_list = "";
		str_dial += "\nadd_label_with_icon|big|MarketPlace|left|13812|\nadd_smalltext|`$Welcome to the bustling Growtopia Marketplace. An marketplace is a digital platform that allows sellers and buyers to interact and conduct transactions for the purchase and sale of goods or services directly over the system. In this marketplace, various types of products and services are offered by different sellers, providing a diverse range of options for consumers.|left|\nadd_spacer|small|\n";
		str_dial += "\nadd_label_with_icon|small|`2Your's Marketplace:|left|1434|\n";
		bool existx = filesystem::exists("database/players/market/" + pInfo(peer)->tankIDName + "_.json");
		if (not existx) {
			str_dial += "\nadd_smalltext|`oYou don't have marketplace right now. You can create it for Free.|left|\nadd_small_font_button|createmarket_info|`2Create My Marketplace.|noflags|0|0|\n";
		}
		else {
			std::ifstream ifff("database/players/market/" + pInfo(peer)->tankIDName + "_.json");
			json j;
			ifff >> j;
			ifff.close();
			std::string ownedFgItemID = "2", ownedStoreName = "0";
			ownedFgItemID = j["fg"].get<string>(); ownedStoreName = j["name"].get<string>();
			j.clear();
			str_dial += "\ntext_scaling_string|Subscribtions++++++++|\nadd_button_with_icon|enter_my_market|`$" + ownedStoreName + "|staticYellowFrame|" + ownedFgItemID + "|\nadd_button_with_icon||END_LIST|noflags|0||\n";
		}
		str_dial += "\nadd_spacer|small|\nadd_label_with_icon|small|`2Player's Marketplace:|left|1434|\n";
		bool existx2 = filesystem::exists("database/players/market/marketinfo/stores.json");
		if (!existx2) return;
		else {
			std::vector<std::string> allStores;
			std::ifstream iffff("database/players/market/marketinfo/stores.json");
			json j2;
			iffff >> j2;
			iffff.close();
			for (int i = 0; i < j2["owners"].size(); i++) {
				allStores.push_back(j2["owners"][i]);
			}
			j2.clear();
			if (allStores.size() == 0 || (allStores[0] == pInfo(peer)->tankIDName && allStores.size() == 1)) {
				str_dial += "\nadd_smalltext|`oThere is no any Marketplace yet.|left|\n";
			}
			else {
				std::vector<Market_Place> stores;
				Market_Place infoStores;
				for (int i = 0; i < allStores.size(); i++) {
					if (allStores[i] == pInfo(peer)->tankIDName) continue;
					std::ifstream ifffff("database/players/market/" + allStores[i] + "_.json");
					json j3;
					ifffff >> j3;
					ifffff.close();
					infoStores.fg = j3["fg"].get<std::string>();
					infoStores.storeName = j3["name"].get<std::string>();
					infoStores.whose = allStores[i];
					infoStores.notifications = j3["logs"].size();
					stores.push_back(infoStores);
					j3.clear();
				}
				for (int i = 0; i < stores.size(); i++) {
					kiekItemuBus++;
					market_list += "\nadd_button_with_icon|enterplayeritem_" + stores.at(i).whose + "|`$" + stores.at(i).storeName + "|staticPurpleFrame|" + stores.at(i).fg + "||\n";
				}
			}
		}
		str_dial += "" + (kiekItemuBus >= 1 ? "\ntext_scaling_string|Subscribtions++++++++|" + market_list + "\nadd_button_with_icon||END_LIST|noflags|0||\n" : "") + "|\n";
		str_dial += "\nadd_quick_exit|\nadd_button|backsocialportal|Back|noflags|0|0|\nend_dialog|MarketPlace_Gtps|||\n";
		VarList::OnDialogRequest(peer, SetColor(peer) + str_dial, time);
	}
	static void Marvelous_Mission(ENetPeer* peer, string tab = "1") {
		if (tab == "1") {
			/*id of Myth 1*/
			int c_3166 = Inventory::Contains(peer, 3166), c_7428 = Inventory::Contains(peer, 7428), c_10030 = Inventory::Contains(peer, 10030), c_10028 = Inventory::Contains(peer, 10028), c_8390 = Inventory::Contains(peer, 8390), c_6984 = Inventory::Contains(peer, 6984);
			/*id of Myth 3*/
			int c_9734 = Inventory::Contains(peer, 9734), c_1150 = Inventory::Contains(peer, 1150), c_7948 = Inventory::Contains(peer, 7948), c_8394 = Inventory::Contains(peer, 8394), c_1954 = Inventory::Contains(peer, 1954), c_2035 = Inventory::Contains(peer, 2035);
			/*id of Myth 2*/
			int c_10248 = Inventory::Contains(peer, 10248), c_9442 = Inventory::Contains(peer, 9442), c_4828 = Inventory::Contains(peer, 4828), c_7996 = Inventory::Contains(peer, 7996), c_822 = Inventory::Contains(peer, 822), c_2974 = Inventory::Contains(peer, 2974);
			/*id of Myth 4*/
			int c_10680 = Inventory::Contains(peer, 10680), c_6818 = Inventory::Contains(peer, 6818), c_7350 = Inventory::Contains(peer, 7350), c_9610 = Inventory::Contains(peer, 9610), c_1206 = Inventory::Contains(peer, 1206), c_10726 = Inventory::Contains(peer, 10726);
			/*id of Myth 5*/
			int c_9430 = Inventory::Contains(peer, 9430), c_10578 = Inventory::Contains(peer, 10578), c_6842 = Inventory::Contains(peer, 6842), c_2856 = Inventory::Contains(peer, 2856), c_1834 = Inventory::Contains(peer, 1834), c_2722 = Inventory::Contains(peer, 2722);
			/*id of Myth 6*/
			int c_2714 = Inventory::Contains(peer, 2714), c_7044 = Inventory::Contains(peer, 7044), c_11098 = Inventory::Contains(peer, 11098), c_9690 = Inventory::Contains(peer, 9690), c_10676 = Inventory::Contains(peer, 10676), c_10144 = Inventory::Contains(peer, 10144);
			pInfo(peer)->last_choose_tab = 1;
			VarList::OnDialogRequest(peer, SetColor(peer) + "set_default_color|`o\nstart_custom_tabs|\nadd_custom_button|tab_1|image:interface/large/btn_mmtabs.rttex;image_size:228,92;frame:1,1;width:0.15;min_width:60;|\nadd_custom_button|tab_2|image:interface/large/btn_mmtabs.rttex;image_size:228,92;frame:0,2;width:0.15;min_width:60;|\nend_custom_tabs|\nadd_label_with_icon|big|`wMarvelous Missions``|left|982|\nadd_spacer|small|\nadd_textbox|Start your mission towards some awesome rewards. Unless the mission states otherwise, rewards can only be claimed once. Some rewards are only available through events or certain times of the year so make sure to check back to see what's available.|left|\nadd_spacer|small|\nadd_spacer|small|\nadd_custom_textbox|Myths and Legends : Finding the Swamp Monster!|size:medium;color:255,255,255,255|\nadd_button_with_icon|info_3166|" + a + (c_3166 >= 1 ? "`2" : "`4") + to_string(c_3166) + "/1`|staticGreyFrame,no_padding_x,is_count_label,|3166||\nadd_button_with_icon|info_7428|" + (c_7428 >= 1 ? "`2" : "`4") + to_string(c_7428) + "/1`|staticGreyFrame,no_padding_x,is_count_label,|7428||\nadd_button_with_icon|info_10030|" + (c_10030 >= 2 ? "`2" : "`4") + to_string(c_10030) + "/2`|staticGreyFrame,no_padding_x,is_count_label,|10030||\nadd_button_with_icon|info_10028|" + (c_10028 >= 2 ? "`2" : "`4") + to_string(c_10028) + "/2`|staticGreyFrame,no_padding_x,is_count_label,|10028||\nadd_button_with_icon|info_8390|" + (c_8390 >= 200 ? "`2" : "`4") + to_string(c_8390) + "/200`|staticGreyFrame,no_padding_x,is_count_label,|8390||\nadd_button_with_icon|info_6984|" + (c_6984 >= 100 ? "`2" : "`4") + to_string(c_6984) + "/100`|staticGreyFrame,no_padding_x,is_count_label,|6984||\nadd_button_with_icon||END_LIST|noflags|0||\nadd_custom_textbox|`$Reward: Swamp Monster Set + unlocks Here come the Shady Agents and The Search for Nessie`|size:small;color:255,255,255,255|\nadd_button_with_icon|info_10690||staticYellowFrame,no_padding_x,|10690|1|\nadd_button_with_icon|info_10692||staticYellowFrame,no_padding_x,|10692|1|\nadd_button_with_icon||END_ROW|noflags|0||\nadd_spacer|small|" + (pInfo(peer)->claim_myth_1 ? "\nadd_button||Claimed|off|0|0|" : "\nadd_button|claim_myth_1|Claim|" + a + (c_3166 >= 1 and c_7428 >= 1 and c_10030 >= 2 and c_10028 >= 2 and c_8390 >= 200 and c_6984 >= 100 ? "" : "off") + "|0|0|") + "\nadd_spacer|small|\nadd_spacer|small|\nadd_custom_textbox|Myths and Legends : Here come the Shady Agents|size:medium;color:255,255,255," + (pInfo(peer)->claim_myth_1 ? "255" : "80") + "|\nadd_button_with_icon|info_9734|" + (c_9734 >= 1 ? "`2" : "`4") + to_string(c_9734) + "/1`|staticGreyFrame,no_padding_x,is_count_label," + (pInfo(peer)->claim_myth_1 ? "" : "disabled") + "|9734||\nadd_button_with_icon|info_1150|" + (c_1150 >= 1 ? "`2" : "`4") + to_string(c_1150) + "/1`|staticGreyFrame,no_padding_x,is_count_label," + (pInfo(peer)->claim_myth_1 ? "" : "disabled") + "|1150||\nadd_button_with_icon|info_7948|" + (c_7948 >= 1 ? "`2" : "`4") + to_string(c_7948) + "/1`|staticGreyFrame,no_padding_x,is_count_label," + (pInfo(peer)->claim_myth_1 ? "" : "disabled") + "|7948||\nadd_button_with_icon|info_8394|" + (c_8394 >= 200 ? "`2" : "`4") + to_string(c_8394) + "/200`|staticGreyFrame,no_padding_x,is_count_label," + (pInfo(peer)->claim_myth_1 ? "" : "disabled") + "|8394||\nadd_button_with_icon|info_1954|" + (c_1954 >= 100 ? "`2" : "`4") + to_string(c_1954) + "/100`|staticGreyFrame,no_padding_x,is_count_label," + (pInfo(peer)->claim_myth_1 ? "" : "disabled") + "|1954||\nadd_button_with_icon|info_2035|" + (c_2035 >= 10 ? "`2" : "`4") + to_string(c_2035) + "/10`|staticGreyFrame,no_padding_x,is_count_label," + (pInfo(peer)->claim_myth_1 ? "" : "disabled") + "|2035||\nadd_button_with_icon||END_LIST|noflags|0||\nadd_custom_textbox|`$Reward: Shady Agent Shades  + unlocks Mothman Rising Mission`|size:small;color:255,255,255," + (pInfo(peer)->claim_myth_1 ? "255" : "80") + "|\nadd_button_with_icon|" + (pInfo(peer)->claim_myth_1 ? "info_10686" : "") + "||staticYellowFrame,no_padding_x," + (pInfo(peer)->claim_myth_1 ? "" : "disabled") + "|10686|1|\nadd_button_with_icon||END_ROW|noflags|0||\nadd_spacer|small|" + (pInfo(peer)->claim_myth_3 ? "\nadd_button||Claimed|off|0|0|" : "\nadd_button|claim_myth_3|Claim|" + a + (c_9734 >= 1 and c_1150 >= 1 and c_7948 >= 1 and c_8394 >= 200 and c_1954 >= 100 and c_2035 >= 10 and pInfo(peer)->claim_myth_1 ? "" : "off") + "|0|0|") + "\nadd_spacer|small|\nadd_spacer|small|\nadd_custom_textbox|Myths and Legends : The Search for Nessie|size:medium;color:255,255,255," + (pInfo(peer)->claim_myth_3 ? "255" : "80") + "|\nadd_button_with_icon|info_10248|" + (c_10248 >= 1 ? "`2" : "`4") + to_string(c_10248) + "/1`|staticGreyFrame,no_padding_x,is_count_label," + (pInfo(peer)->claim_myth_3 ? "" : "disabled") + "|10248||\nadd_button_with_icon|info_9442|" + (c_9442 >= 1 ? "`2" : "`4") + to_string(c_9442) + "/1`|staticGreyFrame,no_padding_x,is_count_label," + (pInfo(peer)->claim_myth_3 ? "" : "disabled") + "|9442||\nadd_button_with_icon|info_4828|" + (c_4828 >= 1 ? "`2" : "`4") + to_string(c_4828) + "/1`|staticGreyFrame,no_padding_x,is_count_label," + (pInfo(peer)->claim_myth_3 ? "" : "disabled") + "|4828||\nadd_button_with_icon|info_7996|" + (c_7996 >= 1 ? "`2" : "`4") + to_string(c_7996) + "/1`|staticGreyFrame,no_padding_x,is_count_label," + (pInfo(peer)->claim_myth_3 ? "" : "disabled") + "|7996||\nadd_button_with_icon|info_822|" + (c_822 >= 200 ? "`2" : "`4") + to_string(c_822) + "/200`|staticGreyFrame,no_padding_x,is_count_label," + (pInfo(peer)->claim_myth_3 ? "" : "disabled") + "|822||\nadd_button_with_icon|info_2974|" + (c_2974 >= 10 ? "`2" : "`4") + to_string(c_2974) + "/10`|staticGreyFrame,no_padding_x,is_count_label," + (pInfo(peer)->claim_myth_3 ? "" : "disabled") + "|2974||\nadd_button_with_icon||END_LIST|noflags|0||\nadd_custom_textbox|`$Reward: Cardboard Nessie + unlocks The menace of the Mini Minokawa Mission`|size:small;color:255,255,255," + (pInfo(peer)->claim_myth_3 ? "255" : "80") + "|\nadd_button_with_icon|" + (pInfo(peer)->claim_myth_3 ? "info_10688" : "") + "||staticYellowFrame,no_padding_x," + (pInfo(peer)->claim_myth_3 ? "" : "disabled") + "|10688|1|\nadd_button_with_icon||END_ROW|noflags|0||\nadd_spacer|small|" + (pInfo(peer)->claim_myth_2 ? "\nadd_button||Claimed|off|0|0|" : "\nadd_button|claim_myth_2|Claim|" + a + (c_10248 >= 1 and c_9442 >= 1 and c_4828 >= 1 and c_7996 >= 1 and c_822 >= 200 and c_2974 >= 10 and pInfo(peer)->claim_myth_3 ? "" : "off") + "|0|0|") + "\nadd_spacer|small|\nadd_spacer|small|\nadd_custom_textbox|Myths and Legends : Mothman Rising|size:medium;color:255,255,255," + (pInfo(peer)->claim_myth_2 ? "255" : "80") + "|\nadd_button_with_icon|info_10680|" + (c_10680 >= 1 ? "`2" : "`4") + to_string(c_10680) + "/1`|staticGreyFrame,no_padding_x,is_count_label," + (pInfo(peer)->claim_myth_2 ? "" : "disabled") + "|10680||\nadd_button_with_icon|info_6818|" + (c_6818 >= 1 ? "`2" : "`4") + to_string(c_6818) + "/1`|staticGreyFrame,no_padding_x,is_count_label," + (pInfo(peer)->claim_myth_2 ? "" : "disabled") + "|6818||\nadd_button_with_icon|info_7350|" + (c_7350 >= 1 ? "`2" : "`4") + to_string(c_7350) + "/1`|staticGreyFrame,no_padding_x,is_count_label," + (pInfo(peer)->claim_myth_2 ? "" : "disabled") + "|7350||\nadd_button_with_icon|info_9610|" + (c_9610 >= 1 ? "`2" : "`4") + to_string(c_9610) + "/1`|staticGreyFrame,no_padding_x,is_count_label," + (pInfo(peer)->claim_myth_2 ? "" : "disabled") + "|9610||\nadd_button_with_icon|info_1206|" + (c_1206 >= 1 ? "`2" : "`4") + to_string(c_1206) + "/1`|staticGreyFrame,no_padding_x,is_count_label," + (pInfo(peer)->claim_myth_2 ? "" : "disabled") + "|1206||\nadd_button_with_icon|info_10726|" + (c_10726 >= 1 ? "`2" : "`4") + to_string(c_10726) + "/1`|staticGreyFrame,no_padding_x,is_count_label," + (pInfo(peer)->claim_myth_2 ? "" : "disabled") + "|10726||\nadd_button_with_icon||END_LIST|noflags|0||\nadd_custom_textbox|`$Reward: Mothman Wings`|size:small;color:255,255,255," + (pInfo(peer)->claim_myth_2 ? "255" : "80") + "|\nadd_button_with_icon|" + (pInfo(peer)->claim_myth_1 ? "info_10684" : "") + "||staticYellowFrame,no_padding_x," + (pInfo(peer)->claim_myth_2 ? "" : "disabled") + "|10684|1|\nadd_button_with_icon||END_ROW|noflags|0||\nadd_spacer|small|" + (pInfo(peer)->claim_myth_4 ? "\nadd_button||Claimed|off|0|0|" : "\nadd_button|claim_myth_4|Claim|" + a + (c_10680 >= 1 and c_6818 >= 1 and c_7350 >= 1 and c_9610 >= 1 and c_1206 >= 1 and c_10726 and pInfo(peer)->claim_myth_2 >= 1 ? "" : "off") + "|0|0|") + "\nadd_spacer|small|\nadd_spacer|small|\nadd_custom_textbox|Myths and Legends : The Menace of the Mini Minokawa|size:medium;color:255,255,255," + (pInfo(peer)->claim_myth_4 ? "255" : "80") + "|\nadd_button_with_icon|info_9430|" + (c_9430 >= 1 ? "`2" : "`4") + to_string(c_9430) + "/1`|staticGreyFrame,no_padding_x,is_count_label," + (pInfo(peer)->claim_myth_4 ? "" : "disabled") + "|9430||\nadd_button_with_icon|info_10578|" + (c_10578 >= 1 ? "`2" : "`4") + to_string(c_10578) + "/1`|staticGreyFrame,no_padding_x,is_count_label," + (pInfo(peer)->claim_myth_4 ? "" : "disabled") + "|10578||\nadd_button_with_icon|info_6842|" + (c_6842 >= 1 ? "`2" : "`4") + to_string(c_6842) + "/1`|staticGreyFrame,no_padding_x,is_count_label," + (pInfo(peer)->claim_myth_4 ? "" : "disabled") + "|6842||\nadd_button_with_icon|info_2856|" + (c_2856 >= 100 ? "`2" : "`4") + to_string(c_2856) + "/100`|staticGreyFrame,no_padding_x,is_count_label," + (pInfo(peer)->claim_myth_4 ? "" : "disabled") + "|2856||\nadd_button_with_icon|info_1834|" + (c_1834 >= 100 ? "`2" : "`4") + to_string(c_1834) + "/100`|staticGreyFrame,no_padding_x,is_count_label," + (pInfo(peer)->claim_myth_4 ? "" : "disabled") + "|1834||\nadd_button_with_icon|info_2722|" + (c_2722 >= 100 ? "`2" : "`4") + to_string(c_2722) + "/100`|staticGreyFrame,no_padding_x,is_count_label," + (pInfo(peer)->claim_myth_4 ? "" : "disabled") + "|2722||\nadd_button_with_icon||END_LIST|noflags|0||\nadd_custom_textbox|`$Reward: Mini Minokawa + unlocks The Eye of the Heavens`|size:small;color:255,255,255," + (pInfo(peer)->claim_myth_4 ? "255" : "80") + "|\nadd_button_with_icon|" + (pInfo(peer)->claim_myth_4 ? "info_10694" : "") + "||staticYellowFrame,no_padding_x," + (pInfo(peer)->claim_myth_4 ? "" : "disabled") + "|10694|1|\nadd_button_with_icon||END_ROW|noflags|0||\nadd_spacer|small|" + (pInfo(peer)->claim_myth_5 ? "\nadd_button||Claimed|off|0|0|" : "\nadd_button|claim_myth_5|Claim|" + a + (c_9430 >= 1 and c_10578 >= 1 and c_6842 >= 1 and c_2856 >= 100 and c_1834 >= 100 and c_2722 >= 100 and pInfo(peer)->claim_myth_4 ? "" : "off") + "|0|0|") + "\nadd_spacer|small|\nadd_spacer|small|\nadd_custom_textbox|Myths and Legends : The Eye of the Heavens|size:medium;color:255,255,255," + (pInfo(peer)->claim_myth_5 ? "255" : "80") + "|\nadd_button_with_icon|info_2714|" + (c_2714 >= 200 ? "`2" : "`4") + to_string(c_2714) + "/200`|staticGreyFrame,no_padding_x,is_count_label," + (pInfo(peer)->claim_myth_5 ? "" : "disabled") + "|2714||\nadd_button_with_icon|info_7044|" + (c_7044 >= 2 ? "`2" : "`4") + to_string(c_7044) + "/2`|staticGreyFrame,no_padding_x,is_count_label," + (pInfo(peer)->claim_myth_5 ? "" : "disabled") + "|7044||\nadd_button_with_icon|info_11098|" + (c_11098 >= 2 ? "`2" : "`4") + to_string(c_11098) + "/2`|staticGreyFrame,no_padding_x,is_count_label," + (pInfo(peer)->claim_myth_5 ? "" : "disabled") + "|11098||\nadd_button_with_icon|info_9690|" + (c_9690 >= 200 ? "`2" : "`4") + to_string(c_9690) + "/200`|staticGreyFrame,no_padding_x,is_count_label," + (pInfo(peer)->claim_myth_5 ? "" : "disabled") + "|9690||\nadd_button_with_icon|info_10676|" + (c_10676 >= 5 ? "`2" : "`4") + to_string(c_10676) + "/5`|staticGreyFrame,no_padding_x,is_count_label," + (pInfo(peer)->claim_myth_5 ? "" : "disabled") + "|10676||\nadd_button_with_icon|info_10144|" + (c_10144 >= 10 ? "`2" : "`4") + to_string(c_10144) + "/10`|staticGreyFrame,no_padding_x,is_count_label," + (pInfo(peer)->claim_myth_5 ? "" : "disabled") + "|10144||\nadd_button_with_icon||END_LIST|noflags|0||\nadd_custom_textbox|`$Reward: Primordial Jade Lance`|size:small;color:255,255,255," + (pInfo(peer)->claim_myth_5 ? "255" : "80") + "|\nadd_button_with_icon|" + (pInfo(peer)->claim_myth_5 ? "info_11120" : "") + "||staticYellowFrame,no_padding_x," + (pInfo(peer)->claim_myth_5 ? "" : "disabled") + "|11120|1|\nadd_button_with_icon||END_ROW|noflags|0||\nadd_spacer|small|" + (pInfo(peer)->claim_myth_6 ? "\nadd_button||Claimed|off|0|0|" : "\nadd_button|claim_myth_6|Claim|" + a + (c_2714 >= 200 and c_7044 >= 2 and c_11098 >= 2 and c_9690 >= 200 and c_10676 >= 5 and c_10144 >= 10 and pInfo(peer)->claim_myth_5 ? "" : "off") + "|0|0|") + "\nadd_spacer|small|\nadd_textbox|More missions coming soon! Check back for some more surprises!|left|\nadd_spacer|small|\nadd_button|back|Back|noflags|0|0|\nend_dialog|collectionQuests||\nadd_quick_exit|", 500);
		}
		if (tab == "2") {
			/*Id Seven Seas 1*/
			int c_5612 = Inventory::Contains(peer, 5612), c_3812 = Inventory::Contains(peer, 3812), c_8814 = Inventory::Contains(peer, 8814), c_10226 = Inventory::Contains(peer, 10226), c_9732 = Inventory::Contains(peer, 9732), c_11264 = Inventory::Contains(peer, 11264);
			/*Id Seven Seas 2*/
			int c_5584 = Inventory::Contains(peer, 5584), c_11110 = Inventory::Contains(peer, 11110), c_5230 = Inventory::Contains(peer, 5230), c_9656 = Inventory::Contains(peer, 9656), c_10722 = Inventory::Contains(peer, 10722), c_11576 = Inventory::Contains(peer, 11576);
			/*Id Seven Seas 3*/
			int c_11128 = Inventory::Contains(peer, 11128), c_9404 = Inventory::Contains(peer, 9404), c_11418 = Inventory::Contains(peer, 11418), c_9034 = Inventory::Contains(peer, 9034), c_11144 = Inventory::Contains(peer, 11144), c_8604 = Inventory::Contains(peer, 8604);
			/*Id Seven Seas 4*/
			int c_11454 = Inventory::Contains(peer, 11454), c_6816 = Inventory::Contains(peer, 6816), c_11316 = Inventory::Contains(peer, 11316), c_10256 = Inventory::Contains(peer, 10256), c_10052 = Inventory::Contains(peer, 10052), c_11166 = Inventory::Contains(peer, 11166);
			/*Id Seven Seas 5*/
			int c_11544 = Inventory::Contains(peer, 11544), c_6986 = Inventory::Contains(peer, 6986), c_5604 = Inventory::Contains(peer, 5604), c_2802 = Inventory::Contains(peer, 2802), c_3584 = Inventory::Contains(peer, 3584), c_11350 = Inventory::Contains(peer, 11350);
			/*Id Seven Seas 6*/
			int c_10332 = Inventory::Contains(peer, 10332), c_9738 = Inventory::Contains(peer, 9738), c_10886 = Inventory::Contains(peer, 10886), c_10132 = Inventory::Contains(peer, 10132), c_9712 = Inventory::Contains(peer, 9712), c_11480 = Inventory::Contains(peer, 11480);
			pInfo(peer)->last_choose_tab = 2;
			VarList::OnDialogRequest(peer, SetColor(peer) + "set_default_color|`o\nstart_custom_tabs|\nadd_custom_button|tab_1|image:interface/large/btn_mmtabs.rttex;image_size:228,92;frame:0,1;width:0.15;min_width:60;|\nadd_custom_button|tab_2|image:interface/large/btn_mmtabs.rttex;image_size:228,92;frame:1,2;width:0.15;min_width:60;|\nend_custom_tabs|\nadd_label_with_icon|big|`wMarvelous Missions``|left|982|\nadd_spacer|small|\nadd_textbox|Start your mission towards some awesome rewards. Unless the mission states otherwise, rewards can only be claimed once. Some rewards are only available through events or certain times of the year so make sure to check back to see what's available.|left|\nadd_spacer|small|\nadd_spacer|small|\n\nadd_custom_textbox|The Seven Seas : A Tale of Tentacles!|size:medium;color:255,255,255,255|\nadd_button_with_icon|info_5612|" + a + (c_5612 >= 100 ? "`2" : "`4") + to_string(c_5612) + "/100`|staticGreyFrame,no_padding_x,is_count_label,|5612||\nadd_button_with_icon|info_3812|" + (c_3812 >= 200 ? "`2" : "`4") + to_string(c_3812) + "/200`|staticGreyFrame,no_padding_x,is_count_label,|3812||\nadd_button_with_icon|info_8814|" + (c_8814 >= 10 ? "`2" : "`4") + to_string(c_8814) + "/10`|staticGreyFrame,no_padding_x,is_count_label,|8814||\nadd_button_with_icon|info_10226|" + (c_10226 >= 10 ? "`2" : "`4") + to_string(c_10226) + "/10`|staticGreyFrame,no_padding_x,is_count_label,|10226||\nadd_button_with_icon|info_9732|" + (c_9732 >= 1 ? "`2" : "`4") + to_string(c_9732) + "/1`|staticGreyFrame,no_padding_x,is_count_label,|9732||\nadd_button_with_icon|info_11264|" + (c_11264 >= 10 ? "`2" : "`4") + to_string(c_11264) + "/10`|staticGreyFrame,no_padding_x,is_count_label,|11264||\nadd_button_with_icon||END_LIST|noflags|0||\nadd_custom_textbox|`$Reward: Robe of Tentacles + unlocks The Ray of the Manta and The Crust of the Crab`|size:small;color:255,255,255,255|\nadd_button_with_icon|info_12236||staticYellowFrame,no_padding_x,|12236|1|\nadd_button_with_icon||END_ROW|noflags|0||\nadd_spacer|small|" + (pInfo(peer)->claim_seven_seas_1 ? "\nadd_button||Claimed|off|0|0|" : "\nadd_button|claim_seven_seas_1|Claim|" + a + (c_5612 >= 100 and c_3812 >= 200 and c_8814 >= 10 and c_10226 >= 10 and c_9732 >= 1 and c_11264 >= 10 ? "" : "off") + "|0|0|") + "\nadd_spacer|small|\nadd_spacer|small|\nadd_custom_textbox|The Seven Seas  : The Ray of the Manta!|size:medium;color:255,255,255," + (pInfo(peer)->claim_seven_seas_1 ? "255" : "80") + "|\nadd_button_with_icon|info_5584|" + (c_5584 >= 10 ? "`2" : "`4") + to_string(c_5584) + "/10`|staticGreyFrame,no_padding_x,is_count_label," + (pInfo(peer)->claim_seven_seas_1 ? "" : "disabled") + "|5584||\nadd_button_with_icon|info_11110|" + (c_11110 >= 2 ? "`2" : "`4") + to_string(c_11110) + "/2`|staticGreyFrame,no_padding_x,is_count_label," + (pInfo(peer)->claim_seven_seas_1 ? "" : "disabled") + "|11110||\nadd_button_with_icon|info_5230|" + (c_5230 >= 10 ? "`2" : "`4") + to_string(c_5230) + "/10`|staticGreyFrame,no_padding_x,is_count_label," + (pInfo(peer)->claim_seven_seas_1 ? "" : "disabled") + "|5230||\nadd_button_with_icon|info_9656|" + (c_9656 >= 10 ? "`2" : "`4") + to_string(c_9656) + "/10`|staticGreyFrame,no_padding_x,is_count_label," + (pInfo(peer)->claim_seven_seas_1 ? "" : "disabled") + "|9656||\nadd_button_with_icon|info_10722|" + (c_10722 >= 1 ? "`2" : "`4") + to_string(c_10722) + "/1`|staticGreyFrame,no_padding_x,is_count_label," + (pInfo(peer)->claim_seven_seas_1 ? "" : "disabled") + "|10722||\nadd_button_with_icon|info_11576|" + (c_11576 >= 20 ? "`2" : "`4") + to_string(c_11576) + "/20`|staticGreyFrame,no_padding_x,is_count_label," + (pInfo(peer)->claim_seven_seas_1 ? "" : "disabled") + "|11576||\nadd_button_with_icon||END_LIST|noflags|0||\nadd_custom_textbox|`$Reward: Neon Manta Ray + unlocks The Curse of the Ghost Pirate`|size:small;color:255,255,255," + (pInfo(peer)->claim_seven_seas_1 ? "255" : "80") + "|\nadd_button_with_icon|" + (pInfo(peer)->claim_seven_seas_1 ? "info_12232" : "") + "||staticYellowFrame,no_padding_x," + (pInfo(peer)->claim_seven_seas_1 ? "" : "disabled") + "|12232|1|\nadd_button_with_icon||END_ROW|noflags|0||\nadd_spacer|small|" + (pInfo(peer)->claim_seven_seas_2 ? "\nadd_button||Claimed|off|0|0|" : "\nadd_button|claim_seven_seas_2|Claim|" + a + (c_5584 >= 10 and c_11110 >= 2 and c_5230 >= 10 and c_9656 >= 10 and c_10722 >= 1 and c_11576 >= 20 and pInfo(peer)->claim_seven_seas_1 ? "" : "off") + "|0|0|") + "\nadd_spacer|small|\nadd_spacer|small|\nadd_custom_textbox|The Seven Seas  : The Crust of the Crab!|size:medium;color:255,255,255," + (pInfo(peer)->claim_seven_seas_2 ? "255" : "80") + "|\nadd_button_with_icon|info_11128|" + (c_11128 >= 1 ? "`2" : "`4") + to_string(c_11128) + "/1`|staticGreyFrame,no_padding_x,is_count_label," + (pInfo(peer)->claim_seven_seas_2 ? "" : "disabled") + "|11128||\nadd_button_with_icon|info_9404|" + (c_9404 >= 1 ? "`2" : "`4") + to_string(c_9404) + "/1`|staticGreyFrame,no_padding_x,is_count_label," + (pInfo(peer)->claim_seven_seas_2 ? "" : "disabled") + "|9404||\nadd_button_with_icon|info_11418|" + (c_11418 >= 10 ? "`2" : "`4") + to_string(c_11418) + "/10`|staticGreyFrame,no_padding_x,is_count_label," + (pInfo(peer)->claim_seven_seas_2 ? "" : "disabled") + "|11418||\nadd_button_with_icon|info_9034|" + (c_9034 >= 10 ? "`2" : "`4") + to_string(c_9034) + "/10`|staticGreyFrame,no_padding_x,is_count_label," + (pInfo(peer)->claim_seven_seas_2 ? "" : "disabled") + "|9034||\nadd_button_with_icon|info_11144|" + (c_11144 >= 1 ? "`2" : "`4") + to_string(c_11144) + "/1`|staticGreyFrame,no_padding_x,is_count_label," + (pInfo(peer)->claim_seven_seas_2 ? "" : "disabled") + "|11144||\nadd_button_with_icon|info_8604|" + (c_8604 >= 1 ? "`2" : "`4") + to_string(c_8604) + "/1`|staticGreyFrame,no_padding_x,is_count_label," + (pInfo(peer)->claim_seven_seas_2 ? "" : "disabled") + "|8604||\nadd_button_with_icon||END_LIST|noflags|0||\nadd_custom_textbox|`$Reward: Cruising Crab + unlocks The Wings of Atlantis`|size:small;color:255,255,255," + (pInfo(peer)->claim_seven_seas_2 ? "255" : "80") + "|\nadd_button_with_icon|" + (pInfo(peer)->claim_seven_seas_2 ? "info_12238" : "") + "||staticYellowFrame,no_padding_x," + (pInfo(peer)->claim_seven_seas_2 ? "" : "disabled") + "|12238|1|\nadd_button_with_icon||END_ROW|noflags|0||\nadd_spacer|small|" + (pInfo(peer)->claim_seven_seas_3 ? "\nadd_button||Claimed|off|0|0|" : "\nadd_button|claim_seven_seas_3|Claim|" + a + (c_11128 >= 1 and c_9404 >= 1 and c_11418 >= 10 and c_9034 >= 10 and c_11144 >= 1 and c_8604 >= 1 and pInfo(peer)->claim_seven_seas_2 ? "" : "off") + "|0|0|") + "\nadd_spacer|small|\nadd_spacer|small|\nadd_custom_textbox|The Seven Seas  : The Curse of the Ghost Pirate!|size:medium;color:255,255,255," + (pInfo(peer)->claim_seven_seas_3 ? "255" : "80") + "|\nadd_button_with_icon|info_11454|" + (c_11454 >= 10 ? "`2" : "`4") + to_string(c_11454) + "/10`|staticGreyFrame,no_padding_x,is_count_label," + (pInfo(peer)->claim_seven_seas_3 ? "" : "disabled") + "|11454||\nadd_button_with_icon|info_6816|" + (c_6816 >= 1 ? "`2" : "`4") + to_string(c_6816) + "/1`|staticGreyFrame,no_padding_x,is_count_label," + (pInfo(peer)->claim_seven_seas_3 ? "" : "disabled") + "|6816||\nadd_button_with_icon|info_11316|" + (c_11316 >= 1 ? "`2" : "`4") + to_string(c_11316) + "/1`|staticGreyFrame,no_padding_x,is_count_label," + (pInfo(peer)->claim_seven_seas_3 ? "" : "disabled") + "|11316||\nadd_button_with_icon|info_10256|" + (c_10256 >= 10 ? "`2" : "`4") + to_string(c_10256) + "/10`|staticGreyFrame,no_padding_x,is_count_label," + (pInfo(peer)->claim_seven_seas_3 ? "" : "disabled") + "|10256||\nadd_button_with_icon|info_10052|" + (c_10052 >= 1 ? "`2" : "`4") + to_string(c_10052) + "/1`|staticGreyFrame,no_padding_x,is_count_label," + (pInfo(peer)->claim_seven_seas_3 ? "" : "disabled") + "|10052||\nadd_button_with_icon|info_11166|" + (c_11166 >= 10 ? "`2" : "`4") + to_string(c_11166) + "/10`|staticGreyFrame,no_padding_x,is_count_label," + (pInfo(peer)->claim_seven_seas_3 ? "" : "disabled") + "|11166||\nadd_button_with_icon||END_LIST|noflags|0||\nadd_custom_textbox|`$Reward: Ghost Pirate Set + 1 of 2 requirements for The Heart of the Ocean`|size:small;color:255,255,255," + (pInfo(peer)->claim_seven_seas_3 ? "255" : "80") + "\nadd_button_with_icon|" + (pInfo(peer)->claim_seven_seas_3 ? "info_12228" : "") + "||staticYellowFrame,no_padding_x," + (pInfo(peer)->claim_seven_seas_3 ? "" : "disabled") + "|12228|1|\nadd_button_with_icon|" + (pInfo(peer)->claim_seven_seas_3 ? "info_12230" : "") + "||staticYellowFrame,no_padding_x," + (pInfo(peer)->claim_seven_seas_3 ? "" : "disabled") + "|12230|1|\nadd_button_with_icon||END_ROW|noflags|0||\nadd_spacer|small|" + (pInfo(peer)->claim_seven_seas_4 ? "\nadd_button||Claimed|off|0|0|" : "\nadd_button|claim_seven_seas_4|Claim|" + a + (c_11454 >= 10 and c_6816 >= 1 and c_11316 >= 1 and c_10256 >= 10 and c_10052 >= 1 and c_11166 >= 10 and pInfo(peer)->claim_seven_seas_3 ? "" : "off") + "|0|0|") + "\nadd_spacer|small|\nadd_spacer|small|\nadd_custom_textbox|The Seven Seas  : The Wings of Atlantis!|size:medium;color:255,255,255," + (pInfo(peer)->claim_seven_seas_4 ? "255" : "80") + "|\nadd_button_with_icon|info_11544|" + (c_11544 >= 2 ? "`2" : "`4") + to_string(c_11544) + "/2`|staticGreyFrame,no_padding_x,is_count_label," + (pInfo(peer)->claim_seven_seas_4 ? "" : "disabled") + "|11544||\nadd_button_with_icon|info_6986|" + (c_6986 >= 200 ? "`2" : "`4") + to_string(c_6986) + "/200`|staticGreyFrame,no_padding_x,is_count_label," + (pInfo(peer)->claim_seven_seas_4 ? "" : "disabled") + "|6986||\nadd_button_with_icon|info_5604|" + (c_5604 >= 10 ? "`2" : "`4") + to_string(c_5604) + "/10`|staticGreyFrame,no_padding_x,is_count_label," + (pInfo(peer)->claim_seven_seas_4 ? "" : "disabled") + "|5604||\nadd_button_with_icon|info_2802|" + (c_2802 >= 1 ? "`2" : "`4") + to_string(c_2802) + "/1`|staticGreyFrame,no_padding_x,is_count_label," + (pInfo(peer)->claim_seven_seas_4 ? "" : "disabled") + "|2802||\nadd_button_with_icon|info_3584|" + (c_3584 >= 200 ? "`2" : "`4") + to_string(c_3584) + "/200`|staticGreyFrame,no_padding_x,is_count_label," + (pInfo(peer)->claim_seven_seas_4 ? "" : "disabled") + "|3584||\nadd_button_with_icon|info_11350|" + (c_11350 >= 1 ? "`2" : "`4") + to_string(c_11350) + "/1`|staticGreyFrame,no_padding_x,is_count_label," + (pInfo(peer)->claim_seven_seas_4 ? "" : "disabled") + "|11350||\nadd_button_with_icon||END_LIST|noflags|0||\nadd_custom_textbox|`$Reward: Atlantean Wings + 1 of 2 requirements for The Heart of the Ocean`|size:small;color:255,255,255," + (pInfo(peer)->claim_seven_seas_4 ? "255" : "80") + "|\nadd_button_with_icon|" + (pInfo(peer)->claim_seven_seas_4 ? "info_12234" : "") + "||staticYellowFrame,no_padding_x," + (pInfo(peer)->claim_seven_seas_4 ? "" : "disabled") + "|12234|1|\nadd_button_with_icon||END_ROW|noflags|0||\nadd_spacer|small|" + (pInfo(peer)->claim_seven_seas_5 ? "\nadd_button||Claimed|off|0|0|" : "\nadd_button|claim_seven_seas_5|Claim|" + a + (c_11544 >= 2 and c_6986 >= 200 and c_5604 >= 10 and c_2802 >= 1 and c_3584 >= 200 and c_11350 >= 1 and pInfo(peer)->claim_seven_seas_4 ? "" : "off") + "|0|0|") + "\nadd_spacer|small|\nadd_spacer|small|\nadd_custom_textbox|The Seven Seas  : The Heart of the Ocean!|size:medium;color:255,255,255," + (pInfo(peer)->claim_seven_seas_5 ? "255" : "80") + "|\nadd_button_with_icon|info_10332|" + (c_10332 >= 1 ? "`2" : "`4") + to_string(c_10332) + "/1`|staticGreyFrame,no_padding_x,is_count_label," + (pInfo(peer)->claim_seven_seas_5 ? "" : "disabled") + "|10332||\nadd_button_with_icon|info_9738|" + (c_9738 >= 20 ? "`2" : "`4") + to_string(c_9738) + "/20`|staticGreyFrame,no_padding_x,is_count_label," + (pInfo(peer)->claim_seven_seas_5 ? "" : "disabled") + "|9738||\nadd_button_with_icon|info_10886|" + (c_10886 >= 1 ? "`2" : "`4") + to_string(c_10886) + "/1`|staticGreyFrame,no_padding_x,is_count_label," + (pInfo(peer)->claim_seven_seas_5 ? "" : "disabled") + "|10886||\nadd_button_with_icon|info_10132|" + (c_10132 >= 1 ? "`2" : "`4") + to_string(c_10132) + "/1`|staticGreyFrame,no_padding_x,is_count_label," + (pInfo(peer)->claim_seven_seas_5 ? "" : "disabled") + "|10132||\nadd_button_with_icon|info_9712|" + (c_9712 >= 1 ? "`2" : "`4") + to_string(c_9712) + "/1`|staticGreyFrame,no_padding_x,is_count_label," + (pInfo(peer)->claim_seven_seas_5 ? "" : "disabled") + "|9712||\nadd_button_with_icon|info_11480|" + (c_11480 >= 10 ? "`2" : "`4") + to_string(c_11480) + "/10`|staticGreyFrame,no_padding_x,is_count_label," + (pInfo(peer)->claim_seven_seas_5 ? "" : "disabled") + "|11480||\nadd_button_with_icon||END_LIST|noflags|0||\nadd_custom_textbox|`$Reward: Oceanaura!`|size:small;color:255,255,255," + (pInfo(peer)->claim_seven_seas_5 ? "255" : "80") + "|\nadd_button_with_icon|" + (pInfo(peer)->claim_seven_seas_5 ? "info_12240" : "") + "||staticYellowFrame,no_padding_x," + (pInfo(peer)->claim_seven_seas_5 ? "" : "disabled") + "|12240|1|\nadd_button_with_icon||END_ROW|noflags|0||\nadd_spacer|small|" + (pInfo(peer)->claim_seven_seas_6 ? "\nadd_button||Claimed|off|0|0|" : "\nadd_button|claim_seven_seas_6|Claim|" + a + (c_10332 >= 1 and c_9738 >= 20 and c_10886 >= 1 and c_10132 >= 1 and c_9712 >= 1 and c_11480 >= 10 and pInfo(peer)->claim_seven_seas_5 ? "" : "off") + "|0|0|") + "\nadd_spacer|small|\nadd_textbox|More missions coming soon! Check back for some more surprises!|left|\nadd_spacer|small|\nadd_button|back|Back|noflags|0|0|\nend_dialog|collectionQuests|||\nadd_quick_exit|", 500);
		}
	}
	static void Winter_Bingo(ENetPeer* peer) {
		if (pInfo(peer)->Has_WinBingo) {
			string has_ = "", r0 = "r0", r1 = "r1", r2 = "r2", r3 = "r3", r4 = "r4", c0 = "c0", c1 = "c1", c2 = "c2", c3 = "c3", c4 = "c4";
			bool Reward_r0 = (Has_Claimed::Bingo(peer, pInfo(peer)->WinterBingo_Task["0"]) and Has_Claimed::Bingo(peer, pInfo(peer)->WinterBingo_Task["1"]) and Has_Claimed::Bingo(peer, pInfo(peer)->WinterBingo_Task["2"]) and Has_Claimed::Bingo(peer, pInfo(peer)->WinterBingo_Task["3"]) and Has_Claimed::Bingo(peer, pInfo(peer)->WinterBingo_Task["4"])), Reward_r1 = (Has_Claimed::Bingo(peer, pInfo(peer)->WinterBingo_Task["5"]) and Has_Claimed::Bingo(peer, pInfo(peer)->WinterBingo_Task["6"]) and Has_Claimed::Bingo(peer, pInfo(peer)->WinterBingo_Task["7"]) and Has_Claimed::Bingo(peer, pInfo(peer)->WinterBingo_Task["9"]) and Has_Claimed::Bingo(peer, pInfo(peer)->WinterBingo_Task["9"])), Reward_r2 = (Has_Claimed::Bingo(peer, pInfo(peer)->WinterBingo_Task["10"]) and Has_Claimed::Bingo(peer, pInfo(peer)->WinterBingo_Task["11"]) and Has_Claimed::Bingo(peer, pInfo(peer)->WinterBingo_Task["12"]) and Has_Claimed::Bingo(peer, pInfo(peer)->WinterBingo_Task["13"]) and Has_Claimed::Bingo(peer, pInfo(peer)->WinterBingo_Task["14"])), Reward_r3 = (Has_Claimed::Bingo(peer, pInfo(peer)->WinterBingo_Task["15"]) and Has_Claimed::Bingo(peer, pInfo(peer)->WinterBingo_Task["16"]) and Has_Claimed::Bingo(peer, pInfo(peer)->WinterBingo_Task["17"]) and Has_Claimed::Bingo(peer, pInfo(peer)->WinterBingo_Task["18"]) and Has_Claimed::Bingo(peer, pInfo(peer)->WinterBingo_Task["19"])), Reward_r4 = (Has_Claimed::Bingo(peer, pInfo(peer)->WinterBingo_Task["20"]) and Has_Claimed::Bingo(peer, pInfo(peer)->WinterBingo_Task["21"]) and Has_Claimed::Bingo(peer, pInfo(peer)->WinterBingo_Task["22"]) and Has_Claimed::Bingo(peer, pInfo(peer)->WinterBingo_Task["23"]) and Has_Claimed::Bingo(peer, pInfo(peer)->WinterBingo_Task["24"])), Reward_c0 = (Has_Claimed::Bingo(peer, pInfo(peer)->WinterBingo_Task["0"]) and Has_Claimed::Bingo(peer, pInfo(peer)->WinterBingo_Task["5"]) and Has_Claimed::Bingo(peer, pInfo(peer)->WinterBingo_Task["10"]) and Has_Claimed::Bingo(peer, pInfo(peer)->WinterBingo_Task["15"]) and Has_Claimed::Bingo(peer, pInfo(peer)->WinterBingo_Task["20"])), Reward_c1 = (Has_Claimed::Bingo(peer, pInfo(peer)->WinterBingo_Task["1"]) and Has_Claimed::Bingo(peer, pInfo(peer)->WinterBingo_Task["6"]) and Has_Claimed::Bingo(peer, pInfo(peer)->WinterBingo_Task["11"]) and Has_Claimed::Bingo(peer, pInfo(peer)->WinterBingo_Task["16"]) and Has_Claimed::Bingo(peer, pInfo(peer)->WinterBingo_Task["21"])), Reward_c2 = (Has_Claimed::Bingo(peer, pInfo(peer)->WinterBingo_Task["2"]) and Has_Claimed::Bingo(peer, pInfo(peer)->WinterBingo_Task["7"]) and Has_Claimed::Bingo(peer, pInfo(peer)->WinterBingo_Task["12"]) and Has_Claimed::Bingo(peer, pInfo(peer)->WinterBingo_Task["17"]) and Has_Claimed::Bingo(peer, pInfo(peer)->WinterBingo_Task["22"])), Reward_c3 = (Has_Claimed::Bingo(peer, pInfo(peer)->WinterBingo_Task["3"]) and Has_Claimed::Bingo(peer, pInfo(peer)->WinterBingo_Task["8"]) and Has_Claimed::Bingo(peer, pInfo(peer)->WinterBingo_Task["13"]) and Has_Claimed::Bingo(peer, pInfo(peer)->WinterBingo_Task["18"]) and Has_Claimed::Bingo(peer, pInfo(peer)->WinterBingo_Task["23"])), Reward_c4 = (Has_Claimed::Bingo(peer, pInfo(peer)->WinterBingo_Task["4"]) and Has_Claimed::Bingo(peer, pInfo(peer)->WinterBingo_Task["9"]) and Has_Claimed::Bingo(peer, pInfo(peer)->WinterBingo_Task["14"]) and Has_Claimed::Bingo(peer, pInfo(peer)->WinterBingo_Task["19"]) and Has_Claimed::Bingo(peer, pInfo(peer)->WinterBingo_Task["24"]));
			if (Has_Claimed::BingoPr2(peer, "r0") and Has_Claimed::BingoPr(peer, "r0")) pInfo(peer)->Has_BingoPrize.erase(std::remove_if(pInfo(peer)->Has_BingoPrize.begin(), pInfo(peer)->Has_BingoPrize.end(), [r0](const std::tuple<std::string, int, int>& p) { return std::get<0>(p) == r0; }), pInfo(peer)->Has_BingoPrize.end());
			if (Has_Claimed::BingoPr2(peer, "r1") and Has_Claimed::BingoPr(peer, "r1")) pInfo(peer)->Has_BingoPrize.erase(std::remove_if(pInfo(peer)->Has_BingoPrize.begin(), pInfo(peer)->Has_BingoPrize.end(), [r1](const std::tuple<std::string, int, int>& p) { return std::get<0>(p) == r1; }), pInfo(peer)->Has_BingoPrize.end());
			if (Has_Claimed::BingoPr2(peer, "r2") and Has_Claimed::BingoPr(peer, "r2")) pInfo(peer)->Has_BingoPrize.erase(std::remove_if(pInfo(peer)->Has_BingoPrize.begin(), pInfo(peer)->Has_BingoPrize.end(), [r2](const std::tuple<std::string, int, int>& p) { return std::get<0>(p) == r2; }), pInfo(peer)->Has_BingoPrize.end());
			if (Has_Claimed::BingoPr2(peer, "r3") and Has_Claimed::BingoPr(peer, "r3")) pInfo(peer)->Has_BingoPrize.erase(std::remove_if(pInfo(peer)->Has_BingoPrize.begin(), pInfo(peer)->Has_BingoPrize.end(), [r3](const std::tuple<std::string, int, int>& p) { return std::get<0>(p) == r3; }), pInfo(peer)->Has_BingoPrize.end());
			if (Has_Claimed::BingoPr2(peer, "r4") and Has_Claimed::BingoPr(peer, "r4")) pInfo(peer)->Has_BingoPrize.erase(std::remove_if(pInfo(peer)->Has_BingoPrize.begin(), pInfo(peer)->Has_BingoPrize.end(), [r4](const std::tuple<std::string, int, int>& p) { return std::get<0>(p) == r4; }), pInfo(peer)->Has_BingoPrize.end());
			if (Has_Claimed::BingoPr2(peer, "c0") and Has_Claimed::BingoPr(peer, "c0")) pInfo(peer)->Has_BingoPrize.erase(std::remove_if(pInfo(peer)->Has_BingoPrize.begin(), pInfo(peer)->Has_BingoPrize.end(), [c0](const std::tuple<std::string, int, int>& p) { return std::get<0>(p) == c0; }), pInfo(peer)->Has_BingoPrize.end());
			if (Has_Claimed::BingoPr2(peer, "c1") and Has_Claimed::BingoPr(peer, "c1")) pInfo(peer)->Has_BingoPrize.erase(std::remove_if(pInfo(peer)->Has_BingoPrize.begin(), pInfo(peer)->Has_BingoPrize.end(), [c1](const std::tuple<std::string, int, int>& p) { return std::get<0>(p) == c1; }), pInfo(peer)->Has_BingoPrize.end());
			if (Has_Claimed::BingoPr2(peer, "c2") and Has_Claimed::BingoPr(peer, "c2")) pInfo(peer)->Has_BingoPrize.erase(std::remove_if(pInfo(peer)->Has_BingoPrize.begin(), pInfo(peer)->Has_BingoPrize.end(), [c2](const std::tuple<std::string, int, int>& p) { return std::get<0>(p) == c2; }), pInfo(peer)->Has_BingoPrize.end());
			if (Has_Claimed::BingoPr2(peer, "c3") and Has_Claimed::BingoPr(peer, "c3")) pInfo(peer)->Has_BingoPrize.erase(std::remove_if(pInfo(peer)->Has_BingoPrize.begin(), pInfo(peer)->Has_BingoPrize.end(), [c3](const std::tuple<std::string, int, int>& p) { return std::get<0>(p) == c3; }), pInfo(peer)->Has_BingoPrize.end());
			if (Has_Claimed::BingoPr2(peer, "c4") and Has_Claimed::BingoPr(peer, "c4")) pInfo(peer)->Has_BingoPrize.erase(std::remove_if(pInfo(peer)->Has_BingoPrize.begin(), pInfo(peer)->Has_BingoPrize.end(), [c4](const std::tuple<std::string, int, int>& p) { return std::get<0>(p) == c4; }), pInfo(peer)->Has_BingoPrize.end());
			if (Reward_r0 and not Has_Claimed::BingoPr2(peer, "r0") and not Has_Claimed::BingoPr(peer, "r0")) pInfo(peer)->Has_BingoPrize.emplace_back("r0", pInfo(peer)->WinterBingo_Prize["r0"].first, pInfo(peer)->WinterBingo_Prize["r0"].second);
			if (Reward_r1 and not Has_Claimed::BingoPr2(peer, "r1") and not Has_Claimed::BingoPr(peer, "r1")) pInfo(peer)->Has_BingoPrize.emplace_back("r1", pInfo(peer)->WinterBingo_Prize["r1"].first, pInfo(peer)->WinterBingo_Prize["r1"].second);
			if (Reward_r2 and not Has_Claimed::BingoPr2(peer, "r2") and not Has_Claimed::BingoPr(peer, "r2")) pInfo(peer)->Has_BingoPrize.emplace_back("r2", pInfo(peer)->WinterBingo_Prize["r2"].first, pInfo(peer)->WinterBingo_Prize["r2"].second);
			if (Reward_r3 and not Has_Claimed::BingoPr2(peer, "r3") and not Has_Claimed::BingoPr(peer, "r3")) pInfo(peer)->Has_BingoPrize.emplace_back("r3", pInfo(peer)->WinterBingo_Prize["r3"].first, pInfo(peer)->WinterBingo_Prize["r3"].second);
			if (Reward_r4 and not Has_Claimed::BingoPr2(peer, "r4") and not Has_Claimed::BingoPr(peer, "r4")) pInfo(peer)->Has_BingoPrize.emplace_back("r4", pInfo(peer)->WinterBingo_Prize["r4"].first, pInfo(peer)->WinterBingo_Prize["r4"].second);
			if (Reward_c0 and not Has_Claimed::BingoPr2(peer, "c0") and not Has_Claimed::BingoPr(peer, "c0")) pInfo(peer)->Has_BingoPrize.emplace_back("c0", pInfo(peer)->WinterBingo_Prize["c0"].first, pInfo(peer)->WinterBingo_Prize["c0"].second);
			if (Reward_c1 and not Has_Claimed::BingoPr2(peer, "c1") and not Has_Claimed::BingoPr(peer, "c1")) pInfo(peer)->Has_BingoPrize.emplace_back("c1", pInfo(peer)->WinterBingo_Prize["c1"].first, pInfo(peer)->WinterBingo_Prize["c1"].second);
			if (Reward_c2 and not Has_Claimed::BingoPr2(peer, "c2") and not Has_Claimed::BingoPr(peer, "c2")) pInfo(peer)->Has_BingoPrize.emplace_back("c2", pInfo(peer)->WinterBingo_Prize["c2"].first, pInfo(peer)->WinterBingo_Prize["c2"].second);
			if (Reward_c3 and not Has_Claimed::BingoPr2(peer, "c3") and not Has_Claimed::BingoPr(peer, "c3")) pInfo(peer)->Has_BingoPrize.emplace_back("c3", pInfo(peer)->WinterBingo_Prize["c3"].first, pInfo(peer)->WinterBingo_Prize["c3"].second);
			if (Reward_c4 and not Has_Claimed::BingoPr2(peer, "c4") and not Has_Claimed::BingoPr(peer, "c4")) pInfo(peer)->Has_BingoPrize.emplace_back("c4", pInfo(peer)->WinterBingo_Prize["c4"].first, pInfo(peer)->WinterBingo_Prize["c4"].second);

			if (Reward_r0 and not Has_Claimed::BingoPr2(peer, "r0") and Has_Claimed::BingoPr(peer, "r0") 
				or Reward_r1 and not Has_Claimed::BingoPr2(peer, "r1") and Has_Claimed::BingoPr(peer, "r1")
				or Reward_r2 and not Has_Claimed::BingoPr2(peer, "r2") and Has_Claimed::BingoPr(peer, "r2")
				or Reward_r3 and not Has_Claimed::BingoPr2(peer, "r3") and Has_Claimed::BingoPr(peer, "r3")
				or Reward_r4 and not Has_Claimed::BingoPr2(peer, "r4") and Has_Claimed::BingoPr(peer, "r4")
				or Reward_c0 and not Has_Claimed::BingoPr2(peer, "c0") and Has_Claimed::BingoPr(peer, "c0")
				or Reward_c1 and not Has_Claimed::BingoPr2(peer, "c1") and Has_Claimed::BingoPr(peer, "c1")
				or Reward_c2 and not Has_Claimed::BingoPr2(peer, "c2") and Has_Claimed::BingoPr(peer, "c2")
				or Reward_c3 and not Has_Claimed::BingoPr2(peer, "c3") and Has_Claimed::BingoPr(peer, "c3")
				or Reward_c4 and not Has_Claimed::BingoPr2(peer, "c4") and Has_Claimed::BingoPr(peer, "c4")) {
				string list_prize = "";
				for (const auto& result : pInfo(peer)->Has_BingoPrize) {
					list_prize += "\nadd_label_with_icon|small|`$" + to_string(std::get<2>(result)) + " " + items[std::get<1>(result)].name + "|left|" + to_string(std::get<1>(result)) + "|";
				}
				has_ += "\nadd_label|big|`wBINGO!|left|\nadd_spacer|small|" + list_prize + "|\nadd_spacer|small|\nadd_button|Claim_All_Prize|`$Claim Prizes|noflags|0|0|\nadd_spacer|small|\nadd_textbox|`$Make sure to collect your prizes before the end of event. `4Otherwise, they will be gone forever!|left|\nadd_spacer|small|\nend_dialog|bingo_ui|Close||\nadd_quick_exit|\n";
			}
			else {
				has_ += "\nadd_custom_button|resetcard|textLabel:Reset Card for 5 World Locks;middle_colour:3434645503;border_colour:3434645503;display:block;|\nreset_placement_x|\nadd_spacer|small|\nadd_textbox|The cost will increase with each Reset until you claim a reward. Resetting the card will discard all the progress you have on the current card and give new items to collect and new rewards to achieve. Any unachieved rewards will be lost.|left|\nadd_spacer|small|\nend_dialog|bingo_ui|Close||\nadd_quick_exit|\n";
			}
			string dialog = "";
			dialog += "\nadd_label_with_icon|big|`wWinterfest Bingo``|left|1360|\n";
			dialog += "\nadd_spacer|small|\n";
			dialog += "\nadd_textbox|Collect items across Winterfest to get prizes. Once you get 5 items in a row or column, you will be able to claim the prize displayed at the end of that row or column.|left|\n";
			dialog += "\nadd_spacer|small|\n";
			dialog += "\nadd_custom_margin|x:10;y:0|\n";
			dialog += "\nadd_custom_button|" + a + (Has_Claimed::Bingo(peer, pInfo(peer)->WinterBingo_Task["0"]) ? "" : "bingoItem_" + to_string(pInfo(peer)->WinterBingo_Task["0"]) + "") + "|icon:" + (Has_Claimed::Bingo(peer, pInfo(peer)->WinterBingo_Task["0"]) ? "6292" : to_string(pInfo(peer)->WinterBingo_Task["0"])) + ";state:enabled;" + (Has_Claimed::Bingo(peer, pInfo(peer)->WinterBingo_Task["0"]) ? "border:grey;" : "border:white;") + "margin:0,0;|\n";
			dialog += "\nadd_custom_button|" + a + (Has_Claimed::Bingo(peer, pInfo(peer)->WinterBingo_Task["1"]) ? "" : "bingoItem_" + to_string(pInfo(peer)->WinterBingo_Task["1"]) + "") + "|icon:" + (Has_Claimed::Bingo(peer, pInfo(peer)->WinterBingo_Task["1"]) ? "6292" : to_string(pInfo(peer)->WinterBingo_Task["1"])) + ";state:enabled;" + (Has_Claimed::Bingo(peer, pInfo(peer)->WinterBingo_Task["1"]) ? "border:grey;" : "border:white;") + "margin:0,0;|\n";
			dialog += "\nadd_custom_button|" + a + (Has_Claimed::Bingo(peer, pInfo(peer)->WinterBingo_Task["2"]) ? "" : "bingoItem_" + to_string(pInfo(peer)->WinterBingo_Task["2"]) + "") + "|icon:" + (Has_Claimed::Bingo(peer, pInfo(peer)->WinterBingo_Task["2"]) ? "6292" : to_string(pInfo(peer)->WinterBingo_Task["2"])) + ";state:enabled;" + (Has_Claimed::Bingo(peer, pInfo(peer)->WinterBingo_Task["2"]) ? "border:grey;" : "border:white;") + "margin:0,0;|\n";
			dialog += "\nadd_custom_button|" + a + (Has_Claimed::Bingo(peer, pInfo(peer)->WinterBingo_Task["3"]) ? "" : "bingoItem_" + to_string(pInfo(peer)->WinterBingo_Task["3"]) + "") + "|icon:" + (Has_Claimed::Bingo(peer, pInfo(peer)->WinterBingo_Task["3"]) ? "6292" : to_string(pInfo(peer)->WinterBingo_Task["3"])) + ";state:enabled;" + (Has_Claimed::Bingo(peer, pInfo(peer)->WinterBingo_Task["3"]) ? "border:grey;" : "border:white;") + "margin:0,0;|\n";
			dialog += "\nadd_custom_button|" + a + (Has_Claimed::Bingo(peer, pInfo(peer)->WinterBingo_Task["4"]) ? "" : "bingoItem_" + to_string(pInfo(peer)->WinterBingo_Task["4"]) + "") + "|icon:" + (Has_Claimed::Bingo(peer, pInfo(peer)->WinterBingo_Task["4"]) ? "6292" : to_string(pInfo(peer)->WinterBingo_Task["4"])) + ";state:enabled;" + (Has_Claimed::Bingo(peer, pInfo(peer)->WinterBingo_Task["4"]) ? "border:grey;" : "border:white;") + "margin:0,0;|\n";
			dialog += "\nadd_custom_button|rowRewardItem_0|icon:" + (Has_Claimed::BingoPr2(peer, "r0") ? "6292" : to_string(pInfo(peer)->WinterBingo_Prize["r0"].first)) + ";state:disabled;" + (Has_Claimed::BingoPr2(peer, "r0") ? "border:grey;" : Reward_r0 ? "border:yellow;" : "border:purple;") + "margin:30,0;|\n";
			dialog += "" + (Has_Claimed::BingoPr2(peer, "r0") ? "" : "\nadd_custom_label|" + to_string(pInfo(peer)->WinterBingo_Prize["r0"].second) + "|target:rowRewardItem_0;top:0.87;left:0.87;size:small;alignment:7|") + "\n";
			dialog += "\nreset_placement_x|\n";
			dialog += "\nadd_custom_margin|x:10;y:0|\n";
			dialog += "\nadd_custom_button|" + a + (Has_Claimed::Bingo(peer, pInfo(peer)->WinterBingo_Task["5"]) ? "" : "bingoItem_" + to_string(pInfo(peer)->WinterBingo_Task["5"]) + "") + "|icon:" + (Has_Claimed::Bingo(peer, pInfo(peer)->WinterBingo_Task["5"]) ? "6292" : to_string(pInfo(peer)->WinterBingo_Task["5"])) + ";state:enabled;" + (Has_Claimed::Bingo(peer, pInfo(peer)->WinterBingo_Task["5"]) ? "border:grey;" : "border:white;") + "margin:0,89;|\n";
			dialog += "\nadd_custom_button|" + a + (Has_Claimed::Bingo(peer, pInfo(peer)->WinterBingo_Task["6"]) ? "" : "bingoItem_" + to_string(pInfo(peer)->WinterBingo_Task["6"]) + "") + "|icon:" + (Has_Claimed::Bingo(peer, pInfo(peer)->WinterBingo_Task["6"]) ? "6292" : to_string(pInfo(peer)->WinterBingo_Task["6"])) + ";state:enabled;" + (Has_Claimed::Bingo(peer, pInfo(peer)->WinterBingo_Task["6"]) ? "border:grey;" : "border:white;") + "margin:0,89;|\n";
			dialog += "\nadd_custom_button|" + a + (Has_Claimed::Bingo(peer, pInfo(peer)->WinterBingo_Task["7"]) ? "" : "bingoItem_" + to_string(pInfo(peer)->WinterBingo_Task["7"]) + "") + "|icon:" + (Has_Claimed::Bingo(peer, pInfo(peer)->WinterBingo_Task["7"]) ? "6292" : to_string(pInfo(peer)->WinterBingo_Task["7"])) + ";state:enabled;" + (Has_Claimed::Bingo(peer, pInfo(peer)->WinterBingo_Task["7"]) ? "border:grey;" : "border:white;") + "margin:0,89;|\n";
			dialog += "\nadd_custom_button|" + a + (Has_Claimed::Bingo(peer, pInfo(peer)->WinterBingo_Task["8"]) ? "" : "bingoItem_" + to_string(pInfo(peer)->WinterBingo_Task["8"]) + "") + "|icon:" + (Has_Claimed::Bingo(peer, pInfo(peer)->WinterBingo_Task["8"]) ? "6292" : to_string(pInfo(peer)->WinterBingo_Task["8"])) + ";state:enabled;" + (Has_Claimed::Bingo(peer, pInfo(peer)->WinterBingo_Task["8"]) ? "border:grey;" : "border:white;") + "margin:0,89;|\n";
			dialog += "\nadd_custom_button|" + a + (Has_Claimed::Bingo(peer, pInfo(peer)->WinterBingo_Task["9"]) ? "" : "bingoItem_" + to_string(pInfo(peer)->WinterBingo_Task["9"]) + "") + "|icon:" + (Has_Claimed::Bingo(peer, pInfo(peer)->WinterBingo_Task["9"]) ? "6292" : to_string(pInfo(peer)->WinterBingo_Task["9"])) + ";state:enabled;" + (Has_Claimed::Bingo(peer, pInfo(peer)->WinterBingo_Task["9"]) ? "border:grey;" : "border:white;") + "margin:0,89;|\n";
			dialog += "\nadd_custom_button|rowRewardItem_1|icon:" + (Has_Claimed::BingoPr2(peer, "r1") ? "6292" : to_string(pInfo(peer)->WinterBingo_Prize["r1"].first)) + ";state:disabled;" + (Has_Claimed::BingoPr2(peer, "r1") ? "border:grey;" : Reward_r1 ? "border:yellow;" : "border:purple;") + "margin:30,89;|\n";
			dialog += "" + (Has_Claimed::BingoPr2(peer, "r1") ? "" : "\nadd_custom_label|" + to_string(pInfo(peer)->WinterBingo_Prize["r1"].second) + "|target:rowRewardItem_1;top:0.87;left:0.87;size:small;alignment:7|") + "\n";
			dialog += "\nreset_placement_x|\n";
			dialog += "\nadd_custom_margin|x:10;y:0|\n";
			dialog += "\nadd_custom_button|" + a + (Has_Claimed::Bingo(peer, pInfo(peer)->WinterBingo_Task["10"]) ? "" : "bingoItem_" + to_string(pInfo(peer)->WinterBingo_Task["10"]) + "") + "|icon:" + (Has_Claimed::Bingo(peer, pInfo(peer)->WinterBingo_Task["10"]) ? "6292" : to_string(pInfo(peer)->WinterBingo_Task["10"])) + ";state:enabled;" + (Has_Claimed::Bingo(peer, pInfo(peer)->WinterBingo_Task["10"]) ? "border:grey;" : "border:white;") + "margin:0,178;|\n";
			dialog += "\nadd_custom_button|" + a + (Has_Claimed::Bingo(peer, pInfo(peer)->WinterBingo_Task["11"]) ? "" : "bingoItem_" + to_string(pInfo(peer)->WinterBingo_Task["11"]) + "") + "|icon:" + (Has_Claimed::Bingo(peer, pInfo(peer)->WinterBingo_Task["11"]) ? "6292" : to_string(pInfo(peer)->WinterBingo_Task["11"])) + ";state:enabled;" + (Has_Claimed::Bingo(peer, pInfo(peer)->WinterBingo_Task["11"]) ? "border:grey;" : "border:white;") + "margin:0,178;|\n";
			dialog += "\nadd_custom_button|" + a + (Has_Claimed::Bingo(peer, pInfo(peer)->WinterBingo_Task["12"]) ? "" : "bingoItem_" + to_string(pInfo(peer)->WinterBingo_Task["12"]) + "") + "|icon:" + (Has_Claimed::Bingo(peer, pInfo(peer)->WinterBingo_Task["12"]) ? "6292" : to_string(pInfo(peer)->WinterBingo_Task["12"])) + ";state:enabled;" + (Has_Claimed::Bingo(peer, pInfo(peer)->WinterBingo_Task["12"]) ? "border:grey;" : "border:white;") + "margin:0,178;|\n";
			dialog += "\nadd_custom_button|" + a + (Has_Claimed::Bingo(peer, pInfo(peer)->WinterBingo_Task["13"]) ? "" : "bingoItem_" + to_string(pInfo(peer)->WinterBingo_Task["13"]) + "") + "|icon:" + (Has_Claimed::Bingo(peer, pInfo(peer)->WinterBingo_Task["13"]) ? "6292" : to_string(pInfo(peer)->WinterBingo_Task["13"])) + ";state:enabled;" + (Has_Claimed::Bingo(peer, pInfo(peer)->WinterBingo_Task["13"]) ? "border:grey;" : "border:white;") + "margin:0,178;|\n";
			dialog += "\nadd_custom_button|" + a + (Has_Claimed::Bingo(peer, pInfo(peer)->WinterBingo_Task["14"]) ? "" : "bingoItem_" + to_string(pInfo(peer)->WinterBingo_Task["14"]) + "") + "|icon:" + (Has_Claimed::Bingo(peer, pInfo(peer)->WinterBingo_Task["14"]) ? "6292" : to_string(pInfo(peer)->WinterBingo_Task["14"])) + ";state:enabled;" + (Has_Claimed::Bingo(peer, pInfo(peer)->WinterBingo_Task["14"]) ? "border:grey;" : "border:white;") + "margin:0,178;|\n";
			dialog += "\nadd_custom_button|rowRewardItem_2|icon:" + (Has_Claimed::BingoPr2(peer, "r2") ? "6292" : to_string(pInfo(peer)->WinterBingo_Prize["r2"].first)) + ";state:disabled;" + (Has_Claimed::BingoPr2(peer, "r2") ? "border:grey;" : Reward_r2 ? "border:yellow;" : "border:purple;") + "margin:30,178;|\n";
			dialog += "" + (Has_Claimed::BingoPr2(peer, "r2") ? "" : "\nadd_custom_label|" + to_string(pInfo(peer)->WinterBingo_Prize["r2"].second) + "|target:rowRewardItem_2;top:0.87;left:0.87;size:small;alignment:7|") + "\n";
			dialog += "\nreset_placement_x|\n";
			dialog += "\nadd_custom_margin|x:10;y:0|\n";
			dialog += "\nadd_custom_button|" + a + (Has_Claimed::Bingo(peer, pInfo(peer)->WinterBingo_Task["15"]) ? "" : "bingoItem_" + to_string(pInfo(peer)->WinterBingo_Task["15"]) + "") + "|icon:" + (Has_Claimed::Bingo(peer, pInfo(peer)->WinterBingo_Task["15"]) ? "6292" : to_string(pInfo(peer)->WinterBingo_Task["15"])) + ";state:enabled;" + (Has_Claimed::Bingo(peer, pInfo(peer)->WinterBingo_Task["15"]) ? "border:grey;" : "border:white;") + "margin:0,267;|\n";
			dialog += "\nadd_custom_button|" + a + (Has_Claimed::Bingo(peer, pInfo(peer)->WinterBingo_Task["16"]) ? "" : "bingoItem_" + to_string(pInfo(peer)->WinterBingo_Task["16"]) + "") + "|icon:" + (Has_Claimed::Bingo(peer, pInfo(peer)->WinterBingo_Task["16"]) ? "6292" : to_string(pInfo(peer)->WinterBingo_Task["16"])) + ";state:enabled;" + (Has_Claimed::Bingo(peer, pInfo(peer)->WinterBingo_Task["16"]) ? "border:grey;" : "border:white;") + "margin:0,267;|\n";
			dialog += "\nadd_custom_button|" + a + (Has_Claimed::Bingo(peer, pInfo(peer)->WinterBingo_Task["17"]) ? "" : "bingoItem_" + to_string(pInfo(peer)->WinterBingo_Task["17"]) + "") + "|icon:" + (Has_Claimed::Bingo(peer, pInfo(peer)->WinterBingo_Task["17"]) ? "6292" : to_string(pInfo(peer)->WinterBingo_Task["17"])) + ";state:enabled;" + (Has_Claimed::Bingo(peer, pInfo(peer)->WinterBingo_Task["17"]) ? "border:grey;" : "border:white;") + "margin:0,267;|\n";
			dialog += "\nadd_custom_button|" + a + (Has_Claimed::Bingo(peer, pInfo(peer)->WinterBingo_Task["18"]) ? "" : "bingoItem_" + to_string(pInfo(peer)->WinterBingo_Task["18"]) + "") + "|icon:" + (Has_Claimed::Bingo(peer, pInfo(peer)->WinterBingo_Task["18"]) ? "6292" : to_string(pInfo(peer)->WinterBingo_Task["18"])) + ";state:enabled;" + (Has_Claimed::Bingo(peer, pInfo(peer)->WinterBingo_Task["18"]) ? "border:grey;" : "border:white;") + "margin:0,267;|\n";
			dialog += "\nadd_custom_button|" + a + (Has_Claimed::Bingo(peer, pInfo(peer)->WinterBingo_Task["19"]) ? "" : "bingoItem_" + to_string(pInfo(peer)->WinterBingo_Task["19"]) + "") + "|icon:" + (Has_Claimed::Bingo(peer, pInfo(peer)->WinterBingo_Task["19"]) ? "6292" : to_string(pInfo(peer)->WinterBingo_Task["19"])) + ";state:enabled;" + (Has_Claimed::Bingo(peer, pInfo(peer)->WinterBingo_Task["19"]) ? "border:grey;" : "border:white;") + "margin:0,267;|\n";
			dialog += "\nadd_custom_button|rowRewardItem_3|icon:" + (Has_Claimed::BingoPr2(peer, "r3") ? "6292" : to_string(pInfo(peer)->WinterBingo_Prize["r3"].first)) + ";state:disabled;" + (Has_Claimed::BingoPr2(peer, "r3") ? "border:grey;" : Reward_r3 ? "border:yellow;" : "border:purple;") + "margin:30,267;|\n";
			dialog += "" + (Has_Claimed::BingoPr2(peer, "r3") ? "" : "\nadd_custom_label|" + to_string(pInfo(peer)->WinterBingo_Prize["r3"].second) + "|target:rowRewardItem_3;top:0.87;left:0.87;size:small;alignment:7|") + "\n";
			dialog += "\nreset_placement_x|\n";
			dialog += "\nadd_custom_margin|x:10;y:0|\n";
			dialog += "\nadd_custom_button|" + a + (Has_Claimed::Bingo(peer, pInfo(peer)->WinterBingo_Task["20"]) ? "" : "bingoItem_" + to_string(pInfo(peer)->WinterBingo_Task["20"]) + "") + "|icon:" + (Has_Claimed::Bingo(peer, pInfo(peer)->WinterBingo_Task["20"]) ? "6292" : to_string(pInfo(peer)->WinterBingo_Task["20"])) + ";state:enabled;" + (Has_Claimed::Bingo(peer, pInfo(peer)->WinterBingo_Task["20"]) ? "border:grey;" : "border:white;") + "margin:0,356;|\n";
			dialog += "\nadd_custom_button|" + a + (Has_Claimed::Bingo(peer, pInfo(peer)->WinterBingo_Task["21"]) ? "" : "bingoItem_" + to_string(pInfo(peer)->WinterBingo_Task["21"]) + "") + "|icon:" + (Has_Claimed::Bingo(peer, pInfo(peer)->WinterBingo_Task["21"]) ? "6292" : to_string(pInfo(peer)->WinterBingo_Task["21"])) + ";state:enabled;" + (Has_Claimed::Bingo(peer, pInfo(peer)->WinterBingo_Task["21"]) ? "border:grey;" : "border:white;") + "margin:0,356;|\n";
			dialog += "\nadd_custom_button|" + a + (Has_Claimed::Bingo(peer, pInfo(peer)->WinterBingo_Task["22"]) ? "" : "bingoItem_" + to_string(pInfo(peer)->WinterBingo_Task["22"]) + "") + "|icon:" + (Has_Claimed::Bingo(peer, pInfo(peer)->WinterBingo_Task["22"]) ? "6292" : to_string(pInfo(peer)->WinterBingo_Task["22"])) + ";state:enabled;" + (Has_Claimed::Bingo(peer, pInfo(peer)->WinterBingo_Task["22"]) ? "border:grey;" : "border:white;") + "margin:0,356;|\n";
			dialog += "\nadd_custom_button|" + a + (Has_Claimed::Bingo(peer, pInfo(peer)->WinterBingo_Task["23"]) ? "" : "bingoItem_" + to_string(pInfo(peer)->WinterBingo_Task["23"]) + "") + "|icon:" + (Has_Claimed::Bingo(peer, pInfo(peer)->WinterBingo_Task["23"]) ? "6292" : to_string(pInfo(peer)->WinterBingo_Task["23"])) + ";state:enabled;" + (Has_Claimed::Bingo(peer, pInfo(peer)->WinterBingo_Task["23"]) ? "border:grey;" : "border:white;") + "margin:0,356;|\n";
			dialog += "\nadd_custom_button|" + a + (Has_Claimed::Bingo(peer, pInfo(peer)->WinterBingo_Task["24"]) ? "" : "bingoItem_" + to_string(pInfo(peer)->WinterBingo_Task["24"]) + "") + "|icon:" + (Has_Claimed::Bingo(peer, pInfo(peer)->WinterBingo_Task["24"]) ? "6292" : to_string(pInfo(peer)->WinterBingo_Task["24"])) + ";state:enabled;" + (Has_Claimed::Bingo(peer, pInfo(peer)->WinterBingo_Task["24"]) ? "border:grey;" : "border:white;") + "margin:0,356;|\n";
			dialog += "\nadd_custom_button|rowRewardItem_4|icon:" + (Has_Claimed::BingoPr2(peer, "r4") ? "6292" : to_string(pInfo(peer)->WinterBingo_Prize["r4"].first)) + ";state:disabled;" + (Has_Claimed::BingoPr2(peer, "r4") ? "border:grey;" : Reward_r4 ? "border:yellow;" : "border:purple;") + "margin:30,356;|\n";
			dialog += "" + (Has_Claimed::BingoPr2(peer, "r4") ? "" : "\nadd_custom_label|" + to_string(pInfo(peer)->WinterBingo_Prize["r4"].second) + "|target:rowRewardItem_4;top:0.87;left:0.87;size:small;alignment:7|") + "\n";
			dialog += "\nreset_placement_x|\n";
			dialog += "\nadd_custom_margin|x:10;y:0|\n";
			dialog += "\nadd_custom_button|columnRewardItem_0|icon:" + (Has_Claimed::BingoPr2(peer, "c0") ? "6292" : to_string(pInfo(peer)->WinterBingo_Prize["c0"].first)) + ";state:disabled;" + (Has_Claimed::BingoPr2(peer, "c0") ? "border:grey;" : Reward_c0 ? "border:yellow;" : "border:purple;") + "margin:0,475;|\n";
			dialog += "" + (Has_Claimed::BingoPr2(peer, "c0") ? "" : "\nadd_custom_label|" + to_string(pInfo(peer)->WinterBingo_Prize["c0"].second) + "|target:columnRewardItem_0;top:0.87;left:0.87;size:small;alignment:7|") + "\n";
			dialog += "\nadd_custom_button|columnRewardItem_1|icon:" + (Has_Claimed::BingoPr2(peer, "c1") ? "6292" : to_string(pInfo(peer)->WinterBingo_Prize["c1"].first)) + ";state:disabled;" + (Has_Claimed::BingoPr2(peer, "c1") ? "border:grey;" : Reward_c1 ? "border:yellow;" : "border:purple;") + "margin:0,475;|\n";
			dialog += "" + (Has_Claimed::BingoPr2(peer, "c1") ? "" : "\nadd_custom_label|" + to_string(pInfo(peer)->WinterBingo_Prize["c1"].second) + "|target:columnRewardItem_1;top:0.87;left:0.87;size:small;alignment:7|") + "\n";
			dialog += "\nadd_custom_button|columnRewardItem_2|icon:" + (Has_Claimed::BingoPr2(peer, "c2") ? "6292" : to_string(pInfo(peer)->WinterBingo_Prize["c2"].first)) + ";state:disabled;" + (Has_Claimed::BingoPr2(peer, "c2") ? "border:grey;" : Reward_c2 ? "border:yellow;" : "border:purple;") + "margin:0,475;|\n";
			dialog += "" + (Has_Claimed::BingoPr2(peer, "c2") ? "" : "\nadd_custom_label|" + to_string(pInfo(peer)->WinterBingo_Prize["c2"].second) + "|target:columnRewardItem_2;top:0.87;left:0.87;size:small;alignment:7|") + "\n";
			dialog += "\nadd_custom_button|columnRewardItem_3|icon:" + (Has_Claimed::BingoPr2(peer, "c3") ? "6292" : to_string(pInfo(peer)->WinterBingo_Prize["c3"].first)) + ";state:disabled;" + (Has_Claimed::BingoPr2(peer, "c3") ? "border:grey;" : Reward_c3 ? "border:yellow;" : "border:purple;") + "margin:0,475;|\n";
			dialog += "" + (Has_Claimed::BingoPr2(peer, "c3") ? "" : "\nadd_custom_label|" + to_string(pInfo(peer)->WinterBingo_Prize["c3"].second) + "|target:columnRewardItem_3;top:0.87;left:0.87;size:small;alignment:7|") + "\n";
			dialog += "\nadd_custom_button|columnRewardItem_4|icon:" + (Has_Claimed::BingoPr2(peer, "c4") ? "6292" : to_string(pInfo(peer)->WinterBingo_Prize["c4"].first)) + ";state:disabled;" + (Has_Claimed::BingoPr2(peer, "c4") ? "border:grey;" : Reward_c4 ? "border:yellow;" : "border:purple;") + "margin:0,475;|\n";
			dialog += "" + (Has_Claimed::BingoPr2(peer, "c4") ? "" : "\nadd_custom_label|" + to_string(pInfo(peer)->WinterBingo_Prize["c4"].second) + "|target:columnRewardItem_4;top:0.87;left:0.87;size:small;alignment:7|") + "\n";
			dialog += "\nreset_placement_x|\n";
			dialog += "\nadd_custom_margin|x:0;y:594|\n";
			dialog += "\nadd_spacer|small|" + has_ + "\n";
			VarList::OnDialogRequest(peer, SetColor(peer) + dialog, 500);
		}
	}
	static void Winter_Branch(ENetPeer* peer, std::string type) {
		if (type == "1") {
			std::string reward_list = "";
			if (pInfo(peer)->winter_seal_branch_1 >= 240 and not Has_Claimed::WinterBranch(peer, "branch1_1")) reward_list += "\nadd_textbox|`w#1 Earn 240 Royal Winter Seals to claim this reward:|left|\nadd_label_with_icon|small|`21 Tacky Holiday Hair|left|9206|\nadd_small_font_button|claim_branch1_1|`$Claim Reward|noflags|0|0|";
			else if (Has_Claimed::WinterBranch(peer, "branch1_1")) reward_list += "\nadd_textbox|`^#1 Earn 240 Royal Winter Seals to claim this reward:|left|\nadd_label_with_icon|small|`^1 Tacky Holiday Hair|left|9206|\nadd_spacer|small|";
			else reward_list += "\nadd_textbox|`s#1 Earn 240 Royal Winter Seals to claim this reward:|left|\nadd_label_with_icon|small|`s1 Tacky Holiday Hair|left|9206|\nadd_spacer|small|";

			if (pInfo(peer)->winter_seal_branch_1 >= 600 and not Has_Claimed::WinterBranch(peer, "branch1_2")) reward_list += "\nadd_textbox|`w#2 Earn 600 Royal Winter Seals to claim this reward:|left|\nadd_label_with_icon|small|`25 Growtoken|left|1486|\nadd_small_font_button|claim_branch1_2|`$Claim Reward|noflags|0|0|";
			else if (Has_Claimed::WinterBranch(peer, "branch1_2")) reward_list += "\nadd_textbox|`^#2 Earn 600 Royal Winter Seals to claim this reward:|left|\nadd_label_with_icon|small|`^5 Growtoken|left|1486|\nadd_spacer|small|";
			else reward_list += "\nadd_textbox|`s#2 Earn 600 Royal Winter Seals to claim this reward:|left|\nadd_label_with_icon|small|`s5 Growtoken|left|1486|\nadd_spacer|small|";

			if (pInfo(peer)->winter_seal_branch_1 >= 1200 and not Has_Claimed::WinterBranch(peer, "branch1_3")) reward_list += "\nadd_textbox|`w#3 Earn 1,200 Royal Winter Seals to claim this reward:|left|\nadd_label_with_icon|small|`2Winterfest Calendar - 2019|left|9224|\nadd_label_with_icon|small|`2" + a + (pInfo(peer)->winter_power ? "Royal Winter Powers are unlocked" : "Royal Winter Powers (double jump and slow-fall mod for the rest of WinterFest)") + "|left|9186|\nadd_small_font_button|claim_branch1_3|`$Claim Reward|noflags|0|0|";
			else if (Has_Claimed::WinterBranch(peer, "branch1_3")) reward_list += "\nadd_textbox|`^#3 Earn 1,200 Royal Winter Seals to claim this reward:|left|\nadd_label_with_icon|small|`^Winterfest Calendar - 2019|left|9224|\nadd_label_with_icon|small|`^" + a + (pInfo(peer)->winter_power ? "Royal Winter Powers are unlocked" : "Royal Winter Powers (double jump and slow-fall mod for the rest of WinterFest)") + "|left|9186|\nadd_spacer|small|";
			else reward_list += "\nadd_textbox|`s#3 Earn 1,200 Royal Winter Seals to claim this reward:|left|\nadd_label_with_icon|small|`sWinterfest Calendar - 2019|left|9224|\nadd_label_with_icon|small|`s" + a + (pInfo(peer)->winter_power ? "Royal Winter Powers are unlocked" : "Royal Winter Powers (double jump and slow-fall mod for the rest of WinterFest)") + "|left|9186|\nadd_spacer|small|";

			if (pInfo(peer)->winter_seal_branch_1 >= 3000 and not Has_Claimed::WinterBranch(peer, "branch1_4")) reward_list += "\nadd_textbox|`w#4 Earn 3,000 Royal Winter Seals to claim this reward:|left|\nadd_label_with_icon|small|`22 Megaphones|left|2480|\nadd_label_with_icon|small|`21 Armored WinterBot - Mail|left|9178|\nadd_small_font_button|claim_branch1_4|`$Claim Reward|noflags|0|0|";
			else if (Has_Claimed::WinterBranch(peer, "branch1_4")) reward_list += "\nadd_textbox|`^#4 Earn 3,000 Royal Winter Seals to claim this reward:|left|\nadd_label_with_icon|small|`^2 Megaphones|left|2480|\nadd_label_with_icon|small|`^1 Armored WinterBot - Mail|left|9178|\nadd_spacer|small|";
			else reward_list += "\nadd_textbox|`s#4 Earn 3,000 Royal Winter Seals to claim this reward:|left|\nadd_label_with_icon|small|`s2 Megaphones|left|2480|\nadd_label_with_icon|small|`s1 Armored WinterBot - Mail|left|9178|\nadd_spacer|small|";

			if (pInfo(peer)->winter_seal_branch_1 >= 6000 and not Has_Claimed::WinterBranch(peer, "branch1_5")) reward_list += "\nadd_textbox|`w#5 Earn 6,000 Royal Winter Seals to claim this reward:|left|\nadd_label_with_icon|small|`25 Deluxe Winterfest Cracker|left|5404|\nadd_small_font_button|claim_branch1_5|`$Claim Reward|noflags|0|0|";
			else if (Has_Claimed::WinterBranch(peer, "branch1_5")) reward_list += "\nadd_textbox|`^#5 Earn 6,000 Royal Winter Seals to claim this reward:|left|\nadd_label_with_icon|small|`^5 Deluxe Winterfest Cracker|left|5404|\nadd_spacer|small|";
			else reward_list += "\nadd_textbox|`s#5 Earn 6,000 Royal Winter Seals to claim this reward:|left|\nadd_label_with_icon|small|`s5 Deluxe Winterfest Cracker|left|5404|\nadd_spacer|small|";

			if (pInfo(peer)->winter_seal_branch_1 >= 9000 and not Has_Claimed::WinterBranch(peer, "branch1_6")) reward_list += "\nadd_textbox|`w#6 Earn 9,000 Royal Winter Seals to claim this reward:|left|\nadd_label_with_icon|small|`21 Cute Riding Polar Bear|left|9208|\nadd_label_with_icon|small|`2ability to upgrade artifacts to Level 6|left|5086|\nadd_small_font_button|claim_branch1_6|`$Claim Reward|noflags|0|0|";
			else if (Has_Claimed::WinterBranch(peer, "branch1_6")) reward_list += "\nadd_textbox|`^#6 Earn 9,000 Royal Winter Seals to claim this reward:|left|\nadd_label_with_icon|small|`^1 Cute Riding Polar Bear|left|9208|\nadd_label_with_icon|small|`^ability to upgrade artifacts to Level 6|left|5086|\nadd_spacer|small|";
			else reward_list += "\nadd_textbox|`s#6 Earn 9,000 Royal Winter Seals to claim this reward:|left|\nadd_label_with_icon|small|`s1 Cute Riding Polar Bear|left|9208|\nadd_label_with_icon|small|`sability to upgrade artifacts to Level 6|left|5086|\nadd_spacer|small|";

			if (pInfo(peer)->winter_seal_branch_1 >= 12000 and not Has_Claimed::WinterBranch(peer, "branch1_7")) reward_list += "\nadd_textbox|`w#7 Earn 12,000 Royal Winter Seals to claim this reward:|left|\nadd_label_with_icon|small|`21 Winter Radiance Aura|left|9210|\nadd_small_font_button|claim_branch1_7|`$Claim Reward|noflags|0|0|";
			else if (Has_Claimed::WinterBranch(peer, "branch1_7")) reward_list += "\nadd_textbox|`^#7 Earn 12,000 Royal Winter Seals to claim this reward:|left|\nadd_label_with_icon|small|`^1 Winter Radiance Aura|left|9210|\nadd_spacer|small|";
			else reward_list += "\nadd_textbox|`s#7 Earn 12,000 Royal Winter Seals to claim this reward:|left|\nadd_label_with_icon|small|`s1 Winter Radiance Aura|left|9210|\nadd_spacer|small|";
			VarList::OnDialogRequest(peer, SetColor(peer) + "set_default_color|\nadd_label_with_icon|big|`wWinterfest Radiance Reward Branch|left|9186|\nadd_spacer|small|\nadd_textbox|`$Earn reward by completing milestone. The more `2Royal Winter Seals ``you have from finding them in-game, completing `2Winter Wishes ``tasks for making `2in-App Purchases``, the more rewards you can get!|left|\nadd_spacer|small|\nadd_textbox|`$Your Royal Winter Seals: `2" + Set_Count(pInfo(peer)->winter_seal_branch_1) + "|left|\nadd_spacer|small|\nadd_button|addws_branch_1|`$Add Seals|0|0|\nadd_spacer|small|" + reward_list + "|\nend_dialog|royal_winter_wonder|Close|Back|\nadd_quick_exit|");
		}
		if (type == "2") {
			std::string reward_list = "";
			if (pInfo(peer)->winter_seal_branch_2 >= 240 and not Has_Claimed::WinterBranch(peer, "branch2_1")) reward_list += "\nadd_textbox|`w#1 Earn 240 Royal Winter Seals to claim this reward:|left|\nadd_label_with_icon|small|`21 Light Up Antlers|left|10416|\nadd_small_font_button|claim_branch2_1|`$Claim Reward|noflags|0|0|";
			else if (Has_Claimed::WinterBranch(peer, "branch2_1")) reward_list += "\nadd_textbox|`^#1 Earn 240 Royal Winter Seals to claim this reward:|left|\nadd_label_with_icon|small|`^1 Light Up Antlers|left|10416|\nadd_spacer|small|";
			else reward_list += "\nadd_textbox|`s#1 Earn 240 Royal Winter Seals to claim this reward:|left|\nadd_label_with_icon|small|`s1 Light Up Antlers|left|10416|\nadd_spacer|small|";

			if (pInfo(peer)->winter_seal_branch_2 >= 600 and not Has_Claimed::WinterBranch(peer, "branch2_2")) reward_list += "\nadd_textbox|`w#2 Earn 600 Royal Winter Seals to claim this reward:|left|\nadd_label_with_icon|small|`25 Growtoken|left|1486|\nadd_small_font_button|claim_branch2_2|`$Claim Reward|noflags|0|0|";
			else if (Has_Claimed::WinterBranch(peer, "branch2_2")) reward_list += "\nadd_textbox|`^#2 Earn 600 Royal Winter Seals to claim this reward:|left|\nadd_label_with_icon|small|`^5 Growtoken|left|1486|\nadd_spacer|small|";
			else reward_list += "\nadd_textbox|`s#2 Earn 600 Royal Winter Seals to claim this reward:|left|\nadd_label_with_icon|small|`s5 Growtoken|left|1486|\nadd_spacer|small|";

			if (pInfo(peer)->winter_seal_branch_2 >= 1200 and not Has_Claimed::WinterBranch(peer, "branch2_3")) reward_list += "\nadd_textbox|`w#3 Earn 1,200 Royal Winter Seals to claim this reward:|left|\nadd_label_with_icon|small|`2Winterfest Calendar - 2020|left|10446|\nadd_label_with_icon|small|`2" + a + (pInfo(peer)->winter_power ? "Royal Winter Powers are unlocked" : "Royal Winter Powers (double jump and slow-fall mod for the rest of WinterFest)") + "|left|9186|\nadd_small_font_button|claim_branch2_3|`$Claim Reward|noflags|0|0|";
			else if (Has_Claimed::WinterBranch(peer, "branch2_3")) reward_list += "\nadd_textbox|`^#3 Earn 1,200 Royal Winter Seals to claim this reward:|left|\nadd_label_with_icon|small|`^Winterfest Calendar - 2020|left|10446|\nadd_label_with_icon|small|`^" + a + (pInfo(peer)->winter_power ? "Royal Winter Powers are unlocked" : "Royal Winter Powers (double jump and slow-fall mod for the rest of WinterFest)") + "|left|9186|\nadd_spacer|small|";
			else reward_list += "\nadd_textbox|`s#3 Earn 1,200 Royal Winter Seals to claim this reward:|left|\nadd_label_with_icon|small|`sWinterfest Calendar - 2020|left|10446|\nadd_label_with_icon|small|`s" + a + (pInfo(peer)->winter_power ? "Royal Winter Powers are unlocked" : "Royal Winter Powers (double jump and slow-fall mod for the rest of WinterFest)") + "|left|9186|\nadd_spacer|small|";

			if (pInfo(peer)->winter_seal_branch_2 >= 3000 and not Has_Claimed::WinterBranch(peer, "branch2_4")) reward_list += "\nadd_textbox|`w#4 Earn 3,000 Royal Winter Seals to claim this reward:|left|\nadd_label_with_icon|small|`22 Megaphones|left|2480|\nadd_label_with_icon|small|`21 Diamond Builders Bonanza|left|10450|\nadd_small_font_button|claim_branch2_4|`$Claim Reward|noflags|0|0|";
			else if (Has_Claimed::WinterBranch(peer, "branch2_4")) reward_list += "\nadd_textbox|`^#4 Earn 3,000 Royal Winter Seals to claim this reward:|left|\nadd_label_with_icon|small|`^2 Megaphones|left|2480|\nadd_label_with_icon|small|`^1 Diamond Builders Bonanza|left|10450|\nadd_spacer|small|";
			else reward_list += "\nadd_textbox|`s#4 Earn 3,000 Royal Winter Seals to claim this reward:|left|\nadd_label_with_icon|small|`s2 Megaphones|left|2480|\nadd_label_with_icon|small|`s1 Diamond Builders Bonanza|left|10450|\nadd_spacer|small|";

			if (pInfo(peer)->winter_seal_branch_2 >= 6000 and not Has_Claimed::WinterBranch(peer, "branch2_5")) reward_list += "\nadd_textbox|`w#5 Earn 6,000 Royal Winter Seals to claim this reward:|left|\nadd_label_with_icon|small|`25 Deluxe Winterfest Cracker|left|5404|\nadd_label_with_icon|small|`21 Special Winter Wish|left|10536|\nadd_small_font_button|claim_branch2_5|`$Claim Reward|noflags|0|0|";
			else if (Has_Claimed::WinterBranch(peer, "branch2_5")) reward_list += "\nadd_textbox|`^#5 Earn 6,000 Royal Winter Seals to claim this reward:|left|\nadd_label_with_icon|small|`^5 Deluxe Winterfest Cracker|left|5404|\nadd_label_with_icon|small|`^1 Special Winter Wish|left|10536|\nadd_spacer|small|";
			else reward_list += "\nadd_textbox|`s#5 Earn 6,000 Royal Winter Seals to claim this reward:|left|\nadd_label_with_icon|small|`s5 Deluxe Winterfest Cracker|left|5404|\nadd_label_with_icon|small|`s1 Special Winter Wish|left|10536|\nadd_spacer|small|";

			if (pInfo(peer)->winter_seal_branch_2 >= 9000 and not Has_Claimed::WinterBranch(peer, "branch2_6")) reward_list += "\nadd_textbox|`w#6 Earn 9,000 Royal Winter Seals to claim this reward:|left|\nadd_label_with_icon|small|`21 Spruce Goose|left|10506|\nadd_label_with_icon|small|`2ability to upgrade artifacts to Level 6|left|5086|\nadd_small_font_button|claim_branch2_6|`$Claim Reward|noflags|0|0|";
			else if (Has_Claimed::WinterBranch(peer, "branch2_6")) reward_list += "\nadd_textbox|`^#6 Earn 9,000 Royal Winter Seals to claim this reward:|left|\nadd_label_with_icon|small|`^1 Spruce Goose|left|10506|\nadd_label_with_icon|small|`^ability to upgrade artifacts to Level 6|left|5086|\nadd_spacer|small|";
			else reward_list += "\nadd_textbox|`s#6 Earn 9,000 Royal Winter Seals to claim this reward:|left|\nadd_label_with_icon|small|`s1 Spruce Goose|left|10506|\nadd_label_with_icon|small|`sability to upgrade artifacts to Level 6|left|5086|\nadd_spacer|small|";

			if (pInfo(peer)->winter_seal_branch_2 >= 12000 and not Has_Claimed::WinterBranch(peer, "branch2_7")) reward_list += "\nadd_textbox|`w#7 Earn 12,000 Royal Winter Seals to claim this reward:|left|\nadd_label_with_icon|small|`21 Neon Tree Aura|left|10502|\nadd_small_font_button|claim_branch2_7|`$Claim Reward|noflags|0|0|";
			else if (Has_Claimed::WinterBranch(peer, "branch2_7")) reward_list += "\nadd_textbox|`^#7 Earn 12,000 Royal Winter Seals to claim this reward:|left|\nadd_label_with_icon|small|`^1 Neon Tree Aura|left|10502|\nadd_spacer|small|";
			else reward_list += "\nadd_textbox|`s#7 Earn 12,000 Royal Winter Seals to claim this reward:|left|\nadd_label_with_icon|small|`s1 Neon Tree Aura|left|10502|\nadd_spacer|small|";
			VarList::OnDialogRequest(peer, SetColor(peer) + "set_default_color|\nadd_label_with_icon|big|`wWinterfest Radiance Reward Branch|left|9186|\nadd_spacer|small|\nadd_textbox|`$Earn reward by completing milestone. The more `2Royal Winter Seals ``you have from finding them in-game, completing `2Winter Wishes ``tasks for making `2in-App Purchases``, the more rewards you can get!|left|\nadd_spacer|small|\nadd_textbox|`$Your Royal Winter Seals: `2" + Set_Count(pInfo(peer)->winter_seal_branch_2) + "|left|\nadd_spacer|small|\nadd_button|addws_branch_2|`$Add Seals|0|0|\nadd_spacer|small|" + reward_list + "|\nend_dialog|royal_winter_wonder|Close|Back|\nadd_quick_exit|");
		}
		if (type == "3") {
			std::string reward_list = "";
			if (pInfo(peer)->winter_seal_branch_3 >= 240 and not Has_Claimed::WinterBranch(peer, "branch3_1")) reward_list += "\nadd_textbox|`w#1 Earn 240 Royal Winter Seals to claim this reward:|left|\nadd_label_with_icon|small|`21 Penguin Onesie|left|11486|\nadd_small_font_button|claim_branch3_1|`$Claim Reward|noflags|0|0|";
			else if (Has_Claimed::WinterBranch(peer, "branch3_1")) reward_list += "\nadd_textbox|`^#1 Earn 240 Royal Winter Seals to claim this reward:|left|\nadd_label_with_icon|small|`^1 Penguin Onesie|left|11486|\nadd_spacer|small|";
			else reward_list += "\nadd_textbox|`s#1 Earn 240 Royal Winter Seals to claim this reward:|left|\nadd_label_with_icon|small|`s1 Penguin Onesie|left|11486|\nadd_spacer|small|";

			if (pInfo(peer)->winter_seal_branch_3 >= 600 and not Has_Claimed::WinterBranch(peer, "branch3_2")) reward_list += "\nadd_textbox|`w#2 Earn 600 Royal Winter Seals to claim this reward:|left|\nadd_label_with_icon|small|`25 Growtoken|left|1486|\nadd_small_font_button|claim_branch3_2|`$Claim Reward|noflags|0|0|";
			else if (Has_Claimed::WinterBranch(peer, "branch3_2")) reward_list += "\nadd_textbox|`^#2 Earn 600 Royal Winter Seals to claim this reward:|left|\nadd_label_with_icon|small|`^5 Growtoken|left|1486|\nadd_spacer|small|";
			else reward_list += "\nadd_textbox|`s#2 Earn 600 Royal Winter Seals to claim this reward:|left|\nadd_label_with_icon|small|`s5 Growtoken|left|1486|\nadd_spacer|small|";

			if (pInfo(peer)->winter_seal_branch_3 >= 1200 and not Has_Claimed::WinterBranch(peer, "branch3_3")) reward_list += "\nadd_textbox|`w#3 Earn 1,200 Royal Winter Seals to claim this reward:|left|\nadd_label_with_icon|small|`2Winterfest Calendar - 2021|left|11472|\nadd_label_with_icon|small|`2" + a + (pInfo(peer)->winter_power ? "Royal Winter Powers are unlocked" : "Royal Winter Powers (double jump and slow-fall mod for the rest of WinterFest)") + "|left|9186|\nadd_small_font_button|claim_branch3_3|`$Claim Reward|noflags|0|0|";
			else if (Has_Claimed::WinterBranch(peer, "branch3_3")) reward_list += "\nadd_textbox|`^#3 Earn 1,200 Royal Winter Seals to claim this reward:|left|\nadd_label_with_icon|small|`^Winterfest Calendar - 2021|left|11472|\nadd_label_with_icon|small|`^" + a + (pInfo(peer)->winter_power ? "Royal Winter Powers are unlocked" : "Royal Winter Powers (double jump and slow-fall mod for the rest of WinterFest)") + "|left|9186|\nadd_spacer|small|";
			else reward_list += "\nadd_textbox|`s#3 Earn 1,200 Royal Winter Seals to claim this reward:|left|\nadd_label_with_icon|small|`sWinterfest Calendar - 2021|left|11472|\nadd_label_with_icon|small|`s" + a + (pInfo(peer)->winter_power ? "Royal Winter Powers are unlocked" : "Royal Winter Powers (double jump and slow-fall mod for the rest of WinterFest)") + "|left|9186|\nadd_spacer|small|";

			if (pInfo(peer)->winter_seal_branch_3 >= 3000 and not Has_Claimed::WinterBranch(peer, "branch3_4")) reward_list += "\nadd_textbox|`w#4 Earn 3,000 Royal Winter Seals to claim this reward:|left|\nadd_label_with_icon|small|`22 Megaphones|left|2480|\nadd_label_with_icon|small|`21 Grow Voucher|left|10858|\nadd_small_font_button|claim_branch3_4|`$Claim Reward|noflags|0|0|";
			else if (Has_Claimed::WinterBranch(peer, "branch3_4")) reward_list += "\nadd_textbox|`^#4 Earn 3,000 Royal Winter Seals to claim this reward:|left|\nadd_label_with_icon|small|`^2 Megaphones|left|2480|\nadd_label_with_icon|small|`^1 Grow Voucher|left|10858|\nadd_spacer|small|";
			else reward_list += "\nadd_textbox|`s#4 Earn 3,000 Royal Winter Seals to claim this reward:|left|\nadd_label_with_icon|small|`s2 Megaphones|left|2480|\nadd_label_with_icon|small|`s1 Grow Voucher|left|10858|\nadd_spacer|small|";

			if (pInfo(peer)->winter_seal_branch_3 >= 6000 and not Has_Claimed::WinterBranch(peer, "branch3_5")) reward_list += "\nadd_textbox|`w#5 Earn 6,000 Royal Winter Seals to claim this reward:|left|\nadd_label_with_icon|small|`25 Deluxe Winterfest Cracker|left|5404|\nadd_label_with_icon|small|`21 Special Winter Wish|left|10536|\nadd_small_font_button|claim_branch3_5|`$Claim Reward|noflags|0|0|";
			else if (Has_Claimed::WinterBranch(peer, "branch3_5")) reward_list += "\nadd_textbox|`^#5 Earn 6,000 Royal Winter Seals to claim this reward:|left|\nadd_label_with_icon|small|`^5 Deluxe Winterfest Cracker|left|5404|\nadd_label_with_icon|small|`^1 Special Winter Wish|left|10536|\nadd_spacer|small|";
			else reward_list += "\nadd_textbox|`s#5 Earn 6,000 Royal Winter Seals to claim this reward:|left|\nadd_label_with_icon|small|`s5 Deluxe Winterfest Cracker|left|5404|\nadd_label_with_icon|small|`s1 Special Winter Wish|left|10536|\nadd_spacer|small|";

			if (pInfo(peer)->winter_seal_branch_3 >= 9000 and not Has_Claimed::WinterBranch(peer, "branch3_6")) reward_list += "\nadd_textbox|`w#6 Earn 9,000 Royal Winter Seals to claim this reward:|left|\nadd_label_with_icon|small|`21 Snow Cone Pet|left|11460|\nadd_label_with_icon|small|`2ability to upgrade artifacts to Level 6|left|5086|\nadd_small_font_button|claim_branch3_6|`$Claim Reward|noflags|0|0|";
			else if (Has_Claimed::WinterBranch(peer, "branch3_6")) reward_list += "\nadd_textbox|`^#6 Earn 9,000 Royal Winter Seals to claim this reward:|left|\nadd_label_with_icon|small|`^1 Snow Cone Pet|left|11460|\nadd_label_with_icon|small|`^ability to upgrade artifacts to Level 6|left|5086|\nadd_spacer|small|";
			else reward_list += "\nadd_textbox|`s#6 Earn 9,000 Royal Winter Seals to claim this reward:|left|\nadd_label_with_icon|small|`s1 Snow Cone Pet|left|11460|\nadd_label_with_icon|small|`sability to upgrade artifacts to Level 6|left|5086|\nadd_spacer|small|";

			if (pInfo(peer)->winter_seal_branch_3 >= 12000 and not Has_Claimed::WinterBranch(peer, "branch3_7")) reward_list += "\nadd_textbox|`w#7 Earn 12,000 Royal Winter Seals to claim this reward:|left|\nadd_label_with_icon|small|`21 Santa's Super Sack|left|11458|\nadd_small_font_button|claim_branch3_7|`$Claim Reward|noflags|0|0|";
			else if (Has_Claimed::WinterBranch(peer, "branch3_7")) reward_list += "\nadd_textbox|`^#7 Earn 12,000 Royal Winter Seals to claim this reward:|left|\nadd_label_with_icon|small|`^1 Santa's Super Sack|left|11458|\nadd_spacer|small|";
			else reward_list += "\nadd_textbox|`s#7 Earn 12,000 Royal Winter Seals to claim this reward:|left|\nadd_label_with_icon|small|`s1 Santa's Super Sack|left|11458|\nadd_spacer|small|";

			if (pInfo(peer)->winter_seal_branch_3 >= 18000 and not Has_Claimed::WinterBranch(peer, "branch3_8")) reward_list += "\nadd_textbox|`w#8 Earn 18,000 Royal Winter Seals to claim this reward:|left|\nadd_label_with_icon|small|`21 Snowflake Wings of Winter|left|7412|\nadd_small_font_button|claim_branch3_8|`$Claim Reward|noflags|0|0|";
			else if (Has_Claimed::WinterBranch(peer, "branch3_8")) reward_list += "\nadd_textbox|`^#8 Earn 18,000 Royal Winter Seals to claim this reward:|left|\nadd_label_with_icon|small|`^1 Snowflake Wings of Winter|left|7412|\nadd_spacer|small|";
			else reward_list += "\nadd_textbox|`s#8 Earn 18,000 Royal Winter Seals to claim this reward:|left|\nadd_label_with_icon|small|`s1 Snowflake Wings of Winter|left|7412|\nadd_spacer|small|";
			VarList::OnDialogRequest(peer, SetColor(peer) + "set_default_color|\nadd_label_with_icon|big|`wWinterfest Radiance Reward Branch|left|9186|\nadd_spacer|small|\nadd_textbox|`$Earn reward by completing milestone. The more `2Royal Winter Seals ``you have from finding them in-game, completing `2Winter Wishes ``tasks for making `2in-App Purchases``, the more rewards you can get!|left|\nadd_spacer|small|\nadd_textbox|`$Your Royal Winter Seals: `2" + Set_Count(pInfo(peer)->winter_seal_branch_3) + "|left|\nadd_spacer|small|\nadd_button|addws_branch_3|`$Add Seals|0|0|\nadd_spacer|small|" + reward_list + "|\nend_dialog|royal_winter_wonder|Close|Back|\nadd_quick_exit|");
		}
		if (type == "4") {
			std::string reward_list = "";
			if (pInfo(peer)->winter_seal_branch_4 >= 240 and not Has_Claimed::WinterBranch(peer, "branch4_1")) reward_list += "\nadd_textbox|`w#1 Earn 240 Royal Winter Seals to claim this reward:|left|\nadd_label_with_icon|small|`21 Icicle Mohawk|left|12920|\nadd_small_font_button|claim_branch4_1|`$Claim Reward|noflags|0|0|";
			else if (Has_Claimed::WinterBranch(peer, "branch4_1")) reward_list += "\nadd_textbox|`^#1 Earn 240 Royal Winter Seals to claim this reward:|left|\nadd_label_with_icon|small|`^1 Icicle Mohawk|left|12920|\nadd_spacer|small|";
			else reward_list += "\nadd_textbox|`s#1 Earn 240 Royal Winter Seals to claim this reward:|left|\nadd_label_with_icon|small|`s1 Icicle Mohawk|left|12920|\nadd_spacer|small|";

			if (pInfo(peer)->winter_seal_branch_4 >= 600 and not Has_Claimed::WinterBranch(peer, "branch4_2")) reward_list += "\nadd_textbox|`w#2 Earn 600 Royal Winter Seals to claim this reward:|left|\nadd_label_with_icon|small|`25 Growtoken|left|1486|\nadd_small_font_button|claim_branch4_2|`$Claim Reward|noflags|0|0|";
			else if (Has_Claimed::WinterBranch(peer, "branch4_2")) reward_list += "\nadd_textbox|`^#2 Earn 600 Royal Winter Seals to claim this reward:|left|\nadd_label_with_icon|small|`^5 Growtoken|left|1486|\nadd_spacer|small|";
			else reward_list += "\nadd_textbox|`s#2 Earn 600 Royal Winter Seals to claim this reward:|left|\nadd_label_with_icon|small|`s5 Growtoken|left|1486|\nadd_spacer|small|";

			if (pInfo(peer)->winter_seal_branch_4 >= 1200 and not Has_Claimed::WinterBranch(peer, "branch4_3")) reward_list += "\nadd_textbox|`w#3 Earn 1,200 Royal Winter Seals to claim this reward:|left|\nadd_label_with_icon|small|`2Winterfest Calendar - 2022|left|12986|\nadd_label_with_icon|small|`2" + a + (pInfo(peer)->winter_power ? "Royal Winter Powers are unlocked" : "Royal Winter Powers (double jump and slow-fall mod for the rest of WinterFest)") + "|left|9186|\nadd_small_font_button|claim_branch4_3|`$Claim Reward|noflags|0|0|";
			else if (Has_Claimed::WinterBranch(peer, "branch4_3")) reward_list += "\nadd_textbox|`^#3 Earn 1,200 Royal Winter Seals to claim this reward:|left|\nadd_label_with_icon|small|`^Winterfest Calendar - 2022|left|12986|\nadd_label_with_icon|small|`^" + a + (pInfo(peer)->winter_power ? "Royal Winter Powers are unlocked" : "Royal Winter Powers (double jump and slow-fall mod for the rest of WinterFest)") + "|left|9186|\nadd_spacer|small|";
			else reward_list += "\nadd_textbox|`s#3 Earn 1,200 Royal Winter Seals to claim this reward:|left|\nadd_label_with_icon|small|`sWinterfest Calendar - 2022|left|12986|\nadd_label_with_icon|small|`s" + a + (pInfo(peer)->winter_power ? "Royal Winter Powers are unlocked" : "Royal Winter Powers (double jump and slow-fall mod for the rest of WinterFest)") + "|left|9186|\nadd_spacer|small|";

			if (pInfo(peer)->winter_seal_branch_4 >= 3000 and not Has_Claimed::WinterBranch(peer, "branch4_4")) reward_list += "\nadd_textbox|`w#4 Earn 3,000 Royal Winter Seals to claim this reward:|left|\nadd_label_with_icon|small|`21 Grow Voucher|left|10858|\nadd_label_with_icon|small|`21 Royal Winter Seal Pet|left|12876|\nadd_small_font_button|claim_branch4_4|`$Claim Reward|noflags|0|0|";
			else if (Has_Claimed::WinterBranch(peer, "branch4_4")) reward_list += "\nadd_textbox|`^#4 Earn 3,000 Royal Winter Seals to claim this reward:|left|\nadd_label_with_icon|small|`^1 Grow Voucher|left|10858|\nadd_label_with_icon|small|`^1 Royal Winter Seal Pet|left|12876|\nadd_spacer|small|";
			else reward_list += "\nadd_textbox|`s#4 Earn 3,000 Royal Winter Seals to claim this reward:|left|\nadd_label_with_icon|small|`s1 Grow Voucher|left|10858|\nadd_label_with_icon|small|`s1 Royal Winter Seal Pet|left|12876|\nadd_spacer|small|";

			if (pInfo(peer)->winter_seal_branch_4 >= 6000 and not Has_Claimed::WinterBranch(peer, "branch4_5")) reward_list += "\nadd_textbox|`w#5 Earn 6,000 Royal Winter Seals to claim this reward:|left|\nadd_label_with_icon|small|`25 Deluxe Winterfest Cracker|left|5404|\nadd_label_with_icon|small|`21 Special Winter Wish|left|10536|\nadd_small_font_button|claim_branch4_5|`$Claim Reward|noflags|0|0|";
			else if (Has_Claimed::WinterBranch(peer, "branch4_5")) reward_list += "\nadd_textbox|`^#5 Earn 6,000 Royal Winter Seals to claim this reward:|left|\nadd_label_with_icon|small|`^5 Deluxe Winterfest Cracker|left|5404|\nadd_label_with_icon|small|`^1 Special Winter Wish|left|10536|\nadd_spacer|small|";
			else reward_list += "\nadd_textbox|`s#5 Earn 6,000 Royal Winter Seals to claim this reward:|left|\nadd_label_with_icon|small|`s5 Deluxe Winterfest Cracker|left|5404|\nadd_label_with_icon|small|`s1 Special Winter Wish|left|10536|\nadd_spacer|small|";

			if (pInfo(peer)->winter_seal_branch_4 >= 9000 and not Has_Claimed::WinterBranch(peer, "branch4_6")) reward_list += "\nadd_textbox|`w#6 Earn 9,000 Royal Winter Seals to claim this reward:|left|\nadd_label_with_icon|small|`21 Riding Gavle Goat|left|12890|\nadd_label_with_icon|small|`2ability to upgrade artifacts to Level 6|left|5086|\nadd_small_font_button|claim_branch4_6|`$Claim Reward|noflags|0|0|";
			else if (Has_Claimed::WinterBranch(peer, "branch4_6")) reward_list += "\nadd_textbox|`^#6 Earn 9,000 Royal Winter Seals to claim this reward:|left|\nadd_label_with_icon|small|`^1 Riding Gavle Goat|left|12890|\nadd_label_with_icon|small|`^ability to upgrade artifacts to Level 6|left|5086|\nadd_spacer|small|";
			else reward_list += "\nadd_textbox|`s#6 Earn 9,000 Royal Winter Seals to claim this reward:|left|\nadd_label_with_icon|small|`s1 Riding Gavle Goat|left|12890|\nadd_label_with_icon|small|`sability to upgrade artifacts to Level 6|left|5086|\nadd_spacer|small|";

			if (pInfo(peer)->winter_seal_branch_4 >= 12000 and not Has_Claimed::WinterBranch(peer, "branch4_7")) reward_list += "\nadd_textbox|`w#7 Earn 12,000 Royal Winter Seals to claim this reward:|left|\nadd_label_with_icon|small|`21 Freezing Fists|left|12880|\nadd_small_font_button|claim_branch4_7|`$Claim Reward|noflags|0|0|";
			else if (Has_Claimed::WinterBranch(peer, "branch4_7")) reward_list += "\nadd_textbox|`^#7 Earn 12,000 Royal Winter Seals to claim this reward:|left|\nadd_label_with_icon|small|`^1 Freezing Fists|left|12880|\nadd_spacer|small|";
			else reward_list += "\nadd_textbox|`s#7 Earn 12,000 Royal Winter Seals to claim this reward:|left|\nadd_label_with_icon|small|`s1 Freezing Fists|left|12880|\nadd_spacer|small|";

			if (pInfo(peer)->winter_seal_branch_4 >= 18000 and not Has_Claimed::WinterBranch(peer, "branch4_8")) reward_list += "\nadd_textbox|`w#8 Earn 18,000 Royal Winter Seals to claim this reward:|left|\nadd_label_with_icon|small|`21 Golden Moyaimorph|left|12540|\nadd_small_font_button|claim_branch4_8|`$Claim Reward|noflags|0|0|";
			else if (Has_Claimed::WinterBranch(peer, "branch4_8")) reward_list += "\nadd_textbox|`^#8 Earn 18,000 Royal Winter Seals to claim this reward:|left|\nadd_label_with_icon|small|`^1 Golden Moyaimorph|left|12540|\nadd_spacer|small|";
			else reward_list += "\nadd_textbox|`s#8 Earn 18,000 Royal Winter Seals to claim this reward:|left|\nadd_label_with_icon|small|`s1 Golden Moyaimorph|left|12540|\nadd_spacer|small|";
			VarList::OnDialogRequest(peer, SetColor(peer) + "set_default_color|\nadd_label_with_icon|big|`wWinterfest Radiance Reward Branch|left|9186|\nadd_spacer|small|\nadd_textbox|`$Earn reward by completing milestone. The more `2Royal Winter Seals ``you have from finding them in-game, completing `2Winter Wishes ``tasks for making `2in-App Purchases``, the more rewards you can get!|left|\nadd_spacer|small|\nadd_textbox|`$Your Royal Winter Seals: `2" + Set_Count(pInfo(peer)->winter_seal_branch_4) + "|left|\nadd_spacer|small|\nadd_button|addws_branch_4|`$Add Seals|0|0|\nadd_spacer|small|" + reward_list + "|\nend_dialog|royal_winter_wonder|Close|Back|\nadd_quick_exit|");
		}
	}
	static void Royal_Winter(ENetPeer* p_, int time = 0) {
		VarList::OnDialogRequest(p_, SetColor(p_) + "set_default_color|\nadd_label_with_icon|big|`wRoyal Winter Wonders|left|9186|\nadd_textbox|`oYou unspent Royal Winter Seals: `2" + Set_Count(pInfo(p_)->winter_seal) + "|left|\nadd_spacer|small|\nadd_textbox|`oYou can choose to add seals to any of the branches.|left|\nadd_spacer|small|\nadd_textbox|`oYou can choose how many you'd like to add in each branch.|left|\nadd_spacer|small|\nadd_button|reward_branch_1|`wReward Branch 1 - `2" + Set_Count(pInfo(p_)->winter_seal_branch_1) + "|noflags|0|0|\nadd_button|reward_branch_2|`wReward Branch 2 - `2" + Set_Count(pInfo(p_)->winter_seal_branch_2) + "|noflags|0|0|\nadd_button|reward_branch_3|`wReward Branch 3 - `2" + Set_Count(pInfo(p_)->winter_seal_branch_3) + "|noflags|0|0|\nadd_button|reward_branch_4|`wReward Branch 4 - `2" + Set_Count(pInfo(p_)->winter_seal_branch_4) + "|noflags|0|0|\nend_dialog|winter_seal_rewards|Back||\nadd_quick_exit|", time);
	}
	static void Winterfest_Task(ENetPeer* peer, std::string n1_2 = "1") {
		int second_part = 0; std::string tb = "";
		second_part = (pInfo(peer)->winterfest_wishes > 2100 ? 2100 : pInfo(peer)->winterfest_wishes) - 900;
		if (second_part < 0) second_part = 0;
		if (n1_2 == "1") tb = "\nadd_textured_progress_bar|interface/large/gui_event_bar.rttex|0|0|`5Wishes: " + (pInfo(peer)->winterfest_wishes >= 900 ? "900" : to_string(pInfo(peer)->winterfest_wishes)) + "/900|" + to_string(pInfo(peer)->winterfest_wishes > 900 ? 900 : pInfo(peer)->winterfest_wishes) + "|900|pre_icon|6|0.05|0|1000|64|0.005|barBG_0|\nadd_custom_margin|x:0;y:150|\nadd_custom_button|" + (Has_Claimed::WinterTask(peer, "claim_p2p_150") ? "" : "claim_p2p_150") + "|icon:" + (Has_Claimed::WinterTask(peer, "claim_p2p_150") ? "6292" : "9186") + ";state:enabled;color:" + (pInfo(peer)->winterfest_wishes < 150 ? "128,128,128,180;border:grey;" : "255,255,255,255;border:blue;") + "preset:listitem;margin_rself:0,-0.5;anchor:barBG_0;top:-1.0;left:0.166667;display:inline_free;|\nadd_custom_label|20|target:claim_p2p_150;top:0.25;left:0.25;size:small|\nadd_custom_label|`5150|target:claim_p2p_150;top:0.62;|\nadd_custom_button|" + (Has_Claimed::WinterTask(peer, "claim_p2p_300") ? "" : "claim_p2p_300") + "|icon:" + (Has_Claimed::WinterTask(peer, "claim_p2p_300") ? "6292" : "9186") + ";state:enabled;color:" + (pInfo(peer)->winterfest_wishes < 300 ? "128,128,128,180;border:grey;" : "255,255,255,255;border:blue;") + "preset:listitem;margin_rself:0,-0.5;anchor:barBG_0;top:-1.0;left:0.333333;display:inline_free;|\nadd_custom_label|30|target:claim_p2p_300;top:0.25;left:0.25;size:small|\nadd_custom_label|`5300|target:claim_p2p_300;top:0.62;|\nadd_custom_button|" + (Has_Claimed::WinterTask(peer, "claim_p2p_450") ? "" : "claim_p2p_450") + "|icon:" + (Has_Claimed::WinterTask(peer, "claim_p2p_450") ? "6292" : "9186") + ";state:enabled;color:" + (pInfo(peer)->winterfest_wishes < 450 ? "128,128,128,180;border:grey;" : "255,255,255,255;border:blue;") + "preset:listitem;margin_rself:0,-0.5;anchor:barBG_0;top:-1.0;left:0.5;display:inline_free;|\nadd_custom_label|40|target:claim_p2p_450;top:0.25;left:0.25;size:small|\nadd_custom_label|`5450|target:claim_p2p_450;top:0.62;|\nadd_custom_button|" + (Has_Claimed::WinterTask(peer, "claim_p2p_600") ? "" : "claim_p2p_600") + "|icon:" + (Has_Claimed::WinterTask(peer, "claim_p2p_600") ? "6292" : "9186") + ";state:enabled;color:" + (pInfo(peer)->winterfest_wishes < 600 ? "128,128,128,180;border:grey;" : "255,255,255,255;border:blue;") + "preset:listitem;margin_rself:0,-0.5;anchor:barBG_0;top:-1.0;left:0.666667;display:inline_free;|\nadd_custom_label|50|target:claim_p2p_600;top:0.25;left:0.25;size:small|\nadd_custom_label|`5600|target:claim_p2p_600;top:0.62;|\nadd_custom_button|" + (Has_Claimed::WinterTask(peer, "claim_p2p_750") ? "" : "claim_p2p_750") + "|icon:" + (Has_Claimed::WinterTask(peer, "claim_p2p_750") ? "6292" : "9186") + ";state:enabled;color:" + (pInfo(peer)->winterfest_wishes < 750 ? "128,128,128,180;border:grey;" : "255,255,255,255;border:blue;") + "preset:listitem;margin_rself:0,-0.5;anchor:barBG_0;top:-1.0;left:0.833333;display:inline_free;|\nadd_custom_label|60|target:claim_p2p_750;top:0.25;left:0.25;size:small|\nadd_custom_label|`5750|target:claim_p2p_750;top:0.62;|\nadd_custom_button|" + (Has_Claimed::WinterTask(peer, "claim_p2p_900") ? "" : "claim_p2p_900") + "|icon:" + (Has_Claimed::WinterTask(peer, "claim_p2p_900") ? "6292" : "9186") + ";state:enabled;color:" + (pInfo(peer)->winterfest_wishes < 900 ? "128,128,128,180;border:grey;" : "255,255,255,255;border:blue;") + "preset:listitem;margin_rself:0,-0.5;anchor:barBG_0;top:-1.0;left:1;display:inline_free;|\nadd_custom_label|70|target:claim_p2p_900;top:0.25;left:0.25;size:small|\nadd_custom_label|`5900|target:claim_p2p_900;top:0.62;|\nadd_custom_button|" + (Has_Claimed::WinterTask(peer, "claim_f2p_300") ? "" : "claim_f2p_300") + "|icon:" + (Has_Claimed::WinterTask(peer, "claim_f2p_300") ? "6292" : "10538") + ";state:enabled;color:" + (pInfo(peer)->winterfest_wishes < 300 ? "128,128,128,180;border:grey;" : "255,255,255,255;border:blue;") + "preset:listitem;margin_rself:0,0.25;anchor:barBG_0;top:1.0;left:0.333333;display:inline_free;|\nadd_custom_label|2|target:claim_f2p_300;top:0.25;left:0.25;size:small|\nadd_custom_button|" + (Has_Claimed::WinterTask(peer, "claim_f2p_600") ? "" : "claim_f2p_600") + "|icon:" + (Has_Claimed::WinterTask(peer, "claim_f2p_600") ? "6292" : "10538") + ";state:enabled;color:" + (pInfo(peer)->winterfest_wishes < 600 ? "128,128,128,180;border:grey;" : "255,255,255,255;border:blue;") + "preset:listitem;margin_rself:0,0.25;anchor:barBG_0;top:1.0;left:0.666667;display:inline_free;|\nadd_custom_label|3|target:claim_f2p_600;top:0.25;left:0.25;size:small|\nadd_custom_button|" + (Has_Claimed::WinterTask(peer, "claim_f2p_900") ? "" : "claim_f2p_900") + "|icon:" + (Has_Claimed::WinterTask(peer, "claim_f2p_900") ? "6292" : "10536") + ";state:enabled;color:" + (pInfo(peer)->winterfest_wishes < 900 ? "128,128,128,180;border:grey;" : "255,255,255,255;border:blue;") + "preset:listitem;margin_rself:0,0.25;anchor:barBG_0;top:1.0;left:1;display:inline_free;|\nadd_custom_label|2|target:claim_f2p_900;top:0.25;left:0.25;size:small|\nreset_placement_x|\nadd_custom_label|1/2|target:barBG_0;top:3.5;left:0.5;size:medium|\nreset_placement_x|\nadd_spacer|big|\nadd_custom_button|next|image:interface/large/gui_right_arrow_btn.rttex;image_size:64,64;frame:0,0;anchor:barBG_0;top:3;left:0.915;|\nreset_placement_x|";
		if (n1_2 == "2") tb = "\nadd_textured_progress_bar|interface/large/gui_event_bar.rttex|0|0|`5Wishes: " + to_string(pInfo(peer)->winterfest_wishes) + "/1200|" + to_string((second_part > 1200 ? 1200 : second_part)) + "|1200|pre_icon|6|0.05|0|1000|64|0.005|barBG_1|\nadd_custom_margin|x:0;y:150|\nadd_custom_button|" + (Has_Claimed::WinterTask(peer, "claim_p2p_1100") ? "" : "claim_p2p_1100") + "|icon:" + (Has_Claimed::WinterTask(peer, "claim_p2p_1100") ? "6292" : "9186") + ";state:enabled;color:" + (pInfo(peer)->winterfest_wishes < 1100 ? "128,128,128,180;border:grey;" : "255,255,255,255;border:blue;") + "preset:listitem;margin_rself:0,-0.5;anchor:barBG_1;top:-1.0;left:0.166667;display:inline_free;|\nadd_custom_label|80|target:claim_p2p_1100;top:0.25;left:0.25;size:small|\nadd_custom_label|`51100|target:claim_p2p_1100;top:0.62;|\nadd_custom_button|" + (Has_Claimed::WinterTask(peer, "claim_p2p_1300") ? "" : "claim_p2p_1300") + "|icon:" + (Has_Claimed::WinterTask(peer, "claim_p2p_1300") ? "6292" : "9186") + ";state:enabled;color:" + (pInfo(peer)->winterfest_wishes < 1300 ? "128,128,128,180;border:grey;" : "255,255,255,255;border:blue;") + "preset:listitem;margin_rself:0,-0.5;anchor:barBG_1;top:-1.0;left:0.333333;display:inline_free;|\nadd_custom_label|90|target:claim_p2p_1300;top:0.25;left:0.25;size:small|\nadd_custom_label|`51300|target:claim_p2p_1300;top:0.62;|\nadd_custom_button|" + (Has_Claimed::WinterTask(peer, "claim_p2p_1500") ? "" : "claim_p2p_1500") + "|icon:" + (Has_Claimed::WinterTask(peer, "claim_p2p_1500") ? "6292" : "9186") + ";state:enabled;color:" + (pInfo(peer)->winterfest_wishes < 1500 ? "128,128,128,180;border:grey;" : "255,255,255,255;border:blue;") + "preset:listitem;margin_rself:0,-0.5;anchor:barBG_1;top:-1.0;left:0.5;display:inline_free;|\nadd_custom_label|100|target:claim_p2p_1500;top:0.25;left:0.25;size:small|\nadd_custom_label|`51500|target:claim_p2p_1500;top:0.62;|\nadd_custom_button|" + (Has_Claimed::WinterTask(peer, "claim_p2p_1700") ? "" : "claim_p2p_1700") + "|icon:" + (Has_Claimed::WinterTask(peer, "claim_p2p_1700") ? "6292" : "9186") + ";state:enabled;color:" + (pInfo(peer)->winterfest_wishes < 1700 ? "128,128,128,180;border:grey;" : "255,255,255,255;border:blue;") + "preset:listitem;margin_rself:0,-0.5;anchor:barBG_1;top:-1.0;left:0.666667;display:inline_free;|\nadd_custom_label|110|target:claim_p2p_1700;top:0.25;left:0.25;size:small|\nadd_custom_label|`51700|target:claim_p2p_1700;top:0.62;|\nadd_custom_button|" + (Has_Claimed::WinterTask(peer, "claim_p2p_1900") ? "" : "claim_p2p_1900") + "|icon:" + (Has_Claimed::WinterTask(peer, "claim_p2p_1900") ? "6292" : "9186") + ";state:enabled;color:" + (pInfo(peer)->winterfest_wishes < 1900 ? "128,128,128,180;border:grey;" : "255,255,255,255;border:blue;") + "preset:listitem;margin_rself:0,-0.5;anchor:barBG_1;top:-1.0;left:0.833333;display:inline_free;|\nadd_custom_label|120|target:claim_p2p_1900;top:0.25;left:0.25;size:small|\nadd_custom_label|`51900|target:claim_p2p_1900;top:0.62;|\nadd_custom_button|" + (Has_Claimed::WinterTask(peer, "claim_p2p_2100") ? "" : "claim_p2p_2100") + "|icon:" + (Has_Claimed::WinterTask(peer, "claim_p2p_2100") ? "9186" : "9186") + ";state:enabled;color:" + (pInfo(peer)->winterfest_wishes < 2100 ? "128,128,128,180;border:grey;" : "255,255,255,255;border:blue;") + "preset:listitem;margin_rself:0,-0.5;anchor:barBG_1;top:-1.0;left:1;display:inline_free;|\nadd_custom_label|130|target:claim_p2p_2100;top:0.25;left:0.25;size:small|\nadd_custom_label|`52100|target:claim_p2p_2100;top:0.62;|\nadd_custom_button|" + (Has_Claimed::WinterTask(peer, "claim_f2p_1300") ? "" : "claim_f2p_1300") + "|icon:" + (Has_Claimed::WinterTask(peer, "claim_f2p_1300") ? "6292" : "10538") + ";state:enabled;color:" + (pInfo(peer)->winterfest_wishes < 1300 ? "128,128,128,180;border:grey;" : "255,255,255,255;border:blue;") + "preset:listitem;margin_rself:0,0.25;anchor:barBG_1;top:1.0;left:0.333333;display:inline_free;|\nadd_custom_label|3|target:claim_f2p_1300;top:0.25;left:0.25;size:small|\nadd_custom_button|" + (Has_Claimed::WinterTask(peer, "claim_f2p_1700") ? "" : "claim_f2p_1700") + "|icon:" + (Has_Claimed::WinterTask(peer, "claim_f2p_1700") ? "6292" : "10538") + ";state:enabled;color:" + (pInfo(peer)->winterfest_wishes < 1700 ? "128,128,128,180;border:grey;" : "255,255,255,255;border:blue;") + "preset:listitem;margin_rself:0,0.25;anchor:barBG_1;top:1.0;left:0.666667;display:inline_free;|\nadd_custom_label|3|target:claim_f2p_1700;top:0.25;left:0.25;size:small|\nadd_custom_button|" + (Has_Claimed::WinterTask(peer, "claim_f2p_2100") ? "" : "claim_f2p_2100") + "|icon:" + (Has_Claimed::WinterTask(peer, "claim_f2p_2100") ? "6292" : "10536") + ";state:enabled;color:" + (pInfo(peer)->winterfest_wishes < 2100 ? "128,128,128,180;border:grey;" : "255,255,255,255;border:blue;") + "preset:listitem;margin_rself:0,0.25;anchor:barBG_1;top:1.0;left:1;display:inline_free;|\nadd_custom_label|3|target:claim_f2p_2100;top:0.25;left:0.25;size:small|\nreset_placement_x|\nadd_custom_button|previous|image:interface/large/gui_left_arrow_btn.rttex;image_size:64,64;frame:0,0;anchor:barBG_1;top:3;left:0;|\nadd_custom_label|2/2|target:barBG_1;top:3.5;left:0.5;size:medium|\nadd_spacer|big|\nreset_placement_x|";
		pInfo(peer)->tb_1or2 = n1_2;
		gamepacket_t p(500);
		p.Insert("OnWinterRallyRequest");
		p.Insert("add_image_button||interface/large/gui_shop_winter_rally.rttex|bannerlayout|||-5.0|\nadd_smalltext|`5*Winter Club members exclusive rewards!*``|left|\nadd_spacer|big|\nadd_spacer|small|" + tb + "\nadd_textbox|Earn wishes by completing tasks! Once you have enough wishes, you can claim your rewards.|left|" + (Has_Claimed::WinterTask(peer, "claim_rewards") ? "\nadd_button||`2CLAIMED|disabled|0|0|" : "\nadd_button|" + a + (pInfo(peer)->winterfest_wishes < 2100 ? "" : "claim_rewards") + "|`" + (pInfo(peer)->winterfest_wishes < 2100 ? "s" : "0") + "Claim Rewards``|" + (pInfo(peer)->winterfest_wishes < 2100 ? "off" : "noflags") + "|0|0|") + "\nadd_spacer|small|\nadd_textbox|Repeatable Tasks:|left|\nadd_label_with_icon|small|" + (pInfo(peer)->winterfest_quest_1 >= 5 ? "`2" : "`o") + "Purchase Winterfest Cracker Packs (" + to_string(pInfo(peer)->winterfest_quest_1) + "/5) |left|" + (pInfo(peer)->winterfest_quest_1 >= 5 ? "6292" : "2946") + "|\nadd_smalltext|`5          75 wishes``|left|enable|\nadd_label_with_icon|small|" + (pInfo(peer)->winterfest_quest_2 >= 20 ? "`2" : "`o") + "Open Winterfest Crackers (" + to_string(pInfo(peer)->winterfest_quest_2) + "/20) |left|" + (pInfo(peer)->winterfest_quest_2 >= 20 ? "6292" : "2946") + "|\nadd_smalltext|`5          10 wishes``|left|enable|\nadd_label_with_icon|small|" + (pInfo(peer)->winterfest_quest_3 >= 1 ? "`2" : "`o") + "Open Deluxe Winterfest Crackers (" + to_string(pInfo(peer)->winterfest_quest_3) + "/1) |left|" + (pInfo(peer)->winterfest_quest_3 >= 1 ? "6292" : "2946") + "|\nadd_smalltext|`5          50 wishes``|left|enable|\nadd_spacer|small|\nadd_textbox|Daily Tasks:|\nadd_label_with_icon|small|" + (pInfo(peer)->reset_winterfest_quest_1 >= 1 ? "`2" : "`o") + "Claim an item from the Winterfest Calendar (" + to_string(pInfo(peer)->reset_winterfest_quest_1) + "/1) |left|" + (pInfo(peer)->reset_winterfest_quest_1 >= 1 ? "6292" : "2946") + "|\nadd_smalltext|`5          30 wishes``|left|enable|\nadd_label_with_icon|small|" + (pInfo(peer)->reset_winterfest_quest_2 >= 1 ? "`2" : "`o") + "Claim an item from the Diamond Builder's Bonanza (" + to_string(pInfo(peer)->reset_winterfest_quest_2) + "/1) |left|" + (pInfo(peer)->reset_winterfest_quest_2 >= 1 ? "6292" : "2946") + "|\nadd_smalltext|`5          20 wishes``|left|enable|\nadd_label_with_icon|small|" + (pInfo(peer)->reset_winterfest_quest_3 >= 1 ? "`2" : "`o") + "Collect an Icy Heart of Winter (" + to_string(pInfo(peer)->reset_winterfest_quest_3) + "/1) |left|" + (pInfo(peer)->reset_winterfest_quest_3 >= 1 ? "6292" : "2946") + "|\nadd_smalltext|`5          10 wishes``|left|enable|\nadd_label_with_icon|small|" + (pInfo(peer)->reset_winterfest_quest_4 >= 200 ? "`2" : "`o") + "Give Winter Gifts to Growch (" + to_string(pInfo(peer)->reset_winterfest_quest_4) + "/200) |left|" + (pInfo(peer)->reset_winterfest_quest_4 >= 200 ? "6292" : "2946") + "|\nadd_smalltext|`5          10 wishes``|left|enable|\nadd_label_with_icon|small|" + (pInfo(peer)->reset_winterfest_quest_5 >= 20000 ? "`2" : "`o") + "Donate Rarity to Stuff 4 Toys (" + (pInfo(peer)->reset_winterfest_quest_5 >= 20000 ? "20000" : to_string(pInfo(peer)->reset_winterfest_quest_5)) + "/20000) |left|" + (pInfo(peer)->reset_winterfest_quest_5 >= 20000 ? "6292" : "2946") + "|\nadd_smalltext|`5          10 wishes``|left|enable|\nadd_label_with_icon|small|" + (pInfo(peer)->reset_winterfest_quest_6 >= 50 ? "`2" : "`o") + "Give Winter Gifts to Growtopians (" + to_string(pInfo(peer)->reset_winterfest_quest_6) + "/50) |left|" + (pInfo(peer)->reset_winterfest_quest_6 >= 50 ? "6292" : "2946") + "|\nadd_smalltext|`5          10 wishes``|left|enable|\nadd_label_with_icon|small|" + (pInfo(peer)->reset_winterfest_quest_7 >= 100 ? "`2" : "`o") + "Open gifts from under Giving Trees (" + to_string(pInfo(peer)->reset_winterfest_quest_7) + "/100) |left|" + (pInfo(peer)->reset_winterfest_quest_7 >= 100 ? "6292" : "2946") + "|\nadd_smalltext|`5          10 wishes``|left|enable|\nadd_label_with_icon|small|" + (pInfo(peer)->reset_winterfest_quest_8 >= 100 ? "`2" : "`o") + "Cut Down Giving Trees (" + to_string(pInfo(peer)->reset_winterfest_quest_8) + "/100) |left|" + (pInfo(peer)->reset_winterfest_quest_8 >= 100 ? "6292" : "2946") + "|\nadd_smalltext|`5          10 wishes``|left|enable|\nadd_label_with_icon|small|" + (pInfo(peer)->reset_winterfest_quest_9 >= 100 ? "`2" : "`o") + "Decorate Giving Trees (" + to_string(pInfo(peer)->reset_winterfest_quest_9) + "/100) |left|" + (pInfo(peer)->reset_winterfest_quest_9 >= 100 ? "6292" : "2946") + "|\nadd_smalltext|`5          10 wishes``|left|enable|\nadd_spacer|small|\nadd_spacer|small|\nadd_smalltext|`6*NOTE: Daily Tasks can only be completed once per day. Any progress on Daily Tasks that are not completed before the end of the day will be lost.``|left|\nadd_spacer|small|" + (pInfo(peer)->winterfest_wishes < 2100 ? "\nadd_textbox|`$Remaining Time: " + Time::Playmod(pInfo(peer)->Winter_Daily_Time - time(nullptr)) + "|left|" : "") + "\nadd_spacer|small|\nadd_quick_exit|\nend_dialog|winterrally_dialog|Close||");
		p.CreatePacket(peer);
	}
	static void Halloween_Task(ENetPeer* peer) {
		string dialog = SetColor(peer) + "set_default_color|`o\nadd_label_with_icon|big|Trick or Treat Tasks|left|12826||\nadd_spacer|small|\nadd_label|small|Bring me candy and I'll give you some gifts in return. Spend this Halloween season completing tasks all around Growtopia to get candy. Find me in the GROWGANOTH world and I'll sell you some sweet gifts.|left|\nadd_spacer|small|\nadd_label|small|Quick Treats:|left|\nadd_spacer|small|\nadd_label|small|Complete these tasks to make some quick candy!|left|\nadd_spacer|small|";
		dialog += "\nadd_label_with_icon|small|Sacrifice Dark King's Offering (" + to_string(pInfo(peer)->halloween_q1) + "/1)|left|10328|state:enabled;|";
		dialog += "\nadd_custom_margin|x:60;y:10|\nadd_smalltext|Worth 5 Candy per sacrifice|left|" + a + (pInfo(peer)->halloween_q1 >= 1 ? "\nadd_button|halloween_claim_task_reward_1|Claim Candy|noflags|0|0|" : "\nadd_button|halloween_claim_task_reward_1|Task Incomplete|off|0|0|") + "";
		dialog += "\nadd_custom_margin|x:-60;y:-10|\nadd_custom_margin|x:60;y:0|\nadd_custom_margin|x:-60;y:0|";
		dialog += "\nadd_spacer|small|";
		dialog += "\nadd_label_with_icon|small|Purchase a Dark Ticket (" + to_string(pInfo(peer)->halloween_q2) + "/1)|left|9018|state:enabled;|";
		dialog += "\nadd_custom_margin|x:60;y:10|\nadd_smalltext|Worth 1 Candy per pair of tickets purchased|left|" + a + (pInfo(peer)->halloween_q2 >= 1 ? "\nadd_button|halloween_claim_task_reward_2|Claim Candy|noflags|0|0|" : "\nadd_button|halloween_claim_task_reward_2|Task Incomplete|off|0|0|") + "";
		dialog += "\nadd_custom_margin|x:-60;y:-10|\nadd_custom_margin|x:60;y:0|\nadd_custom_margin|x:-60;y:0|";
		dialog += "\nadd_spacer|small|";
		dialog += "\nadd_label_with_icon|small|Purchase a Gift of Growganoth (" + to_string(pInfo(peer)->halloween_q3) + "/1)|left|10386|state:enabled;|";
		dialog += "\nadd_custom_margin|x:60;y:10|\nadd_smalltext|Worth 2 Candy per purchase|left|" + a + (pInfo(peer)->halloween_q3 >= 1 ? "\nadd_button|halloween_claim_task_reward_3|Claim Candy|noflags|0|0|" : "\nadd_button|halloween_claim_task_reward_3|Task Incomplete|off|0|0|") + "";
		dialog += "\nadd_custom_margin|x:-60;y:-10|\nadd_custom_margin|x:60;y:0|\nadd_custom_margin|x:-60;y:0|";
		dialog += "\nadd_spacer|small|";
		dialog += "\nadd_label_with_icon|small|Purchase Weather Machine - Dark Mountains (" + to_string(pInfo(peer)->halloween_q4) + "/1)|left|12408|state:enabled;|";
		dialog += "\nadd_custom_margin|x:60;y:10|\nadd_smalltext|Worth 10 Candy per purchase|left|" + a + (pInfo(peer)->halloween_q4 >= 1 ? "\nadd_button|halloween_claim_task_reward_4|Claim Candy|noflags|0|0|" : "\nadd_button|halloween_claim_task_reward_4|Task Incomplete|off|0|0|") + "";
		dialog += "\nadd_custom_margin|x:-60;y:-10|\nadd_custom_margin|x:60;y:0|\nadd_custom_margin|x:-60;y:0|";
		dialog += "\nadd_spacer|small|\nadd_spacer|small|";
		dialog += "\nadd_label|small|Trick Crazy Jim:|left";
		dialog += "\nadd_spacer|small|";
		dialog += "\nadd_label|small|Let's make a fool of Jim by dressing up for the season while doing his tasks! In case you forget, his phone number is 12345. These tasks are reset every day. `5You MUST dress up wearing the required item while completing these tasks otherwise you don't get any candy``. Also, it's way more fun to dress up in general. The amount of candy given is based on your awesomeness level.|left|";
		dialog += "\nadd_spacer|small|";
		dialog += "\ndud_checkbox||Use 200 Gift of Growganoth (" + to_string(pInfo(peer)->halloween_q5) + "/200)|" + (Has_Claimed::HalloweenT(peer, "task5") ? "1" : "0") + "|useLabel";
		dialog += "\nadd_custom_margin|x:65;y:-30|";
		dialog += "\nadd_custom_margin|x:-65;y:30|";
		dialog += "\nadd_custom_margin|x:60;y:-20|";
		dialog += "\nadd_smalltext|Worth 50 Candy|left|" + a + (Has_Claimed::HalloweenT(peer, "task5") ? "\nadd_button||CLAIMED|off|0|0|" : pInfo(peer)->halloween_q5 >= 200 ? "\nadd_button|halloween_claim_task_reward_5|Claim Candy|noflags|0|0|" : "\nadd_button|halloween_claim_task_reward_5|Task Incomplete|off|0|0|") + "";
		dialog += "\nadd_custom_margin|x:-60;y:20|";
		dialog += "\nadd_custom_margin|x:60;y:0|";
		dialog += "\nadd_custom_margin|x:-60;y:0|";
		dialog += "\nadd_spacer|small|";
		dialog += "\ndud_checkbox||Use 2 Dark Ticket (" + to_string(pInfo(peer)->halloween_q6) + "/2)|" + (Has_Claimed::HalloweenT(peer, "task6") ? "1" : "0") + "|useLabel";
		dialog += "\nadd_custom_margin|x:65;y:-30|";
		dialog += "\nadd_custom_margin|x:-65;y:30|";
		dialog += "\nadd_custom_margin|x:60;y:-20|";
		dialog += "\nadd_smalltext|Worth 40 Candy|left|" + a + (Has_Claimed::HalloweenT(peer, "task6") ? "\nadd_button||CLAIMED|off|0|0|" : pInfo(peer)->halloween_q6 >= 2 ? "\nadd_button|halloween_claim_task_reward_6|Claim Candy|noflags|0|0|" : "\nadd_button|halloween_claim_task_reward_6|Task Incomplete|off|0|0|") + "";
		dialog += "\nadd_custom_margin|x:-60;y:20|";
		dialog += "\nadd_custom_margin|x:60;y:0|";
		dialog += "\nadd_custom_margin|x:-60;y:0|";
		dialog += "\nadd_spacer|small|";
		dialog += "\ndud_checkbox||Sacrifice 100 World Lock (" + to_string(pInfo(peer)->halloween_q7) + "/100)|" + (Has_Claimed::HalloweenT(peer, "task7") ? "1" : "0") + "|useLabel";
		dialog += "\nadd_custom_margin|x:65;y:-30|";
		dialog += "\nadd_custom_margin|x:-65;y:30|";
		dialog += "\nadd_custom_margin|x:60;y:-20|";
		dialog += "\nadd_smalltext|Worth 25 Candy|left|" + a + (Has_Claimed::HalloweenT(peer, "task7") ? "\nadd_button||CLAIMED|off|0|0|" : pInfo(peer)->halloween_q7 >= 100 ? "\nadd_button|halloween_claim_task_reward_7|Claim Candy|noflags|0|0|" : "\nadd_button|halloween_claim_task_reward_7|Task Incomplete|off|0|0|") + "";
		dialog += "\nadd_custom_margin|x:-60;y:20|";
		dialog += "\nadd_custom_margin|x:60;y:0|";
		dialog += "\nadd_custom_margin|x:-60;y:0|";
		dialog += "\nadd_spacer|small|";
		dialog += "\ndud_checkbox||Purchase a Fists of Vengeance (" + to_string(pInfo(peer)->halloween_q8) + "/1)|" + (Has_Claimed::HalloweenT(peer, "task8") ? "1" : "0") + "|useLabel";
		dialog += "\nadd_custom_margin|x:65;y:-30|";
		dialog += "\nadd_custom_margin|x:-65;y:30|";
		dialog += "\nadd_custom_margin|x:60;y:-20|";
		dialog += "\nadd_smalltext|Worth 100 Candy|left|" + a + (Has_Claimed::HalloweenT(peer, "task8") ? "\nadd_button||CLAIMED|off|0|0|" : pInfo(peer)->halloween_q8 >= 1 ? "\nadd_button|halloween_claim_task_reward_8|Claim Candy|noflags|0|0|" : "\nadd_button|halloween_claim_task_reward_8|Task Incomplete|off|0|0|") + "";
		dialog += "\nadd_custom_margin|x:-60;y:20|";
		dialog += "\nadd_custom_margin|x:60;y:0|";
		dialog += "\nadd_custom_margin|x:-60;y:0|";
		dialog += "\nadd_spacer|small|";
		dialog += "\ndud_checkbox||Get Nightmare Devil Wings from Growganoth (" + to_string(pInfo(peer)->halloween_q9) + "/1)|" + (Has_Claimed::HalloweenT(peer, "task9") ? "1" : "0") + "|useLabel|\nadd_custom_margin|x:65;y:-30|\nadd_custom_margin|x:-65;y:30|\nadd_custom_margin|x:60;y:-20|\nadd_smalltext|Worth 200 Candy|left|" + a + (Has_Claimed::HalloweenT(peer, "task9") ? "\nadd_button||CLAIMED|off|0|0|" : pInfo(peer)->halloween_q9 >= 1 ? "\nadd_button|halloween_claim_task_reward_9|Claim Candy|noflags|0|0|" : "\nadd_button|halloween_claim_task_reward_9|Task Incomplete|off|0|0|") + "\nadd_custom_margin|x:-60;y:20|\nadd_custom_margin|x:60;y:0|\nadd_custom_margin|x:-60;y:0|\nadd_spacer|small|\nadd_spacer|small|\nadd_label_with_icon|big|`wSpooky Tips:``|left|1236|\nadd_spacer|small|\nadd_smalltext|Another way to get some spooky prizes is to go to the Maw of Growganoth by entering the world GROWGANOTH. Your goal is to jump to the Maw at the top and reach portal at the center of the world.|left|\nadd_image_button|warp_player_into_halloween_world|interface/large/gui_halloween_banner1.rttex|bannerlayout|||\nadd_spacer|small|\nadd_smalltext|You can also get spooky version of specific items by dropping them into the maw.|left|\nadd_spacer|small|\nadd_smalltext|Venture through the Tomb of Growganoth during the Halloween season by purchasing a dark ticket from the store!|left|\nadd_image_button|open_store|interface/large/gui_halloween_banner2.rttex|bannerlayout|||\nadd_spacer|small|\nadd_smalltext|Consuming the ticket will teleport you to one of the many worlds that are the Tomb of Growganoth. |left|\nadd_quick_exit|\nend_dialog|halloween_tasks_popup_handle|Close|";
		VarList::OnDialogRequest(peer, SetColor(peer) + dialog, 500);
	}
	static void BankCentral(ENetPeer* peer, int time = 0, string txt = "") {
		if (not pInfo(peer)->Has_Enter_Bank and pInfo(peer)->bank_password == 0) {
			VarList::OnDialogRequest(peer, SetColor(peer) + "set_default_color|`o\nadd_label_with_icon|big|`wBank Central " + Environment()->server_name + "``|left|1008|\nadd_smalltext|`oHello Mr." + pInfo(peer)->tankIDName + ". Welcome to Bank Central " + Environment()->server_name + ". Here, you have the opportunity to deposit your `2Locks `oor `2Gems `oand withdraw your `2Locks `oor `2Gems``!|left|\nadd_spacer|small|\nadd_smalltext|The system detects that you have not created a pin for your balance security, create your pin with a 6 digit number.|left|" + (not txt.empty() ? "\nadd_smalltext|" + txt + "|left|" : "") + "\nadd_text_input|pin_bank|New Pin:||6|\nadd_spacer|small|\nadd_custom_button|Back|textLabel:`wBack;middle_colour:80543231;border_colour:80543231;|\nadd_custom_button|Create_Pin|textLabel:`wCreate;anchor:_button_Back;left:1;margin:60,0;|\nend_dialog|Bank_Central|||", time);
		}
		if (not pInfo(peer)->Has_Enter_Bank and pInfo(peer)->bank_password != 0) {
			VarList::OnDialogRequest(peer, SetColor(peer) + "set_default_color|`o\nadd_label_with_icon|big|`wBank Central " + Environment()->server_name + "``|left|1008|\nadd_smalltext|`oHello Mr." + pInfo(peer)->tankIDName + ". Welcome to Bank Central " + Environment()->server_name + ". Here, you have the opportunity to deposit your `2Locks `oor `2Gems `oand withdraw your `2Locks `oor `2Gems``!|left|\nadd_spacer|small|\nadd_smalltext|Enter Your Bank PIN!|left|" + (not txt.empty() ? "\nadd_smalltext|" + txt + "|left|" : "") + "\nadd_text_input_password|pin_bank|Your Pin:||6|\nadd_spacer|small|\nadd_custom_button|Back|textLabel:`wBack;middle_colour:80543231;border_colour:80543231;|\nadd_custom_button|Enter_Pin|textLabel:`wEnter;anchor:_button_Back;left:1;margin:60,0;|\nend_dialog|Bank_Central|||", time);
		}
		else VarList::OnDialogRequest(peer, SetColor(peer) + "set_default_color|`o\nadd_label_with_icon|big|`wBank Central " + Environment()->server_name + "``|left|1008|\nadd_smalltext|`oHello Mr." + pInfo(peer)->tankIDName + ". Welcome to Bank Central " + Environment()->server_name + ". Here, you have the opportunity to deposit your `2Locks `oor `2Gems `oand withdraw your `2Locks `oor `2Gems``!|left|\nadd_spacer|small|\nadd_textbox|Your Balance in bank:|left|\nadd_label_with_icon|small|`oWorld Lock : `2" + Set_Count(pInfo(peer)->wl_bank_amount) + "|left|242|\nadd_label_with_icon|small|`oDiamond Lock : `2" + Set_Count(pInfo(peer)->dl_bank_amount) + "|left|1796|\nadd_label_with_icon|small|`oPlatinum Gem Lock : `2" + Set_Count(pInfo(peer)->pgl_bank_amount) + "|left|7188|\nadd_label_with_icon|small|`o" + Environment()->server_name + " Gem Lock : `2" + Set_Count(pInfo(peer)->mgl_bank_amount) + "|left|8470|\nadd_label_with_icon|small|`oInfinity Gem Lock : `2" + Set_Count(pInfo(peer)->igl_bank_amount) + "|left|13200|\nadd_label_with_icon|small|`oGems : `2" + formatWithCommas(pInfo(peer)->Gems_Storage) + "|left|14590|\nadd_spacer|small|\ntext_scaling_string|Subscribtions+++|\nadd_button_with_icon|deposit|DEPOSIT|noflags|13808|\nadd_button_with_icon|withdraw|WITHDRAW|noflags|13810|\nadd_button_with_icon|transfer|TRANSFER|noflags|13806|\nadd_button_with_icon|history|HISTORY|noflags|13802|\nadd_button_with_icon||END_LIST|noflags|0||\nadd_button|Back|`wBack|noflags|0|0|\nend_dialog|Bank_Central|||\nadd_quick_exit|\n", time);
	}
	static void Spotify_Menu(ENetPeer* p_, std::string type = "", std::string page = "1") {
		std::string pg = "", playing = "";
		if (pInfo(p_)->spotify == 1) playing = "Dean Lewis - Be Alright";
		if (pInfo(p_)->spotify == 2) playing = "Indila - Darniere Danse";
		if (pInfo(p_)->spotify == 3) playing = "Slander - Love is Gone";
		if (pInfo(p_)->spotify == 4) playing = "Akon - Lonely";
		if (pInfo(p_)->spotify == 5) playing = "Astrid S - Hurts So Good";
		if (pInfo(p_)->spotify == 6) playing = "Maroon 5 - Animals";
		if (pInfo(p_)->spotify == 7) playing = "Loreen - Tattoo";
		if (pInfo(p_)->spotify == 8) playing = "Duncan Laurence - Arcade";
		if (pInfo(p_)->spotify == 9) playing = "Evanescence - Bring Me To Life";
		if (pInfo(p_)->spotify == 10) playing = "James Arthur - Impossible";
		if (pInfo(p_)->spotify == 11) playing = "Skillet - Monster";
		if (pInfo(p_)->spotify == 12) playing = "Aziz Hedra - Somebody's Pleasure";
		if (pInfo(p_)->spotify == 13) playing = "SZA - Saturn";
		if (pInfo(p_)->spotify == 14) playing = "Cecilia Cara - La Vaguelette";
		if (pInfo(p_)->spotify == 15) playing = "Demi Lovato - Heart Attack";
		if (pInfo(p_)->spotify == 16) playing = "Indila - Tourner Danse Le Vide";
		if (pInfo(p_)->spotify == 17) playing = "Rihanna - Diamonds";
		if (pInfo(p_)->spotify == 18) playing = "Alan Walker - The Drum";
		if (pInfo(p_)->spotify == 19) playing = "Glass Animals - Heat Waves";
		if (pInfo(p_)->spotify == 20) playing = "Zombie - The Cranberries";
		if (pInfo(p_)->spotify == 21) playing = "Inner Circle - Bad Boys";
		if (pInfo(p_)->spotify == 22) playing = "Avenged Sevenfold - Dear God";
		if (pInfo(p_)->spotify == 23) playing = "Ace of Base - Happy Nation";
		if (pInfo(p_)->spotify == 24) playing = "Ghost - Mary On A Cross";

		//INDO
		if (pInfo(p_)->spotify == 25) playing = "Seventeen - Tanpa Pesan Terakhir";
		if (pInfo(p_)->spotify == 26) playing = "Peterpan - Menunggumu";
		if (pInfo(p_)->spotify == 27) playing = "Judika - Aku Yang Tersakiti";
		if (pInfo(p_)->spotify == 28) playing = "Iklim - Hakikat Sebuah Cinta";
		if (pInfo(p_)->spotify == 29) playing = "Nina - Feast";
		if (pInfo(p_)->spotify == 30) playing = "Andra And The Backbone - Sempurna";
		if (pInfo(p_)->spotify == 31) playing = "Ella - Sembilu";
		if (pInfo(p_)->spotify == 32) playing = "The Lantis - Bunga Maaf";
		if (pInfo(p_)->spotify == 0) playing = "nothing";
		pInfo(p_)->page_music = page, pInfo(p_)->page_type = type;
		string tabs = SetColor(p_) + "set_default_color|`o\nstart_custom_tabs|"
			"\nadd_custom_button|spotify_english|image:interface/large/gui_button_tabs.rttex;image_size:228,92;frame:" + a + (type == "" or type == "eng" ? "1,16" : "0,16") + ";width:0.14;min_width:60;|"
			"\nadd_custom_button|spotify_indo|image:interface/large/gui_button_tabs.rttex;image_size:228,92;frame:" + a + (type == "indo" ? "1,15" : "0,15") + ";width:0.14;min_width:60;|"
			"\nend_custom_tabs|";
		if (type == "" or type == "eng") {
			if (page == "1") {
				pg = 
					/*Be Alright - Dawn Lewis*/"\nadd_custom_button|play1|image:interface/large/tianvan/music_btn_eng_1.rttex;image_size:512,512;frame:0,0;width:0.2;|"
					/*Indile - Derniere Danse*/"\nadd_custom_button|play2|image:interface/large/tianvan/music_btn_eng_1.rttex;image_size:512,512;frame:0,1;width:0.2;|"
					/*Love is Gone - Slander*/"\nadd_custom_button|play3|image:interface/large/tianvan/music_btn_eng_1.rttex;image_size:512,512;frame:0,2;width:0.2;|"
					/*Lonely - Akon*/"\nadd_custom_button|play4|image:interface/large/tianvan/music_btn_eng_1.rttex;image_size:512,512;frame:0,3;width:0.2;|"
					/*Hurts so Good - Astrid S*/"\nadd_custom_button|play5|image:interface/large/tianvan/music_btn_eng_1.rttex;image_size:512,512;frame:0,4;width:0.2;|"
					/*Animals - Maroon 5*/"\nadd_custom_button|play6|image:interface/large/tianvan/music_btn_eng_1.rttex;image_size:512,512;frame:0,5;width:0.2;|"
					/*Tatto - Loreen*/"\nadd_custom_button|play7|image:interface/large/tianvan/music_btn_eng_1.rttex;image_size:512,512;frame:0,6;width:0.2;|"
					/*Arcade - Duncan*/"\nadd_custom_button|play8|image:interface/large/tianvan/music_btn_eng_1.rttex;image_size:512,512;frame:0,7;width:0.2;|"
					/*Evanescence - Bring Me To Life*/"\nadd_custom_button|play9|image:interface/large/tianvan/music_btn_eng_2.rttex;image_size:512,512;frame:0,0;width:0.2;|"
					/*James Arthur - Impossible*/"\nadd_custom_button|play10|image:interface/large/tianvan/music_btn_eng_2.rttex;image_size:512,512;frame:0,1;width:0.2;|"
					/*Skillet - Monster*/"\nadd_custom_button|play11|image:interface/large/tianvan/music_btn_eng_2.rttex;image_size:512,512;frame:0,2;width:0.2;|"
					/*Aziz Hedra - Somebody's Pleasure*/"\nadd_custom_button|play12|image:interface/large/tianvan/music_btn_eng_2.rttex;image_size:512,512;frame:0,3;width:0.2;|"
					"\nadd_custom_label|1/2|target:play12;top:1.4;left:-1.0;size:medium|"
					"\nadd_custom_margin|x:610;y:0|"
					"\nadd_custom_button|next|image:interface/large/gui_right_arrow_btn.rttex;image_size:64,64;frame:0,0;anchor:play12;|";
			}
			if (page == "2") {
				pg = 
					/*SZA - Saturn*/"\nadd_custom_button|play13|image:interface/large/tianvan/music_btn_eng_2.rttex;image_size:512,512;frame:0,4;width:0.2;|"
					/*Cecilia Cara - La Vaguelette*/"\nadd_custom_button|play14|image:interface/large/tianvan/music_btn_eng_2.rttex;image_size:512,512;frame:0,5;width:0.2;|"
					/*Demi Lovato - Heart Attack*/"\nadd_custom_button|play15|image:interface/large/tianvan/music_btn_eng_2.rttex;image_size:512,512;frame:0,6;width:0.2;|"
					/*Indila - Tourner Danse Le Vide*/"\nadd_custom_button|play16|image:interface/large/tianvan/music_btn_eng_2.rttex;image_size:512,512;frame:0,7;width:0.2;|"
					/*Rihanna - Diamonds*/"\nadd_custom_button|play17|image:interface/large/tianvan/music_btn_eng_3.rttex;image_size:512,512;frame:0,0;width:0.2;|"
					/*Alan Walker - The Drum*/"\nadd_custom_button|play18|image:interface/large/tianvan/music_btn_eng_3.rttex;image_size:512,512;frame:0,1;width:0.2;|"
					/*Glass Animals - Heat Waves*/"\nadd_custom_button|play19|image:interface/large/tianvan/music_btn_eng_3.rttex;image_size:512,512;frame:0,2;width:0.2;|"
					/*Zombie - The Cranberries*/"\nadd_custom_button|play20|image:interface/large/tianvan/music_btn_eng_3.rttex;image_size:512,512;frame:0,3;width:0.2;|"
					/*Inner Circle - Bad Boys*/"\nadd_custom_button|play21|image:interface/large/tianvan/music_btn_eng_3.rttex;image_size:512,512;frame:0,4;width:0.2;|"
					/*Avenged Sevenfold - Dear God*/"\nadd_custom_button|play22|image:interface/large/tianvan/music_btn_eng_3.rttex;image_size:512,512;frame:0,5;width:0.2;|"
					/*Ace of Base - Happy Nation*/"\nadd_custom_button|play23|image:interface/large/tianvan/music_btn_eng_3.rttex;image_size:512,512;frame:0,6;width:0.2;|"
					/*Ghost - Mary On A Cross*/"\nadd_custom_button|play24|image:interface/large/tianvan/music_btn_eng_3.rttex;image_size:512,512;frame:0,7;width:0.2;|"
					"\nadd_custom_label|2/2|target:play24;top:1.4;left:-1.0;size:medium|"
					"\nadd_custom_margin|x:10;y:0|"
					"\nadd_custom_button|previous|image:interface/large/gui_left_arrow_btn.rttex;image_size:64,64;frame:0,0;anchor:play24;|";
			}
		}
		if (type == "indo") {
			if (page == "1") {
				pg = 
					/*Seventeen - Tanpa Pesan Terakhir*/"\nadd_custom_button|indo_play25|image:interface/large/tianvan/music_btn_indo_1.rttex;image_size:512,512;frame:0,1;width:0.2;|"
					/*Peterpan - Menunggumu*/"\nadd_custom_button|indo_play26|image:interface/large/tianvan/music_btn_indo_1.rttex;image_size:512,512;frame:0,2;width:0.2;|"
					/*Judika - Aku Yang Tersakiti*/"\nadd_custom_button|indo_play27|image:interface/large/tianvan/music_btn_indo_1.rttex;image_size:512,512;frame:0,0;width:0.2;|"
					/*Iklim - Hakikat Sebuah Cinta*/"\nadd_custom_button|indo_play28|image:interface/large/tianvan/music_btn_rand.rttex;image_size:512,512;frame:0,0;width:0.2;|"
					/*Nina - Feast*/"\nadd_custom_button|indo_play29|image:interface/large/tianvan/music_btn_rand.rttex;image_size:512,512;frame:0,1;width:0.2;|"
					/*Andra And The Backbone - Sempurna*/"\nadd_custom_button|indo_play30|image:interface/large/tianvan/music_btn_rand.rttex;image_size:512,512;frame:0,2;width:0.2;|"
					/*Ella - Sembilu*/"\nadd_custom_button|indo_play31|image:interface/large/tianvan/music_btn_rand.rttex;image_size:512,512;frame:0,3;width:0.2;|"
					/*The Lantis - Bunga Maaf*/"\nadd_custom_button|indo_play32|image:interface/large/tianvan/music_btn_rand.rttex;image_size:512,512;frame:0,4;width:0.2;|"
					;
			}
		}
		VarList::OnDialogRequest(p_, tabs + "set_default_color|\nadd_label_with_icon|big|Spotify Menu|left|11432|\nadd_smalltext|`oWelcome to `2Spotify``. In here you can any music that available from the Server!|left|\nadd_spacer|small|\nadd_smalltext|`oYou currently playing `2" + playing + "|left|\nadd_spacer|small|" + pg + "\nadd_custom_break|\nadd_spacer|small|\nadd_small_font_button|stop_music|`4Stop The Music|noflags|0|0|\nadd_spacer|small|\nend_dialog|spotify_dialog|Nevermind||", 500);
	}
	static void Shop_Assets(ENetPeer* peer) {
		VarList::OnDialogRequest(peer, SetColor(peer) + "set_default_color|`o\nadd_image_button||interface/large/tianvan/shop_banner.rttex||||\nadd_spacer|small|\nadd_textbox|`$" + Environment()->server_name + " Coin balance:|left|\ntext_scaling_string|Subscribtions+++|\nadd_button_with_icon||`o" + Set_Count(pInfo(peer)->gtwl) + " ā|staticYellowFrame,no_padding_x,|244|\nreset_placement_x|\nadd_button_with_icon||END_LIST|noflags|0||\nadd_textbox|`oChoose what you want to purchase:|left|\nadd_smalltext|`oNote: You can purchase roles, coin, gems, level, titles and others in Our Official Website for real Growtopia Currency or " + Environment()->server_name + " Coin.|left|\nadd_url_button|comment|`5Visit " + Environment()->server_name + " Website``|noflags|" + Environment()->website_url + "|Do you want to open the " + Environment()->server_name + " Website?|0|0|\nadd_spacer|small|\ntext_scaling_string|AAAAAAAAAAAAA|\nadd_button_with_icon|deposit|`2DEPOSIT|noflags|1452||" + (pInfo(peer)->pg_bank ? "\nadd_button_with_icon||`5PIGGY BANK|staticYellowFrame|6292||" : "\nadd_button_with_icon|Buy_PiggyBank|`5PIGGY BANK|staticYellowFrame|244|400|") + (pInfo(peer)->Role.BOOST ? "\nadd_button_with_icon||`5[BOOST]|staticYellowFrame|6292||" : "\nadd_button_with_icon|Buy_BoostRole|`5[BOOST]|staticYellowFrame|244|400|") + (pInfo(peer)->Role.SUPER_BOOST ? "\nadd_button_with_icon||`8[SUPER-BOOST]|staticYellowFrame|6292||" : "\nadd_button_with_icon|Buy_SupBoostRole|`8[SUPER-BOOST]|staticYellowFrame|244|800|") + "\nadd_button_with_icon||END_LIST|noflags|0||\nadd_spacer|small|\nadd_quick_exit|\nend_dialog|Shop_Assets|||\n", 500);
	}
	static void Iotm_Shop(ENetPeer* peer) {
		VarList::OnDialogRequest(peer, SetColor(peer) + "set_default_color|`o\nadd_image_button||interface/large/tianvan/iotmshop_banner.rttex||||\nadd_spacer|small|\nadd_smalltext|`oEvery month, a limited item is made available in the Growtopia Store, where it can be bought for a certain amount of Gems. The Item Of The Month of March, April, May, and June of 2017 all cost 100,000 Gems. Since July 2017, the price for the IOTM rose to 200,000 Gems to increase their value. During January 2021, the price for IOTM rose to 350,000 Gems to keep the item's value when then they are no longer in the store.|left|\nadd_spacer|small|\ntext_scaling_string|Subscribtions+++|"
			"\nadd_label|small|`2Item Of The Month - 2017|left|"
			"\nadd_button_with_icon|Golden Razor Wings|`o200 ā|staticYellowFrame,no_padding_x,|4534|"
			"\nadd_button_with_icon|Zraei's Dragoscarf|`o200 ā|staticYellowFrame,no_padding_x,|4590|"
			"\nadd_button_with_icon|Kudo's Carriage|`o200 ā|staticYellowFrame,no_padding_x,|4628|"
			"\nadd_button_with_icon|Diamond Horn|`o200 ā|staticYellowFrame,no_padding_x,|4746|"
			"\nadd_button_with_icon||`oNFS ā|staticYellowFrame,no_padding_x,disabled|4802|"
			"\nadd_button_with_icon|Speed Medallion|`o200 ā|staticYellowFrame,no_padding_x,|4988|"
			"\nadd_button_with_icon|Prismatic Aura|`o200 ā|staticYellowFrame,no_padding_x,|5020|"
			"\nadd_button_with_icon|Ghastly Robe|`o200 ā|staticYellowFrame,no_padding_x,|5088|"
			"\nadd_button_with_icon|Cloak of Falling Waters|`o200 ā|staticYellowFrame,no_padding_x,|5206|"
			"\nadd_button_with_icon|Zephyr Helm|`o200 ā|staticYellowFrame,no_padding_x,|5322|\nreset_placement_x|\nadd_button_with_icon||END_LIST|noflags|0||"
			"\nadd_label|small|`2Item Of The Month - 2018|left|"
			"\nadd_button_with_icon||`oNFS ā|staticYellowFrame,no_padding_x,disabled|5480|"
			"\nadd_button_with_icon||`oNFS ā|staticYellowFrame,no_padding_x,disabled|5638|"
			"\nadd_button_with_icon|Will of the Wild|`o200 ā|staticYellowFrame,no_padding_x,|5712|"
			"\nadd_button_with_icon||`oNFS ā|staticYellowFrame,no_padding_x,disabled|5958|"
			"\nadd_button_with_icon||`oNFS ā|staticYellowFrame,no_padding_x,disabled|6016|"
			"\nadd_button_with_icon|Raptor Legs|`o200 ā|staticYellowFrame,no_padding_x,|6294|"
			"\nadd_button_with_icon|Mighty Tiger|`o200 ā|staticYellowFrame,no_padding_x,|6338|"
			"\nadd_button_with_icon|Cloak of Hoveration|`o200 ā|staticYellowFrame,no_padding_x,|6758|"
			"\nadd_button_with_icon|Sorcerer's Tunic of Mystery|`o200 ā|staticYellowFrame,no_padding_x,|6892|"
			"\nadd_button_with_icon|Shadow Spirit of the Underworld|`o200 ā|staticYellowFrame,no_padding_x,|7192|"
			"\nadd_button_with_icon|Monarch Butterfly Wings|`o200 ā|staticYellowFrame,no_padding_x,|7196|"
			"\nadd_button_with_icon|Go-Go-Growformer!|`o200 ā|staticYellowFrame,no_padding_x,|7384|\nreset_placement_x|\nadd_button_with_icon||END_LIST|noflags|0||"
			"\nadd_label|small|`2Item Of The Month - 2019|left|"
			"\nadd_button_with_icon|Hovernator Drone|`o200 ā|staticYellowFrame,no_padding_x,|7568|"
			"\nadd_button_with_icon|Dragon Warrior's Shield|`o200 ā|staticYellowFrame,no_padding_x,|7676|"
			"\nadd_button_with_icon|Morty the Elephant|`o200 ā|staticYellowFrame,no_padding_x,|7836|"
			"\nadd_button_with_icon|Hellfire Horns|`o200 ā|staticYellowFrame,no_padding_x,|8006|"
			"\nadd_button_with_icon|Genie's Lamp|`o200 ā|staticYellowFrame,no_padding_x,|8288|"
			"\nadd_button_with_icon|Galactic Destructor|`o200 ā|staticYellowFrame,no_padding_x,|8432|"
			"\nadd_button_with_icon|Nightking's Cape|`o200 ā|staticYellowFrame,no_padding_x,|8576|"
			"\nadd_button_with_icon|Astro Shades|`o200 ā|staticYellowFrame,no_padding_x,|8816|"
			"\nadd_button_with_icon|Riding World Lock|`o200 ā|staticYellowFrame,no_padding_x,|8898|"
			"\nadd_button_with_icon|Cursed Spirit Pendant|`o200 ā|staticYellowFrame,no_padding_x,|9008|"
			"\nadd_button_with_icon|Laser Scimitar|`o200 ā|staticYellowFrame,no_padding_x,|9116|"
			"\nadd_button_with_icon|Dueling Star Fighter|`o200 ā|staticYellowFrame,no_padding_x,|9136|\nreset_placement_x|\nadd_button_with_icon||END_LIST|noflags|0||"
			"\nadd_label|small|`2Item Of The Month - 2020|left|"
			"\nadd_button_with_icon|Ancient Shards|`o200 ā|staticYellowFrame,no_padding_x,|9236|"
			"\nadd_button_with_icon|Medusa's Crown|`o200 ā|staticYellowFrame,no_padding_x,|9348|"
			"\nadd_button_with_icon|Galaxy Aura|`o200 ā|staticYellowFrame,no_padding_x,|9408|"
			"\nadd_button_with_icon|Boastful Brawler Hair|`o200 ā|staticYellowFrame,no_padding_x,|9462|"
			"\nadd_button_with_icon|Doomsday Warhammer|`o200 ā|staticYellowFrame,no_padding_x,|9606|"
			"\nadd_button_with_icon|Go Anywhere Surfboard|`o200 ā|staticYellowFrame,no_padding_x,|9648|"
			"\nadd_button_with_icon|Pegasus Wings|`o200 ā|staticYellowFrame,no_padding_x,|9760|"
			"\nadd_button_with_icon|Golem's Gift|`o200 ā|staticYellowFrame,no_padding_x,|10044|"
			"\nadd_button_with_icon|Mechanical Butler|`o200 ā|staticYellowFrame,no_padding_x,|10128|"
			"\nadd_button_with_icon|Haunted Jack O' Lantern|`o200 ā|staticYellowFrame,no_padding_x,|10166|"
			"\nadd_button_with_icon|Celestial Dragon Charm|`o200 ā|staticYellowFrame,no_padding_x,|10246|"
			"\nadd_button_with_icon|Mystic Snow Fox|`o200 ā|staticYellowFrame,no_padding_x,|10426|\nreset_placement_x|\nadd_button_with_icon||END_LIST|noflags|0||"
			"\nadd_label|small|`2Item Of The Month - 2021|left|"
			"\nadd_button_with_icon|Crown of the Cosmos|`o200 ā|staticYellowFrame,no_padding_x,|10496|"
			"\nadd_button_with_icon|Perilous Pirate Ship|`o200 ā|staticYellowFrame,no_padding_x,|10618|"
			"\nadd_button_with_icon|Grow Air Balloon|`o200 ā|staticYellowFrame,no_padding_x,|10666|"
			"\nadd_button_with_icon|Grow X Rocket Wings|`o200 ā|staticYellowFrame,no_padding_x,|10718|"
			"\nadd_button_with_icon|Plasma Heart|`o200 ā|staticYellowFrame,no_padding_x,|10810|"
			"\nadd_button_with_icon|Pure Being of Light and Shadow|`o200 ā|staticYellowFrame,no_padding_x,|10914|"
			"\nadd_button_with_icon|Soul Scythe|`o200 ā|staticYellowFrame,no_padding_x,|11006|"
			"\nadd_button_with_icon|Crystal Crown|`o200 ā|staticYellowFrame,no_padding_x,|11116|"
			"\nadd_button_with_icon|Ouroboros Charm|`o200 ā|staticYellowFrame,no_padding_x,|11232|\nreset_placement_x|\nadd_button_with_icon||END_LIST|noflags|0||"
			"\nadd_spacer|small|\nend_dialog|iotm_purchase|Close||", 500
		);
	}
	static void Opc_Shop(ENetPeer* peer) {
		string opc_list = "";
		for (const auto& item : Environment()->opc_item) {
			opc_list += "\nadd_button_with_icon|itemopc_" + to_string(item.second) + "|" + items[item.second].name + "|staticPurpleFrame|" + to_string(item.second) + "|" + to_string(item.first) + "|";
		}
		VarList::OnDialogRequest(peer, SetColor(peer) + "set_default_color|`o\nadd_label_with_icon|big|`0Online Point Currency HUB``|left|10668|\nadd_textbox|Welcome to `2Online Point Currency HUB``! Do you have any OPC? You can buy items from me with them.|left|\nadd_smalltext|`5(You can earn 1 OPC every 5 minutes just by playing the game)|left|\nadd_spacer|small|\nadd_custom_textbox|`oYou have `2" + Set_Count(pInfo(peer)->opc) + " Online Point Currency`o.|size:small;icon:10668;|\ntext_scaling_string|Subscribtions++++++++|\nadd_spacer|small|" + opc_list + "\nadd_button_with_icon||END_LIST|noflags|0||\nadd_button|BackToStore|`wBack|0|0|\nadd_quick_exit|\nadd_spacer|small|\nend_dialog|OnlinePointCurrency_Shop|||", 500);
	}
	static void Level_Rewards(ENetPeer* peer, string page = "") {
		std::string tabs = SetColor(peer) + "set_default_color|`o\nstart_custom_tabs|"
			"\nadd_custom_button|info|image:interface/large/gui_button_tabs.rttex;image_size:228,92;frame:0,17;width:0.14;min_width:60;|"
			+ (pInfo(peer)->glo ? "\nadd_custom_button|road_to_glory|image:interface/large/gui_button_tabs.rttex;image_size:228,92;frame:0,18;width:0.14;min_width:60;|" : "") +
			"\nadd_custom_button|kit_pass|image:interface/large/gui_button_tabs.rttex;image_size:228,92;frame:0,19;width:0.14;min_width:60;|"
			"\nadd_custom_button|level_rwds|image:interface/large/gui_button_tabs.rttex;image_size:228,92;frame:1,14;width:0.14;min_width:60;|"
			"\nadd_custom_button|skill_and_assets|image:interface/large/gui_button_tabs.rttex;image_size:228,92;frame:0,13;width:0.14;min_width:60;|"
			"\nend_custom_tabs|";
		if (page == "" or page == "1") {
			VarList::OnDialogRequest(peer, tabs + "set_default_color|`o\nadd_label_with_icon|big|Level Up Rewards|left|1488|\nadd_spacer|small|\nadd_textbox|`oKeep exploring " + Environment()->server_name + " and achieve awesome rewards by leveling up``|left|\nadd_smalltext|`oYour Current Level:|left|\nadd_textured_progress_bar|interface/large/gui_event_bar.rttex|0|6|" + (pInfo(peer)->level >= 250 ? "250" : to_string(pInfo(peer)->level)) + "/250|" + (pInfo(peer)->level >= 250 ? "250" : to_string(pInfo(peer)->level)) + "|250|pre_icon|6|0.05|0|1000|64|0.005|barBG_0|\nadd_textbox|`4WARNING`o: `5Full inventory `oor `5quantity more than 200 `owill result the items will be automatically `4dropped`o, MAKE SURE you claim it on your own `2world`o.|left|\ntext_scaling_string|AAAAAAAAAAAAA|\n"
				"\nadd_label_with_icon|small|Level 5|left|1360|\nadd_button_with_icon||`9Masterless Starglitter|staticYellowFrame|14552|10|\nadd_button_with_icon||Sorcerer Stone Seed|frame|3839|50|\nadd_button_with_icon||World Lock|frame|242|5|\nadd_button_with_icon||Deluxe Grow Spray|frame|1778|10|\nadd_button_with_icon||ATM Machine|frame|1008|5|\nadd_button_with_icon||END_LIST|noflags|0|||\n"
				+ a + (Has_Claimed::Lvl(peer, 5) ? "\nadd_smalltext|`2CLAIMED!|left|" : pInfo(peer)->level >= 5 ? "\nadd_small_font_button|claim_lvl5|CLAIM|noflags|0|0|" : "\nadd_smalltext|`4Not high enough level!|left|\n") +
				"\nadd_label_with_icon|small|Level 10|left|1360|\nadd_button_with_icon||`9Masterless Starglitter|staticYellowFrame|14552|10|\nadd_button_with_icon||Sorcerer Stone Seed|frame|3839|50|\nadd_button_with_icon||World Lock|frame|242|5|\nadd_button_with_icon||Deluxe Grow Spray|frame|1778|10|\nadd_button_with_icon||ATM Machine|frame|1008|5|\nadd_button_with_icon||END_LIST|noflags|0|||\n"
				+ a + (Has_Claimed::Lvl(peer, 10) ? "\nadd_smalltext|`2CLAIMED!|left|" : pInfo(peer)->level >= 10 ? "\nadd_small_font_button|claim_lvl10|CLAIM|noflags|0|0|" : "\nadd_smalltext|`4Not high enough level!|left|\n") +
				"\nadd_label_with_icon|small|Level 15|left|1360|\nadd_button_with_icon||`9Masterless Starglitter|staticYellowFrame|14552|10|\nadd_button_with_icon||Sorcerer Stone Seed|frame|3839|50|\nadd_button_with_icon||World Lock|frame|242|10|\nadd_button_with_icon||Deluxe Grow Spray|frame|1778|10|\nadd_button_with_icon||Diamond Lock|staticYellowFrame|1796|1|\nadd_button_with_icon||Intertwined Fate|frame|9986|5|\nadd_button_with_icon||END_LIST|noflags|0|||\n"
				+ a + (Has_Claimed::Lvl(peer, 15) ? "\nadd_smalltext|`2CLAIMED!|left|" : pInfo(peer)->level >= 15 ? "\nadd_small_font_button|claim_lvl15|CLAIM|noflags|0|0|" : "\nadd_smalltext|`4Not high enough level!|left|\n") +
				"\nadd_label_with_icon|small|Level 20|left|1360|\nadd_button_with_icon||`9Masterless Starglitter|staticYellowFrame|14552|10|\nadd_button_with_icon||Sorcerer Stone Seed|frame|3839|50|\nadd_button_with_icon||World Lock|frame|242|5|\nadd_button_with_icon||Deluxe Grow Spray|frame|1778|10|\nadd_button_with_icon||ATM Machine|frame|1008|5|\nadd_button_with_icon||END_LIST|noflags|0|||\n"
				+ a + (Has_Claimed::Lvl(peer, 20) ? "\nadd_smalltext|`2CLAIMED!|left|" : pInfo(peer)->level >= 20 ? "\nadd_small_font_button|claim_lvl20|CLAIM|noflags|0|0|" : "\nadd_smalltext|`4Not high enough level!|left|\n") +
				"\nadd_label_with_icon|small|Level 25|left|1360|\nadd_button_with_icon||`9Masterless Starglitter|staticYellowFrame|14552|10|\nadd_button_with_icon||Chandelier Seed|frame|341|50|\nadd_button_with_icon||World Lock|frame|242|5|\nadd_button_with_icon||Deluxe Grow Spray|frame|1778|10|\nadd_button_with_icon||Diamond Lock|staticYellowFrame|1796|3|\nadd_button_with_icon||ATM Machine|frame|1008|5|\nadd_button_with_icon||END_LIST|noflags|0|||\n"
				+ a + (Has_Claimed::Lvl(peer, 25) ? "\nadd_smalltext|`2CLAIMED!|left|" : pInfo(peer)->level >= 25 ? "\nadd_small_font_button|claim_lvl25|CLAIM|noflags|0|0|" : "\nadd_smalltext|`4Not high enough level!|left|\n") +
				"\nadd_label_with_icon|small|Level 30|left|1360|\nadd_button_with_icon||`9Masterless Starglitter|staticYellowFrame|14552|10|\nadd_button_with_icon||Chandelier Seed|frame|341|50|\nadd_button_with_icon||World Lock|frame|242|10|\nadd_button_with_icon||Deluxe Grow Spray|frame|1778|10|\nadd_button_with_icon||Golden Gacha Box|staticYellowFrame|14084|10|\nadd_button_with_icon||ATM Machine|frame|1008|5|\nadd_button_with_icon||END_LIST|noflags|0|||\n"
				+ a + (Has_Claimed::Lvl(peer, 30) ? "\nadd_smalltext|`2CLAIMED!|left|" : pInfo(peer)->level >= 30 ? "\nadd_small_font_button|claim_lvl30|CLAIM|noflags|0|0|" : "\nadd_smalltext|`4Not high enough level!|left|\n") +
				"\nadd_label_with_icon|small|Level 35|left|1360|\nadd_button_with_icon||`9Masterless Starglitter|staticYellowFrame|14552|10|\nadd_button_with_icon||Chandelier Seed|frame|341|50|\nadd_button_with_icon||World Lock|frame|242|10|\nadd_button_with_icon||Deluxe Grow Spray|frame|1778|10|\nadd_button_with_icon||ATM Machine|frame|1008|5|\nadd_button_with_icon||END_LIST|noflags|0|||\n"
				+ a + (Has_Claimed::Lvl(peer, 35) ? "\nadd_smalltext|`2CLAIMED!|left|" : pInfo(peer)->level >= 35 ? "\nadd_small_font_button|claim_lvl35|CLAIM|noflags|0|0|" : "\nadd_smalltext|`4Not high enough level!|left|\n") +
				"\nadd_label_with_icon|small|Level 40|left|1360|\nadd_button_with_icon||`9Masterless Starglitter|staticYellowFrame|14552|10|\nadd_button_with_icon||Pot 'O Gems Seed|frame|9929|50|\nadd_button_with_icon||World Lock|frame|242|10|\nadd_button_with_icon||Deluxe Grow Spray|frame|1778|10|\nadd_button_with_icon||3-Day Subs|frame|6856|1|\nadd_button_with_icon||END_LIST|noflags|0|||\n"
				+ a + (Has_Claimed::Lvl(peer, 40) ? "\nadd_smalltext|`2CLAIMED!|left|" : pInfo(peer)->level >= 40 ? "\nadd_small_font_button|claim_lvl40|CLAIM|noflags|0|0|" : "\nadd_smalltext|`4Not high enough level!|left|\n") +
				"\nadd_label_with_icon|small|Level 45|left|1360|\nadd_button_with_icon||`9Masterless Starglitter|staticYellowFrame|14552|10|\nadd_button_with_icon||Pot 'O Gems Seed|frame|9929|50|\nadd_button_with_icon||World Lock|frame|242|10|\nadd_button_with_icon||Deluxe Grow Spray|frame|1778|10|\nadd_button_with_icon||Diamond Lock|staticYellowFrame|1796|5|\nadd_button_with_icon||ATM Machine|frame|1008|5|\nadd_button_with_icon||END_LIST|noflags|0|||\n"
				+ a + (Has_Claimed::Lvl(peer, 45) ? "\nadd_smalltext|`2CLAIMED!|left|" : pInfo(peer)->level >= 45 ? "\nadd_small_font_button|claim_lvl45|CLAIM|noflags|0|0|" : "\nadd_smalltext|`4Not high enough level!|left|\n") +
				"\nadd_label_with_icon|small|Level 50|left|1360|\nadd_button_with_icon||`9Masterless Starglitter|staticYellowFrame|14552|10|\nadd_button_with_icon||Pot 'O Gems Seed|frame|9929|50|\nadd_button_with_icon||World Lock|frame|242|10|\nadd_button_with_icon||Deluxe Grow Spray|frame|1778|10|\nadd_button_with_icon||Golden Gacha Box|staticYellowFrame|14084|10|\nadd_button_with_icon||Lucky Clover|staticYellowFrame|528|1|\nadd_button_with_icon||ATM Machine|frame|1008|5|\nadd_button_with_icon||END_LIST|noflags|0|||\n"
				+ a + (Has_Claimed::Lvl(peer, 50) ? "\nadd_smalltext|`2CLAIMED!|left|" : pInfo(peer)->level >= 50 ? "\nadd_small_font_button|claim_lvl50|CLAIM|noflags|0|0|" : "\nadd_smalltext|`4Not high enough level!|left|\n") +
				"\nadd_spacer|small|\nadd_custom_button|next_page2|image:interface/large/gui_right_arrow_btn.rttex;image_size:64,64;frame:0,0;|\nadd_custom_label|1/5|target:next_page2;top:1.20;left:7.0;size:medium|\nadd_custom_label|NEXT|target:next_page2;top:1.20;left:0.50;size:small|\nend_dialog|lvl_rewards|||", 500
			);
		}
		if (page == "2") {
			VarList::OnDialogRequest(peer, tabs + "set_default_color|`o\nadd_label_with_icon|big|Level Up Rewards|left|1488|\nadd_spacer|small|\nadd_textbox|`oKeep exploring " + Environment()->server_name + " and achieve awesome rewards by leveling up``|left|\nadd_smalltext|`oYour Current Level:|left|\nadd_textured_progress_bar|interface/large/gui_event_bar.rttex|0|6|" + (pInfo(peer)->level >= 250 ? "250" : to_string(pInfo(peer)->level)) + "/250|" + (pInfo(peer)->level >= 250 ? "250" : to_string(pInfo(peer)->level)) + "|250|pre_icon|6|0.05|0|1000|64|0.005|barBG_0|\nadd_textbox|`4WARNING`o: `5Full inventory `oor `5quantity more than 200 `owill result the items will be automatically `4dropped`o, MAKE SURE you claim it on your own `2world`o.|left|\ntext_scaling_string|AAAAAAAAAAAAA|\n"
				"\nadd_label_with_icon|small|Level 55|left|1360|\nadd_button_with_icon||`9Masterless Starglitter|staticYellowFrame|14552|10|\nadd_button_with_icon||Sorcerer Stone|frame|3838|200|\nadd_button_with_icon||World Lock|frame|242|10|\nadd_button_with_icon||Deluxe Grow Spray|frame|1778|10|\nadd_button_with_icon||Tackle Box|frame|3044|5|\nadd_button_with_icon||END_LIST|noflags|0|||\n"
				+ a + (Has_Claimed::Lvl(peer, 55) ? "\nadd_smalltext|`2CLAIMED!|left|" : pInfo(peer)->level >= 55 ? "\nadd_small_font_button|claim_lvl55|CLAIM|noflags|0|0|" : "\nadd_smalltext|`4Not high enough level!|left|\n") +
				"\nadd_label_with_icon|small|Level 60|left|1360|\nadd_button_with_icon||`9Masterless Starglitter|staticYellowFrame|14552|10|\nadd_button_with_icon||Sorcerer Stone|frame|3838|200|\nadd_button_with_icon||World Lock|frame|242|10|\nadd_button_with_icon||Deluxe Grow Spray|frame|1778|10|\nadd_button_with_icon||Tackle Box|frame|3044|5|\nadd_button_with_icon||END_LIST|noflags|0|||\n"
				+ a + (Has_Claimed::Lvl(peer, 60) ? "\nadd_smalltext|`2CLAIMED!|left|" : pInfo(peer)->level >= 60 ? "\nadd_small_font_button|claim_lvl60|CLAIM|noflags|0|0|" : "\nadd_smalltext|`4Not high enough level!|left|\n") +
				"\nadd_label_with_icon|small|Level 65|left|1360|\nadd_button_with_icon||`9Masterless Starglitter|staticYellowFrame|14552|10|\nadd_button_with_icon||Sorcerer Stone|frame|3838|200|\nadd_button_with_icon||World Lock|frame|242|10|\nadd_button_with_icon||Deluxe Grow Spray|frame|1778|10|\nadd_button_with_icon||Diamond Lock|staticYellowFrame|1796|1|\nadd_button_with_icon||Acquaint Fate|frame|10382|5|\nadd_button_with_icon||END_LIST|noflags|0|||\n"
				+ a + (Has_Claimed::Lvl(peer, 65) ? "\nadd_smalltext|`2CLAIMED!|left|" : pInfo(peer)->level >= 65 ? "\nadd_small_font_button|claim_lvl65|CLAIM|noflags|0|0|" : "\nadd_smalltext|`4Not high enough level!|left|\n") +
				"\nadd_label_with_icon|small|Level 70|left|1360|\nadd_button_with_icon||`9Masterless Starglitter|staticYellowFrame|14552|10|\nadd_button_with_icon||Sorcerer Stone|frame|3838|200|\nadd_button_with_icon||World Lock|frame|242|10|\nadd_button_with_icon||Deluxe Grow Spray|frame|1778|10|\nadd_button_with_icon||Tackle Box|frame|3044|5|\nadd_button_with_icon||END_LIST|noflags|0|||\n"
				+ a + (Has_Claimed::Lvl(peer, 70) ? "\nadd_smalltext|`2CLAIMED!|left|" : pInfo(peer)->level >= 70 ? "\nadd_small_font_button|claim_lvl70|CLAIM|noflags|0|0|" : "\nadd_smalltext|`4Not high enough level!|left|\n") +
				"\nadd_label_with_icon|small|Level 75|left|1360|\nadd_button_with_icon||`9Masterless Starglitter|staticYellowFrame|14552|10|\nadd_button_with_icon||Chandelier|frame|340|200|\nadd_button_with_icon||World Lock|frame|242|10|\nadd_button_with_icon||Ultra Grow Spray|frame|1062|2|\nadd_button_with_icon||Diamond Lock|staticYellowFrame|1796|3|\nadd_button_with_icon||Tackle Box|frame|3044|5|\nadd_button_with_icon||END_LIST|noflags|0|||\n"
				+ a + (Has_Claimed::Lvl(peer, 75) ? "\nadd_smalltext|`2CLAIMED!|left|" : pInfo(peer)->level >= 75 ? "\nadd_small_font_button|claim_lvl75|CLAIM|noflags|0|0|" : "\nadd_smalltext|`4Not high enough level!|left|\n") +
				"\nadd_label_with_icon|small|Level 80|left|1360|\nadd_button_with_icon||`9Masterless Starglitter|staticYellowFrame|14552|10|\nadd_button_with_icon||Chandelier|frame|340|200|\nadd_button_with_icon||World Lock|frame|242|15|\nadd_button_with_icon||Ultra Grow Spray|frame|1062|2|\nadd_button_with_icon||The Dark Stone|staticYellowFrame|7960|10|\nadd_button_with_icon||Tackle Box|frame|3044|5|\nadd_button_with_icon||END_LIST|noflags|0|||\n"
				+ a + (Has_Claimed::Lvl(peer, 80) ? "\nadd_smalltext|`2CLAIMED!|left|" : pInfo(peer)->level >= 80 ? "\nadd_small_font_button|claim_lvl80|CLAIM|noflags|0|0|" : "\nadd_smalltext|`4Not high enough level!|left|\n") +
				"\nadd_label_with_icon|small|Level 85|left|1360|\nadd_button_with_icon||`9Masterless Starglitter|staticYellowFrame|14552|10|\nadd_button_with_icon||Chandelier|frame|340|200|\nadd_button_with_icon||World Lock|frame|242|15|\nadd_button_with_icon||Ultra Grow Spray|frame|1062|2|\nadd_button_with_icon||Tackle Box|frame|3044|5|\nadd_button_with_icon||END_LIST|noflags|0|||\n"
				+ a + (Has_Claimed::Lvl(peer, 85) ? "\nadd_smalltext|`2CLAIMED!|left|" : pInfo(peer)->level >= 85 ? "\nadd_small_font_button|claim_lvl85|CLAIM|noflags|0|0|" : "\nadd_smalltext|`4Not high enough level!|left|\n") +
				"\nadd_label_with_icon|small|Level 90|left|1360|\nadd_button_with_icon||`9Masterless Starglitter|staticYellowFrame|14552|10|\nadd_button_with_icon||Pot 'O Gems|frame|9928|200|\nadd_button_with_icon||World Lock|frame|242|15|\nadd_button_with_icon||Ultra Grow Spray|frame|1062|2|\nadd_button_with_icon||Lucky Clover|frame|5178|1|\nadd_button_with_icon||END_LIST|noflags|0|||\n"
				+ a + (Has_Claimed::Lvl(peer, 90) ? "\nadd_smalltext|`2CLAIMED!|left|" : pInfo(peer)->level >= 90 ? "\nadd_small_font_button|claim_lvl90|CLAIM|noflags|0|0|" : "\nadd_smalltext|`4Not high enough level!|left|\n") +
				"\nadd_label_with_icon|small|Level 95|left|1360|\nadd_button_with_icon||`9Masterless Starglitter|staticYellowFrame|14552|10|\nadd_button_with_icon||Pot 'O Gems|frame|9928|200|\nadd_button_with_icon||World Lock|frame|242|15|\nadd_button_with_icon||Ultra Grow Spray|frame|1062|2|\nadd_button_with_icon||Diamond Lock|staticYellowFrame|1796|5|\nadd_button_with_icon||Tackle Box|frame|3044|5|\nadd_button_with_icon||END_LIST|noflags|0|||\n"
				+ a + (Has_Claimed::Lvl(peer, 95) ? "\nadd_smalltext|`2CLAIMED!|left|" : pInfo(peer)->level >= 95 ? "\nadd_small_font_button|claim_lvl95|CLAIM|noflags|0|0|" : "\nadd_smalltext|`4Not high enough level!|left|\n") +
				"\nadd_label_with_icon|small|Level 100|left|1360|\nadd_button_with_icon||`9Masterless Starglitter|staticYellowFrame|14552|10|\nadd_button_with_icon||Pot 'O Gems|frame|9928|200|\nadd_button_with_icon||World Lock|frame|242|15|\nadd_button_with_icon||Deluxe World Spray|frame|13574|1|\nadd_button_with_icon||The Dark Stone|staticYellowFrame|7960|10|\nadd_button_with_icon||Farm Blast|staticYellowFrame|9602|1|\nadd_button_with_icon||ATM Machine|frame|1008|5|\nadd_button_with_icon||END_LIST|noflags|0|||\n"
				+ a + (Has_Claimed::Lvl(peer, 100) ? "\nadd_smalltext|`2CLAIMED!|left|" : pInfo(peer)->level >= 100 ? "\nadd_small_font_button|claim_lvl100|CLAIM|noflags|0|0|" : "\nadd_smalltext|`4Not high enough level!|left|\n") +
				"\nadd_spacer|small|\nadd_custom_button|previous_page1|image:interface/large/gui_left_arrow_btn.rttex;image_size:64,64;frame:0,0;|\nadd_custom_margin|x:20;y:0|\nadd_custom_button|next_page3|image:interface/large/gui_right_arrow_btn.rttex;image_size:64,64;frame:0,0;|\nadd_custom_label|2/5|target:next_page3;top:1.20;left:6.0;size:medium|\nadd_custom_label|NEXT|target:next_page3;top:1.20;left:0.50;size:small|\nadd_custom_label|PREV|target:previous_page1;top:1.20;left:0.50;size:small|\nend_dialog|lvl_rewards|||", 500
			);
		}
		if (page == "3") {
			VarList::OnDialogRequest(peer, tabs + "set_default_color|`o\nadd_label_with_icon|big|Level Up Rewards|left|1488|\nadd_spacer|small|\nadd_textbox|`oKeep exploring " + Environment()->server_name + " and achieve awesome rewards by leveling up``|left|\nadd_smalltext|`oYour Current Level:|left|\nadd_textured_progress_bar|interface/large/gui_event_bar.rttex|0|6|" + (pInfo(peer)->level >= 250 ? "250" : to_string(pInfo(peer)->level)) + "/250|" + (pInfo(peer)->level >= 250 ? "250" : to_string(pInfo(peer)->level)) + "|250|pre_icon|6|0.05|0|1000|64|0.005|barBG_0|\nadd_textbox|`4WARNING`o: `5Full inventory `oor `5quantity more than 200 `owill result the items will be automatically `4dropped`o, MAKE SURE you claim it on your own `2world`o.|left|\ntext_scaling_string|AAAAAAAAAAAAA|\n"
				"\nadd_label_with_icon|small|Level 105|left|1360|\nadd_button_with_icon||`9Masterless Starglitter|staticYellowFrame|14552|10|\nadd_button_with_icon||Gtps Gem|frame|4490|10|\nadd_button_with_icon||World Lock|frame|242|15|\nadd_button_with_icon||Provider Spray|frame|7962|5|\nadd_button_with_icon||Growspray's Beacon|frame|9844|1|\nadd_button_with_icon||END_LIST|noflags|0|||\n"
				+ a + (Has_Claimed::Lvl(peer, 105) ? "\nadd_smalltext|`2CLAIMED!|left|" : pInfo(peer)->level >= 105 ? "\nadd_small_font_button|claim_lvl105|CLAIM|noflags|0|0|" : "\nadd_smalltext|`4Not high enough level!|left|\n") +
				"\nadd_label_with_icon|small|Level 110|left|1360|\nadd_button_with_icon||`9Masterless Starglitter|staticYellowFrame|14552|10|\nadd_button_with_icon||Gtps Gem|frame|4490|10|\nadd_button_with_icon||World Lock|frame|242|15|\nadd_button_with_icon||Provider Spray|frame|7962|5|\nadd_button_with_icon||Easter Mission Item|frame|10716|5|\nadd_button_with_icon||END_LIST|noflags|0|||\n"
				+ a + (Has_Claimed::Lvl(peer, 110) ? "\nadd_smalltext|`2CLAIMED!|left|" : pInfo(peer)->level >= 110 ? "\nadd_small_font_button|claim_lvl110|CLAIM|noflags|0|0|" : "\nadd_smalltext|`4Not high enough level!|left|\n") +
				"\nadd_label_with_icon|small|Level 115|left|1360|\nadd_button_with_icon||`9Masterless Starglitter|staticYellowFrame|14552|10|\nadd_button_with_icon||Gtps Gem|frame|4490|10|\nadd_button_with_icon||World Lock|frame|242|15|\nadd_button_with_icon||Provider Spray|frame|7962|5|\nadd_button_with_icon||Diamond Lock|staticYellowFrame|1796|5|\nadd_button_with_icon||Intertwined Fate|frame|9986|5|\nadd_button_with_icon||END_LIST|noflags|0|||\n"
				+ a + (Has_Claimed::Lvl(peer, 115) ? "\nadd_smalltext|`2CLAIMED!|left|" : pInfo(peer)->level >= 115 ? "\nadd_small_font_button|claim_lvl115|CLAIM|noflags|0|0|" : "\nadd_smalltext|`4Not high enough level!|left|\n") +
				"\nadd_label_with_icon|small|Level 120|left|1360|\nadd_button_with_icon||`9Masterless Starglitter|staticYellowFrame|14552|10|\nadd_button_with_icon||Gtps Gem|frame|4490|10|\nadd_button_with_icon||World Lock|frame|242|15|\nadd_button_with_icon||Provider Spray|frame|7962|5|\nadd_button_with_icon||Easter Mission Item|frame|10716|5|\nadd_button_with_icon||END_LIST|noflags|0|||\n"
				+ a + (Has_Claimed::Lvl(peer, 120) ? "\nadd_smalltext|`2CLAIMED!|left|" : pInfo(peer)->level >= 120 ? "\nadd_small_font_button|claim_lvl120|CLAIM|noflags|0|0|" : "\nadd_smalltext|`4Not high enough level!|left|\n") +
				"\nadd_label_with_icon|small|Level 125|left|1360|\nadd_button_with_icon||`9Masterless Starglitter|staticYellowFrame|14552|10|\nadd_button_with_icon||Gtps Gem|frame|4490|10|\nadd_button_with_icon||World Lock|frame|242|15|\nadd_button_with_icon||Provider Spray|frame|7962|5|\nadd_button_with_icon||Diamond Lock|staticYellowFrame|1796|5|\nadd_button_with_icon||Easter Mission Item|frame|10716|5|\nadd_button_with_icon||END_LIST|noflags|0|||\n"
				+ a + (Has_Claimed::Lvl(peer, 125) ? "\nadd_smalltext|`2CLAIMED!|left|" : pInfo(peer)->level >= 125 ? "\nadd_small_font_button|claim_lvl125|CLAIM|noflags|0|0|" : "\nadd_smalltext|`4Not high enough level!|left|\n") +
				"\nadd_label_with_icon|small|Level 130|left|1360|\nadd_button_with_icon||`9Masterless Starglitter|staticYellowFrame|14552|10|\nadd_button_with_icon||Gtps Gem|frame|4490|10|\nadd_button_with_icon||World Lock|frame|242|15|\nadd_button_with_icon||Provider Spray|frame|7962|5|\nadd_button_with_icon||Easter Mission Item|frame|10716|5|\nadd_button_with_icon||Lucky Clover|staticYellowFrame|528|1|\nadd_button_with_icon||END_LIST|noflags|0|||\n"
				+ a + (Has_Claimed::Lvl(peer, 130) ? "\nadd_smalltext|`2CLAIMED!|left|" : pInfo(peer)->level >= 130 ? "\nadd_small_font_button|claim_lvl130|CLAIM|noflags|0|0|" : "\nadd_smalltext|`4Not high enough level!|left|\n") +
				"\nadd_label_with_icon|small|Level 135|left|1360|\nadd_button_with_icon||`9Masterless Starglitter|staticYellowFrame|14552|10|\nadd_button_with_icon||Gtps Gem|frame|4490|10|\nadd_button_with_icon||World Lock|frame|242|20|\nadd_button_with_icon||Provider Spray|frame|7962|5|\nadd_button_with_icon||Easter Mission Item|frame|10716|5|\nadd_button_with_icon||END_LIST|noflags|0|||\n"
				+ a + (Has_Claimed::Lvl(peer, 135) ? "\nadd_smalltext|`2CLAIMED!|left|" : pInfo(peer)->level >= 135 ? "\nadd_small_font_button|claim_lvl135|CLAIM|noflags|0|0|" : "\nadd_smalltext|`4Not high enough level!|left|\n") +
				"\nadd_label_with_icon|small|Level 140|left|1360|\nadd_button_with_icon||`9Masterless Starglitter|staticYellowFrame|14552|10|\nadd_button_with_icon||Gtps Gem|frame|4490|10|\nadd_button_with_icon||World Lock|frame|242|20|\nadd_button_with_icon||Provider Spray|frame|7962|5|\nadd_button_with_icon||Easter Mission Item|frame|10716|5|\nadd_button_with_icon||END_LIST|noflags|0|||\n"
				+ a + (Has_Claimed::Lvl(peer, 140) ? "\nadd_smalltext|`2CLAIMED!|left|" : pInfo(peer)->level >= 140 ? "\nadd_small_font_button|claim_lvl140|CLAIM|noflags|0|0|" : "\nadd_smalltext|`4Not high enough level!|left|\n") +
				"\nadd_label_with_icon|small|Level 145|left|1360|\nadd_button_with_icon||`9Masterless Starglitter|staticYellowFrame|14552|10|\nadd_button_with_icon||Gtps Gem|frame|4490|10|\nadd_button_with_icon||World Lock|frame|242|20|\nadd_button_with_icon||Provider Spray|frame|7962|5|\nadd_button_with_icon||Diamond Lock|staticYellowFrame|1796|5|\nadd_button_with_icon||Lucky Clover|staticYellowFrame|528|1|\nadd_button_with_icon||END_LIST|noflags|0|||\n"
				+ a + (Has_Claimed::Lvl(peer, 145) ? "\nadd_smalltext|`2CLAIMED!|left|" : pInfo(peer)->level >= 145 ? "\nadd_small_font_button|claim_lvl145|CLAIM|noflags|0|0|" : "\nadd_smalltext|`4Not high enough level!|left|\n") +
				"\nadd_label_with_icon|small|Level 150|left|1360|\nadd_button_with_icon||`9Masterless Starglitter|staticYellowFrame|14552|10|\nadd_button_with_icon||Gtps Gem|frame|4490|10|\nadd_button_with_icon||World Lock|frame|242|20|\nadd_button_with_icon||Provider Spray|frame|7962|5|\nadd_button_with_icon||Easter Mission Item|frame|10716|5|\nadd_button_with_icon||Lucky Clover|staticYellowFrame|528|1|\nadd_button_with_icon||Acquaint Fate|frame|10382|5|\nadd_button_with_icon||END_LIST|noflags|0|||\n"
				+ a + (Has_Claimed::Lvl(peer, 150) ? "\nadd_smalltext|`2CLAIMED!|left|" : pInfo(peer)->level >= 150 ? "\nadd_small_font_button|claim_lvl150|CLAIM|noflags|0|0|" : "\nadd_smalltext|`4Not high enough level!|left|\n") +
				"\nadd_spacer|small|\nadd_custom_button|previous_page2|image:interface/large/gui_left_arrow_btn.rttex;image_size:64,64;frame:0,0;|\nadd_custom_margin|x:20;y:0|\nadd_custom_button|next_page4|image:interface/large/gui_right_arrow_btn.rttex;image_size:64,64;frame:0,0;|\nadd_custom_label|3/5|target:next_page4;top:1.20;left:6.0;size:medium|\nadd_custom_label|NEXT|target:next_page4;top:1.20;left:0.50;size:small|\nadd_custom_label|PREV|target:previous_page2;top:1.20;left:0.50;size:small|\nend_dialog|lvl_rewards|||", 500
			);
		}
		if (page == "4") {
			VarList::OnDialogRequest(peer, tabs + "set_default_color|`o\nadd_label_with_icon|big|Level Up Rewards|left|1488|\nadd_spacer|small|\nadd_textbox|`oKeep exploring " + Environment()->server_name + " and achieve awesome rewards by leveling up``|left|\nadd_smalltext|`oYour Current Level:|left|\nadd_textured_progress_bar|interface/large/gui_event_bar.rttex|0|6|" + (pInfo(peer)->level >= 250 ? "250" : to_string(pInfo(peer)->level)) + "/250|" + (pInfo(peer)->level >= 250 ? "250" : to_string(pInfo(peer)->level)) + "|250|pre_icon|6|0.05|0|1000|64|0.005|barBG_0|\nadd_textbox|`4WARNING`o: `5Full inventory `oor `5quantity more than 200 `owill result the items will be automatically `4dropped`o, MAKE SURE you claim it on your own `2world`o.|left|\ntext_scaling_string|AAAAAAAAAAAAA|\n"
				"\nadd_label_with_icon|small|Level 155|left|1360|\nadd_button_with_icon||`9Masterless Starglitter|staticYellowFrame|14552|10|\nadd_button_with_icon||Gtps Gem|frame|4490|15|\nadd_button_with_icon||World Lock|frame|242|20|\nadd_button_with_icon||Ultra Grow Spray|frame|1062|3|\nadd_button_with_icon||Small Seed Pack|frame|5706|25|\nadd_button_with_icon||Harvester Of Sorrow|frame|1966|1|\nadd_button_with_icon||END_LIST|noflags|0|||\n"
				+ a + (Has_Claimed::Lvl(peer, 155) ? "\nadd_smalltext|`2CLAIMED!|left|" : pInfo(peer)->level >= 155 ? "\nadd_small_font_button|claim_lvl155|CLAIM|noflags|0|0|" : "\nadd_smalltext|`4Not high enough level!|left|\n") +
				"\nadd_label_with_icon|small|Level 160|left|1360|\nadd_button_with_icon||`9Masterless Starglitter|staticYellowFrame|14552|10|\nadd_button_with_icon||Gtps Gem|frame|4490|15|\nadd_button_with_icon||World Lock|frame|242|20|\nadd_button_with_icon||Ultra Grow Spray|frame|1062|3|\nadd_button_with_icon||Small Seed Pack|frame|5706|25|\nadd_button_with_icon||Fuel-Pacl|frame|1746|200|\nadd_button_with_icon||END_LIST|noflags|0|||\n"
				+ a + (Has_Claimed::Lvl(peer, 160) ? "\nadd_smalltext|`2CLAIMED!|left|" : pInfo(peer)->level >= 160 ? "\nadd_small_font_button|claim_lvl160|CLAIM|noflags|0|0|" : "\nadd_smalltext|`4Not high enough level!|left|\n") +
				"\nadd_label_with_icon|small|Level 165|left|1360|\nadd_button_with_icon||`9Masterless Starglitter|staticYellowFrame|14552|10|\nadd_button_with_icon||Gtps Gem|frame|4490|15|\nadd_button_with_icon||World Lock|frame|242|20|\nadd_button_with_icon||Ultra Grow Spray|frame|1062|3|\nadd_button_with_icon||Small Seed Pack|frame|5706|25|\nadd_button_with_icon||Diamond Lock|staticYellowFrame|1796|5|\nadd_button_with_icon||Intertwined Fate|frame|9986|5|\nadd_button_with_icon||END_LIST|noflags|0|||\n"
				+ a + (Has_Claimed::Lvl(peer, 165) ? "\nadd_smalltext|`2CLAIMED!|left|" : pInfo(peer)->level >= 165 ? "\nadd_small_font_button|claim_lvl165|CLAIM|noflags|0|0|" : "\nadd_smalltext|`4Not high enough level!|left|\n") +
				"\nadd_label_with_icon|small|Level 170|left|1360|\nadd_button_with_icon||`9Masterless Starglitter|staticYellowFrame|14552|10|\nadd_button_with_icon||Gtps Gem|frame|4490|15|\nadd_button_with_icon||World Lock|frame|242|20|\nadd_button_with_icon||Ultra Grow Spray|frame|1062|3|\nadd_button_with_icon||Small Seed Pack|frame|5706|25|\nadd_button_with_icon||Rayman's Nose|frame|5488|1|\nadd_button_with_icon||END_LIST|noflags|0|||\n"
				+ a + (Has_Claimed::Lvl(peer, 170) ? "\nadd_smalltext|`2CLAIMED!|left|" : pInfo(peer)->level >= 170 ? "\nadd_small_font_button|claim_lvl170|CLAIM|noflags|0|0|" : "\nadd_smalltext|`4Not high enough level!|left|\n") +
				"\nadd_label_with_icon|small|Level 175|left|1360|\nadd_button_with_icon||`9Masterless Starglitter|staticYellowFrame|14552|10|\nadd_button_with_icon||Gtps Gem|frame|4490|15|\nadd_button_with_icon||World Lock|frame|242|20|\nadd_button_with_icon||Ultra Grow Spray|frame|1062|3|\nadd_button_with_icon||Small Seed Pack|frame|5706|25|\nadd_button_with_icon||Diamond Lock|staticYellowFrame|1796|6|\nadd_button_with_icon||Rayman's Shoes|frame|5486|1|\nadd_button_with_icon||END_LIST|noflags|0|||\n"
				+ a + (Has_Claimed::Lvl(peer, 175) ? "\nadd_smalltext|`2CLAIMED!|left|" : pInfo(peer)->level >= 175 ? "\nadd_small_font_button|claim_lvl175|CLAIM|noflags|0|0|" : "\nadd_smalltext|`4Not high enough level!|left|\n") +
				"\nadd_label_with_icon|small|Level 180|left|1360|\nadd_button_with_icon||`9Masterless Starglitter|staticYellowFrame|14552|10|\nadd_button_with_icon||Gtps Gem|frame|4490|15|\nadd_button_with_icon||World Lock|frame|242|20|\nadd_button_with_icon||Ultra Grow Spray|frame|1062|3|\nadd_button_with_icon||Small Seed Pack|frame|5706|25|\nadd_button_with_icon||Rayman's Hoodie|frame|5484|1|\nadd_button_with_icon||Lucky Clover|staticYellowFrame|528|2|\nadd_button_with_icon||END_LIST|noflags|0|||\n"
				+ a + (Has_Claimed::Lvl(peer, 180) ? "\nadd_smalltext|`2CLAIMED!|left|" : pInfo(peer)->level >= 180 ? "\nadd_small_font_button|claim_lvl180|CLAIM|noflags|0|0|" : "\nadd_smalltext|`4Not high enough level!|left|\n") +
				"\nadd_label_with_icon|small|Level 185|left|1360|\nadd_button_with_icon||`9Masterless Starglitter|staticYellowFrame|14552|10|\nadd_button_with_icon||Gtps Gem|frame|4490|15|\nadd_button_with_icon||World Lock|frame|242|25|\nadd_button_with_icon||Ultra Grow Spray|frame|1062|3|\nadd_button_with_icon||Small Seed Pack|frame|5706|25|\nadd_button_with_icon||Rayman's Hair|frame|5482|1|\nadd_button_with_icon||END_LIST|noflags|0|||\n"
				+ a + (Has_Claimed::Lvl(peer, 185) ? "\nadd_smalltext|`2CLAIMED!|left|" : pInfo(peer)->level >= 185 ? "\nadd_small_font_button|claim_lvl185|CLAIM|noflags|0|0|" : "\nadd_smalltext|`4Not high enough level!|left|\n") +
				"\nadd_label_with_icon|small|Level 190|left|1360|\nadd_button_with_icon||`9Masterless Starglitter|staticYellowFrame|14552|10|\nadd_button_with_icon||Gtps Gem|frame|4490|15|\nadd_button_with_icon||World Lock|frame|242|25|\nadd_button_with_icon||Ultra Grow Spray|frame|1062|3|\nadd_button_with_icon||Small Seed Pack|frame|5706|25|\nadd_button_with_icon||Rayman's Fist|frame|5480|1|\nadd_button_with_icon||END_LIST|noflags|0|||\n"
				+ a + (Has_Claimed::Lvl(peer, 190) ? "\nadd_smalltext|`2CLAIMED!|left|" : pInfo(peer)->level >= 190 ? "\nadd_small_font_button|claim_lvl190|CLAIM|noflags|0|0|" : "\nadd_smalltext|`4Not high enough level!|left|\n") +
				"\nadd_label_with_icon|small|Level 195|left|1360|\nadd_button_with_icon||`9Masterless Starglitter|staticYellowFrame|14552|10|\nadd_button_with_icon||Gtps Gem|frame|4490|15|\nadd_button_with_icon||World Lock|frame|242|25|\nadd_button_with_icon||Ultra Grow Spray|frame|1062|3|\nadd_button_with_icon||Small Seed Pack|frame|5706|25|\nadd_button_with_icon||Diamond Lock|staticYellowFrame|1796|7|\nadd_button_with_icon||Farm Blast|staticYellowFrame|9602|1|\nadd_button_with_icon||END_LIST|noflags|0|||\n"
				+ a + (Has_Claimed::Lvl(peer, 195) ? "\nadd_smalltext|`2CLAIMED!|left|" : pInfo(peer)->level >= 195 ? "\nadd_small_font_button|claim_lvl195|CLAIM|noflags|0|0|" : "\nadd_smalltext|`4Not high enough level!|left|\n") +
				"\nadd_label_with_icon|small|Level 200|left|1360|\nadd_button_with_icon||`9Masterless Starglitter|staticYellowFrame|14552|10|\nadd_button_with_icon||Gtps Gem|frame|4490|15|\nadd_button_with_icon||World Lock|frame|242|25|\nadd_button_with_icon||Deluxe World Spray|frame|13574|2|\nadd_button_with_icon||Small Seed Pack|frame|5706|25|\nadd_button_with_icon||Dreamcatcher Staff|staticPurpleFrame|6840|1|\nadd_button_with_icon||Lucky Clover|staticYellowFrame|5178|2|\nadd_button_with_icon||END_LIST|noflags|0|||\n"
				+ a + (Has_Claimed::Lvl(peer, 200) ? "\nadd_smalltext|`2CLAIMED!|left|" : pInfo(peer)->level >= 200 ? "\nadd_small_font_button|claim_lvl200|CLAIM|noflags|0|0|" : "\nadd_smalltext|`4Not high enough level!|left|\n") +
				"\nadd_spacer|small|\nadd_custom_button|previous_page3|image:interface/large/gui_left_arrow_btn.rttex;image_size:64,64;frame:0,0;|\nadd_custom_margin|x:20;y:0|\nadd_custom_button|next_page5|image:interface/large/gui_right_arrow_btn.rttex;image_size:64,64;frame:0,0;|\nadd_custom_label|4/5|target:next_page5;top:1.20;left:6.0;size:medium|\nadd_custom_label|NEXT|target:next_page5;top:1.20;left:0.50;size:small|\nadd_custom_label|PREV|target:previous_page3;top:1.20;left:0.50;size:small|\nend_dialog|lvl_rewards|||", 500
			);
		}
		if (page == "5") {
			VarList::OnDialogRequest(peer, tabs + "set_default_color|`o\nadd_label_with_icon|big|Level Up Rewards|left|1488|\nadd_spacer|small|\nadd_textbox|`oKeep exploring " + Environment()->server_name + " and achieve awesome rewards by leveling up``|left|\nadd_smalltext|`oYour Current Level:|left|\nadd_textured_progress_bar|interface/large/gui_event_bar.rttex|0|6|" + (pInfo(peer)->level >= 250 ? "250" : to_string(pInfo(peer)->level)) + "/250|" + (pInfo(peer)->level >= 250 ? "250" : to_string(pInfo(peer)->level)) + "|250|pre_icon|6|0.05|0|1000|64|0.005|barBG_0|\nadd_textbox|`4WARNING`o: `5Full inventory `oor `5quantity more than 200 `owill result the items will be automatically `4dropped`o, MAKE SURE you claim it on your own `2world`o.|left|\ntext_scaling_string|AAAAAAAAAAAAA|\n"
				"\nadd_label_with_icon|small|Level 205|left|1360|\nadd_button_with_icon||`9Masterless Starglitter|staticYellowFrame|14552|10|\nadd_button_with_icon||Gtps Gem|frame|4490|20|\nadd_button_with_icon||World Lock|frame|242|25|\nadd_button_with_icon||Ultra Grow Spray|frame|1062|5|\nadd_button_with_icon||Small Seed Pack|frame|5706|25|\nadd_button_with_icon||Pickaxe 1 Hit|frame|98|1|\nadd_button_with_icon||END_LIST|noflags|0|||\n"
				+ a + (Has_Claimed::Lvl(peer, 205) ? "\nadd_smalltext|`2CLAIMED!|left|" : pInfo(peer)->level >= 205 ? "\nadd_small_font_button|claim_lvl205|CLAIM|noflags|0|0|" : "\nadd_smalltext|`4Not high enough level!|left|\n") +
				"\nadd_label_with_icon|small|Level 210|left|1360|\nadd_button_with_icon||`9Masterless Starglitter|staticYellowFrame|14552|10|\nadd_button_with_icon||Gtps Gem|frame|4490|20|\nadd_button_with_icon||World Lock|frame|242|25|\nadd_button_with_icon||Ultra Grow Spray|frame|1062|5|\nadd_button_with_icon||Small Seed Pack|frame|5706|25|\nadd_button_with_icon||Rare Seed Pack|frame|9526|50|\nadd_button_with_icon||END_LIST|noflags|0|||\n"
				+ a + (Has_Claimed::Lvl(peer, 210) ? "\nadd_smalltext|`2CLAIMED!|left|" : pInfo(peer)->level >= 210 ? "\nadd_small_font_button|claim_lvl210|CLAIM|noflags|0|0|" : "\nadd_smalltext|`4Not high enough level!|left|\n") +
				"\nadd_label_with_icon|small|Level 215|left|1360|\nadd_button_with_icon||`9Masterless Starglitter|staticYellowFrame|14552|10|\nadd_button_with_icon||Gtps Gem|frame|4490|20|\nadd_button_with_icon||World Lock|frame|242|25|\nadd_button_with_icon||Ultra Grow Spray|frame|1062|5|\nadd_button_with_icon||Small Seed Pack|frame|5706|25|\nadd_button_with_icon||Diamond Lock|staticYellowFrame|1796|10|\nadd_button_with_icon||Intertwined Fate|frame|9986|5|\nadd_button_with_icon||END_LIST|noflags|0|||\n"
				+ a + (Has_Claimed::Lvl(peer, 215) ? "\nadd_smalltext|`2CLAIMED!|left|" : pInfo(peer)->level >= 215 ? "\nadd_small_font_button|claim_lvl215|CLAIM|noflags|0|0|" : "\nadd_smalltext|`4Not high enough level!|left|\n") +
				"\nadd_label_with_icon|small|Level 220|left|1360|\nadd_button_with_icon||`9Masterless Starglitter|staticYellowFrame|14552|10|\nadd_button_with_icon||Gtps Gem|frame|4490|20|\nadd_button_with_icon||World Lock|frame|242|25|\nadd_button_with_icon||Ultra Grow Spray|frame|1062|5|\nadd_button_with_icon||Small Seed Pack|frame|5706|25|\nadd_button_with_icon||Rare Seed Pack|frame|9526|50|\nadd_button_with_icon||END_LIST|noflags|0|||\n"
				+ a + (Has_Claimed::Lvl(peer, 220) ? "\nadd_smalltext|`2CLAIMED!|left|" : pInfo(peer)->level >= 220 ? "\nadd_small_font_button|claim_lvl220|CLAIM|noflags|0|0|" : "\nadd_smalltext|`4Not high enough level!|left|\n") +
				"\nadd_label_with_icon|small|Level 225|left|1360|\nadd_button_with_icon||`9Masterless Starglitter|staticYellowFrame|14552|10|\nadd_button_with_icon||Gtps Gem|frame|4490|20|\nadd_button_with_icon||World Lock|frame|242|25|\nadd_button_with_icon||Ultra Grow Spray|frame|1062|5|\nadd_button_with_icon||Small Seed Pack|frame|5706|25|\nadd_button_with_icon||Diamond Lock|staticYellowFrame|1796|10|\nadd_button_with_icon||Totem of Wisdom|frame|5078|1|\nadd_button_with_icon||END_LIST|noflags|0|||\n"
				+ a + (Has_Claimed::Lvl(peer, 225) ? "\nadd_smalltext|`2CLAIMED!|left|" : pInfo(peer)->level >= 225 ? "\nadd_small_font_button|claim_lvl225|CLAIM|noflags|0|0|" : "\nadd_smalltext|`4Not high enough level!|left|\n") +
				"\nadd_label_with_icon|small|Level 230|left|1360|\nadd_button_with_icon||`9Masterless Starglitter|staticYellowFrame|14552|10|\nadd_button_with_icon||Gtps Gem|frame|4490|20|\nadd_button_with_icon||World Lock|frame|242|25|\nadd_button_with_icon||Ultra Grow Spray|frame|1062|5|\nadd_button_with_icon||Small Seed Pack|frame|5706|25|\nadd_button_with_icon||Rare Seed Pack|frame|9526|50|\nadd_button_with_icon||Lucky Clover|staticYellowFrame|528|2|\nadd_button_with_icon||END_LIST|noflags|0|||\n"
				+ a + (Has_Claimed::Lvl(peer, 230) ? "\nadd_smalltext|`2CLAIMED!|left|" : pInfo(peer)->level >= 230 ? "\nadd_small_font_button|claim_lvl230|CLAIM|noflags|0|0|" : "\nadd_smalltext|`4Not high enough level!|left|\n") +
				"\nadd_label_with_icon|small|Level 235|left|1360|\nadd_button_with_icon||`9Masterless Starglitter|staticYellowFrame|14552|10|\nadd_button_with_icon||Gtps Gem|frame|4490|20|\nadd_button_with_icon||World Lock|frame|242|30|\nadd_button_with_icon||Ultra Grow Spray|frame|1062|5|\nadd_button_with_icon||Small Seed Pack|frame|5706|25|\nadd_button_with_icon||Rare Seed Pack|frame|9526|50|\nadd_button_with_icon||END_LIST|noflags|0|||\n"
				+ a + (Has_Claimed::Lvl(peer, 235) ? "\nadd_smalltext|`2CLAIMED!|left|" : pInfo(peer)->level >= 235 ? "\nadd_small_font_button|claim_lvl235|CLAIM|noflags|0|0|" : "\nadd_smalltext|`4Not high enough level!|left|\n") +
				"\nadd_label_with_icon|small|Level 240|left|1360|\nadd_button_with_icon||`9Masterless Starglitter|staticYellowFrame|14552|10|\nadd_button_with_icon||Gtps Gem|frame|4490|20|\nadd_button_with_icon||World Lock|frame|242|30|\nadd_button_with_icon||Ultra Grow Spray|frame|1062|5|\nadd_button_with_icon||Small Seed Pack|frame|5706|25|\nadd_button_with_icon||MAGPLANT 5000|frame|5638|1|\nadd_button_with_icon||END_LIST|noflags|0|||\n"
				+ a + (Has_Claimed::Lvl(peer, 240) ? "\nadd_smalltext|`2CLAIMED!|left|" : pInfo(peer)->level >= 240 ? "\nadd_small_font_button|claim_lvl240|CLAIM|noflags|0|0|" : "\nadd_smalltext|`4Not high enough level!|left|\n") +
				"\nadd_label_with_icon|small|Level 245|left|1360|\nadd_button_with_icon||`9Masterless Starglitter|staticYellowFrame|14552|10|\nadd_button_with_icon||Gtps Gem|frame|4490|20|\nadd_button_with_icon||World Lock|frame|242|30|\nadd_button_with_icon||Ultra Grow Spray|frame|1062|5|\nadd_button_with_icon||Small Seed Pack|frame|5706|25|\nadd_button_with_icon||Diamond Lock|staticYellowFrame|1796|10|\nadd_button_with_icon||Farm Blast|staticYellowFrame|9602|1|\nadd_button_with_icon||END_LIST|noflags|0|||\n"
				+ a + (Has_Claimed::Lvl(peer, 245) ? "\nadd_smalltext|`2CLAIMED!|left|" : pInfo(peer)->level >= 245 ? "\nadd_small_font_button|claim_lvl245|CLAIM|noflags|0|0|" : "\nadd_smalltext|`4Not high enough level!|left|\n") +
				"\nadd_label_with_icon|small|Level 250|left|1360|\nadd_button_with_icon||`9Masterless Starglitter|staticYellowFrame|14552|10|\nadd_button_with_icon||Gtps Gem|frame|4490|25|\nadd_button_with_icon||World Lock|frame|242|35|\nadd_button_with_icon||Deluxe World Spray|frame|13574|2|\nadd_button_with_icon||Small Seed Pack|frame|5706|25|\nadd_button_with_icon||Gaia's Beacon|staticPurpleFrame|6946|1|\nadd_button_with_icon||Lucky Clover|staticYellowFrame|5178|5|\nadd_button_with_icon||END_LIST|noflags|0|||\n"
				+ a + (Has_Claimed::Lvl(peer, 250) ? "\nadd_smalltext|`2CLAIMED!|left|" : pInfo(peer)->level >= 250 ? "\nadd_small_font_button|claim_lvl250|CLAIM|noflags|0|0|" : "\nadd_smalltext|`4Not high enough level!|left|\n") +
				"\nadd_spacer|small|\nadd_custom_button|previous_page4|image:interface/large/gui_left_arrow_btn.rttex;image_size:64,64;frame:0,0;|\nadd_custom_label|5/5|target:previous_page4;top:1.20;left:7.0;size:medium|\nadd_custom_label|PREV|target:previous_page4;top:1.20;left:0.50;size:small|\nend_dialog|lvl_rewards|||", 500
			);
		}
	}
	static void Kit_Pass(ENetPeer* peer) {
		std::string dialog = SetColor(peer) + "set_default_color|`o\nstart_custom_tabs|"
			"\nadd_custom_button|info|image:interface/large/gui_button_tabs.rttex;image_size:228,92;frame:0,17;width:0.14;min_width:60;|"
			+ (pInfo(peer)->glo ? "\nadd_custom_button|road_to_glory|image:interface/large/gui_button_tabs.rttex;image_size:228,92;frame:0,18;width:0.14;min_width:60;|" : "") +
			"\nadd_custom_button|kit_pass|image:interface/large/gui_button_tabs.rttex;image_size:228,92;frame:1,19;width:0.14;min_width:60;|"
			"\nadd_custom_button|level_rwds|image:interface/large/gui_button_tabs.rttex;image_size:228,92;frame:0,14;width:0.14;min_width:60;|"
			"\nadd_custom_button|skill_and_assets|image:interface/large/gui_button_tabs.rttex;image_size:228,92;frame:0,13;width:0.14;min_width:60;|"
			"\nend_custom_tabs|";
		dialog += "\nadd_image_button||interface/large/tianvan/kits1_banner.rttex||||\n";
		dialog += "\nadd_progress_bar|`$Kit Pass Level:``|small|Level " + to_string(pInfo(peer)->lvlKit) + "|" + (pInfo(peer)->lvlKit == 100 ? to_string(125 * ((pInfo(peer)->lvlKit * pInfo(peer)->lvlKit) + 2)) : to_string(pInfo(peer)->xpKit)) + "|" + to_string(125 * ((pInfo(peer)->lvlKit * pInfo(peer)->lvlKit) + 2)) + "|" + (pInfo(peer)->lvlKit == 100 ? "(MAX)" : "(" + to_string(pInfo(peer)->xpKit) + "/" + to_string(125 * ((pInfo(peer)->lvlKit * pInfo(peer)->lvlKit) + 2)) + ")") + "|-3669761|\n";
		dialog += "\nadd_spacer|small|\nadd_custom_textbox|`$Kits are `2unlocked ``by reaching the required kit levels:|size:small|\nadd_spacer|small|\ntext_scaling_string|Subscribtions+++|\n";
		if (not Has_Claimed::Kit(peer, "kit_1") and pInfo(peer)->lvlKit >= 5) dialog += "\nadd_button_with_icon|info_kit1|`25/5|staticYellowFrame,no_padding_x,|14896|1|\n";
		else if (Has_Claimed::Kit(peer, "kit_1")) dialog += "\nadd_button_with_icon||`5CLAIMED`|staticBlueFrame,no_padding_x,|6292||\n";
		else dialog += "\nadd_button_with_icon||`4" + to_string(pInfo(peer)->lvlKit) + "/5|staticGreyFrame,no_padding_x,disabled|14896|1|\n";
		/*2*/
		if (not Has_Claimed::Kit(peer, "kit_2") and pInfo(peer)->lvlKit >= 10) dialog += "\nadd_button_with_icon|info_kit2|`210/10|staticYellowFrame,no_padding_x,|5196|10|\n";
		else if (Has_Claimed::Kit(peer, "kit_2")) dialog += "\nadd_button_with_icon||`5CLAIMED`|staticBlueFrame,no_padding_x,|6292||\n";
		else dialog += "\nadd_button_with_icon||`4" + to_string(pInfo(peer)->lvlKit) + "/10|staticGreyFrame,no_padding_x,disabled|5196|10|\n";
		/*3*/
		if (not Has_Claimed::Kit(peer, "kit_3") and pInfo(peer)->lvlKit >= 15) dialog += "\nadd_button_with_icon|info_kit3|`215/15|staticYellowFrame,no_padding_x,|14360|1|\n";
		else if (Has_Claimed::Kit(peer, "kit_3")) dialog += "\nadd_button_with_icon||`5CLAIMED`|staticBlueFrame,no_padding_x,|6292||\n";
		else dialog += "\nadd_button_with_icon||`4" + to_string(pInfo(peer)->lvlKit) + "/15|staticGreyFrame,no_padding_x,disabled|14360|1|\n";
		/*4*/
		if (not Has_Claimed::Kit(peer, "kit_4") and pInfo(peer)->lvlKit >= 20) dialog += "\nadd_button_with_icon|info_kit4|`220/20|staticYellowFrame,no_padding_x,|9266|1|\n";
		else if (Has_Claimed::Kit(peer, "kit_4")) dialog += "\nadd_button_with_icon||`5CLAIMED`|staticBlueFrame,no_padding_x,|6292||\n";
		else dialog += "\nadd_button_with_icon||`4" + to_string(pInfo(peer)->lvlKit) + "/20|staticGreyFrame,no_padding_x,disabled|9266|1|\n";
		/*5*/
		if (not Has_Claimed::Kit(peer, "kit_5") and pInfo(peer)->lvlKit >= 25) dialog += "\nadd_button_with_icon|info_kit5|`225/25|staticYellowFrame,no_padding_x,|6282|1|\n";
		else if (Has_Claimed::Kit(peer, "kit_5")) dialog += "\nadd_button_with_icon||`5CLAIMED`|staticBlueFrame,no_padding_x,|6292||\n";
		else dialog += "\nadd_button_with_icon||`4" + to_string(pInfo(peer)->lvlKit) + "/25|staticGreyFrame,no_padding_x,disabled|6282|1|\n";
		/*6*/
		if (not Has_Claimed::Kit(peer, "kit_6") and pInfo(peer)->lvlKit >= 30) dialog += "\nadd_button_with_icon|info_kit6|`230/30|staticYellowFrame,no_padding_x,|14990|1|\n";
		else if (Has_Claimed::Kit(peer, "kit_6")) dialog += "\nadd_button_with_icon||`5CLAIMED`|staticBlueFrame,no_padding_x,|6292||\n";
		else dialog += "\nadd_button_with_icon||`4" + to_string(pInfo(peer)->lvlKit) + "/30|staticGreyFrame,no_padding_x,disabled|14990|1|\n";
		/*7*/
		if (not Has_Claimed::Kit(peer, "kit_7") and pInfo(peer)->lvlKit >= 35) dialog += "\nadd_button_with_icon|info_kit7|`235/35|staticYellowFrame,no_padding_x,|14500|1|\n";
		else if (Has_Claimed::Kit(peer, "kit_7")) dialog += "\nadd_button_with_icon||`5CLAIMED`|staticBlueFrame,no_padding_x,|6292||\n";
		else dialog += "\nadd_button_with_icon||`4" + to_string(pInfo(peer)->lvlKit) + "/35|staticGreyFrame,no_padding_x,disabled|14500|1|\n";
		/*8*/
		if (not Has_Claimed::Kit(peer, "kit_8") and pInfo(peer)->lvlKit >= 40) dialog += "\nadd_button_with_icon|info_kit8|`240/40|staticYellowFrame,no_padding_x,|11050|1|\n";
		else if (Has_Claimed::Kit(peer, "kit_8")) dialog += "\nadd_button_with_icon||`5CLAIMED`|staticBlueFrame,no_padding_x,|6292||\n";
		else dialog += "\nadd_button_with_icon||`4" + to_string(pInfo(peer)->lvlKit) + "/40|staticGreyFrame,no_padding_x,disabled|11050|1|\n";
		/*9*/
		if (not Has_Claimed::Kit(peer, "kit_9") and pInfo(peer)->lvlKit >= 45) dialog += "\nadd_button_with_icon|info_kit9|`245/45|staticYellowFrame,no_padding_x,|3134|1|\n";
		else if (Has_Claimed::Kit(peer, "kit_9")) dialog += "\nadd_button_with_icon||`5CLAIMED`|staticBlueFrame,no_padding_x,|6292||\n";
		else dialog += "\nadd_button_with_icon||`4" + to_string(pInfo(peer)->lvlKit) + "/45|staticGreyFrame,no_padding_x,disabled|3134|1|\n";
		dialog += "\nadd_button_with_icon||END_LIST|noflags|0||\nadd_spacer|small|";
		/*10*/
		if (not Has_Claimed::Kit(peer, "kit_10") and pInfo(peer)->lvlKit >= 50) dialog += "\nadd_button_with_icon|info_kit10|`250/50|staticYellowFrame,no_padding_x,|14552|50|\n";
		else if (Has_Claimed::Kit(peer, "kit_10")) dialog += "\nadd_button_with_icon||`5CLAIMED`|staticBlueFrame,no_padding_x,|6292||\n";
		else dialog += "\nadd_button_with_icon||`4" + to_string(pInfo(peer)->lvlKit) + "/50|staticGreyFrame,no_padding_x,disabled|14552|50|\n";
		/*11*/
		if (not Has_Claimed::Kit(peer, "kit_11") and pInfo(peer)->lvlKit >= 55) dialog += "\nadd_button_with_icon|info_kit11|`255/55|staticYellowFrame,no_padding_x,|14358|1|\n";
		else if (Has_Claimed::Kit(peer, "kit_11")) dialog += "\nadd_button_with_icon||`5CLAIMED`|staticBlueFrame,no_padding_x,|6292||\n";
		else dialog += "\nadd_button_with_icon||`4" + to_string(pInfo(peer)->lvlKit) + "/55|staticGreyFrame,no_padding_x,disabled|14358|1|\n";
		/*12*/
		if (not Has_Claimed::Kit(peer, "kit_12") and pInfo(peer)->lvlKit >= 60) dialog += "\nadd_button_with_icon|info_kit12|`260/60|staticYellowFrame,no_padding_x,|13198|1|\n";
		else if (Has_Claimed::Kit(peer, "kit_12")) dialog += "\nadd_button_with_icon||`5CLAIMED`|staticBlueFrame,no_padding_x,|6292||\n";
		else dialog += "\nadd_button_with_icon||`4" + to_string(pInfo(peer)->lvlKit) + "/60|staticGreyFrame,no_padding_x,disabled|13198|1|\n";
		/*13*/
		if (not Has_Claimed::Kit(peer, "kit_13") and pInfo(peer)->lvlKit >= 65) dialog += "\nadd_button_with_icon|info_kit13|`265/65|staticYellowFrame,no_padding_x,|14084|15|\n";
		else if (Has_Claimed::Kit(peer, "kit_13")) dialog += "\nadd_button_with_icon||`5CLAIMED`|staticBlueFrame,no_padding_x,|6292||\n";
		else dialog += "\nadd_button_with_icon||`4" + to_string(pInfo(peer)->lvlKit) + "/65|staticGreyFrame,no_padding_x,disabled|14084|15|\n";
		/*14*/
		if (not Has_Claimed::Kit(peer, "kit_14") and pInfo(peer)->lvlKit >= 70) dialog += "\nadd_button_with_icon|info_kit14|`270/70|staticYellowFrame,no_padding_x,|14498|1|\n";
		else if (Has_Claimed::Kit(peer, "kit_14")) dialog += "\nadd_button_with_icon||`5CLAIMED`|staticBlueFrame,no_padding_x,|6292||\n";
		else dialog += "\nadd_button_with_icon||`4" + to_string(pInfo(peer)->lvlKit) + "/70|staticGreyFrame,no_padding_x,disabled|14498|1|\n";
		/*15*/
		if (not Has_Claimed::Kit(peer, "kit_15") and pInfo(peer)->lvlKit >= 75) dialog += "\nadd_button_with_icon|info_kit15|`275/75|staticYellowFrame,no_padding_x,|10944|1|\n";
		else if (Has_Claimed::Kit(peer, "kit_15")) dialog += "\nadd_button_with_icon||`5CLAIMED`|staticBlueFrame,no_padding_x,|6292||\n";
		else dialog += "\nadd_button_with_icon||`4" + to_string(pInfo(peer)->lvlKit) + "/75|staticGreyFrame,no_padding_x,disabled|10944|1|\n";
		/*16*/
		if (not Has_Claimed::Kit(peer, "kit_16") and pInfo(peer)->lvlKit >= 80) dialog += "\nadd_button_with_icon|info_kit16|`280/80|staticYellowFrame,no_padding_x,|7960|15|\n";
		else if (Has_Claimed::Kit(peer, "kit_16")) dialog += "\nadd_button_with_icon||`5CLAIMED`|staticBlueFrame,no_padding_x,|6292||\n";
		else dialog += "\nadd_button_with_icon||`4" + to_string(pInfo(peer)->lvlKit) + "/80|staticGreyFrame,no_padding_x,disabled|7960|15|\n";
		/*17*/
		if (not Has_Claimed::Kit(peer, "kit_17") and pInfo(peer)->lvlKit >= 90) dialog += "\nadd_button_with_icon|info_kit17|`290/90|staticYellowFrame,no_padding_x,|10382|10|\n";
		else if (Has_Claimed::Kit(peer, "kit_17")) dialog += "\nadd_button_with_icon||`5CLAIMED`|staticBlueFrame,no_padding_x,|6292||\n";
		else dialog += "\nadd_button_with_icon||`4" + to_string(pInfo(peer)->lvlKit) + "/90|staticGreyFrame,no_padding_x,disabled|10382|10|\n";
		/*18*/
		if (not Has_Claimed::Kit(peer, "kit_18") and pInfo(peer)->lvlKit >= 100) dialog += "\nadd_button_with_icon|info_kit18|`2100/100|staticYellowFrame,no_padding_x,|5930|1|\n";
		else if (Has_Claimed::Kit(peer, "kit_18")) dialog += "\nadd_button_with_icon|info_kit18|`5CLAIMED`|staticBlueFrame,no_padding_x,|6292||\n";
		else dialog += "\nadd_button_with_icon|info_kit18|`4" + to_string(pInfo(peer)->lvlKit) + "/100|staticGreyFrame,no_padding_x,disabled|5930|1|\n";
		dialog += "\nadd_custom_margin|x:25;y:0|\nadd_button_with_icon||END_LIST|noflags|0||\nadd_spacer|small|\nadd_custom_textbox|`4NOTE``: `oKit XP is entirely separatte from regular XP...|size:small|\nadd_custom_textbox|`oTo get kit XP (not via gems like regular XP), you can do one of the following activities:|size:small|\nadd_spacer|small|\nadd_custom_textbox|`o- Smash blocks (use `wEggs Benedict ``to supp like regular XP)|size:small;color:255,255,255,255;icon:18;|\nadd_custom_textbox|`o- Harvest trees|size:small;color:255,255,255,255;icon:3;\nadd_custom_textbox|`o- Harvest providers|size:small;color:255,255,255,255;icon:928;\nadd_custom_textbox|`o- Activity such as Geiger Hunting|size:small;color:255,255,255,255;icon:2204;\nadd_custom_textbox|`o- Fishing|size:small;color:255,255,255,255;icon:2912;\nadd_custom_textbox|`o- Surgery|size:small;color:255,255,255,255;icon:4296;|\nadd_spacer|small|\nadd_textbox||left|\nadd_spacer|small|\nend_dialog|kit_dialog|||\n";
		VarList::OnDialogRequest(peer, SetColor(peer) + dialog, 500);
	}
	static void Kit_Pass_Info(ENetPeer* peer, int caseType) {
		std::string dialog = "add_default_color|";
		switch (caseType) {
		case 1: {
			dialog += "\nadd_label_with_icon|big|1 " + items[14896].name + "|left|14896|\n";
			dialog += "\nadd_smalltext|" + items[14896].description + "|left|\n";
			if (pInfo(peer)->lvlKit >= 5) dialog += "\nadd_spacer|small|\nadd_button|claim_kit1|`2CLAIM|0|0|\n";
			break;
		}
		case 2: {
			dialog += "\nadd_label_with_icon|big|10 " + items[5196].name + "|left|5196|\n";
			dialog += "\nadd_smalltext|" + items[5196].description + "|left|\n";
			if (pInfo(peer)->lvlKit >= 10) dialog += "\nadd_spacer|small|\nadd_button|claim_kit2|`2CLAIM|0|0|\n";
			break;
		}
		case 3: {
			dialog += "\nadd_label_with_icon|big|1 " + items[14360].name + "|left|14360|\n";
			dialog += "\nadd_smalltext|" + items[14360].description + "|left|\n";
			if (pInfo(peer)->lvlKit >= 15) dialog += "\nadd_spacer|small|\nadd_button|claim_kit3|`2CLAIM|0|0|\n";
			break;
		}
		case 4: {
			dialog += "\nadd_label_with_icon|big|1 " + items[9266].name + "|left|9266|\n";
			dialog += "\nadd_smalltext|" + items[9266].description + "|left|\n";
			if (pInfo(peer)->lvlKit >= 20) dialog += "\nadd_spacer|small|\nadd_button|claim_kit4|`2CLAIM|0|0|\n";
			break;
		}
		case 5: {
			dialog += "\nadd_label_with_icon|big|1 " + items[6282].name + "|left|6282|\n";
			dialog += "\nadd_smalltext|" + items[6282].description + "|left|\n";
			if (pInfo(peer)->lvlKit >= 25) dialog += "\nadd_spacer|small|\nadd_button|claim_kit5|`2CLAIM|0|0|\n";
			break;
		}
		case 6: {
			dialog += "\nadd_label_with_icon|big|1 " + items[14990].name + "|left|14990|\n";
			dialog += "\nadd_smalltext|" + items[14990].description + "|left|\n";
			if (pInfo(peer)->lvlKit >= 30) dialog += "\nadd_spacer|small|\nadd_button|claim_kit6|`2CLAIM|0|0|\n";
			break;
		}
		case 7: {
			dialog += "\nadd_label_with_icon|big|1 " + items[14500].name + "|left|14500|\n";
			dialog += "\nadd_smalltext|" + items[14500].description + "|left|\n";
			if (pInfo(peer)->lvlKit >= 35) dialog += "\nadd_spacer|small|\nadd_button|claim_kit7|`2CLAIM|0|0|\n";
			break;
		}
		case 8: {
			dialog += "\nadd_label_with_icon|big|1 " + items[11050].name + "|left|11050|\n";
			dialog += "\nadd_smalltext|" + items[11050].description + "|left|\n";
			if (pInfo(peer)->lvlKit >= 40) dialog += "\nadd_spacer|small|\nadd_button|claim_kit8|`2CLAIM|0|0|\n";
			break;
		}
		case 9: {
			dialog += "\nadd_label_with_icon|big|1 " + items[3134].name + "|left|3134|\n";
			dialog += "\nadd_smalltext|" + items[3134].description + "|left|\n";
			if (pInfo(peer)->lvlKit >= 45) dialog += "\nadd_spacer|small|\nadd_button|claim_kit9|`2CLAIM|0|0|\n";
			break;
		}
		case 10: {
			dialog += "\nadd_label_with_icon|big|50 " + items[14552].name + "|left|14552|\n";
			dialog += "\nadd_smalltext|" + items[14552].description + "|left|\n";
			if (pInfo(peer)->lvlKit >= 50) dialog += "\nadd_spacer|small|\nadd_button|claim_kit10|`2CLAIM|0|0|\n";
			break;
		}
		case 11: {
			dialog += "\nadd_label_with_icon|big|1 " + items[14358].name + "|left|14358|\n";
			dialog += "\nadd_smalltext|" + items[14358].description + "|left|\n";
			if (pInfo(peer)->lvlKit >= 55) dialog += "\nadd_spacer|small|\nadd_button|claim_kit11|`2CLAIM|0|0|\n";
			break;
		}
		case 12: {
			dialog += "\nadd_label_with_icon|big|1 " + items[13198].name + "|left|13198|\n";
			dialog += "\nadd_smalltext|" + items[13198].description + "|left|\n";
			if (pInfo(peer)->lvlKit >= 60) dialog += "\nadd_spacer|small|\nadd_button|claim_kit12|`2CLAIM|0|0|\n";
			break;
		}
		case 13: {
			dialog += "\nadd_label_with_icon|big|15 " + items[14084].name + "|left|14084|\n";
			dialog += "\nadd_smalltext|" + items[14084].description + "|left|\n";
			if (pInfo(peer)->lvlKit >= 65) dialog += "\nadd_spacer|small|\nadd_button|claim_kit13|`2CLAIM|0|0|\n";
			break;
		}
		case 14: {
			dialog += "\nadd_label_with_icon|big|1 " + items[14498].name + "|left|14498|\n";
			dialog += "\nadd_smalltext|" + items[14498].description + "|left|\n";
			if (pInfo(peer)->lvlKit >= 70) dialog += "\nadd_spacer|small|\nadd_button|claim_kit14|`2CLAIM|0|0|\n";
			break;
		}
		case 15: {
			dialog += "\nadd_label_with_icon|big|1 " + items[10944].name + "|left|10944|\n";
			dialog += "\nadd_smalltext|" + items[10944].description + "|left|\n";
			if (pInfo(peer)->lvlKit >= 75) dialog += "\nadd_spacer|small|\nadd_button|claim_kit15|`2CLAIM|0|0|\n";
			break;
		}
		case 16: {
			dialog += "\nadd_label_with_icon|big|15 " + items[7960].name + "|left|7960|\n";
			dialog += "\nadd_smalltext|" + items[7960].description + "|left|\n";
			if (pInfo(peer)->lvlKit >= 80) dialog += "\nadd_spacer|small|\nadd_button|claim_kit16|`2CLAIM|0|0|\n";
			break;
		}
		case 17: {
			dialog += "\nadd_label_with_icon|big|10 " + items[10382].name + "|left|10382|\n";
			dialog += "\nadd_smalltext|" + items[10382].description + "|left|\n";
			if (pInfo(peer)->lvlKit >= 90) dialog += "\nadd_spacer|small|\nadd_button|claim_kit17|`2CLAIM|0|0|\n";
			break;
		}
		case 18: {
			dialog += "\nadd_label_with_icon|big|1 " + items[5930].name + "|left|5930|\n";
			dialog += "\nadd_smalltext|" + items[5930].description + "|left|\n";
			if (pInfo(peer)->lvlKit >= 100) dialog += "\nadd_spacer|small|\nadd_button|claim_kit18|`2CLAIM|0|0|\n";
			break;
		}
		default: {
			break;
		}
		}
		dialog += "\nadd_button|back_to_dialog|BACK|0|0|\nend_dialog|kit_dialog|||\n";
		VarList::OnDialogRequest(peer, SetColor(peer) + dialog);
	}
	static void Infinity_Crown(ENetPeer* peer, bool Instructions = false, std::string error = "") {
		std::string dialog;
		dialog += "set_default_color|`o\nadd_label_with_icon|big|`wInfinity Crown``|left|12958|\nadd_spacer|small|";
		dialog += error != "" ? "\nadd_textbox|`4" + error + "``|left|\nadd_spacer|small|" : "";
		dialog += Instructions ? "\nadd_textbox|This Crown has several special functions!|left|\nadd_spacer|small|\nadd_textbox|Set the Time Dilation Cycle Time to define how often the Crown will change between the two Crown Styles. Cycle time is in seconds; maximum number of seconds allowed is: 86400 seconds (24 hours).|left|\nadd_spacer|small|\nadd_textbox|To set the colors for the styles you need to enter RGB(Red, Green, Blue) values. To separate the individual values, you need to use a comma.|left|" : "\nadd_button|button_manual|Instructions|noflags|0|0|\nadd_text_input|text_input_time_cycle|Time Dilation Cycle Time:|" + to_string(pInfo(peer)->Crown_Cycle_Time) + "|5|\nadd_checkbox|checkbox_time_cycle|Time Dilation On / Off|" + string(pInfo(peer)->Crown_Time_Change ? "1" : "0") + "\nadd_spacer|small|\nadd_spacer|small|\nadd_label|big|Crown Style 1|left\nadd_spacer|small|\nadd_checkbox|checkbox_floating0|Floating Effect|" + string(pInfo(peer)->Crown_Floating_Effect_0 ? "1" : "0") + "\nadd_spacer|small|\nadd_label|small|Crown Base:|left\nadd_text_input|text_input_base_color0|Color - R,G,B:|" + to_string(pInfo(peer)->Base_R_0) + "," + to_string(pInfo(peer)->Base_G_0) + "," + to_string(pInfo(peer)->Base_B_0) + "|11|\nadd_spacer|small|\nadd_label|small|Crown Gem:|left\nadd_text_input|text_input_gem_color0|Color - R,G,B:|" + to_string(pInfo(peer)->Gem_R_0) + "," + to_string(pInfo(peer)->Gem_G_0) + "," + to_string(pInfo(peer)->Gem_B_0) + "|11|\nadd_checkbox|checkbox_laser_beam0|Laser Beam On/Off|" + string(pInfo(peer)->Crown_Laser_Beam_0 ? "1" : "0") + "\nadd_spacer|small|\nadd_label|small|Crown Crystal/Rays:|left\nadd_text_input|text_input_crystal_color0|Color - R,G,B:|" + to_string(pInfo(peer)->Crystal_R_0) + "," + to_string(pInfo(peer)->Crystal_G_1) + "," + to_string(pInfo(peer)->Crystal_B_1) + "|11|\nadd_checkbox|checkbox_crystals0| Crystals On/Off|" + string(pInfo(peer)->Crown_Crystals_0 ? "1" : "0") + "\nadd_checkbox|checkbox_rays0| Rays On/Off|" + string(pInfo(peer)->Crown_Rays_0 ? "1" : "0") + "\nadd_spacer|small|\nadd_label|big|Crown Style 2|left\nadd_spacer|small|\nadd_checkbox|checkbox_floating1|Floating Effect|" + string(pInfo(peer)->Crown_Floating_Effect_1 ? "1" : "0") + "\nadd_spacer|small|\nadd_label|small|Crown Base:|left\nadd_text_input|text_input_base_color1|Color - R,G,B:|" + to_string(pInfo(peer)->Base_R_1) + "," + to_string(pInfo(peer)->Base_G_1) + "," + to_string(pInfo(peer)->Base_B_1) + "|11|\nadd_spacer|small|\nadd_label|small|Crown Gem:|left\nadd_text_input|text_input_gem_color1|Color - R,G,B:|" + to_string(pInfo(peer)->Gem_R_1) + "," + to_string(pInfo(peer)->Gem_G_1) + "," + to_string(pInfo(peer)->Gem_B_1) + "|11|\nadd_checkbox|checkbox_laser_beam1|Laser Beam On/Off|" + string(pInfo(peer)->Crown_Laser_Beam_1 ? "1" : "0") + "\nadd_spacer|small|\nadd_label|small|Crown Crystal/Rays:|left\nadd_text_input|text_input_crystal_color1|Color - R,G,B:|" + to_string(pInfo(peer)->Crystal_R_1) + "," + to_string(pInfo(peer)->Crystal_G_1) + "," + to_string(pInfo(peer)->Crystal_B_1) + "|11|\nadd_checkbox|checkbox_crystals1| Crystals On/Off|" + string(pInfo(peer)->Crown_Crystals_1 ? "1" : "0") + "\nadd_checkbox|checkbox_rays1| Rays On/Off|" + string(pInfo(peer)->Crown_Rays_1 ? "1" : "0") + "\nadd_spacer|small|\nadd_button|restore_default|Restore to Default|noflags|0|0|\nend_dialog|dialog_infinity_crown|Cancel|Update|\nadd_quick_exit|";
		VarList::OnDialogRequest(peer, SetColor(peer) + dialog);
	}
	static void Cernuous(ENetPeer* peer) {
		std::string dialog, C0, C1, C2, C3, C4, P0, P1, P2, P3, P4;
		switch (pInfo(peer)->Aura_Season) {
		case 0: {
			C0 = "1", C1 = "0", C2 = "0", C3 = "0", C4 = "0";
			break;
		}
		case 1: {
			C0 = "0", C1 = "1", C2 = "0", C3 = "0", C4 = "0";
			break;
		}
		case 2: {
			C0 = "0", C1 = "0", C2 = "1", C3 = "0", C4 = "0";
			break;
		}
		case 3: {
			C0 = "0", C1 = "0", C2 = "0", C3 = "1", C4 = "0";
			break;
		}
		case 4: {
			C0 = "0", C1 = "0", C2 = "0", C3 = "0", C4 = "1";
			break;
		}
		default:
			break;
		}
		switch (pInfo(peer)->Trail_Season) {
		case 0: {
			P0 = "1", P1 = "0", P2 = "0", P3 = "0", P4 = "0";
			break;
		}
		case 1: {
			P0 = "0", P1 = "1", P2 = "0", P3 = "0", P4 = "0";
			break;
		}
		case 2: {
			P0 = "0", P1 = "0", P2 = "1", P3 = "0", P4 = "0";
			break;
		}
		case 3: {
			P0 = "0", P1 = "0", P2 = "0", P3 = "1", P4 = "0";
			break;
		}
		case 4: {
			P0 = "0", P1 = "0", P2 = "0", P3 = "0", P4 = "1";
			break;
		}
		default:
			break;
		}
		dialog += "set_default_color|`o\nadd_label_with_icon|big|`wCrown of Seasons``|left|10674|\nadd_spacer|small|\nadd_textbox|You can choose seperate Auras and Trails for this item. Each one represents a different season. Mix and match to get your perfect look.|left|\nadd_spacer|small|";
		dialog += "\nadd_label|big|Aura Season|left\nadd_spacer|small|";
		dialog += "\nadd_checkbox|checkbox_none0|None|" + C0;
		dialog += "\nadd_checkbox|checkbox_spring0|Spring|" + C1;
		dialog += "\nadd_checkbox|checkbox_summer0|Summer|" + C2;
		dialog += "\nadd_checkbox|checkbox_autumn0|Autumn|" + C3;
		dialog += "\nadd_checkbox|checkbox_winter0|Winter|" + C4;
		dialog += "\nadd_spacer|small|";
		dialog += "\nadd_label|big|Trail Season|left\nadd_spacer|small|";
		dialog += "\nadd_checkbox|checkbox_none1|None|" + P0;
		dialog += "\nadd_checkbox|checkbox_spring1|Spring|" + P1;
		dialog += "\nadd_checkbox|checkbox_summer1|Summer|" + P2;
		dialog += "\nadd_checkbox|checkbox_autumn1|Autumn|" + P3;
		dialog += "\nadd_checkbox|checkbox_winter1|Winter|" + P4;
		dialog += "\nadd_spacer|small|\nadd_button|restore_default|Restore to Default|noflags|0|0|\nend_dialog|dialog_cernuous_mask|Cancel|Update|\nadd_quick_exit|";
		VarList::OnDialogRequest(peer, SetColor(peer) + dialog);
	}
	static void Banner_Bandolier2(ENetPeer* peer) {
		if (pInfo(peer)->CBanner_Item > items.size() || pInfo(peer)->necklace != 11748) return;
		std::string dialog;
		dialog += "set_default_color|`o\nadd_label_with_icon|big|`wBanner Bandolier``|left|11748|\nadd_spacer|small|";
		dialog += "\nadd_textbox|Create a stylish banner by choosing an item from yout inventory.|left|\nadd_spacer|small|";
		dialog += pInfo(peer)->CBanner_Item != 0 ? "\nadd_label_with_icon|small|`w" + items[pInfo(peer)->CBanner_Item].ori_name + "``|left|" + to_string(pInfo(peer)->CBanner_Item) + "|\nadd_spacer|small|" : "";
		dialog += "\nadd_item_picker|banneritem|`wChange Banner Item``|Choose the banner item!|\nadd_textbox|Pick a pattern for your banner.|left|\nadd_spacer|small|";
		if (pInfo(peer)->CBanner_Flag == 0) dialog += "\nadd_label_with_icon_button|big|Harlequin|left|5838|patternpicker|\nadd_spacer|small|";
		else if (pInfo(peer)->CBanner_Flag == 1) dialog += "\nadd_label_with_icon_button|big|Slant|left|5844|patternpicker|\nadd_spacer|small|";
		else if (pInfo(peer)->CBanner_Flag == 2) dialog += "\nadd_label_with_icon_button|big|Stripe|left|5848|patternpicker|\nadd_spacer|small|";
		else if (pInfo(peer)->CBanner_Flag == 3) dialog += "\nadd_label_with_icon_button|big|Panel|left|5846|patternpicker|\nadd_spacer|small|";
		else if (pInfo(peer)->CBanner_Flag == 4) dialog += "\nadd_label_with_icon_button|big|Cross|left|5842|patternpicker|\nadd_spacer|small|";
		dialog += "\nadd_button|reset|Reset|noflags|0|0|\nend_dialog|bannerbandolier|Cancel|Update|\nadd_quick_exit|";
		VarList::OnDialogRequest(peer, SetColor(peer) + dialog);
	}
	static void Banner_Bandolier(ENetPeer* peer) {
		if (pInfo(peer)->Banner_Item > items.size() || pInfo(peer)->necklace != 11748) return;
		std::string dialog;
		dialog += "set_default_color|`o\nadd_label_with_icon|big|`wBanner Bandolier``|left|11748|\nadd_spacer|small|";
		dialog += "\nadd_textbox|Create a stylish banner by choosing an item from yout inventory.|left|\nadd_spacer|small|";
		dialog += pInfo(peer)->Banner_Item != 0 ? "\nadd_label_with_icon|small|`w" + items[pInfo(peer)->Banner_Item].ori_name + "``|left|" + to_string(pInfo(peer)->Banner_Item) + "|\nadd_spacer|small|" : "";
		dialog += "\nadd_item_picker|banneritem|`wChange Banner Item``|Choose the banner item!|";
		dialog += "\nadd_textbox|Pick a pattern for your banner.|left|\nadd_spacer|small|";
		if (pInfo(peer)->Banner_Flag == 0) dialog += "\nadd_label_with_icon_button|big|Harlequin|left|5838|patternpicker|\nadd_spacer|small|";
		else if (pInfo(peer)->Banner_Flag == 1) dialog += "\nadd_label_with_icon_button|big|Slant|left|5844|patternpicker|\nadd_spacer|small|";
		else if (pInfo(peer)->Banner_Flag == 2) dialog += "\nadd_label_with_icon_button|big|Stripe|left|5848|patternpicker|\nadd_spacer|small|";
		else if (pInfo(peer)->Banner_Flag == 3) dialog += "\nadd_label_with_icon_button|big|Panel|left|5846|patternpicker|\nadd_spacer|small|";
		else if (pInfo(peer)->Banner_Flag == 4) dialog += "\nadd_label_with_icon_button|big|Cross|left|5842|patternpicker|\nadd_spacer|small|";
		dialog += "\nadd_button|reset|Reset|noflags|0|0|";
		dialog += "\nend_dialog|bannerbandolier|Cancel|Update|";
		dialog += "\nadd_quick_exit|";
		VarList::OnDialogRequest(peer, SetColor(peer) + dialog);
	}
	static void Rift_Cape(ENetPeer* peer, std::string error = "\nadd_button|button_manual|Instructions|noflags|0|0|") {
		if (pInfo(peer)->back == 10424) {
			int portalAura0 = 0, portalAura1 = 0;
			int starfieldAura0 = 0, starfieldAura1 = 0;
			int electricalAura0 = 0, electricalAura1 = 0;
			if (pInfo(peer)->flags & SETTINGS::RIFTCAPE_FLAGS_STYLE_1_PORTAL_AURA && pInfo(peer)->flags & SETTINGS::RIFTCAPE_FLAGS_STYLE_1_STARFIELD_AURA) {
				electricalAura0 = 1;
			}
			else if (pInfo(peer)->flags & SETTINGS::RIFTCAPE_FLAGS_STYLE_1_PORTAL_AURA) {
				portalAura0 = 1;
			}
			else if (pInfo(peer)->flags & SETTINGS::RIFTCAPE_FLAGS_STYLE_1_STARFIELD_AURA) {
				starfieldAura0 = 1;
			}
			if (pInfo(peer)->flags & SETTINGS::RIFTCAPE_FLAGS_STYLE_2_PORTAL_AURA && pInfo(peer)->flags & SETTINGS::RIFTCAPE_FLAGS_STYLE_2_STARFIELD_AURA) {
				electricalAura1 = 1;
			}
			else if (pInfo(peer)->flags & SETTINGS::RIFTCAPE_FLAGS_STYLE_2_PORTAL_AURA) {
				portalAura1 = 1;
			}
			else if (pInfo(peer)->flags & SETTINGS::RIFTCAPE_FLAGS_STYLE_2_STARFIELD_AURA) {
				starfieldAura1 = 1;
			}
			VarList::OnDialogRequest(peer, SetColor(peer) + "set_default_color|`o\nadd_label_with_icon|big|`wRift Cape``|left|10424|\nadd_spacer|small|\nadd_text_input|text_input_time_cycle|Time Dilation Cycle Time:|" + to_string(pInfo(peer)->TimeDilation) + "|5|\nadd_checkbox|checkbox_time_cycle|Time Dilation On / Off|" + (to_string(pInfo(peer)->flags & SETTINGS::RIFTCAPE_FLAGS_TIME_DILATION_ON ? 1 : 0)) + "" + error + "\nadd_spacer|small|\nadd_label|big|Cape Style 1|left\nadd_spacer|small|\nadd_label|small|Cape Color:|left\nadd_text_input|text_input_cape_color0|Cape - R,G,B:|" + pInfo(peer)->CapeStyleColor_1 + "|11|\nadd_spacer|small|\nadd_checkbox|checkbox_cape_collar0|Cape Collar On / Off|" + to_string(pInfo(peer)->flags & SETTINGS::RIFTCAPE_FLAGS_STYLE_1_COLLAR_ON) + "\nadd_label|small|Cape Collar Color:|left\nadd_text_input|text_input_collar_color0|Collar - R,G,B:|" + pInfo(peer)->CapeCollarColor_1 + "|11|\nadd_spacer|small|\nadd_checkbox|checkbox_closed_cape0|Closed Cape|" + to_string(pInfo(peer)->flags & SETTINGS::RIFTCAPE_FLAGS_STYLE_1_CLOSED_CAPE) + "\nadd_checkbox|checkbox_open_on_move0|Open Cape on Movement|" + to_string(pInfo(peer)->flags & SETTINGS::RIFTCAPE_FLAGS_STYLE_1_OPEN_CAPE_ON_MOVEMENT ? 1 : 0) + "\nadd_checkbox|checkbox_aura0|Aura On / Off|" + to_string(pInfo(peer)->flags & SETTINGS::RIFTCAPE_FLAGS_STYLE_1_AURA_ON ? 1 : 0) + "\nadd_checkbox|checkbox_aura_1st0|      Portal Aura|" + to_string(portalAura0) + "\nadd_checkbox|checkbox_aura_2nd0|      Starfield Aura|" + to_string(starfieldAura0) + "\nadd_checkbox|checkbox_aura_3rd0|      Electrical Aura|" + to_string(electricalAura0) + "\nadd_label|big|Cape Style 2|left\nadd_spacer|small|\nadd_label|small|Cape Color:|left\nadd_text_input|text_input_cape_color1|Cape - R,G,B:|" + pInfo(peer)->CapeStyleColor_2 + "|11|\nadd_spacer|small|\nadd_checkbox|checkbox_cape_collar1|Cape Collar On / Off|" + to_string(pInfo(peer)->flags & SETTINGS::RIFTCAPE_FLAGS_STYLE_2_COLLAR_ON ? 1 : 0) + "\nadd_label|small|Cape Collar Color:|left\nadd_text_input|text_input_collar_color1|Collar - R,G,B:|" + pInfo(peer)->CapeCollarColor_2 + "|11|\nadd_spacer|small|\nadd_checkbox|checkbox_closed_cape1|Closed Cape|" + to_string(pInfo(peer)->flags & SETTINGS::RIFTCAPE_FLAGS_STYLE_2_CLOSED_CAPE ? 1 : 0) + "\nadd_checkbox|checkbox_open_on_move1|Open Cape on Movement|" + to_string(pInfo(peer)->flags & SETTINGS::RIFTCAPE_FLAGS_STYLE_2_OPEN_CAPE_ON_MOVEMENT ? 1 : 0) + "\nadd_checkbox|checkbox_aura1|Aura On / Off|" + to_string(pInfo(peer)->flags & SETTINGS::RIFTCAPE_FLAGS_STYLE_2_AURA_ON ? 1 : 0) + "\nadd_checkbox|checkbox_aura_1st1|      Portal Aura|" + to_string(portalAura1) + "\nadd_checkbox|checkbox_aura_2nd1|      Starfield Aura|" + to_string(starfieldAura1) + "\nadd_checkbox|checkbox_aura_3rd1|      Electrical Aura|" + to_string(electricalAura1) + "\nadd_spacer|small|\nadd_button|restore_default|Restore to Default|noflags|0|0|\nend_dialog|dialog_rift_cape|Cancel|Update|\nadd_quick_exit|\n");
		}
	}
	static void Rift_Wings(ENetPeer* peer, std::string error = "\nadd_button|button_manual|Instructions|noflags|0|0|") {
		if (pInfo(peer)->back == 11478) {
			int portalAura0 = 0, portalAura1 = 0;
			int starfieldAura0 = 0, starfieldAura1 = 0;
			int electricalAura0 = 0, electricalAura1 = 0;
			int feathers0 = 0, feathers1 = 0;
			int blades0 = 0, blades1 = 0;
			int scales0 = 0, scales1 = 0;
			if (pInfo(peer)->_flags & SETTINGS::RIFTWINGS_FLAGS_STYLE_1_PORTAL_AURA && pInfo(peer)->_flags & SETTINGS::RIFTWINGS_FLAGS_STYLE_1_STARFIELD_AURA) {
				electricalAura0 = 1;
			}
			else if (pInfo(peer)->_flags & SETTINGS::RIFTWINGS_FLAGS_STYLE_1_PORTAL_AURA) {
				portalAura0 = 1;
			}
			else if (pInfo(peer)->_flags & SETTINGS::RIFTWINGS_FLAGS_STYLE_1_STARFIELD_AURA) {
				starfieldAura0 = 1;
			}
			if (pInfo(peer)->_flags & SETTINGS::RIFTWINGS_FLAGS_STYLE_2_PORTAL_AURA && pInfo(peer)->_flags & SETTINGS::RIFTWINGS_FLAGS_STYLE_2_STARFIELD_AURA) {
				electricalAura1 = 1;
			}
			else if (pInfo(peer)->_flags & SETTINGS::RIFTWINGS_FLAGS_STYLE_2_PORTAL_AURA) {
				portalAura1 = 1;
			}
			else if (pInfo(peer)->_flags & SETTINGS::RIFTWINGS_FLAGS_STYLE_2_STARFIELD_AURA) {
				starfieldAura1 = 1;
			}
			if (pInfo(peer)->_flags & SETTINGS::RIFTWINGS_FLAGS_STYLE_1_MATERIAL_FEATHERS && pInfo(peer)->_flags & SETTINGS::RIFTWINGS_FLAGS_STYLE_1_MATERIAL_BLADES) {
				scales0 = 1;
			}
			else if (pInfo(peer)->_flags & SETTINGS::RIFTWINGS_FLAGS_STYLE_1_MATERIAL_FEATHERS) {
				feathers0 = 1;
			}
			else if (pInfo(peer)->_flags & SETTINGS::RIFTWINGS_FLAGS_STYLE_1_MATERIAL_BLADES) {
				blades0 = 1;
			}
			if (pInfo(peer)->_flags & SETTINGS::RIFTWINGS_FLAGS_STYLE_2_MATERIAL_FEATHERS && pInfo(peer)->_flags & SETTINGS::RIFTWINGS_FLAGS_STYLE_2_MATERIAL_BLADES) {
				scales1 = 1;
			}
			else if (pInfo(peer)->_flags & SETTINGS::RIFTWINGS_FLAGS_STYLE_2_MATERIAL_FEATHERS) {
				feathers1 = 1;
			}
			else if (pInfo(peer)->_flags & SETTINGS::RIFTWINGS_FLAGS_STYLE_2_MATERIAL_BLADES) {
				blades1 = 1;
			}
			VarList::OnDialogRequest(peer, SetColor(peer) + "set_default_color|`o\nadd_label_with_icon|big|`wRift Wings``|left|11478|\nadd_spacer|small|\nadd_text_input|text_input_time_cycle|Time Dilation Cycle Time:|" + to_string(pInfo(peer)->_TimeDilation) + "|5|\nadd_checkbox|checkbox_time_cycle|Time Dilation On / Off|" + (to_string(pInfo(peer)->_flags & SETTINGS::RIFTWINGS_FLAGS_TIME_DILATION_ON ? 1 : 0)) + "" + error + "\nadd_spacer|small|\nadd_spacer|small|\nadd_label|big|Wings Style 1|left\nadd_spacer|small|\nadd_label|small|Wings Color:|left\nadd_text_input|text_input_wings_color0|Wings - R,G,B:|" + pInfo(peer)->_CapeStyleColor_1 + "|11|\nadd_spacer|small|\nadd_label|small|Wings Metal Color:|left\nadd_text_input|text_input_metal_color0|Metal Color - R,G,B:|" + pInfo(peer)->_CapeCollarColor_1 + "|11|\nadd_spacer|small|\nadd_spacer|small|\nadd_checkbox|checkbox_open_wings0|Always Open Wings|" + to_string(pInfo(peer)->_flags & SETTINGS::RIFTWINGS_FLAGS_STYLE_1_OPEN_WINGS ? 1 : 0) + "\nadd_checkbox|checkbox_closed_wings0|Always Closed Wings|" + to_string(pInfo(peer)->_flags & SETTINGS::RIFTWINGS_FLAGS_STYLE_1_CLOSE_WINGS ? 1 : 0) + "\nadd_spacer|small|\nadd_checkbox|checkbox_stamp_particle0|Stamp Particle|" + to_string(pInfo(peer)->_flags & SETTINGS::RIFTWINGS_FLAGS_STYLE_1_STAMP_PARTICLE ? 1 : 0) + "\nadd_spacer|small|\nadd_checkbox|checkbox_trail0|Trail On / Off|" + to_string(pInfo(peer)->_flags & SETTINGS::RIFTWINGS_FLAGS_STYLE_1_TRAIL_ON ? 1 : 0) + "\nadd_checkbox|checkbox_trail_1st0|      Portal Trail|" + to_string(portalAura0) + "\nadd_checkbox|checkbox_trail_2nd0|      Starfield Trail|" + to_string(starfieldAura0) + "\nadd_checkbox|checkbox_trail_3rd0|      Electrical Trail|" + to_string(electricalAura0) + "\nadd_spacer|small|\nadd_label|small|Wings Material:|left\nadd_spacer|small|\nadd_checkbox|checkbox_material_1st0|      Feathers|" + to_string(feathers0) + "\nadd_checkbox|checkbox_material_2nd0|      Blades|" + to_string(blades0) + "\nadd_checkbox|checkbox_material_3rd0|      Scales|" + to_string(scales0) + "\nadd_spacer|small|\nadd_label|big|Wings Style 2|left\nadd_spacer|small|\nadd_label|small|Wings Color:|left\nadd_text_input|text_input_wings_color1|Wings - R,G,B:|" + pInfo(peer)->_CapeStyleColor_2 + "|11|\nadd_spacer|small|\nadd_label|small|Wings Metal Color:|left\nadd_text_input|text_input_metal_color1|Metal Color - R,G,B:|" + pInfo(peer)->_CapeCollarColor_2 + "|11|\nadd_spacer|small|\nadd_spacer|small|\nadd_checkbox|checkbox_open_wings1|Always Open Wings|" + to_string(pInfo(peer)->_flags & SETTINGS::RIFTWINGS_FLAGS_STYLE_2_OPEN_WINGS ? 1 : 0) + "\nadd_checkbox|checkbox_closed_wings1|Always Closed Wings|" + to_string(pInfo(peer)->_flags & SETTINGS::RIFTWINGS_FLAGS_STYLE_2_CLOSE_WINGS ? 1 : 0) + "\nadd_spacer|small|\nadd_checkbox|checkbox_stamp_particle1|Stamp Particle|" + to_string(pInfo(peer)->_flags & SETTINGS::RIFTWINGS_FLAGS_STYLE_2_STAMP_PARTICLE ? 1 : 0) + "\nadd_spacer|small|\nadd_checkbox|checkbox_trail1|Trail On / Off|" + to_string(pInfo(peer)->_flags & SETTINGS::RIFTWINGS_FLAGS_STYLE_2_TRAIL_ON ? 1 : 0) + "\nadd_checkbox|checkbox_trail_1st1|      Portal Trail|" + to_string(portalAura1) + "\nadd_checkbox|checkbox_trail_2nd1|      Starfield Trail|" + to_string(starfieldAura1) + "\nadd_checkbox|checkbox_trail_3rd1|      Electrical Trail|" + to_string(electricalAura1) + "\nadd_spacer|small|\nadd_label|small|Wings Material:|left\nadd_spacer|small|\nadd_checkbox|checkbox_material_1st1|      Feathers|" + to_string(feathers1) + "\nadd_checkbox|checkbox_material_2nd1|      Blades|" + to_string(blades1) + "\nadd_checkbox|checkbox_material_3rd1|      Scales|" + to_string(scales1) + "\nadd_spacer|small|\nadd_button|restore_default|Restore to Default|noflags|0|0|\nend_dialog|dialog_rift_wings|Cancel|Update|\nadd_quick_exit|");
		}
	}
	static void EarnFreeGems(ENetPeer* peer) {
		VarList::OnDialogRequest(peer, SetColor(peer) +
			"set_default_color|`o"
			"\nadd_custom_button|topmain|image:interface/large/tianvan/newstop.rttex;image_size:1024,128;width:1.0;frame:0,1;state:disabled|\n"
			"\nadd_custom_label|`bEARN FREE GEMS|target:topmain;top:0.84;left:0.50;size:big|\n"
			"\nadd_custom_button|btn_1|icon:14590;state:disabled;anchor:topmain;top:0.50;left:0.0;display:inline_free;size:small;|\n"
			"\nadd_custom_button|btn_2|icon:14590;state:disabled;anchor:topmain;top:0.50;left:0.93;display:inline_free;size:small;|\n"
			"\nadd_entity_animation|target:btn_1;type:scale2d;multiply:1.2,1.2;duration:600;interpolationType:INTERPOLATE_SMOOTHSTEP;finishType:ON_FINISH_BOUNCE;|\n"
			"\nadd_entity_animation|target:btn_2;type:scale2d;multiply:1.2,1.2;duration:600;interpolationType:INTERPOLATE_SMOOTHSTEP;finishType:ON_FINISH_BOUNCE;|\n"
			"\nadd_custom_break|\n"
			"\nadd_spacer|small|\n"
			"\nadd_custom_textbox|`5'Get Free Gems' is a feature in many games that allows players to earn in-game currency, namely gems, without having to spend real money. Gems are often used to purchase premium items, speed up progress, or gain access to exclusive in-game content.|size:tiny;|\n"
			"\nadd_custom_textbox|`5Players can get free gems in various ways, such as:|size:tiny;|\n"
			"\nadd_custom_textbox|	`5- Completing Missions and Challenges: Many games offer gems as rewards for completing certain missions or daily challenges.|size:tiny;|\n"
			"\nadd_custom_textbox|	`5- Participation in Special Events: Games often hold events or festivals that provide gems as prizes for participating players.|size:tiny;|\n"
			"\nadd_custom_textbox|	`5- Daily Login: Players can receive gems as a bonus just by logging into the game every day.|size:tiny;|\n"
			"\nadd_custom_textbox|	`5- Reaching a Certain Level: Some games give gems as a reward when the player reaches a certain level in the game.|size:tiny;|\n"
			"\nadd_spacer|small|\n"
			"\nadd_smalltext|`$Remaining Time: " + Time::Playmod(pInfo(peer)->EarnFreeGems.Time - time(nullptr)) + "|left|\n"
			"\nadd_spacer|small|\n"
			"\nadd_textbox|`$Daily Activities|left|\n"
			"\nadd_label_with_icon|small|" + (Has_Claimed::EFG(peer, 1) ? "`2" : "`$") + "Login once per day (" + (pInfo(peer)->EarnFreeGems.Quest_1 >= 6 ? "6" : to_string(pInfo(peer)->EarnFreeGems.Quest_1)) + "/6)|left|" + (Has_Claimed::EFG(peer, 1) ? "6292" : "2946") + "|\n"
			"\nadd_custom_textbox|`5        - Earn 50,000 Gemsė.``|size:small|\n" + (not Has_Claimed::EFG(peer, 1) and pInfo(peer)->EarnFreeGems.Quest_1 >= 6 ? "\nadd_small_font_button|claim1|`2CLAIM 50,000 Gemsė|0|0|\n" : "") +
			"\nadd_spacer|small|\n"
			"\nadd_label_with_icon|small|" + (Has_Claimed::EFG(peer, 2) ? "`2" : "`$") + "Play the " + Environment()->server_name + " for 60 minutes (" + (pInfo(peer)->EarnFreeGems.Quest_2 >= 60 ? "60" : to_string(pInfo(peer)->EarnFreeGems.Quest_2)) + "/60)|left|" + (Has_Claimed::EFG(peer, 2) ? "6292" : "2946") + "|\n"
			"\nadd_custom_textbox|`5        - Earn 25,000 Gemsė.``|size:small|\n" + (not Has_Claimed::EFG(peer, 2) and pInfo(peer)->EarnFreeGems.Quest_2 >= 60 ? "\nadd_small_font_button|claim2|`2CLAIM 25,000 Gemsė|0|0|\n" : "") +
			"\nadd_spacer|small|\n"
			"\nadd_label_with_icon|small|" + (Has_Claimed::EFG(peer, 3) ? "`2" : "`$") + "Let's build a friendship (" + (pInfo(peer)->EarnFreeGems.Quest_3 >= 10 ? "10" : to_string(pInfo(peer)->EarnFreeGems.Quest_3)) + "/10)|left|" + (Has_Claimed::EFG(peer, 3) ? "6292" : "2946") + "|\n"
			"\nadd_custom_textbox|`5        - Earn 25,000 Gemsė.``|size:small|\n" + (not Has_Claimed::EFG(peer, 3) and pInfo(peer)->EarnFreeGems.Quest_3 >= 10 ? "\nadd_small_font_button|claim3|`2CLAIM 25,000 Gemsė|0|0|\n" : "") +
			"\nadd_spacer|small|\n"
			"\nadd_smalltext|`6*NOTE: Daily Activities can only be completed once per week. Any progress on Daily Activities Starglitter Tasks that are not completed before the end of the day will be lost.|left|\n"
			"\nadd_spacer|small|\nadd_quick_exit|\nadd_button|back|`wBack|\nend_dialog|EarnFreeGems|||\n"
			"", 500);
	}
	static void Cheats(ENetPeer* peer) {
		VarList::OnDialogRequest(peer, SetColor(peer) + "set_default_color|`o\nadd_label_with_icon|big|`wCheat Options``|left|10400|\nadd_smalltext|To use cheat simply check the checkbox of the cheat you want to enable and press \"OK\".|left|\nadd_spacer|small|\nadd_label_with_icon|small|`wAuto-Farm|left|7064|\nadd_smalltext|Auto Farming cheat will be turned off if you leave the world.|left|\nadd_spacer|small|\nadd_smalltext|`5When enabled select any item from your backpack that you want to farm, place it somewhere and autofarming begins until you ran out of blocks.|left|\nadd_smalltext|<CR>This cheat places blocks for you, and farms them for you.|left|" + (pInfo(peer)->cheater_settings & SETTINGS::SETTINGS_0 ? "\nadd_checkbox|check_autofarm|Autofarm" + (pInfo(peer)->last_used_block > 0 && pInfo(peer)->last_used_block < items.size() ? " (`w" + items[pInfo(peer)->last_used_block].ori_name + "``)" : "") + "|" + to_string(pInfo(peer)->cheater_settings & SETTINGS::SETTINGS_0) + "|" : "\nadd_item_picker|itemid|`wChoose autofarm item``|Choose an item to autofarm|") + "\nadd_text_input|autofarm_slot|Slots (1-" + to_string(pInfo(peer)->Slot_Far) + "):|" + to_string(pInfo(peer)->autofarm_slot) + "|2|" + (pInfo(peer)->Slot_Far >= 8 ? "\nadd_smalltext|`4FAR SLOTS IS MAX!|left|" : "\nadd_small_font_button|Buy_Slot_Far|`2Buy Additional Slots|noflags|0|0|") + "\nadd_spacer|small|\nadd_label_with_icon|small|`wReduce Game Lags|left|1432|\nadd_smalltext|`oEnsuring latest graphics drivers and gaming hardware can help improve overall performance.|left|\nadd_checkbox|checkbox_cheat_hide_players|Hide Players|" + to_string(pInfo(peer)->cheater_settings & SETTINGS::SETTINGS_17) + "|\nadd_checkbox|checkbox_cheat_hide_particle|Hide Particle Effect|" + to_string(pInfo(peer)->cheater_settings & SETTINGS::SETTINGS_14) + "|\nadd_spacer|small|\nadd_label_with_icon|small|`wAutomatically System|left|1432|\nadd_checkbox|checkbox_cheat_autofish|Autofishing|" + to_string(pInfo(peer)->cheater_settings & SETTINGS::SETTINGS_16) + "|\nadd_checkbox|checkbox_cheat_autocollect|Auto Pickup Gems|" + to_string(pInfo(peer)->cheater_settings & SETTINGS::SETTINGS_6) + "|\nadd_checkbox|checkbox_cheat_fastdrop|Auto Drop|" + to_string(pInfo(peer)->cheater_settings & SETTINGS::SETTINGS_5) + "|\nadd_checkbox|checkbox_cheat_fasttrash|Auto Trash|" + to_string(pInfo(peer)->cheater_settings & SETTINGS::SETTINGS_15) + "|\nadd_spacer|small|\nadd_label_with_icon|small|`wAbility|left|1432|\nadd_checkbox|checkbox_cheat_antibounce|Antibounce|" + to_string(pInfo(peer)->cheater_settings & SETTINGS::SETTINGS_3) + "|\nadd_checkbox|checkbox_cheat_speed|Super Speed|" + to_string(pInfo(peer)->cheater_settings & SETTINGS::SETTINGS_4) + "|\nadd_checkbox|checkbox_cheat_double_jump|Double Jump|" + to_string(pInfo(peer)->cheater_settings & SETTINGS::SETTINGS_2) + "|\nadd_checkbox|checkbox_cheat_jump|Super Jump|" + to_string(pInfo(peer)->cheater_settings & SETTINGS::SETTINGS_7) + "|\nadd_checkbox|checkbox_cheat_heat_resist|Heat Resist|" + to_string(pInfo(peer)->cheater_settings & SETTINGS::SETTINGS_8) + "|\nadd_checkbox|checkbox_cheat_strong_punch|Strong Punch|" + to_string(pInfo(peer)->cheater_settings & SETTINGS::SETTINGS_9) + "|\nadd_checkbox|checkbox_cheat_long_punch|Long Punch|" + to_string(pInfo(peer)->cheater_settings & SETTINGS::SETTINGS_10) + "|\nadd_checkbox|checkbox_cheat_long_build|Long Build|" + to_string(pInfo(peer)->cheater_settings & SETTINGS::SETTINGS_11) + "|\nadd_small_font_button|restore_default|`4Restore to Default|noflags|0|0|\nend_dialog|cheats|Cancel|Update|\nadd_quick_exit|");
	}
	static void Acc_Security(ENetPeer* p_, std::string tab = "") {
		if (tab == "" or tab == "my_account") {
			std::string tabs = "set_default_color|`o\nstart_custom_tabs|"
				"\nadd_custom_button|my_account|image:interface/large/gui_button_tabs.rttex;image_size:228,92;frame:1,23;width:0.14;min_width:60;|"
				"\nadd_custom_button|my_password|image:interface/large/gui_button_tabs.rttex;image_size:228,92;frame:0,22;width:0.14;min_width:60;|"
				"\nadd_custom_button|my_email|image:interface/large/gui_button_tabs.rttex;image_size:228,92;frame:0,21;width:0.14;min_width:60;|"
				"\nend_custom_tabs|";
			VarList::OnDialogRequest(p_, tabs + "\nadd_label_with_icon|big|`wMy Account Information``|left|1424|\nadd_spacer|small|\nadd_textbox|`1AAP Info|left|\nadd_smalltext|`$Your account is " + (pInfo(p_)->AccountSecured ? "`2Secure protected" : "not `4Secure protected") + "`$!|left|" + (pInfo(p_)->AccountSecured ? "\nadd_smalltext|`$Security Code: " + to_string(pInfo(p_)->fa2) + "|left|" : "") + "\nadd_button|Security_Acc|" + (pInfo(p_)->AccountSecured ? "`4DISABLE" : "`2ENABLE") + " `$SECURITY ACCOUNT|0|0|\nadd_spacer|small|\nadd_textbox|`1Network Info``|left|\nadd_smalltext|`$Passworld: `2" + pInfo(p_)->tankIDPass + "|\nadd_smalltext|`$Email: `2" + pInfo(p_)->email + "``|left|\nadd_smalltext|`$IP: `2" + pInfo(p_)->ip + "``|left|\nadd_smalltext|`$RID: `2" + pInfo(p_)->rid + "``|left|\nadd_smalltext|`$MAC Address: `2" + pInfo(p_)->mac + "``|left|\nadd_smalltext|`$Device Name: " + pInfo(p_)->device_name + "|left|\nend_dialog|Account_Security|Continue||\n", 500);
		}
		if (tab == "my_email") {
			VarList::OnDialogRequest(p_, SetColor(p_) + "set_default_color|\nadd_label_with_icon|big|`0Account Security: Email``|left|1424|\nadd_spacer|small|\nadd_textbox|`6Information``|left|\nadd_smalltext|Having an up-to-date email address attached to your account is a great step toward improved account security.|left|\nadd_smalltext|Email: `5" + pInfo(p_)->email + "``|left|\nadd_spacer|small|\nadd_smalltext|Type your new `5email address``|left|\nadd_text_input|change|||50|\nadd_spacer|small|\nadd_custom_button|Nevermind|textLabel:`wNevermind;middle_colour:2415764;border_colour:2415764;|\nadd_custom_button|Change_Email|textLabel:`wApply Changes;anchor:_button_Nevermind;left:1;margin:60,0;middle_colour:434431310;border_colour:434438350;|\nend_dialog|Account_Security|||\n");
		}
		if (tab == "my_password") {
			VarList::OnDialogRequest(p_, SetColor(p_) + "set_default_color|\nadd_label_with_icon|big|`0Account Security: Password``|left|1424|\nadd_spacer|small|\nadd_textbox|`6Information``|left|\nadd_smalltext|A hacker may attempt to access your account more than once over a period of time.|left|\nadd_smalltext|Changing your password `2often reduces the risk that they will have frequent access``.|left|\nadd_spacer|small|\nadd_smalltext|Type your new `5password``|left|\nadd_text_input|change|||18|\nadd_spacer|small|\nadd_custom_button|Nevermind|textLabel:`wNevermind;middle_colour:2415764;border_colour:2415764;|\nadd_custom_button|Change_Password|textLabel:`wApply Changes;anchor:_button_Nevermind;left:1;margin:60,0;middle_colour:434431310;border_colour:434438350;|\nend_dialog|Account_Security|||\n");
		}
	}
	static void Deposit(ENetPeer* peer, int timer_ = 0) {
		VarList::OnDialogRequest(peer, SetColor(peer) + "set_default_color|`o\nadd_label_with_icon|big|`wDonation Box``|left|1452|\nadd_textbox|Deposit in world `w" + Environment()->Deposit_World + "``.|left|\nadd_spacer|small|\nadd_checkbox||Diamond Lock (`w<?>``) from `w<?>```#- \"" + pInfo(peer)->tankIDName + "``\"                   |0|useLabel|\nadd_checkbox||World Lock (`w<?>``) from `w<?>```#- \"" + pInfo(peer)->tankIDName + "``\"                   |0|useLabel\nadd_spacer|small|\nadd_button|shop|`4GTPS Premium Shop``|noflags|0|0|\nadd_spacer|small|\nadd_label_with_icon|big|`92X DEPOSIT EVENT``|left|9436|\nadd_textbox|`bTUTORIAL BOT:``|\nadd_smalltext|`w1.`` Enter the deposit world `2" + Environment()->Deposit_World + "``.|left|\nadd_smalltext|`w2.`` Put any wls you want into the donation box and enter text GrowID " + Environment()->server_name + " : " + pInfo(peer)->tankIDName + "``! (we accept: Diamond Locks/World Locks/Platinum Gem Locks).|left|\nadd_smalltext|`w3.`` Done! Log into gtps and type /shop (next time when you deposit you don't need to register/msg again!).|left|\nadd_spacer|small|\nadd_textbox|Deposit in world `w" + Environment()->Deposit_World + "``.|left|\nend_dialog|gazette|Cancel||", timer_);
	}
	static void GrowPass(ENetPeer* peer, std::string tab = "Rewards", std::string n1_2 = "1") {
		struct tm newtime;
		time_t now = time(0);
#ifdef _WIN32
		localtime_s(&newtime, &now);
#elif defined(__linux__)
		localtime_r(&now, &newtime);
#endif
		std::string tb = "", reset = "`2" + to_string(24 - newtime.tm_hour) + " hours" + (60 - newtime.tm_min != 0 ? ", " + to_string(60 - newtime.tm_min) + " mins" : "") + "``";
		if (tab == "Tasks") {
			VarList::OnDialogRequest(peer, SetColor(peer) + "set_default_color|`o\nstart_custom_tabs|\nadd_custom_button|tab_rewards|image:interface/large/btn_passtabs.rttex;image_size:228,92;frame:0,0;width:0.15;min_width:60;|\nadd_custom_button|tab_tasks|image:interface/large/btn_passtabs.rttex;image_size:228,92;frame:1,1;width:0.15;min_width:60;|\nadd_custom_button|tab_perks|image:interface/large/btn_passtabs.rttex;image_size:228,92;frame:0,2;width:0.15;min_width:60;|\nend_custom_tabs|\nadd_label_with_icon|big|Grow Pass Tasks|left|9222|\nadd_spacer|small|\nadd_smalltext|`oAll daily activities will reset in " + reset + "|left|\nadd_label_with_icon|small|`wDaily Bonuses|left|14402|\nadd_spacer|small|" + (pInfo(peer)->gp ? "\nadd_custom_textbox|Daily Bonuses|size:medium|" : "\nadd_custom_textbox|Purchase a Royal Grow Pass or `3raise your Awesomeness Level to 5 ``to unlock daily bonuses.|size:medium|") + "\nadd_spacer|small|\nadd_label_with_icon|small|`8Gem Bonus``: Earn 30 Gems, for 3 bonus Gems|left|2946|" + (pInfo(peer)->gp ? "state:enabled;" : "state:disabled;") + "|\nadd_custom_textbox|`5          10 Grow Pass Points``|size:small;" + (pInfo(peer)->gp ? "state:enabled;" : "state:disabled;") + "|\nadd_label_with_icon|small|`8Fish Bonus``: Double fish for your first catch when Fishing.|left|2946|" + (pInfo(peer)->gp ? "state:enabled;" : "state:disabled;") + "|\nadd_custom_textbox|`5          10 Grow Pass Points``|size:small;" + (pInfo(peer)->gp ? "state:enabled;" : "state:disabled;") + "|\nadd_label_with_icon|small|`8Surgery Bonus``: Double prize for your first Surgery.|left|2946|" + (pInfo(peer)->gp ? "state:enabled;" : "state:disabled;") + "|\nadd_custom_textbox|`5          10 Grow Pass Points``|size:small;" + (pInfo(peer)->gp ? "state:enabled;" : "state:disabled;") + "|\nadd_label_with_icon|small|`8Geiger Bonus``: Double items with your first Geiger Counter use.|left|2946|" + (pInfo(peer)->gp ? "state:enabled;" : "state:disabled;") + "|\nadd_custom_textbox|`5          10 Grow Pass Points``|size:small;" + (pInfo(peer)->gp ? "state:enabled;" : "state:disabled;") + "|\nadd_label_with_icon|small|`8Token Bonus``: Get 1,000xp with your first Growtoken.|left|2946|" + (pInfo(peer)->gp ? "state:enabled;" : "state:disabled;") + "|\nadd_custom_textbox|`5          10 Grow Pass Points``|size:small;" + (pInfo(peer)->gp ? "state:enabled;" : "state:disabled;") + "|\nadd_label_with_icon|small|`8Wolf Bonus``: Double prize for your first Wolfworld.|left|2946|" + (pInfo(peer)->gp ? "state:enabled;" : "state:disabled;") + "|\nadd_custom_textbox|`5          10 Grow Pass Points``|size:small;" + (pInfo(peer)->gp ? "state:enabled;" : "state:disabled;") + "|\nadd_label_with_icon|small|`8Mega Bonus``: Get 2 Growtokens for earning all other Daily Bonuses!|left|2946|" + (pInfo(peer)->gp ? "state:enabled;" : "state:disabled;") + "|\nadd_custom_textbox|`5          40 Grow Pass Points``|size:small;" + (pInfo(peer)->gp ? "state:enabled;" : "state:disabled;") + "|\nadd_spacer|small|\nadd_label_with_icon|small|`wLife Goals|left|3902|\nadd_spacer|small|\nadd_label_with_icon|small|`8Seed Goal:`` " + (not pInfo(peer)->lifegoals1 ? "`4GIVEN UP!" : pInfo(peer)->lifegoals_1 ? "`2COMPLETED!" : "Earn 1,000 XP " + (pInfo(peer)->seed_goal == 1000 ? "`2(OK)``" : "(" + Set_Count(pInfo(peer)->seed_goal) + "/1000)")) + "|left|3|\nadd_custom_textbox|`5          20 Grow Pass Points``|size:small;state:enabled|\nadd_label_with_icon|small|`8Gem Goal: ``" + (not pInfo(peer)->lifegoals2 ? "`4GIVEN UP!" : pInfo(peer)->lifegoals_2 ? "`2COMPLETED!" : "Smash 1000 rarity of blocks " + (pInfo(peer)->gem_goal == 1000 ? "`2(OK)``" : "(" + Set_Count(pInfo(peer)->gem_goal) + "/1000)")) + "|left|112|\nadd_custom_textbox|`5          20 Grow Pass Points``|size:small;state:enabled|\nadd_label_with_icon|small|`8Experience Goal:`` " + (not pInfo(peer)->lifegoals3 ? "`4GIVEN UP!" : pInfo(peer)->lifegoals_3 ? "`2COMPLETED!" : "Harvest 800 rarity from trees " + (pInfo(peer)->exp_goal == 800 ? "`2(OK)``" : "(" + Set_Count(pInfo(peer)->exp_goal) + "/800)")) + "|left|1488|\nadd_custom_textbox|`5          20 Grow Pass Points``|size:small;state:enabled|\nadd_spacer|small|\nadd_button|life_goals|`oLife Goals``|noflags|0|0|\nadd_spacer|small|\nadd_label_with_icon|small|`wDaily Quest|left|3902|\nadd_spacer|small|\nadd_label_with_icon|small|`8" + to_string(Environment()->Dq_Count1) + " " + items[Environment()->Dq_Item1].name + " `oand `8" + to_string(Environment()->Dq_Count2) + " " + items[Environment()->Dq_Item2].name + "``|left|2946|\nadd_custom_textbox|`5          40 Grow Pass Points``|size:small;state:enabled|\nadd_spacer|small|\nadd_button|daily_quests|`oDaily Quest``|noflags|0|0|\nadd_spacer|small|\nadd_label_with_icon|small|`wRole Quests|left|14404|\nadd_custom_textbox|`5          20 Grow Pass Points``|size:small;state:enabled|\nadd_spacer|small|\nadd_button|role_quests|`oRole Quest|noflags|0|0|\nadd_spacer|small|\nadd_quick_exit|\nend_dialog|GrowPass||Close|", 500);
		}
		if (tab == "Rewards") {
			pInfo(peer)->tb_1or2 = n1_2;
			if (n1_2 == "1") tb =
				"\nadd_custom_margin|x:0;y:150|\n"
				"\nadd_textured_progress_bar|interface/large/gui_event_bar.rttex|0|6||" + to_string(pInfo(peer)->growpass_points > 900 ? 900 : pInfo(peer)->growpass_points) + "|900|pre_icon|6|0.05|0|1000|64|0.005|barBG_0|\n"
				"\nadd_custom_margin|x:0;y:150|\n"
				"\nadd_custom_button|" + (Has_Claimed::Gpass(peer, "claim_p2p_150") ? "" : "claim_p2p_150") + "|icon:" + (Has_Claimed::Gpass(peer, "claim_p2p_150") ? "6292" : to_string(Gp_Prize["p2p_150"].first)) + ";state:enabled;" + (pInfo(peer)->growpass_points < 150 ? "color:128,128,128,180;border:grey;" : "color:255,255,255,255;border:blue;") + "preset:listitem;margin_rself:0,-0.5;anchor:barBG_0;top:-1.0;left:0.166667;display:inline_free;|\n"
				"\nadd_custom_label|" + to_string(Gp_Prize["p2p_150"].second) + "|target:claim_p2p_150;top:0.25;left:0.25;size:small|\n"
				"\nadd_custom_label|`5150|target:claim_p2p_150;top:0.62;|\n"

				"\nadd_custom_button|" + (Has_Claimed::Gpass(peer, "claim_p2p_300") ? "" : "claim_p2p_300") + "|icon:" + (Has_Claimed::Gpass(peer, "claim_p2p_300") ? "6292" : to_string(Gp_Prize["p2p_300"].first)) + ";state:enabled;" + (pInfo(peer)->growpass_points < 300 ? "color:128,128,128,180;border:grey;" : "color:255,255,255,255;border:blue;") + "preset:listitem;margin_rself:0,-0.5;anchor:barBG_0;top:-1.0;left:0.333333;display:inline_free;|\n"
				"\nadd_custom_label|" + to_string(Gp_Prize["p2p_300"].second) + "|target:claim_p2p_300;top:0.25;left:0.25;size:small|\n"
				"\nadd_custom_label|`5300|target:claim_p2p_300;top:0.62;|\n"

				"\nadd_custom_button|" + (Has_Claimed::Gpass(peer, "claim_p2p_450") ? "" : "claim_p2p_450") + "|icon:" + (Has_Claimed::Gpass(peer, "claim_p2p_450") ? "6292" : to_string(Gp_Prize["p2p_450"].first)) + ";state:enabled;" + (pInfo(peer)->growpass_points < 450 ? "color:128,128,128,180;border:grey;" : "color:255,255,255,255;border:blue;") + "border:grey;preset:listitem;margin_rself:0,-0.5;anchor:barBG_0;top:-1.0;left:0.5;display:inline_free;|\n"
				"\nadd_custom_label|" + to_string(Gp_Prize["p2p_450"].second) + "|target:claim_p2p_450;top:0.25;left:0.25;size:small|\n"
				"\nadd_custom_label|`5450|target:claim_p2p_450;top:0.62;|\n"

				"\nadd_custom_button|" + (Has_Claimed::Gpass(peer, "claim_p2p_600") ? "" : "claim_p2p_600") + "|icon:" + (Has_Claimed::Gpass(peer, "claim_p2p_600") ? "6292" : to_string(Gp_Prize["p2p_600"].first)) + ";state:enabled;" + (pInfo(peer)->growpass_points < 600 ? "color:128,128,128,180;border:grey;" : "color:255,255,255,255;border:blue;") + "preset:listitem;margin_rself:0,-0.5;anchor:barBG_0;top:-1.0;left:0.666667;display:inline_free;|\n"
				"\nadd_custom_label|" + to_string(Gp_Prize["p2p_600"].second) + "|target:claim_p2p_600;top:0.25;left:0.25;size:small|\n"
				"\nadd_custom_label|`5600|target:claim_p2p_600;top:0.62;|\n"

				"\nadd_custom_button|" + (Has_Claimed::Gpass(peer, "claim_p2p_750") ? "" : "claim_p2p_750") + "|icon:" + (Has_Claimed::Gpass(peer, "claim_p2p_750") ? "6292" : to_string(Gp_Prize["p2p_750"].first)) + ";state:enabled;" + (pInfo(peer)->growpass_points < 750 ? "color:128,128,128,180;border:grey;" : "color:255,255,255,255;border:blue;") + "border:grey;preset:listitem;margin_rself:0,-0.5;anchor:barBG_0;top:-1.0;left:0.833333;display:inline_free;|\n"
				"\nadd_custom_label|" + to_string(Gp_Prize["p2p_750"].second) + "|target:claim_p2p_750;top:0.25;left:0.25;size:small|\n"
				"\nadd_custom_label|`5750|target:claim_p2p_750;top:0.62;|\n"

				"\nadd_custom_button|" + (Has_Claimed::Gpass(peer, "claim_p2p_900") ? "" : "claim_p2p_900") + "|icon:" + (Has_Claimed::Gpass(peer, "claim_p2p_900") ? "6292" : to_string(Gp_Prize["p2p_900"].first)) + ";state:enabled;" + (pInfo(peer)->growpass_points < 900 ? "color:128,128,128,180;border:grey;" : "color:255,255,255,255;border:blue;") + "preset:listitem;margin_rself:0,-0.5;anchor:barBG_0;top:-1.0;left:1;display:inline_free;|\n"
				"\nadd_custom_label|" + to_string(Gp_Prize["p2p_900"].second) + "|target:claim_p2p_900;top:0.25;left:0.25;size:small|\n"
				"\nadd_custom_label|`5900|target:claim_p2p_900;top:0.62;|\n"

				"\nadd_custom_button|" + (Has_Claimed::Gpass(peer, "claim_f2p_150") ? "" : "claim_f2p_150") + "|icon:" + (Has_Claimed::Gpass(peer, "claim_f2p_150") ? "6292" : to_string(Gp_Prize["f2p_150"].first)) + ";state:enabled;color:255,255,255,255;border:blue;preset:listitem;margin_rself:0,0.25;anchor:barBG_0;top:1.0;left:0.166667;display:inline_free;|\n"
				"\nadd_custom_label|" + to_string(Gp_Prize["f2p_150"].second) + "|target:claim_f2p_150;top:0.25;left:0.25;size:small|\n"

				"\nadd_custom_button|" + (Has_Claimed::Gpass(peer, "claim_f2p_300") ? "" : "claim_f2p_300") + "|icon:" + (Has_Claimed::Gpass(peer, "claim_f2p_300") ? "6292" : to_string(Gp_Prize["f2p_300"].first)) + ";state:enabled;color:255,255,255,255;border:blue;preset:listitem;margin_rself:0,0.25;anchor:barBG_0;top:1.0;left:0.333333;display:inline_free;|\n"
				"\nadd_custom_label|" + to_string(Gp_Prize["f2p_300"].second) + "|target:claim_f2p_300;top:0.25;left:0.25;size:small|\n"

				"\nadd_custom_button|" + (Has_Claimed::Gpass(peer, "claim_f2p_600") ? "" : "claim_f2p_600") + "|icon:" + (Has_Claimed::Gpass(peer, "claim_f2p_600") ? "6292" : to_string(Gp_Prize["f2p_600"].first)) + ";state:enabled;color:255,255,255,255;border:blue;preset:listitem;margin_rself:0,0.25;anchor:barBG_0;top:1.0;left:0.666667;display:inline_free;|\n"
				"\nadd_custom_label|" + to_string(Gp_Prize["f2p_600"].second) + "|target:claim_f2p_600;top:0.25;left:0.25;size:small|\n"

				"\nadd_custom_button|" + (Has_Claimed::Gpass(peer, "claim_f2p_900") ? "" : "claim_f2p_900") + "|icon:" + (Has_Claimed::Gpass(peer, "claim_f2p_900") ? "6292" : to_string(Gp_Prize["f2p_900"].first)) + ";state:enabled;color:255,255,255,255;border:blue;preset:listitem;margin_rself:0,0.25;anchor:barBG_0;top:1.0;left:1;display:inline_free;|\n"
				"\nadd_custom_label|" + to_string(Gp_Prize["f2p_900"].second) + "|target:claim_f2p_900;top:0.25;left:0.25;size:small|\n"
				"\nreset_placement_x|\n"
				"\nadd_custom_label|1/4|target:barBG_0;top:3.5;left:0.5;size:medium|\n"
				"\nreset_placement_x|\n"
				"\nadd_spacer|big|\n"
				"\nadd_custom_button|next|image:interface/large/gui_right_arrow_btn.rttex;image_size:64,64;frame:0,0;anchor:barBG_0;top:3;left:0.915;|\n"
				"\nreset_placement_x|\n";
			
			else if (n1_2 == "2") tb =
				"\nadd_custom_margin|x:0;y:150|\n"
				"\nadd_textured_progress_bar|interface/large/gui_event_bar.rttex|0|6||" + to_string(pInfo(peer)->growpass_points > 2100 ? 1200 : pInfo(peer)->growpass_points >= 900 ? pInfo(peer)->growpass_points - 900 : 0)  + "|1200|pre_icon|6|0.05|0|1000|64|0.005|barBG_0|\n"
				"\nadd_custom_margin|x:0;y:150|\n"
				"\nadd_custom_button|" + (Has_Claimed::Gpass(peer, "claim_p2p_1100") ? "" : "claim_p2p_1100") + "|icon:" + (Has_Claimed::Gpass(peer, "claim_p2p_1100") ? "6292" : to_string(Gp_Prize["p2p_1100"].first)) + ";state:enabled;" + (pInfo(peer)->growpass_points < 1100 ? "color:128,128,128,180;border:grey;" : "color:255,255,255,255;border:blue;") + "preset:listitem;margin_rself:0,-0.5;anchor:barBG_0;top:-1.0;left:0.166667;display:inline_free;|\n"
				"\nadd_custom_label|" + to_string(Gp_Prize["p2p_1100"].second) + "|target:claim_p2p_1100;top:0.25;left:0.25;size:small|\n"
				"\nadd_custom_label|`51100|target:claim_p2p_1100;top:0.62;|\n"

				"\nadd_custom_button|" + (Has_Claimed::Gpass(peer, "claim_p2p_1300") ? "" : "claim_p2p_1300") + "|icon:" + (Has_Claimed::Gpass(peer, "claim_p2p_1300") ? "6292" : to_string(Gp_Prize["p2p_1300"].first)) + ";state:enabled;" + (pInfo(peer)->growpass_points < 1300 ? "color:128,128,128,180;border:grey;" : "color:255,255,255,255;border:blue;") + "preset:listitem;margin_rself:0,-0.5;anchor:barBG_0;top:-1.0;left:0.333333;display:inline_free;|\n"
				"\nadd_custom_label|" + to_string(Gp_Prize["p2p_1300"].second) + "|target:claim_p2p_1300;top:0.25;left:0.25;size:small|\n"
				"\nadd_custom_label|`51300|target:claim_p2p_1300;top:0.62;|\n"

				"\nadd_custom_button|" + (Has_Claimed::Gpass(peer, "claim_p2p_1500") ? "" : "claim_p2p_1500") + "|icon:" + (Has_Claimed::Gpass(peer, "claim_p2p_1500") ? "6292" : to_string(Gp_Prize["p2p_1500"].first)) + ";state:enabled;" + (pInfo(peer)->growpass_points < 1500 ? "color:128,128,128,180;border:grey;" : "color:255,255,255,255;border:blue;") + "preset:listitem;margin_rself:0,-0.5;anchor:barBG_0;top:-1.0;left:0.5;display:inline_free;|\n"
				"\nadd_custom_label|" + to_string(Gp_Prize["p2p_1500"].second) + "|target:claim_p2p_1500;top:0.25;left:0.25;size:small|\n"
				"\nadd_custom_label|`51500|target:claim_p2p_1500;top:0.62;|\n"

				"\nadd_custom_button|" + (Has_Claimed::Gpass(peer, "claim_p2p_1700") ? "" : "claim_p2p_1700") + "|icon:" + (Has_Claimed::Gpass(peer, "claim_p2p_1700") ? "6292" : to_string(Gp_Prize["p2p_1700"].first)) + ";state:enabled;" + (pInfo(peer)->growpass_points < 1700 ? "color:128,128,128,180;border:grey;" : "color:255,255,255,255;border:blue;") + "preset:listitem;margin_rself:0,-0.5;anchor:barBG_0;top:-1.0;left:0.666667;display:inline_free;|\n"
				"\nadd_custom_label|" + to_string(Gp_Prize["p2p_1700"].second) + "|target:claim_p2p_1700;top:0.25;left:0.25;size:small|\n"
				"\nadd_custom_label|`51700|target:claim_p2p_1700;top:0.62;|\n"

				"\nadd_custom_button|" + (Has_Claimed::Gpass(peer, "claim_p2p_1900") ? "" : "claim_p2p_1900") + "|icon:" + (Has_Claimed::Gpass(peer, "claim_p2p_1900") ? "6292" : to_string(Gp_Prize["p2p_1900"].first)) + ";state:enabled;" + (pInfo(peer)->growpass_points < 1900 ? "color:128,128,128,180;border:grey;" : "color:255,255,255,255;border:blue;") + "preset:listitem;margin_rself:0,-0.5;anchor:barBG_0;top:-1.0;left:0.833333;display:inline_free;|\n"
				"\nadd_custom_label|" + to_string(Gp_Prize["p2p_1900"].second) + "|target:claim_p2p_1900;top:0.25;left:0.25;size:small|\n"
				"\nadd_custom_label|`51900|target:claim_p2p_1900;top:0.62;|\n"

				"\nadd_custom_button|" + (Has_Claimed::Gpass(peer, "claim_p2p_2100") ? "" : "claim_p2p_2100") + "|icon:" + (Has_Claimed::Gpass(peer, "claim_p2p_2100") ? "6292" : to_string(Gp_Prize["p2p_2100"].first)) + ";state:enabled;" + (pInfo(peer)->growpass_points < 2100 ? "color:128,128,128,180;border:grey;" : "color:255,255,255,255;border:blue;") + "preset:listitem;margin_rself:0,-0.5;anchor:barBG_0;top:-1.0;left:1;display:inline_free;|\n"
				"\nadd_custom_label|" + to_string(Gp_Prize["p2p_2100"].second) + "|target:claim_p2p_2100;top:0.25;left:0.25;size:small|\n"
				"\nadd_custom_label|`52100|target:claim_p2p_2100;top:0.62;|\n"

				"\nadd_custom_button|" + (Has_Claimed::Gpass(peer, "claim_f2p_1300") ? "" : "claim_f2p_1300") + "|icon:" + (Has_Claimed::Gpass(peer, "claim_f2p_1300") ? "6292" : to_string(Gp_Prize["f2p_1300"].first)) + ";state:enabled;color:255,255,255,255;border:blue;preset:listitem;margin_rself:0,0.25;anchor:barBG_0;top:1.0;left:0.333333;display:inline_free;|\n"
				"\nadd_custom_label|" + to_string(Gp_Prize["f2p_1300"].second) + "|target:claim_f2p_1300;top:0.25;left:0.25;size:small|\n"

				"\nadd_custom_button|" + (Has_Claimed::Gpass(peer, "claim_f2p_1700") ? "" : "claim_f2p_1700") + "|icon: " + (Has_Claimed::Gpass(peer, "claim_f2p_1700") ? "6292" : to_string(Gp_Prize["f2p_1700"].first)) + ";state:enabled;color:255,255,255,255;border:blue;preset:listitem;margin_rself:0,0.25;anchor:barBG_0;top:1.0;left:0.666667;display:inline_free;|\n"
				"\nadd_custom_label|" + to_string(Gp_Prize["f2p_1700"].second) + "|target:claim_f2p_1700;top:0.25;left:0.25;size:small|\n"

				"\nadd_custom_button|" + (Has_Claimed::Gpass(peer, "claim_f2p_2100") ? "" : "claim_f2p_2100") + "|icon: " + (Has_Claimed::Gpass(peer, "claim_f2p_2100") ? "6292" : to_string(Gp_Prize["f2p_2100"].first)) + ";state:enabled;color:255,255,255,255;border:blue;preset:listitem;margin_rself:0,0.25;anchor:barBG_0;top:1.0;left:1;display:inline_free;|\n"
				"\nadd_custom_label|" + to_string(Gp_Prize["f2p_2100"].second) + "|target:claim_f2p_2100;top:0.25;left:0.25;size:small|\n"
				"\nreset_placement_x|\n"
				"\nadd_custom_button|previous|image:interface/large/gui_left_arrow_btn.rttex;image_size:64,64;frame:0,0;anchor:barBG_0;top:3;left:0;|\n"
				"\nadd_custom_label|2/4|target:barBG_0;top:3.5;left:0.5;size:medium|\n"
				"\nreset_placement_x|\n"
				"\nadd_spacer|big|\n"
				"\nadd_custom_button|next|image:interface/large/gui_right_arrow_btn.rttex;image_size:64,64;frame:0,0;anchor:barBG_0;top:3;left:0.915;|\n"
				"\nreset_placement_x|\n";

			else if (n1_2 == "3") tb =
				"\nadd_custom_margin|x:0;y:150|\n"
				"\nadd_textured_progress_bar|interface/large/gui_event_bar.rttex|0|6||" + to_string(pInfo(peer)->growpass_points > 3600 ? 1500 : pInfo(peer)->growpass_points >= 2100 ? pInfo(peer)->growpass_points - 2100 : 0) + "|1500|pre_icon|6|0.05|0|1000|64|0.005|barBG_0|\n"
				"\nadd_custom_margin|x:0;y:150|\n"

				"\nadd_custom_button|" + (Has_Claimed::Gpass(peer, "claim_p2p_2350") ? "" : "claim_p2p_2350") + "|icon:" + (Has_Claimed::Gpass(peer, "claim_p2p_2350") ? "6292" : to_string(Gp_Prize["p2p_2350"].first)) + ";state:enabled;" + (pInfo(peer)->growpass_points < 2350 ? "color:128,128,128,180;border:grey;" : "color:255,255,255,255;border:blue;") + "preset:listitem;margin_rself:0,-0.5;anchor:barBG_0;top:-1.0;left:0.166667;display:inline_free;|\n"
				"\nadd_custom_label|" + to_string(Gp_Prize["p2p_2350"].second) + "|target:claim_p2p_2350;top:0.25;left:0.25;size:small|\n"
				"\nadd_custom_label|`52350|target:claim_p2p_2350;top:0.62;|\n"

				"\nadd_custom_button|" + (Has_Claimed::Gpass(peer, "claim_p2p_2600") ? "" : "claim_p2p_2600") + "|icon:" + (Has_Claimed::Gpass(peer, "claim_p2p_2600") ? "6292" : to_string(Gp_Prize["p2p_2600"].first)) + ";state:enabled;" + (pInfo(peer)->growpass_points < 2600 ? "color:128,128,128,180;border:grey;" : "color:255,255,255,255;border:blue;") + "preset:listitem;margin_rself:0,-0.5;anchor:barBG_0;top:-1.0;left:0.333333;display:inline_free;|\n"
				"\nadd_custom_label|" + to_string(Gp_Prize["p2p_2600"].second) + "|target:claim_p2p_2600;top:0.25;left:0.25;size:small|\n"
				"\nadd_custom_label|`52600|target:claim_p2p_2600;top:0.62;|\n"

				"\nadd_custom_button|" + (Has_Claimed::Gpass(peer, "claim_p2p_2850") ? "" : "claim_p2p_2850") + "|icon:" + (Has_Claimed::Gpass(peer, "claim_p2p_2850") ? "6292" : to_string(Gp_Prize["p2p_2850"].first)) + ";state:enabled;" + (pInfo(peer)->growpass_points < 2850 ? "color:128,128,128,180;border:grey;" : "color:255,255,255,255;border:blue;") + "preset:listitem;margin_rself:0,-0.5;anchor:barBG_0;top:-1.0;left:0.5;display:inline_free;|\n"
				"\nadd_custom_label|" + to_string(Gp_Prize["p2p_2850"].second) + "|target:claim_p2p_2850;top:0.25;left:0.25;size:small|\n"
				"\nadd_custom_label|`52850|target:claim_p2p_2850;top:0.62;|\n"

				"\nadd_custom_button|" + (Has_Claimed::Gpass(peer, "claim_p2p_3100") ? "" : "claim_p2p_3100") + "|icon:" + (Has_Claimed::Gpass(peer, "claim_p2p_3100") ? "6292" : to_string(Gp_Prize["p2p_3100"].first)) + ";state:enabled;" + (pInfo(peer)->growpass_points < 3100 ? "color:128,128,128,180;border:grey;" : "color:255,255,255,255;border:blue;") + "preset:listitem;margin_rself:0,-0.5;anchor:barBG_0;top:-1.0;left:0.666667;display:inline_free;|\n"
				"\nadd_custom_label|" + to_string(Gp_Prize["p2p_3100"].second) + "|target:claim_p2p_3100;top:0.25;left:0.25;size:small|\n"
				"\nadd_custom_label|`53100|target:claim_p2p_3100;top:0.62;|\n"

				"\nadd_custom_button|" + (Has_Claimed::Gpass(peer, "claim_p2p_3350") ? "" : "claim_p2p_3350") + "|icon:" + (Has_Claimed::Gpass(peer, "claim_p2p_3350") ? "6292" : to_string(Gp_Prize["p2p_3350"].first)) + ";state:enabled;" + (pInfo(peer)->growpass_points < 3350 ? "color:128,128,128,180;border:grey;" : "color:255,255,255,255;border:blue;") + "preset:listitem;margin_rself:0,-0.5;anchor:barBG_0;top:-1.0;left:0.833333;display:inline_free;|\n"
				"\nadd_custom_label|" + to_string(Gp_Prize["p2p_3350"].second) + "|target:claim_p2p_3350;top:0.25;left:0.25;size:small|\n"
				"\nadd_custom_label|`53350|target:claim_p2p_3350;top:0.62;|\n"

				"\nadd_custom_button|" + (Has_Claimed::Gpass(peer, "claim_p2p_3600") ? "" : "claim_p2p_3600") + "|icon:" + (Has_Claimed::Gpass(peer, "claim_p2p_3600") ? "6292" : to_string(Gp_Prize["p2p_3600"].first)) + ";state:enabled;" + (pInfo(peer)->growpass_points < 3600 ? "color:128,128,128,180;border:grey;" : "color:255,255,255,255;border:blue;") + "preset:listitem;margin_rself:0,-0.5;anchor:barBG_0;top:-1.0;left:1;display:inline_free;|\n"
				"\nadd_custom_label|" + to_string(Gp_Prize["p2p_3600"].second) + "|target:claim_p2p_3600;top:0.25;left:0.25;size:small|\n"
				"\nadd_custom_label|`53600|target:claim_p2p_3600;top:0.62;|\n"

				"\nadd_custom_button|" + (Has_Claimed::Gpass(peer, "claim_f2p_2600") ? "" : "claim_f2p_2600") + "|icon:" + (Has_Claimed::Gpass(peer, "claim_f2p_2600") ? "6292" : to_string(Gp_Prize["f2p_2600"].first)) + ";state:enabled;color:255,255,255,255;border:blue;preset:listitem;margin_rself:0,0.25;anchor:barBG_0;top:1.0;left:0.333333;display:inline_free;|\n"
				"\nadd_custom_label|" + to_string(Gp_Prize["f2p_2600"].second) + "|target:claim_f2p_2600;top:0.25;left:0.25;size:small|\n"

				"\nadd_custom_button|" + (Has_Claimed::Gpass(peer, "claim_f2p_3100") ? "" : "claim_f2p_3100") + "|icon:" + (Has_Claimed::Gpass(peer, "claim_f2p_3100") ? "6292" : to_string(Gp_Prize["f2p_3100"].first)) + ";state:enabled;color:255,255,255,255;border:blue;preset:listitem;margin_rself:0,0.25;anchor:barBG_0;top:1.0;left:0.666667;display:inline_free;|\n"
				"\nadd_custom_label|" + to_string(Gp_Prize["f2p_3100"].second) + "|target:claim_f2p_3100;top:0.25;left:0.25;size:small|\n"

				"\nadd_custom_button|" + (Has_Claimed::Gpass(peer, "claim_f2p_3600") ? "" : "claim_f2p_3600") + "|icon:" + (Has_Claimed::Gpass(peer, "claim_f2p_3600") ? "6292" : to_string(Gp_Prize["f2p_3600"].first)) + ";state:enabled;color:255,255,255,255;border:blue;preset:listitem;margin_rself:0,0.25;anchor:barBG_0;top:1.0;left:1;display:inline_free;|\n"
				"\nadd_custom_label|" + to_string(Gp_Prize["f2p_3600"].second) + "|target:claim_f2p_3600;top:0.25;left:0.25;size:small|\n"
				"\nreset_placement_x|\n"
				"\nadd_custom_button|previous|image:interface/large/gui_left_arrow_btn.rttex;image_size:64,64;frame:0,0;anchor:barBG_0;top:3;left:0;|\n"
				"\nadd_custom_label|3/4|target:barBG_0;top:3.5;left:0.5;size:medium|\n"
				"\nreset_placement_x|\n"
				"\nadd_spacer|big|\n"
				"\nadd_custom_button|next|image:interface/large/gui_right_arrow_btn.rttex;image_size:64,64;frame:0,0;anchor:barBG_0;top:3;left:0.915;|\n"
				"\nreset_placement_x|\n";

			else if (n1_2 == "4") tb =
				"\nadd_custom_margin|x:0;y:150|\n"
				"\nadd_textured_progress_bar|interface/large/gui_event_bar.rttex|0|6||" + to_string(pInfo(peer)->growpass_points > 5400 ? 1800 : pInfo(peer)->growpass_points >= 3600 ? pInfo(peer)->growpass_points - 3600 : 0) + "|1800|pre_icon|6|0.05|0|1000|64|0.005|barBG_0|\n"
				"\nadd_custom_margin|x:0;y:150|\n"

				"\nadd_custom_button|" + (Has_Claimed::Gpass(peer, "claim_p2p_3900") ? "" : "claim_p2p_3900") + "|icon:" + (Has_Claimed::Gpass(peer, "claim_p2p_3900") ? "6292" : to_string(Gp_Prize["p2p_3900"].first)) + ";state:enabled;" + (pInfo(peer)->growpass_points < 3900 ? "color:128,128,128,180;border:grey;" : "color:255,255,255,255;border:blue;") + "preset:listitem;margin_rself:0,-0.5;anchor:barBG_0;top:-1.0;left:0.166667;display:inline_free;|\n"
				"\nadd_custom_label|" + to_string(Gp_Prize["p2p_3900"].second) + "|target:claim_p2p_3900;top:0.25;left:0.25;size:small|\n"
				"\nadd_custom_label|`53900|target:claim_p2p_3900;top:0.62;|\n"

				"\nadd_custom_button|" + (Has_Claimed::Gpass(peer, "claim_p2p_4200") ? "" : "claim_p2p_4200") + "|icon:" + (Has_Claimed::Gpass(peer, "claim_p2p_4200") ? "6292" : to_string(Gp_Prize["p2p_4200"].first)) + ";state:enabled;" + (pInfo(peer)->growpass_points < 4200 ? "color:128,128,128,180;border:grey;" : "color:255,255,255,255;border:blue;") + "preset:listitem;margin_rself:0,-0.5;anchor:barBG_0;top:-1.0;left:0.333333;display:inline_free;|\n"
				"\nadd_custom_label|" + to_string(Gp_Prize["p2p_4200"].second) + "|target:claim_p2p_4200;top:0.25;left:0.25;size:small|\n"
				"\nadd_custom_label|`54200|target:claim_p2p_4200;top:0.62;|\n"

				"\nadd_custom_button|" + (Has_Claimed::Gpass(peer, "claim_p2p_4500") ? "" : "claim_p2p_4500") + "|icon:" + (Has_Claimed::Gpass(peer, "claim_p2p_4500") ? "6292" : to_string(Gp_Prize["p2p_4500"].first)) + ";state:enabled;" + (pInfo(peer)->growpass_points < 4500 ? "color:128,128,128,180;border:grey;" : "color:255,255,255,255;border:blue;") + "preset:listitem;margin_rself:0,-0.5;anchor:barBG_0;top:-1.0;left:0.5;display:inline_free;|\n"
				"\nadd_custom_label|" + to_string(Gp_Prize["p2p_4500"].second) + "|target:claim_p2p_4500;top:0.25;left:0.25;size:small|\n"
				"\nadd_custom_label|`54500|target:claim_p2p_4500;top:0.62;|\n"

				"\nadd_custom_button|" + (Has_Claimed::Gpass(peer, "claim_p2p_4800") ? "" : "claim_p2p_4800") + "|icon:" + (Has_Claimed::Gpass(peer, "claim_p2p_4800") ? "6292" : to_string(Gp_Prize["p2p_4800"].first)) + ";state:enabled;" + (pInfo(peer)->growpass_points < 4800 ? "color:128,128,128,180;border:grey;" : "color:255,255,255,255;border:blue;") + "preset:listitem;margin_rself:0,-0.5;anchor:barBG_0;top:-1.0;left:0.666667;display:inline_free;|\n"
				"\nadd_custom_label|" + to_string(Gp_Prize["p2p_4800"].second) + "|target:claim_p2p_4800;top:0.25;left:0.25;size:small|\n"
				"\nadd_custom_label|`54800|target:claim_p2p_4800;top:0.62;|\n"

				"\nadd_custom_button|" + (Has_Claimed::Gpass(peer, "claim_p2p_5100") ? "" : "claim_p2p_5100") + "|icon:" + (Has_Claimed::Gpass(peer, "claim_p2p_5100") ? "6292" : to_string(Gp_Prize["p2p_5100"].first)) + ";state:enabled;" + (pInfo(peer)->growpass_points < 5100 ? "color:128,128,128,180;border:grey;" : "color:255,255,255,255;border:blue;") + "preset:listitem;margin_rself:0,-0.5;anchor:barBG_0;top:-1.0;left:0.833333;display:inline_free;|\n"
				"\nadd_custom_label|" + to_string(Gp_Prize["p2p_5100"].second) + "|target:claim_p2p_5100;top:0.25;left:0.25;size:small|\n"
				"\nadd_custom_label|`55100|target:claim_p2p_5100;top:0.62;|\n"

				"\nadd_custom_button|" + (Has_Claimed::Gpass(peer, "claim_p2p_5400") ? "" : "claim_p2p_5400") + "|icon:" + (Has_Claimed::Gpass(peer, "claim_p2p_5400") ? "6292" : to_string(Gp_Prize["p2p_5400"].first)) + ";state:enabled;" + (pInfo(peer)->growpass_points < 5400 ? "color:128,128,128,180;border:grey;" : "color:255,255,255,255;border:blue;") + "preset:listitem;margin_rself:0,-0.5;anchor:barBG_0;top:-1.0;left:1;display:inline_free;|\n"
				"\nadd_custom_label|" + to_string(Gp_Prize["p2p_5400"].second) + "|target:claim_p2p_5400;top:0.25;left:0.25;size:small|\n"
				"\nadd_custom_label|`55400|target:claim_p2p_5400;top:0.62;|\n"

				"\nadd_custom_button|" + (Has_Claimed::Gpass(peer, "claim_f2p_4200") ? "" : "claim_f2p_4200") + "|icon:" + (Has_Claimed::Gpass(peer, "claim_f2p_4200") ? "6292" : to_string(Gp_Prize["f2p_4200"].first)) + ";state:enabled;color:255,255,255,255;border:blue;preset:listitem;margin_rself:0,0.25;anchor:barBG_0;top:1.0;left:0.333333;display:inline_free;|\n"
				"\nadd_custom_label|" + to_string(Gp_Prize["f2p_4200"].second) + "|target:claim_f2p_4200;top:0.25;left:0.25;size:small|\n"

				"\nadd_custom_button|" + (Has_Claimed::Gpass(peer, "claim_f2p_4800") ? "" : "claim_f2p_4800") + "|icon:" + (Has_Claimed::Gpass(peer, "claim_f2p_4800") ? "6292" : to_string(Gp_Prize["f2p_4800"].first)) + ";state:enabled;color:255,255,255,255;border:blue;preset:listitem;margin_rself:0,0.25;anchor:barBG_0;top:1.0;left:0.666667;display:inline_free;|\n"
				"\nadd_custom_label|" + to_string(Gp_Prize["f2p_4800"].second) + "|target:claim_f2p_4800;top:0.25;left:0.25;size:small|\n"

				"\nadd_custom_button|" + (Has_Claimed::Gpass(peer, "claim_f2p_5400") ? "" : "claim_f2p_5400") + "|icon:" + (Has_Claimed::Gpass(peer, "claim_f2p_5400") ? "6292" : to_string(Gp_Prize["f2p_5400"].first)) + ";state:enabled;color:255,255,255,255;border:blue;preset:listitem;margin_rself:0,0.25;anchor:barBG_0;top:1.0;left:1;display:inline_free;|\n"
				"\nadd_custom_label|" + to_string(Gp_Prize["f2p_5400"].second) + "|target:claim_f2p_5400;top:0.25;left:0.25;size:small|\n"
				"\nreset_placement_x|\n"
				"\nadd_custom_button|previous|image:interface/large/gui_left_arrow_btn.rttex;image_size:64,64;frame:0,0;anchor:barBG_0;top:3;left:0;|\n"
				"\nadd_custom_label|4/4|target:barBG_0;top:3.5;left:0.5;size:medium|\n"
				"\nreset_placement_x|\nadd_spacer|big|\n";

			VarList::OnDialogRequest(peer, SetColor(peer) + "set_default_color|`o\nstart_custom_tabs|\nadd_custom_button||image:interface/large/btn_passtabs.rttex;image_size:228,92;frame:1,0;width:0.15;min_width:60;|\nadd_custom_button|tab_tasks|image:interface/large/btn_passtabs.rttex;image_size:228,92;frame:0,1;width:0.15;min_width:60;|\nadd_custom_button|tab_perks|image:interface/large/btn_passtabs.rttex;image_size:228,92;frame:0,2;width:0.15;min_width:60;|\nend_custom_tabs|\nadd_image_button||interface/large/" + a + (pInfo(peer)->gp ? "gui_shop_grow_pass.rttex" : "gui_shop_grow_pass_buy.rttex") + "|bannerlayout|||\nadd_spacer|small|\nadd_custom_textbox|`oGrow Pass Points: " + to_string((pInfo(peer)->growpass_points > 5400 ? 5400 : pInfo(peer)->growpass_points)) + "/5400``|size:medium|\nadd_spacer|small|" + tb + "\nadd_label_with_icon|big|`oRoyal Grow Pass Perks|left|9222|\nadd_spacer|small|\nadd_custom_textbox|`wExclusive buffs that are available for the entire month for all Royal Grow Pass members.``|size:medium|\nadd_spacer|small|\nadd_image_button|Purchase_GrowPass|interface/large/gui_growpass_perks_regular.rttex|bannerlayout|||\nadd_spacer|small|"
				"\nadd_custom_textbox|" + (pInfo(peer)->gp ? "`2" : "`s") + "  - Double Grow Pass Points for all Grow Pass Activities``|size:medium|\nadd_custom_textbox|" + (pInfo(peer)->gp ? "`2" : "`s") + "  - Unlock all daily bonuses``|size:medium|\nadd_custom_textbox|" + (pInfo(peer)->gp ? "`2" : "`s") + "  - Claim 5,500 gems every day``|size:medium|\nadd_custom_textbox|" + (pInfo(peer)->gp ? "`2" : "`s") + "  - A Growth Time reduction on all seeds planted``|size:medium|\nadd_custom_textbox|" + (pInfo(peer)->gp ? "`2" : "`s") + "  - A Chance for Bonus XP``|size:medium|\nadd_custom_textbox|" + (pInfo(peer)->gp ? "`2" : "`s") + "  - Exclusive skin colours``|size:medium|\nadd_custom_textbox|" + (pInfo(peer)->gp ? "`2" : "`s") + "  - Go in the draw to pick the \"sub item\" for next month's Royal Grow Pass.``|size:medium|\nadd_spacer|small|\nadd_spacer|small|\nadd_quick_exit|\nend_dialog|GrowPass||Close|", 500);
		}
		if (tab == "Perks") {
			EventPool::Load::RoyalPass_Leaderboard(); string rank = "0", points = "0";
			std::vector<std::pair<long long int, std::string>>::iterator pa = find_if(top_royalpass.begin(), top_royalpass.end(), [&](const pair < long long int, string>& element) { return element.second == pInfo(peer)->tankIDName; });
			if (pa != top_royalpass.end()) {
				if (top_royalpass[pa - top_royalpass.begin()].first > 0) rank = "" + to_string(distance(top_royalpass.begin(), pa) + 1), points = "" + Set_Count(top_royalpass[pa - top_royalpass.begin()].first);
			}
			VarList::OnDialogRequest(peer, SetColor(peer) + "set_default_color|`o\ndisable_resize|\nstart_custom_tabs|\nadd_custom_button|tab_rewards|image:interface/large/btn_passtabs.rttex;image_size:228,92;frame:0,0;width:0.15;min_width:60;|\nadd_custom_button|tab_tasks|image:interface/large/btn_passtabs.rttex;image_size:228,92;frame:0,1;width:0.15;min_width:60;|\nadd_custom_button|tab_perks|image:interface/large/btn_passtabs.rttex;image_size:228,92;frame:1,2;width:0.15;min_width:60;|\nend_custom_tabs|\nadd_label_with_icon|big|Royal Grow Pass Leaderboard|left|14406|\nadd_spacer|small|\nadd_textbox|Top 3 players will be `9Grow Royals this month ``and earn an Exclusive Title for the next month.|left|\nadd_smalltext|`5(Score updates every 20 seconds)|left|\nadd_spacer|small|\nadd_textbox|`oYour Rank: " + rank + "|left|\nadd_textbox|`oYour Points: " + points + "|left|\nadd_spacer|small|" + royalpass_list + "\nadd_spacer|small|\nadd_label|small|       |left|\nadd_quick_exit|\nend_dialog|GrowPass|||", 500);
		}
	}
	static void MStarglitter_Quest(ENetPeer* peer, string n1_2 = "1") {
		int second_part = 0; std::string tb = "";
		second_part = (pInfo(peer)->starglitter_points > 2100 ? 2100 : pInfo(peer)->starglitter_points) - 900;
		if (second_part < 0) second_part = 0;
		if (n1_2 == "1") tb = "\nadd_textured_progress_bar|interface/large/gui_event_bar.rttex|0|8|`5Points: " + (pInfo(peer)->starglitter_points >= 900 ? "900" : to_string(pInfo(peer)->starglitter_points)) + "/900|" + to_string(pInfo(peer)->starglitter_points > 900 ? 900 : pInfo(peer)->starglitter_points) + "|900|pre_icon|6|0.05|0|1000|64|0.005|barBG_0|\nadd_custom_margin|x:0;y:150|\nadd_custom_button|" + (Has_Claimed::StargLitter(peer, "claim_p2p_150") ? "" : "claim_p2p_150") + "|icon:" + (Has_Claimed::StargLitter(peer, "claim_p2p_150") ? "6292" : "14552") + ";state:enabled;color:" + (pInfo(peer)->starglitter_points < 150 ? "128,128,128,180;border:grey;" : "255,255,255,255;border:blue;") + "preset:listitem;margin_rself:0,-0.5;anchor:barBG_0;top:-1.0;left:0.166667;display:inline_free;|\nadd_custom_label|20|target:claim_p2p_150;top:0.25;left:0.25;size:small|\nadd_custom_label|`5150|target:claim_p2p_150;top:0.62;|\nadd_custom_button|" + (Has_Claimed::StargLitter(peer, "claim_p2p_300") ? "" : "claim_p2p_300") + "|icon:" + (Has_Claimed::StargLitter(peer, "claim_p2p_300") ? "6292" : "14552") + ";state:enabled;color:" + (pInfo(peer)->starglitter_points < 300 ? "128,128,128,180;border:grey;" : "255,255,255,255;border:blue;") + "preset:listitem;margin_rself:0,-0.5;anchor:barBG_0;top:-1.0;left:0.333333;display:inline_free;|\nadd_custom_label|30|target:claim_p2p_300;top:0.25;left:0.25;size:small|\nadd_custom_label|`5300|target:claim_p2p_300;top:0.62;|\nadd_custom_button|" + (Has_Claimed::StargLitter(peer, "claim_p2p_450") ? "" : "claim_p2p_450") + "|icon:" + (Has_Claimed::StargLitter(peer, "claim_p2p_450") ? "6292" : "14552") + ";state:enabled;color:" + (pInfo(peer)->starglitter_points < 450 ? "128,128,128,180;border:grey;" : "255,255,255,255;border:blue;") + "preset:listitem;margin_rself:0,-0.5;anchor:barBG_0;top:-1.0;left:0.5;display:inline_free;|\nadd_custom_label|40|target:claim_p2p_450;top:0.25;left:0.25;size:small|\nadd_custom_label|`5450|target:claim_p2p_450;top:0.62;|\nadd_custom_button|" + (Has_Claimed::StargLitter(peer, "claim_p2p_600") ? "" : "claim_p2p_600") + "|icon:" + (Has_Claimed::StargLitter(peer, "claim_p2p_600") ? "6292" : "14552") + ";state:enabled;color:" + (pInfo(peer)->starglitter_points < 600 ? "128,128,128,180;border:grey;" : "255,255,255,255;border:blue;") + "preset:listitem;margin_rself:0,-0.5;anchor:barBG_0;top:-1.0;left:0.666667;display:inline_free;|\nadd_custom_label|50|target:claim_p2p_600;top:0.25;left:0.25;size:small|\nadd_custom_label|`5600|target:claim_p2p_600;top:0.62;|\nadd_custom_button|" + (Has_Claimed::StargLitter(peer, "claim_p2p_750") ? "" : "claim_p2p_750") + "|icon:" + (Has_Claimed::StargLitter(peer, "claim_p2p_750") ? "6292" : "14552") + ";state:enabled;color:" + (pInfo(peer)->starglitter_points < 750 ? "128,128,128,180;border:grey;" : "255,255,255,255;border:blue;") + "preset:listitem;margin_rself:0,-0.5;anchor:barBG_0;top:-1.0;left:0.833333;display:inline_free;|\nadd_custom_label|60|target:claim_p2p_750;top:0.25;left:0.25;size:small|\nadd_custom_label|`5750|target:claim_p2p_750;top:0.62;|\nadd_custom_button|" + (Has_Claimed::StargLitter(peer, "claim_p2p_900") ? "" : "claim_p2p_900") + "|icon:" + (Has_Claimed::StargLitter(peer, "claim_p2p_900") ? "6292" : "14552") + ";state:enabled;color:" + (pInfo(peer)->starglitter_points < 900 ? "128,128,128,180;border:grey;" : "255,255,255,255;border:blue;") + "preset:listitem;margin_rself:0,-0.5;anchor:barBG_0;top:-1.0;left:1;display:inline_free;|\nadd_custom_label|70|target:claim_p2p_900;top:0.25;left:0.25;size:small|\nadd_custom_label|`5900|target:claim_p2p_900;top:0.62;|\nadd_custom_button|" + (Has_Claimed::StargLitter(peer, "claim_f2p_300") ? "" : "claim_f2p_300") + "|icon:" + (Has_Claimed::StargLitter(peer, "claim_f2p_300") ? "6292" : "10382") + ";state:enabled;color:" + (pInfo(peer)->starglitter_points < 300 ? "128,128,128,180;border:grey;" : "255,255,255,255;border:blue;") + "preset:listitem;margin_rself:0,0.25;anchor:barBG_0;top:1.0;left:0.333333;display:inline_free;|\nadd_custom_label|2|target:claim_f2p_300;top:0.25;left:0.25;size:small|\nadd_custom_button|" + (Has_Claimed::StargLitter(peer, "claim_f2p_600") ? "" : "claim_f2p_600") + "|icon:" + (Has_Claimed::StargLitter(peer, "claim_f2p_600") ? "6292" : "10382") + ";state:enabled;color:" + (pInfo(peer)->starglitter_points < 600 ? "128,128,128,180;border:grey;" : "255,255,255,255;border:blue;") + "preset:listitem;margin_rself:0,0.25;anchor:barBG_0;top:1.0;left:0.666667;display:inline_free;|\nadd_custom_label|3|target:claim_f2p_600;top:0.25;left:0.25;size:small|\nadd_custom_button|" + (Has_Claimed::StargLitter(peer, "claim_f2p_900") ? "" : "claim_f2p_900") + "|icon:" + (Has_Claimed::StargLitter(peer, "claim_f2p_900") ? "6292" : "10382") + ";state:enabled;color:" + (pInfo(peer)->starglitter_points < 900 ? "128,128,128,180;border:grey;" : "255,255,255,255;border:blue;") + "preset:listitem;margin_rself:0,0.25;anchor:barBG_0;top:1.0;left:1;display:inline_free;|\nadd_custom_label|2|target:claim_f2p_900;top:0.25;left:0.25;size:small|\nreset_placement_x|\nadd_custom_label|1/2|target:barBG_0;top:3.5;left:0.5;size:medium|\nreset_placement_x|\nadd_spacer|big|\nadd_custom_button|next|image:interface/large/gui_right_arrow_btn.rttex;image_size:64,64;frame:0,0;anchor:barBG_0;top:3;left:0.915;|\nreset_placement_x|";
		if (n1_2 == "2") tb = "\nadd_textured_progress_bar|interface/large/gui_event_bar.rttex|0|8|`5Points: " + (pInfo(peer)->starglitter_points >= 1200 ? "1200" : to_string(pInfo(peer)->starglitter_points)) + "/1200|" + to_string((second_part > 1200 ? 1200 : second_part)) + "|1200|pre_icon|6|0.05|0|1000|64|0.005|barBG_1|\nadd_custom_margin|x:0;y:150|\nadd_custom_button|" + (Has_Claimed::StargLitter(peer, "claim_p2p_1100") ? "" : "claim_p2p_1100") + "|icon:" + (Has_Claimed::StargLitter(peer, "claim_p2p_1100") ? "6292" : "14552") + ";state:enabled;color:" + (pInfo(peer)->starglitter_points < 1100 ? "128,128,128,180;border:grey;" : "255,255,255,255;border:blue;") + "preset:listitem;margin_rself:0,-0.5;anchor:barBG_1;top:-1.0;left:0.166667;display:inline_free;|\nadd_custom_label|80|target:claim_p2p_1100;top:0.25;left:0.25;size:small|\nadd_custom_label|`51100|target:claim_p2p_1100;top:0.62;|\nadd_custom_button|" + (Has_Claimed::StargLitter(peer, "claim_p2p_1300") ? "" : "claim_p2p_1300") + "|icon:" + (Has_Claimed::StargLitter(peer, "claim_p2p_1300") ? "6292" : "14552") + ";state:enabled;color:" + (pInfo(peer)->starglitter_points < 1300 ? "128,128,128,180;border:grey;" : "255,255,255,255;border:blue;") + "preset:listitem;margin_rself:0,-0.5;anchor:barBG_1;top:-1.0;left:0.333333;display:inline_free;|\nadd_custom_label|90|target:claim_p2p_1300;top:0.25;left:0.25;size:small|\nadd_custom_label|`51300|target:claim_p2p_1300;top:0.62;|\nadd_custom_button|" + (Has_Claimed::StargLitter(peer, "claim_p2p_1500") ? "" : "claim_p2p_1500") + "|icon:" + (Has_Claimed::StargLitter(peer, "claim_p2p_1500") ? "6292" : "14552") + ";state:enabled;color:" + (pInfo(peer)->starglitter_points < 1500 ? "128,128,128,180;border:grey;" : "255,255,255,255;border:blue;") + "preset:listitem;margin_rself:0,-0.5;anchor:barBG_1;top:-1.0;left:0.5;display:inline_free;|\nadd_custom_label|100|target:claim_p2p_1500;top:0.25;left:0.25;size:small|\nadd_custom_label|`51500|target:claim_p2p_1500;top:0.62;|\nadd_custom_button|" + (Has_Claimed::StargLitter(peer, "claim_p2p_1700") ? "" : "claim_p2p_1700") + "|icon:" + (Has_Claimed::StargLitter(peer, "claim_p2p_1700") ? "6292" : "14552") + ";state:enabled;color:" + (pInfo(peer)->starglitter_points < 1700 ? "128,128,128,180;border:grey;" : "255,255,255,255;border:blue;") + "preset:listitem;margin_rself:0,-0.5;anchor:barBG_1;top:-1.0;left:0.666667;display:inline_free;|\nadd_custom_label|110|target:claim_p2p_1700;top:0.25;left:0.25;size:small|\nadd_custom_label|`51700|target:claim_p2p_1700;top:0.62;|\nadd_custom_button|" + (Has_Claimed::StargLitter(peer, "claim_p2p_1900") ? "" : "claim_p2p_1900") + "|icon:" + (Has_Claimed::StargLitter(peer, "claim_p2p_1900") ? "6292" : "14552") + ";state:enabled;color:" + (pInfo(peer)->starglitter_points < 1900 ? "128,128,128,180;border:grey;" : "255,255,255,255;border:blue;") + "preset:listitem;margin_rself:0,-0.5;anchor:barBG_1;top:-1.0;left:0.833333;display:inline_free;|\nadd_custom_label|120|target:claim_p2p_1900;top:0.25;left:0.25;size:small|\nadd_custom_label|`51900|target:claim_p2p_1900;top:0.62;|\nadd_custom_button|" + (Has_Claimed::StargLitter(peer, "claim_p2p_2100") ? "" : "claim_p2p_2100") + "|icon:" + (Has_Claimed::StargLitter(peer, "claim_p2p_2100") ? "14552" : "14552") + ";state:enabled;color:" + (pInfo(peer)->starglitter_points < 2100 ? "128,128,128,180;border:grey;" : "255,255,255,255;border:blue;") + "preset:listitem;margin_rself:0,-0.5;anchor:barBG_1;top:-1.0;left:1;display:inline_free;|\nadd_custom_label|130|target:claim_p2p_2100;top:0.25;left:0.25;size:small|\nadd_custom_label|`52100|target:claim_p2p_2100;top:0.62;|\nadd_custom_button|" + (Has_Claimed::StargLitter(peer, "claim_f2p_1300") ? "" : "claim_f2p_1300") + "|icon:" + (Has_Claimed::StargLitter(peer, "claim_f2p_1300") ? "6292" : "9986") + ";state:enabled;color:" + (pInfo(peer)->starglitter_points < 1300 ? "128,128,128,180;border:grey;" : "255,255,255,255;border:blue;") + "preset:listitem;margin_rself:0,0.25;anchor:barBG_1;top:1.0;left:0.333333;display:inline_free;|\nadd_custom_label|3|target:claim_f2p_1300;top:0.25;left:0.25;size:small|\nadd_custom_button|" + (Has_Claimed::StargLitter(peer, "claim_f2p_1700") ? "" : "claim_f2p_1700") + "|icon:" + (Has_Claimed::StargLitter(peer, "claim_f2p_1700") ? "6292" : "9986") + ";state:enabled;color:" + (pInfo(peer)->starglitter_points < 1700 ? "128,128,128,180;border:grey;" : "255,255,255,255;border:blue;") + "preset:listitem;margin_rself:0,0.25;anchor:barBG_1;top:1.0;left:0.666667;display:inline_free;|\nadd_custom_label|3|target:claim_f2p_1700;top:0.25;left:0.25;size:small|\nadd_custom_button|" + (Has_Claimed::StargLitter(peer, "claim_f2p_2100") ? "" : "claim_f2p_2100") + "|icon:" + (Has_Claimed::StargLitter(peer, "claim_f2p_2100") ? "6292" : "9986") + ";state:enabled;color:" + (pInfo(peer)->starglitter_points < 2100 ? "128,128,128,180;border:grey;" : "255,255,255,255;border:blue;") + "preset:listitem;margin_rself:0,0.25;anchor:barBG_1;top:1.0;left:1;display:inline_free;|\nadd_custom_label|3|target:claim_f2p_2100;top:0.25;left:0.25;size:small|\nreset_placement_x|\nadd_custom_button|previous|image:interface/large/gui_left_arrow_btn.rttex;image_size:64,64;frame:0,0;anchor:barBG_1;top:3;left:0;|\nadd_custom_label|2/2|target:barBG_1;top:3.5;left:0.5;size:medium|\nadd_spacer|big|\nreset_placement_x|";
		pInfo(peer)->tb_1or2 = n1_2;
		VarList::OnDialogRequest(peer, SetColor(peer) + "set_default_color|`o\nadd_image_button||interface/large/starglitter_quest.rttex|bannerlayout|||\nadd_spacer|big|\nadd_spacer|small|" + tb + "\nadd_spacer|small|"
			"\nadd_textbox|`$Daily Activities Starglitter:``|left|" + (pInfo(peer)->starglitter_surgery == -1 ? "" : "\nadd_label_with_icon|small|" + a + (pInfo(peer)->starglitter_surgery >= 5 ? "`2" : "`$") + "Successfully Complete Surgeries (" + to_string(pInfo(peer)->starglitter_surgery) + "/5)|left|" + (pInfo(peer)->starglitter_surgery >= 5 ? "6292" : "2946") + "|\nadd_custom_textbox|`5        - Earn 100 points + (100 points) For Grow Pass Members.``|size:small|") + (pInfo(peer)->starglitter_fish == -1 ? "" : "\nadd_label_with_icon|small|" + a + (pInfo(peer)->starglitter_fish >= 450 ? "`2" : "`$") + "Catch lbs of Fish (" + (pInfo(peer)->starglitter_fish >= 450 ? "450" : to_string(pInfo(peer)->starglitter_fish)) + "/450)|left|" + (pInfo(peer)->starglitter_fish >= 450 ? "6292" : "2946") + "|\nadd_custom_textbox|`5        - Earn 75 points + (75 points) For Grow Pass Members.``|size:small|") + (pInfo(peer)->starglitter_break == -1 ? "" : "\nadd_label_with_icon|small|" + a + (pInfo(peer)->starglitter_break >= 1000 ? "`2" : "`$") + "Break blocks (" + (pInfo(peer)->starglitter_break >= 1000 ? "1000" : to_string(pInfo(peer)->starglitter_break)) + "/1,000)|left|" + (pInfo(peer)->starglitter_break >= 1000 ? "6292" : "2946") + "|\nadd_custom_textbox|`5        - Earn 50 points + (50 points) For Grow Pass Members.``|size:small|") + (pInfo(peer)->starglitter_place == -1 ? "" : "\nadd_label_with_icon|small|" + a + (pInfo(peer)->starglitter_place >= 1000 ? "`2" : "`$") + "Place blocks (" + to_string(pInfo(peer)->starglitter_place) + "/1,000)|left|" + (pInfo(peer)->starglitter_place >= 1000 ? "6292" : "2946") + "|\nadd_custom_textbox|`5        - Earn 50 points + (50 points) For Grow Pass Members.``|size:small|") + (pInfo(peer)->starglitter_trade == -1 ? "" : "\nadd_label_with_icon|small|" + a + (pInfo(peer)->starglitter_trade >= 15 ? "`2" : "`$") + "Trade people (" + to_string(pInfo(peer)->starglitter_trade) + "/15)|left|" + (pInfo(peer)->starglitter_trade >= 15 ? "6292" : "2946") + "|\nadd_custom_textbox|`5        - Earn 15 points + (15 points) For Grow Pass Members.``|size:small|") + (pInfo(peer)->starglitter_sb == -1 ? "" : "\nadd_label_with_icon|small|" + a + (pInfo(peer)->starglitter_sb >= 10 ? "`2" : "`$") + "Broadcast (" + to_string(pInfo(peer)->starglitter_sb) + "/10)|left|" + (pInfo(peer)->starglitter_sb >= 10 ? "6292" : "2946") + "|\nadd_custom_textbox|`5        - Earn 30 points + (30 points) For Grow Pass Members.``|size:small|") + (pInfo(peer)->starglitter_provider == -1 ? "" : "\nadd_label_with_icon|small|" + a + (pInfo(peer)->starglitter_provider >= pInfo(peer)->starglitter_provider2 ? "`2" : "`$") + "Harvest provider (" + to_string(pInfo(peer)->starglitter_provider) + "/" + to_string(pInfo(peer)->starglitter_provider2) + ")|left|" + (pInfo(peer)->starglitter_provider >= pInfo(peer)->starglitter_provider2 ? "6292" : "2946") + "|\nadd_custom_textbox|`5        - Earn 35 points + (45 points) For Grow Pass Members.``|size:small|") + (pInfo(peer)->starglitter_geiger == -1 ? "" : "\nadd_label_with_icon|small|" + a + (pInfo(peer)->starglitter_geiger >= pInfo(peer)->starglitter_geiger2 ? "`2" : "`$") + "Geiger Hunting (" + to_string(pInfo(peer)->starglitter_geiger) + "/" + to_string(pInfo(peer)->starglitter_geiger2) + ")|left|" + (pInfo(peer)->starglitter_geiger >= pInfo(peer)->starglitter_geiger2 ? "6292" : "2946") + "|\nadd_custom_textbox|`5        - Earn 50 points + (100 points) For Grow Pass Members.``|size:small|") + "\nadd_label_with_icon|small|" + (pInfo(peer)->starglitter_enter >= 1 ? "`2" : "`$") + "Login once per day (" + to_string(pInfo(peer)->starglitter_enter) + "/1)|left|" + (pInfo(peer)->starglitter_enter >= 1 ? "6292" : "2946") + "|\nadd_custom_textbox|`5        - Earn 10 points + (15 points) For Grow Pass Members.``|size:small|\nadd_spacer|small|\nadd_smalltext|`6*NOTE: Daily Activities Good Tasks can only be completed once per day. Any progress on Daily Activities Starglitter Tasks that are not completed before the end of the day will be lost.|left|\nadd_spacer|small|\nadd_textbox|`$Remaining Time: " + Time::Playmod(pInfo(peer)->starglitter_reset_day - time(nullptr)) + "|left|\nadd_spacer|small|"
			"\nadd_textbox|`$Weekly Activities Starglitter:``|left|\nadd_label_with_icon|small|" + a + (pInfo(peer)->starglitter_seed2 >= 100 ? "`2" : "`$") + "Plant " + items[pInfo(peer)->starglitter_seed].ori_name + " (" + to_string(pInfo(peer)->starglitter_seed2) + "/100)|left|" + (pInfo(peer)->starglitter_seed2 >= 100 ? "6292" : "2946") + "|\nadd_custom_textbox|`5        - Earn 250 points + (50 points) For Grow Pass Members.``|size:small|\nadd_label_with_icon|small|" + (pInfo(peer)->starglitter_combine >= 6 ? "`2" : "`$") + "Combine Items (" + to_string(pInfo(peer)->starglitter_combine) + "/6)|left|" + (pInfo(peer)->starglitter_combine >= 6 ? "6292" : "2946") + "|\nadd_custom_textbox|`5        - Earn 100 points + (50 points) For Grow Pass Members.``|size:small|\nadd_spacer|small|\nadd_smalltext|`6*NOTE: Weekly Activities Starglitter Tasks can only be completed once per week. Any progress on Weekly Activities Starglitter Tasks that are not completed before the end of the day will be lost.|left|\nadd_spacer|small|\nadd_textbox|`$Remaining Time: " + Time::Playmod(pInfo(peer)->starglitter_reset_week - time(nullptr)) + "|left|\nadd_spacer|small|"
			"\nadd_textbox|`$Monthly Activities Starglitter:``|left|\nadd_label_with_icon|small|" + (pInfo(peer)->starglitter_crystal >= 4 ? "`2" : "`$") + "Harmonize Crystals (" + to_string(pInfo(peer)->starglitter_crystal) + "/4)|left|" + (pInfo(peer)->starglitter_crystal >= 4 ? "6292" : "2946") + "|\nadd_custom_textbox|`5        - Earn 250 points + (50 points) For Grow Pass Members.``|size:small|\nadd_label_with_icon|small|" + (pInfo(peer)->starglitter_email >= 1 ? "`2" : "`$") + "Change Email (" + to_string(pInfo(peer)->starglitter_email) + "/1)|left|" + (pInfo(peer)->starglitter_email >= 1 ? "6292" : "2946") + "|\nadd_custom_textbox|`5        - Earn 250 points + (50 points) For Grow Pass Members.``|size:small|\nadd_spacer|small|\nadd_spacer|small|\nadd_smalltext|`6*NOTE: Monthly Activities Starglitter Tasks can only be completed once per month. Any progress on Daily Activities Starglitter Tasks that are not completed before the end of the day will be lost.|left|\nadd_spacer|small|\nadd_textbox|`$Remaining Time: " + Time::Playmod(pInfo(peer)->starglitter_reset_month - time(nullptr)) + "|left|\nadd_spacer|small|\nadd_quick_exit|\nend_dialog|MasterLess_Quest|Close||", 500);
	}
	static void Daily_Quest_Info(ENetPeer* p_) {
		std::string CQ = "", quest_info = "";
		struct tm newtime;
		time_t now = time(0);
#ifdef _WIN32
		localtime_s(&newtime, &now);
#elif defined(__linux__)
		localtime_r(&now, &newtime);
#endif
		// Carnival Quest
		if (pInfo(p_)->C_QuestKind == 1) quest_info = "of " + fixint(pInfo(p_)->C_ProgressNeeded) + " Delivered";
		else if (pInfo(p_)->C_QuestKind == 2) quest_info = "of " + fixint(pInfo(p_)->C_ProgressNeeded) + " Rarity of fruits plucked";
		else if (pInfo(p_)->C_QuestKind == 3) quest_info = "of " + fixint(pInfo(p_)->C_ProgressNeeded) + " Rarity of trees planted";
		else if (pInfo(p_)->C_QuestKind == 4) quest_info = "of " + fixint(pInfo(p_)->C_ProgressNeeded) + " Blocks destroyed";
		else if (pInfo(p_)->C_QuestKind == 5) quest_info = "of " + fixint(pInfo(p_)->C_ProgressNeeded) + " Rarity of blocks destroyed";
		else if (pInfo(p_)->C_QuestKind == 6) quest_info = "of " + fixint(pInfo(p_)->C_ProgressNeeded) + " XP earned";
		else if (pInfo(p_)->C_QuestKind == 7) quest_info = "of " + fixint(pInfo(p_)->C_ProgressNeeded) + " Gems delivered";
		else if (pInfo(p_)->C_QuestKind == 8) quest_info = "of " + fixint(pInfo(p_)->C_ProgressNeeded) + " World Lock Delivered";
		else if (pInfo(p_)->C_QuestKind == 9) quest_info = "of " + fixint(pInfo(p_)->C_ProgressNeeded) + " Gems delivered";
		else if (pInfo(p_)->C_QuestKind == 10) quest_info = "of " + fixint(pInfo(p_)->C_ProgressNeeded) + " Providers collected";
		else if (pInfo(p_)->C_QuestKind == 11) quest_info = "of " + fixint(pInfo(p_)->C_ProgressNeeded) + " Growtoken earned";
		else if (pInfo(p_)->C_QuestKind == 12) quest_info = "of " + fixint(pInfo(p_)->C_ProgressNeeded) + " Crystal shattered";
		else if (pInfo(p_)->C_QuestKind == 13) quest_info = "of " + fixint(pInfo(p_)->C_ProgressNeeded) + " Radioactive found";
		else if (pInfo(p_)->C_QuestKind == 14) quest_info = "of " + fixint(pInfo(p_)->C_ProgressNeeded) + " lbs fish caught";
		else if (pInfo(p_)->C_QuestKind == 15) quest_info = "of " + fixint(pInfo(p_)->C_ProgressNeeded) + " DNA Spliced";
		if (pInfo(p_)->lwiz_quest != 0) CQ += "\nadd_textbox|`9Legendary Quest``|left|\nadd_label_with_icon|small|`9" + get_quest_item("", pInfo(p_)->lwiz_quest) + " ``(Step " + to_string(pInfo(p_)->lwiz_step) + "/20) - " + Set_Count(pInfo(p_)->legendary_quest[pInfo(p_)->lwiz_step - 1][0]) + " of " + Set_Count(pInfo(p_)->legendary_quest[pInfo(p_)->lwiz_step - 1][1]) + " " + get_quest_name(p_, pInfo(p_)->lwiz_quest, pInfo(p_)->lwiz_step) + "|left|1794|";
		if (pInfo(p_)->C_QuestActive) CQ += "\nadd_textbox|`9Ringmaster Quest``|left|\nadd_label_with_icon|small|`9Quest For The Ring `` (Step " + to_string(pInfo(p_)->C_QuestStep) + "/10) - " + fixint(pInfo(p_)->C_QuestProgress) + " " + quest_info + "|left|1900|";
		VarList::OnDialogRequest(p_, SetColor(p_) + "set_default_color|`o\nadd_label_with_icon|big|" + pInfo(p_)->tankIDName + "'s Goals|left|982|\nadd_spacer|small|\nadd_textbox|`9Life Goals``|left|\nadd_smalltext|`9Awesomeness: " + to_string(pInfo(p_)->awesomeness) + "%``|left|\nadd_label_with_icon|small|`3Seed Goal:`` " + (not pInfo(p_)->lifegoals1 ? "`4GIVEN UP!" : pInfo(p_)->lifegoals_1 ? "`2COMPLETED!" : "Earn 1,000 XP " + (pInfo(p_)->seed_goal == 1000 ? "`2(OK)``" : "(" + Set_Count(pInfo(p_)->seed_goal) + "/1000)")) + "|left|3|\nadd_label_with_icon|small|`3Gem Goal: ``" + (not pInfo(p_)->lifegoals2 ? "`4GIVEN UP!" : pInfo(p_)->lifegoals_2 ? "`2COMPLETED!" : "Smash 1000 rarity of blocks " + (pInfo(p_)->gem_goal == 1000 ? "`2(OK)``" : "(" + Set_Count(pInfo(p_)->gem_goal) + "/1000)")) + "|left|112|\nadd_label_with_icon|small|`3Experience Goal:`` " + (not pInfo(p_)->lifegoals3 ? "`4GIVEN UP!" : pInfo(p_)->lifegoals_3 ? "`2COMPLETED!" : "Harvest 800 rarity from trees " + (pInfo(p_)->exp_goal == 800 ? "`2(OK)``" : "(" + Set_Count(pInfo(p_)->exp_goal) + "/800)")) + "|left|1488|\nadd_custom_textbox|`oCompleted Life Goals will reset in " + Time::Playmod(pInfo(p_)->lifegoals_reset_day - time(nullptr)) + "``|size:small;icon:3804;|\nadd_spacer|small|\nadd_textbox|`9Daily Quest``|left|\nadd_label_with_icon|small|" + (pInfo(p_)->dd == 0 ? "Deliver `2" + to_string(Environment()->Dq_Count1) + " " + items[Environment()->Dq_Item1].name + "`` and `2" + to_string(Environment()->Dq_Count2) + " " + items[Environment()->Dq_Item2].name + "`` to Crazy Jim" : "`2COMPLETE!`` Check again tomorrow.") + "|left|1486|\nadd_custom_textbox|`oDaily Quest will reset every 12 pm|size:small;icon:3804;|\nadd_spacer|small|\nadd_textbox|`9Biweekly Quest|left|\nadd_label_with_icon|small|`2Quest progress|left|5202|\nadd_textbox|`o- Smash 10000 rarity of blocks " + (pInfo(p_)->BiweeklyQ_1 == 10000 ? "`2(OK!)" : "`o(" + to_string(pInfo(p_)->BiweeklyQ_1) + "/10000)") + "|left|\nadd_textbox|`o- Find 20 radioactive items from a Geiger Counter " + (pInfo(p_)->BiweeklyQ_2 == 20 ? "`2(OK!)" : "`o(" + to_string(pInfo(p_)->BiweeklyQ_2) + "/20)") + "|left|\nadd_textbox|`o- Earn 3 Growtokens " + (pInfo(p_)->BiweeklyQ_3 == 3 ? "`2(OK!)" : "`o(" + to_string(pInfo(p_)->BiweeklyQ_3) + "/3)") + "|left|\nadd_custom_textbox|`oBiweekly Soul Quests will reset in " + Time::Playmod(pInfo(p_)->biweekly_reset_day - time(nullptr)) + "|size:small;icon:3804;|\nadd_spacer|small||\nadd_textbox|`9Role Quests|left|\nadd_inner_image_label_button|View_Role| `oView Role Quests|game/amorkolg.rttex|1.6|15|7|32|\nadd_custom_textbox|`oRole Quest will reset in : " + Time::Playmod(pInfo(p_)->rolequest_reset_day - time(nullptr)) + " and any progress on the current quest will be lost.|size:small;icon:3804;|\nadd_spacer|small|\nadd_textbox|`9Masterless Starglitter Quests|left|\nadd_inner_image_label_button|View_Masterless_Starglitter| `oView Masterless Starglitter Quests|game/tianvan_citems.rttex|1.6|7|4|32|\nadd_custom_textbox|`oMasterless Starglitter Quests will reset in : " + Time::Playmod(pInfo(p_)->starglitter_reset_day - time(nullptr)) + "|size:small;icon:3804;|\nadd_spacer|small|" + CQ + "|" + (CQ.empty() ? "" : "\nadd_spacer|small|") + "\nadd_textbox|`9Epic Quests``|left|" + (pInfo(p_)->epicq_stonefish == 0 ? "\nadd_label_with_icon|small|`3Catch a Perfect Stonefish``|left|482|" : "") + (pInfo(p_)->epicq_woolcraft == 0 ? "\nadd_label_with_icon|small|`3Sew a Wool Scarf``|left|482|" : "") + (pInfo(p_)->epicq_octopushead == 0 ? "\nadd_label_with_icon|small|`3Catch a Octopus Head``|left|482|" : "") + (pInfo(p_)->epicq_goldenaxe == 0 ? "\nadd_label_with_icon|small|`3Buy a Golden Pickaxe with Growtokens``|left|482|" : "") + (pInfo(p_)->epicq_ddrag == 0 ? "\nadd_label_with_icon|small|`3Buy a Diamond Dragon from Locke The Traveling Salesman``|left|482|" : "") + (pInfo(p_)->epicq_riding == 0 ? "\nadd_label_with_icon|small|`3Find a Riding Bumblebee or Buy a Riding Raven``|left|482|" : "") + (pInfo(p_)->epicq_emeraldlock == 0 ? "\nadd_label_with_icon|small|`3Lock a world with an Emerald Lock``|left|482|" : "") + (pInfo(p_)->epicq_plant_wiz == 0 ? "\nadd_label_with_icon|small|`3Plant a Wizard's Staff Tree``|left|482|" : "") + (pInfo(p_)->epicq_splice_wm_comet == 0 ? "\nadd_label_with_icon|small|`3Splice a Weather Machine - Comet``|left|482|" : "") + (pInfo(p_)->epicq_lvl100 == 0 ? "\nadd_label_with_icon|small|`3Level up to level 100``|left|482|" : "") + (pInfo(p_)->epicq_teddybear == 0 ? "\nadd_label_with_icon|small|`3Get a Teddy Bear from an Awkward Friendly Unicorn``|left|482|" : "") + (pInfo(p_)->epicq_ghostcharm == 0 ? "\nadd_label_with_icon|small|`3Get a Ghost Charm from a Spirit Storage explosion``|left|482|" : "") + (pInfo(p_)->epicq_compactdress == 0 ? "\nadd_label_with_icon|small|`3Compact a dress into a Mystery Dress``|left|482|" : "") + (pInfo(p_)->epicq_dressup == 0 ? "\nadd_label_with_icon|small|`3Dress up as Locke The Traveling Salesman``|left|482|" : "") + (pInfo(p_)->epic_quest_total != 0 ? "\nadd_textbox|`9Completed Epic Quests:|left|" + a + (pInfo(p_)->epicq_stonefish != 0 ? "\nadd_label_with_icon|small|`9Catch a Perfect Stonefish``|left|3764|" : "") + (pInfo(p_)->epicq_woolcraft != 0 ? "\nadd_label_with_icon|small|`9Sew a Wool Scarf``|left|3764|" : "") + (pInfo(p_)->epicq_octopushead != 0 ? "\nadd_label_with_icon|small|`9Catch a Octopus Head``|left|3764|" : "") + (pInfo(p_)->epicq_goldenaxe != 0 ? "\nadd_label_with_icon|small|`9Buy a Golden Pickaxe with Growtokens``|left|3764|" : "") + (pInfo(p_)->epicq_ddrag != 0 ? "\nadd_label_with_icon|small|`9Buy a Diamond Dragon from Locke The Traveling Salesman``|left|3764|" : "") + (pInfo(p_)->epicq_riding != 0 ? "\nadd_label_with_icon|small|`9Find a Riding Bumblebee or Buy a Riding Raven``|left|3764|" : "") + (pInfo(p_)->epicq_emeraldlock != 0 ? "\nadd_label_with_icon|small|`9Lock a world with an Emerald Lock``|left|3764|" : "") + (pInfo(p_)->epicq_plant_wiz != 0 ? "\nadd_label_with_icon|small|`9Plant a Wizard's Staff Tree``|left|3764|" : "") + (pInfo(p_)->epicq_splice_wm_comet != 0 ? "\nadd_label_with_icon|small|`9Splice a Weather Machine - Comet``|left|3764|" : "") + (pInfo(p_)->epicq_lvl100 != 0 ? "\nadd_label_with_icon|small|`9Level up to level 100``|left|3764|" : "") + (pInfo(p_)->epicq_teddybear != 0 ? "\nadd_label_with_icon|small|`9Get a Teddy Bear from an Awkward Friendly Unicorn``|left|3764|" : "") + (pInfo(p_)->epicq_ghostcharm != 0 ? "\nadd_label_with_icon|small|`9Get a Ghost Charm from a Spirit Storage explosion``|left|3764|" : "") + (pInfo(p_)->epicq_compactdress != 0 ? "\nadd_label_with_icon|small|`9Compact a dress into a Mystery Dress``|left|3764|" : "") + (pInfo(p_)->epicq_dressup != 0 ? "\nadd_label_with_icon|small|`9Dress up as Locke The Traveling Salesman``|left|3764|" : "") + + "" : "") + "\nadd_spacer|small|\nadd_textbox|`9Grow Pass Tasks|left|\nadd_smalltext|`oTime remaining: " + to_string(24 - newtime.tm_hour) + " hours" + (60 - newtime.tm_min != 0 ? ", " + to_string(60 - newtime.tm_min) + " mins" : "") + "``|left|3804|\nadd_smalltext|`oYou have " + Set_Count(pInfo(p_)->growpass_points) + " Points``|left|\nadd_spacer|small|\nadd_custom_textbox|`oPurchase a Royal Grow Pass from the Store to get double Growpass points.|size:small|\nadd_label_with_icon|small|`8Daily Quest``: Complete Crazy Jim Daily Quest|left|3902|state:enabled;|\nadd_custom_textbox|`5          Get 120 Grow Pass Points``|size:small;state:enabled|\nadd_label_with_icon|small|`8Life Goals``: Complete Life Goals|left|982|state:enabled;|\nadd_custom_textbox|`5          Get 20 Grow Pass Points each``|size:small;state:enabled|\nadd_label_with_icon|small|`8Biweekly Quests``: Complete Biweekly Quests|left|5202|state:enabled;|\nadd_custom_textbox|`5          Get 300 Grow Pass Points``|size:small;state:enabled|\nadd_label_with_icon|small|`8Role Quests``: Complete Role Quests|left|6128|state:enabled;|\nadd_custom_textbox|`5          Get 20 Grow Pass Points for each Quest``|size:small;state:enabled|\nadd_spacer|small|\nadd_button|backtow_dialog|Back|0|0|\nend_dialog|Daily_Quest_Info|||\nadd_quick_exit|");
	}
	static void Life_Goals(ENetPeer* peer) {
		VarList::OnDialogRequest(peer, SetColor(peer) + "set_default_color|\nadd_label_with_icon|big|`wCrazy Jim: Life Coach|left|3902|\nadd_smalltext|`oWhat's crazy about wanting to better yourself through positive thinking, affirmation, and putting peanut butter in your ear? NOTHING, that's what!|left|\nadd_smalltext|`oThat's way i'm here to guide you through life, I've been around, and i think it's safe to say i know what's best. You keep an trucking with these Life Goals, and i'll make detailed notes of your accomplishments in my tin foil journal. Each one you complete will raise your `9Awesomeness ``and earn your a prize. The more `9Awesome ``you are, the harder the goals, and the bigger the prizes.|left|\nadd_spacer|small|\nadd_smalltext|`9Awesomeness: " + to_string(pInfo(peer)->awesomeness) + "%|left|\nadd_spacer|small|\nadd_label_with_icon|small|`3Seed Goal:`` " + (not pInfo(peer)->lifegoals1 ? "`4GIVEN UP!" : pInfo(peer)->lifegoals_1 ? "`2COMPLETED!" : "`oEarn 1,000 XP, for 6 random seeds of rarity 12-60 " + (pInfo(peer)->seed_goal == 1000 ? "`2(OK)``" : "`w(" + Set_Count(pInfo(peer)->seed_goal) + "/1000)``")) + "|left|3|" + (pInfo(peer)->lifegoals1 and not pInfo(peer)->lifegoals_1 ? (pInfo(peer)->seed_goal == 1000 ? "\nadd_smalltext|`5  - Earn 20 Grow Pass Points.|left|\ntext_scaling_string|Subscribtions+++|\nadd_button_with_icon|lifegoal_turnin_1|`oTurn in|noflags|2322|\nadd_button_with_icon||END_LIST|noflags|0||" : "\nadd_smalltext|`5  - Earn 20 Grow Pass Points.|left|\ntext_scaling_string|Subscribtions+++|\nadd_button_with_icon|lifegoal_giveup_1|`oGive Up|noflags|2628|\nadd_button_with_icon||END_LIST|noflags|0||") : "") + "\nadd_label_with_icon|small|`3Gem Goal: ``" + (not pInfo(peer)->lifegoals2 ? "`4GIVEN UP!" : pInfo(peer)->lifegoals_2 ? "`2COMPLETED!" : "`oSmash 1000 rarity of blocks, for 1-1000 Gems " + (pInfo(peer)->gem_goal == 1000 ? "`2(OK)``" : "`w(" + Set_Count(pInfo(peer)->gem_goal) + "/1000)``")) + "|left|112|" + (pInfo(peer)->lifegoals2 and not pInfo(peer)->lifegoals_2 ? (pInfo(peer)->gem_goal == 1000 ? "\nadd_smalltext|`5  - Earn 20 Grow Pass Points.|left|\ntext_scaling_string|Subscribtions+++|\nadd_button_with_icon|lifegoal_turnin_2|`oTurn in|noflags|2322|\nadd_button_with_icon||END_LIST|noflags|0||" : "\nadd_smalltext|`5  - Earn 20 Grow Pass Points.|left|\ntext_scaling_string|Subscribtions+++|\nadd_button_with_icon|lifegoal_giveup_2|`oGive Up|noflags|2628|\nadd_button_with_icon||END_LIST|noflags|0||") : "") + "\nadd_label_with_icon|small|`3Experince Goal:`` " + (not pInfo(peer)->lifegoals3 ? "`4GIVEN UP!" : pInfo(peer)->lifegoals_3 ? "`2COMPLETED!" : "`oHarvest 800 rarity from trees, for 1000 XP " + (pInfo(peer)->exp_goal == 800 ? "`2(OK)``" : "`w(" + Set_Count(pInfo(peer)->exp_goal) + "/800)``")) + "|left|1488|" + (pInfo(peer)->lifegoals3 and not pInfo(peer)->lifegoals_3 ? (pInfo(peer)->exp_goal == 800 ? "\nadd_smalltext|`5  - Earn 20 Grow Pass Points.|left|\ntext_scaling_string|Subscribtions+++|\nadd_button_with_icon|lifegoal_turnin_3|`oTurn in|noflags|2322|\nadd_button_with_icon||END_LIST|noflags|0||" : "\nadd_smalltext|`5  - Earn 20 Grow Pass Points.|left|\ntext_scaling_string|Subscribtions+++|\nadd_button_with_icon|lifegoal_giveup_3|`oGive Up|noflags|2628|\nadd_button_with_icon||END_LIST|noflags|0||") : "") + "\nadd_spacer|small|\nadd_button|12345|`oBack|noflags|0|0|\nend_dialog|3898|Hang Up||");
	}
	static void Gacha(ENetPeer* peer, std::string banner = "Event") {
		if (banner == "Event") {
			VarList::OnDialogRequest(peer, SetColor(peer) + "set_default_color|`o\nstart_custom_tabs|\nadd_custom_button|banner_event|image:interface/large/gacha_btn.rttex;image_size:228,92;frame:1,0;width:0.14;min_width:60;|\nadd_custom_button|standar_banner|image:interface/large/gacha_btn.rttex;image_size:228,92;frame:0,1;width:0.14;min_width:60;|\nadd_custom_margin|x:320;y:0|\nadd_custom_button|intertwined|image:interface/large/gacha_btn.rttex;image_size:228,92;frame:0,2;width:0.14;min_width:60;state:disabled;|\nadd_custom_label|" + Set_Count(pInfo(peer)->Intertwined_Fate) + "|target:intertwined;top:0.53;left:0.4;size:tiny|\nadd_custom_margin|x:10;y:0|\nadd_custom_button|acquaint|image:interface/large/gacha_btn.rttex;image_size:228,92;frame:1,2;width:0.14;min_width:60;state:disabled;|\nadd_custom_label|" + Set_Count(pInfo(peer)->Acquaint_Fate) + "|target:acquaint;top:0.53;left:0.4;size:tiny|\nadd_custom_button|banner_event|image:interface/large/gacha_btn.rttex;image_size:228,92;frame:1,5;width:0.14;min_width:60;|\nadd_custom_margin|x:0;y:0|\nend_custom_tabs|\nadd_image_button||interface/large/gacha_banner.rttex|bannerlayout|||\nadd_custom_margin|x:0;y:0|\nadd_custom_button|Gacha_Shop|image:interface/large/gacha_shop_btn.rttex;image_size:1080,256;width:0.1;|\nadd_custom_button|Gacha_Detail|image:interface/large/gacha_detail_btn.rttex;image_size:1080,256;width:0.1;|\nadd_custom_button|Gacha_History|image:interface/large/gacha_history_btn.rttex;image_size:1080,256;width:0.1;|\nadd_custom_margin|x:50;y:0|\nadd_custom_button|gacha_1x|image:interface/large/wish_single_btn.rttex;image_size:1080,256;width:0.3;|\nadd_custom_button|gacha_10x|image:interface/large/wish_multi_btn.rttex;image_size:1080,256;width:0.3;|\nadd_quick_exit|\nend_dialog|gacha_system|||", 500);
		}
		if (banner == "Standar") {
			VarList::OnDialogRequest(peer, SetColor(peer) + "set_default_color|`o\nstart_custom_tabs|\nadd_custom_button|banner_event|image:interface/large/gacha_btn.rttex;image_size:228,92;frame:0,0;width:0.14;min_width:60;|\nadd_custom_button|standar_banner|image:interface/large/gacha_btn.rttex;image_size:228,92;frame:1,1;width:0.14;min_width:60;|\nadd_custom_margin|x:320;y:0|\nadd_custom_button|intertwined|image:interface/large/gacha_btn.rttex;image_size:228,92;frame:0,2;width:0.14;min_width:60;state:disabled;|\nadd_custom_label|" + Set_Count(pInfo(peer)->Intertwined_Fate) + "|target:intertwined;top:0.53;left:0.4;size:tiny|\nadd_custom_margin|x:10;y:0|\nadd_custom_button|acquaint|image:interface/large/gacha_btn.rttex;image_size:228,92;frame:1,2;width:0.14;min_width:60;state:disabled;|\nadd_custom_label|" + Set_Count(pInfo(peer)->Acquaint_Fate) + "|target:acquaint;top:0.53;left:0.4;size:tiny|\nadd_custom_button|banner_event|image:interface/large/gacha_btn.rttex;image_size:228,92;frame:1,5;width:0.14;min_width:60;|\nadd_custom_margin|x:0;y:0|\nend_custom_tabs|\nadd_image_button||interface/large/gacha_banner_standar.rttex|bannerlayout|||\nadd_custom_margin|x:0;y:0|\nadd_custom_button|Gacha_Shop|image:interface/large/gacha_shop_btn.rttex;image_size:1080,256;width:0.1;|\nadd_custom_button|Gacha_Detail|image:interface/large/gacha_detail_btn.rttex;image_size:1080,256;width:0.1;|\nadd_custom_button|Gacha_History|image:interface/large/gacha_history_btn.rttex;image_size:1080,256;width:0.1;|\nadd_custom_margin|x:50;y:0|\nadd_custom_button|gacha_1x|image:interface/large/wish_single_btn2.rttex;image_size:1080,256;width:0.3;|\nadd_custom_button|gacha_10x|image:interface/large/wish_multi_btn2.rttex;image_size:1080,256;width:0.3;|\nadd_quick_exit|\nend_dialog|gacha_system|||", 500);
		}
		pInfo(peer)->gacha_type = banner;
	}
	static void News(ENetPeer* peer) {
		struct tm newtime;
		time_t now = time(0);
#ifdef _WIN32
		localtime_s(&newtime, &now);
#elif defined(__linux__)
		localtime_r(&now, &newtime);
#endif
		std::string wotd = "", wotw = "";
		for (const auto& wlist : Environment()->WOTD) {
			wotd = "\nadd_button|warp_to_" + wlist.first + "|`wWOTD: `1" + wlist.first + "`` by `#" + wlist.second + "````|noflags|0|0|1|\nadd_spacer|small|";
		}
		for (const auto& wlist : Environment()->WOTW) {
			wotw = "\nadd_button|warp_to_" + wlist.first + "|`wWOTW: `1" + wlist.first + "`` by `#" + wlist.second + "````|noflags|0|0|1|\nadd_spacer|small|";
		}
		std::string banner = "news_banner.rttex";
		if (WinterFest.Active) banner = "news_banner_winter.rttex";
		else if (Event()->Halloween) banner = "news_banner_halloween.rttex";
		std::string dialog = "set_default_color|`o\nset_custom_spacing|x:0;y:0|\ntext_scaling_string|AAAAAAAAAAAAA|\nadd_custon_margin|x:0;y:0|\nadd_custom_button|topmain|image:interface/large/tianvan/newstop.rttex;image_size:1024,128;width:1.0;frame:0,1;state:disabled|"
			"\nadd_custom_label|`4- `b" + to_string(newtime.tm_mday) + "/" + to_string(newtime.tm_mon + 1) + "/" + to_string(1900 + newtime.tm_year) + " `4-|target:topmain;top:0.40;left:0.91;size:big|"
			"\nadd_custom_label|`4- `bTime: " + to_string(newtime.tm_hour) + ":" + (newtime.tm_min < 10 ? "0" + to_string(newtime.tm_min) + "" : "" + to_string(newtime.tm_min)) + " `4-|target:topmain;top:0.40;left:0.085;size:big|"
			"\nadd_custom_label|`b Welcome back to " + Environment()->server_name + ", current version is [`21.1`b]|target:topmain;top:0.84;left:0.50;size:big|"
			"\nadd_custom_break|\nadd_custom_button|news_banner|image:interface/large/" + banner + ";image_size:1080,512;width:1.0;state:disabled|"
			"\nset_custom_spacing|x:0;y:0|\ntext_scaling_string|AAAAAAAAAAAAA|\nadd_custon_margin|x:0;y:0|\nadd_custom_button|section|image:interface/large/tianvan/newsection.rttex;image_size:1024,256;width:1.0;frame:0,0;state:disabled|"
			"\nadd_custom_label|`eWELCOME TO " + to_upper(Environment()->server_name) + "|target:section;top:0.13;left:0.50;size:big|"
			"\nadd_custom_label|`bToday brings the biggest update on the server yet!|target:section;top:0.40;left:0.50;size:small|"
			"\nadd_custom_label|`bi Apologies for long delays, but the time has finally come!|target:section;top:0.50;left:0.50;size:small|"
			"\nadd_custom_label|`eThank you for your continued support and feedback.|target:section;top:0.76;left:0.50;size:small|"
			"\nadd_custom_label|`b@" + Environment()->server_name + " Team|target:section;top:0.88;left:0.85;size:small|"
			"\nadd_custom_break|\nadd_spacer|small|\nset_custom_spacing|x:0;y:0|\nadd_custom_margin|x:3;y:0|\nadd_textbox|Get in on the action and go off-road for a thrilling experience with March's Grow Pass heavy-duty items! Also, make sure to check out the newest Subscriber Item of the Month!|left|\nadd_spacer|small|\nadd_label_with_icon|small|Item of the Season: `2The Plasma of Dawn``|left|24|\nadd_label_with_icon|small|Subscriber Item: `8Primordial Sword of Qyy`` chosen by `b@QyyStore``|left|24|\nadd_spacer|small|" + wotd + wotw + "\nadd_textbox|Find more details in our Offical Website here:|left|\nadd_image_button|iotm_layout|interface/large/gazette/website.rttex|3imageslayout|" + Environment()->website_url + "|Do you want to open the " + Environment()->server_name + " Website?|\nadd_image_button|cc_program|interface/large/gazette/gazette_3columns_btn04.rttex|3imageslayout|||\nadd_image_button|featured_server|interface/large/gazette/features.rttex|3imageslayout|||\nadd_spacer|small|\nadd_textbox|Don't forget to join our `2Official " + Environment()->server_name + " WhatsApp Server`` on click the link below!|left|\nadd_spacer|small|\nadd_image_button|iotm_layout|interface/large/gazette/social_c_whatsapp.rttex|3imageslayout|" + Environment()->whatsapp_url + "|Would you like to join our Official " + Environment()->server_name + " WhatsApp Server?|\nadd_image_button|iotm_layout|interface/large/gazette/social_c_discord.rttex|3imageslayout|" + Environment()->discord_url + "|Would you like to join our Discord Server?|\nadd_image_button|iotm_layout|interface/large/gazette/social_c_youtube.rttex|3imageslayout|https://youtube.com/@kirifepgtps|Would you like to open this in Youtube?|\nadd_spacer|small|\nset_custom_spacing|x:0;y:0|\ntext_scaling_string|AAAAAAAAAAAAA|\nadd_custom_margin|x:718;y:0|\nadd_custom_button||image:interface/large/tianvan/newsbtn.rttex;image_size:675,113;frame:0,2;width:0.20;min_width:60;margin:10,0;|\nadd_custom_margin|x:490;y:0|\add_custom_break|\nend_dialog|News|||\nadd_quick_exit|"
			;
		VarList::OnDialogRequest(peer, SetColor(peer) + dialog);
	}
	static void Server_Info(ENetPeer* peer) {
		std::ifstream rules("database/text/server_information.txt");
		std::stringstream buffer;
		buffer << rules.rdbuf();
		std::string rules_dialog(buffer.str());
		VarList::OnDialogRequest(peer, SetColor(peer) + rules_dialog);
	}
	static void Rules(ENetPeer* peer) {
		std::ifstream rules("database/text/rules.txt");
		std::stringstream buffer;
		buffer << rules.rdbuf();
		std::string rules_dialog(buffer.str());
		VarList::OnDialogRequest(peer, SetColor(peer) + rules_dialog);
	}
	static void DTesting(ENetPeer* peer) {
		std::ifstream rules("database/text/dialogtest.txt");
		std::stringstream buffer;
		buffer << rules.rdbuf();
		std::string rules_dialog(buffer.str());
		VarList::OnDialogRequest(peer, SetColor(peer) + rules_dialog);
	}
	static void CsnRules(ENetPeer* peer) {
		std::ifstream rules("database/text/csn_rules.txt");
		std::stringstream buffer;
		buffer << rules.rdbuf();
		std::string rules_dialog(buffer.str());
		VarList::OnDialogRequest(peer, SetColor(peer) + rules_dialog);
	}
	static void ModRules(ENetPeer* peer) {
		std::ifstream rules("database/text/mod_rules.txt");
		std::stringstream buffer;
		buffer << rules.rdbuf();
		std::string rules_dialog(buffer.str());
		VarList::OnDialogRequest(peer, SetColor(peer) + rules_dialog);
	}
	static void RentPrice(ENetPeer* peer) {
		std::ifstream rules("database/text/rent_price.txt");
		std::stringstream buffer;
		buffer << rules.rdbuf();
		std::string rules_dialog(buffer.str());
		VarList::OnDialogRequest(peer, SetColor(peer) + rules_dialog);
	}
	static void GuideBook(ENetPeer* peer) {
		VarList::OnDialogRequest(peer, SetColor(peer) + "set_default_color|`o\nadd_quick_exit\nadd_label_with_icon|big|`w" + Environment()->server_name + " Guidebook|left|6336|\nadd_spacer|small|\nset_custom_spacing|x:5;y:10|\nadd_custom_button|splicing|image:interface/large/gui_guidebook.rttex;image_size:495,170;frame:0,0;width:0.4;|\nadd_custom_button|combining|image:interface/large/gui_guidebook.rttex;image_size:495,170;frame:0,1;width:0.4;|\nadd_custom_break|\nadd_custom_button|combusting|image:interface/large/gui_guidebook.rttex;image_size:495,170;frame:0,2;width:0.4;|\nadd_custom_button|crystals|image:interface/large/gui_guidebook.rttex;image_size:495,170;frame:0,3;width:0.4;|\nset_custom_spacing|x:0;y:0|\nadd_custom_break|\nadd_spacer|small|\nset_custom_spacing|x:5;y:10|\nadd_custom_button|news|image:interface/large/gui_guidebook.rttex;image_size:495,170;frame:0,7;width:0.4;|\nadd_custom_button|rules|image:interface/large/gui_guidebook.rttex;image_size:495,170;frame:0,8;width:0.4;|\nset_custom_spacing|x:0;y:0|\nadd_custom_break|\nend_dialog|guide_book|Close||");
	}
	static void Trade_Scan(ENetPeer* peer) { VarList::OnDialogRequest(peer, SetColor(peer) + "set_default_color|\nadd_label_with_icon|big|Trade-Scan|left|13816|\nadd_textbox|`oCheck what price an items is currently trading at in the economy.|left|\nadd_textbox|`oYou will require Trade-Scan Credits to check the price of an item.|left|\nadd_spacer|small|\nadd_textbox|`oSelect an item from your inventory:|left|\nadd_item_picker|Pick_Items_Scan|`oSelect Items|Choose an items|\nadd_spacer|small|\nadd_textbox|`oIf you don't currently have an item in your inventory, you can look it up:|left|\nadd_button|Search_by_Name|`oSearch for items|0|0|\nadd_spacer|small|\nadd_textbox|`oTrade-Scan Credits Collected: `2" + Set_Count(pInfo(peer)->tscanc) + "|left|\nadd_button|Buy_Credits_Scan|`oBuy Trade-Scan Credits|0|0|\nadd_spacer|small|\nend_dialog|Trade_Scan|Close||\nadd_quick_exit|"); }
	static void Splicing_Recipe(ENetPeer* peer, std::vector<std::string>search) {
		if (search.size() == 0) return;
		if (pInfo(peer)->page_number > search.size()) pInfo(peer)->page_number = search.size() + 26;
		if (pInfo(peer)->page_number < 26) pInfo(peer)->page_number = 26;
		int type = 0, pages = 0;
		bool block = false;
		std::string error = "";
		if (not pInfo(peer)->page_item.empty() && pInfo(peer)->page_item.length() < 3) error = "\nadd_textbox|`4OOPS:`` You must enter atleast 3 characters.|", pInfo(peer)->page_item = "";
		if (search == Environment()->splicing) type = 13;
		else if (search == Environment()->combining) type = 912;
		else if (search == Environment()->combusting) type = 3062;
		else if (search == Environment()->crystals) type = 2244;
		std::string recipe = "", show_number = "", go_back = "";
		if (pInfo(peer)->page_item != "") {
			std::vector<std::string> search_item;
			for (int i = 0; i < search.size(); i++) if (to_lower(search[i]).find(to_lower(pInfo(peer)->page_item)) != string::npos) search_item.push_back(search[i]);
			pages = search_item.size();
			if (search_item.size() == 0) recipe = "\nadd_label_with_icon|small|`wRecipe not found!``|left|20|";
			else {
				int search_through = pInfo(peer)->page_number;
				int minimal = 26;
				if (search_through >= pages) search_through = search_item.size();
				show_number = (pInfo(peer)->page_number == 26 ? "1" : to_string(pInfo(peer)->page_number - 26)) + "-" + to_string(search_through);
				if (search_item.size() >= 26) {
					for (int i = pInfo(peer)->page_number - 26; i < search_through; i++) recipe += search_item[i];
					if (search_through > 26) go_back = "\nadd_small_font_button|last_pg|`5Previous Page``|";
				}
				else for (int i = 0; i < search_item.size(); i++) recipe += search_item[i];
			}
		}
		else {
			int search_through = pInfo(peer)->page_number, minimal = 26;
			if (search_through > search.size()) {
				int remove = search.size() - 26;
				if (remove < 26) pInfo(peer)->page_number = search.size() - remove;
				else   pInfo(peer)->page_number = remove;
				minimal = 0;
				show_number = to_string(pInfo(peer)->page_number) + "-" + to_string(search.size());
				block = true;
			}
			else {
				if (pInfo(peer)->page_number > search.size()) show_number = to_string(search.size()) + "-" + to_string(search_through);
				else show_number = (pInfo(peer)->page_number == 26 ? "1" : to_string(pInfo(peer)->page_number - 26)) + "-" + to_string(search_through);
			}
			for (int i = pInfo(peer)->page_number - minimal; i < (block ? search.size() : search_through); i++) recipe += search[i];
			if (search_through > 26) go_back = "\nadd_small_font_button|last_pg|`5Previous Page``|";
		}
		std::string next_page = "\nadd_small_font_button|next_pg|`5Next Page``|";
		if (block) next_page = "";
		VarList::OnDialogRequest(peer, SetColor(peer) + "set_default_color|`o\nadd_quick_exit\nadd_label_with_icon|big|`w" + a + (type == 13 ? "Splicing" : type == 912 ? "Combining" : type == 3062 ? "Combusting" : "Crystals") + " recipes``|left|" + to_string(type) + "|" + error + "\nadd_textbox|`$" + (type == 13 ? "Splicing" : type == 912 ? "Combining" : type == 3062 ? "Combusting" : "Crystals") + " recipes``. View all or search by name.|left|\nadd_text_input|query|Search Items|" + pInfo(peer)->page_item + "|32|\nadd_button|search|`wSearch``|\nadd_spacer|small|" + (pInfo(peer)->page_item != "" && pages == 0 ? "" : "\nadd_textbox|`wShowing results " + (show_number)+"/" + (pages == 0 ? to_string(search.size()) : to_string(pages)) + "|") + ((pInfo(peer)->page_item.empty() && pages == 0) or (pInfo(peer)->page_number < pages and block == false) ? next_page : "") + go_back + "\n" + recipe + "\nadd_spacer|small|\nend_dialog|guide_book_" + (type == 13 ? "s" : type == 912 ? "c" : type == 3062 ? "f" : "r") + "||`wBack``|");
	}
	static void Janeway(ENetPeer* peer) {
		std::string availableItem = "\nadd_spacer|small|\nadd_textbox|Press item icon, you want to sell:|left|", items_ = "";
		bool add_ = false;
		for (int i = 0; i < Environment()->janeway_item.size(); i++) {
			int got = 0;
			Inventory::Modify(peer, Environment()->janeway_item[i].first, got);
			if (Environment()->janeway_item[i].first % 2 == 0) items_ += "\nadd_label_with_icon|small|" + items[Environment()->janeway_item[i].first].ori_name + "|left|" + to_string(Environment()->janeway_item[i].first) + "|";
			else items_ += "\nadd_smalltext|" + items[Environment()->janeway_item[i].first].ori_name + "|\nadd_seed_color_icons|" + to_string(Environment()->janeway_item[i].first) + "|";
			if (got == 200) {
				availableItem += "\nadd_button_with_icon|sell_" + to_string(Environment()->janeway_item[i].first) + "||staticBlueFrame|" + to_string(Environment()->janeway_item[i].first) + "|" + to_string(got) + "|";
				add_ = true;
			}
		}
		if (add_ == false) availableItem = "\nadd_textbox|It seems you don't have any items that i'm intrested to, come back later when you have thoose items.|left|";
		else availableItem += "\nadd_button_with_icon||END_LIST|noflags|0|0|";
		VarList::OnDialogRequest(peer, SetColor(peer) + "set_default_color|\nadd_label_with_icon|big|`wOffer Something to Janeway``|left|12158|\nadd_spacer|small|\nadd_smalltext|`wHello there I am `9Janeway``<CR>Would you like to make a deal with me? if so please choose down below which item that you want to sell to me``|\nadd_spacer|small|\nadd_label_with_icon|small|My exchanging reward would be `2" + items[Environment()->janeway_payout].ori_name + "`` for now..|left|" + to_string(Environment()->janeway_payout) + "|\nadd_spacer|small|\nadd_textbox|I'm currently interested on buying 200 of|left|" + items_ + "\nadd_spacer|small|" + availableItem + "\nend_dialog|sellstuff|Cancel||\nadd_quick_exit|\n");
	}
	static void Friends(ENetPeer* p_, bool all = false) {
		int on_ = 0;
		std::string info_ = "";
		std::vector<std::string> friends_, online_friends_;
		std::vector<std::pair<std::string, int>> player_status;
		for (int c_ = 0; c_ < pInfo(p_)->friends.size(); c_++) {
			friends_.push_back(to_lower(pInfo(p_)->friends[c_].name));
		}
		for (ENetPeer* cp_ = server->peers; cp_ < &server->peers[server->peerCount]; ++cp_) {
			if (cp_->state != ENET_PEER_STATE_CONNECTED or cp_->data == NULL) continue;
			if (find(friends_.begin(), friends_.end(), to_lower(pInfo(cp_)->tankIDName)) != friends_.end()) {
				online_friends_.push_back(to_lower(pInfo(cp_)->tankIDName));
				player_status.push_back(make_pair(to_lower(pInfo(cp_)->tankIDName), pInfo(cp_)->p_status));
				on_++;
			}
		}
		if (all and pInfo(p_)->friends.size() != 0) {
			long long time_t = time(NULL);
			for (int c_ = 0; c_ < pInfo(p_)->friends.size(); c_++) {
				if (find(online_friends_.begin(), online_friends_.end(), to_lower(pInfo(p_)->friends[c_].name)) == online_friends_.end()) {
					long long friend_last_online_ = time_t - pInfo(p_)->friends[c_].last_seen;
					info_ += "\nadd_friend_image_label_button|" + pInfo(p_)->friends[c_].name + "|`4(" + (friend_last_online_ < 60 ? to_string(friend_last_online_) + "s" : (friend_last_online_ < 3600 ? to_string(friend_last_online_ / 60) + "m" : (friend_last_online_ < 86400 ? to_string(friend_last_online_ / 3600) + "h" : to_string(friend_last_online_ / 86400) + "d"))) + ") ``" + pInfo(p_)->friends[c_].name + "|game/tiles_page14.rttex|1.6|31|23|32|" + (pInfo(p_)->friends[c_].mute ? "true" : "false") + "|" + (pInfo(p_)->friends[c_].block_trade ? "true" : "false") + "|";
				}
			}
			std::string ignore = "\nadd_textbox|`oYou aren't currently ignoring anyone.``|left|";
			if (pInfo(p_)->ignored.size() != 0) {
				ignore = "";
				for (int c_ = 0; c_ < pInfo(p_)->ignored.size(); c_++) ignore += "\nadd_button|" + pInfo(p_)->ignored[c_] + "|`4Stop ignoring " + pInfo(p_)->ignored[c_] + "``|0|0|";
			}
			VarList::OnDialogRequest(p_, SetColor(p_) + "set_default_color|`o\nadd_label_with_icon|big|" + to_string(on_) + " of " + to_string(pInfo(p_)->friends.size()) + " `wFriends Online``|left|1366|\nadd_spacer|small|" + info_ + "\nadd_spacer|small|" + ignore + "\nadd_spacer|small|\nadd_button|all_friends|Edit Friends|noflags|0|0|\nadd_button|friends_options|Friend Options|noflags|0|0|\nadd_button|back|Back|noflags|0|0|\nadd_button||Close|noflags|0|0|\nend_dialog|friends|||\nadd_quick_exit|");
		}
		else {
			for (int c_ = 0; c_ < pInfo(p_)->friends.size(); c_++) {
				if (find(online_friends_.begin(), online_friends_.end(), to_lower(pInfo(p_)->friends[c_].name)) != online_friends_.end()) {
					int pstatus = 0;
					std::vector<std::pair<std::string, int>>::iterator pz = find_if(player_status.begin(), player_status.end(), [&](const pair < string, int>& element) { return element.first == to_lower(pInfo(p_)->friends[c_].name); });
					if (pz != player_status.end()) {
						pstatus = player_status[pz - player_status.begin()].second;
					}
					info_ += "\nadd_friend_image_label_button|" + pInfo(p_)->friends[c_].name + "|" + pInfo(p_)->friends[c_].name + "|game/tiles_page14.rttex|1.6|" + to_string(28 + pstatus) + "|23|32|" + (pInfo(p_)->friends[c_].mute ? "true" : "false") + "|" + (pInfo(p_)->friends[c_].block_trade ? "true" : "false") + "|";
				}
			}
			VarList::OnDialogRequest(p_, SetColor(p_) + "set_default_color|`o\nadd_label_with_icon|big|" + to_string(on_) + " of " + to_string(pInfo(p_)->friends.size()) + " `wFriends Online``|left|1366|\nadd_spacer|small|" + (on_ == 0 and pInfo(p_)->friends.size() != 0 ? "\nadd_textbox|`oNone of your friends are currently online.``|left|\nadd_spacer|small|" : (pInfo(p_)->friends.size() == 0 ? "\nadd_textbox|`oYou currently have no friends.  That's just sad.  To make some, press a person's wrench icon, then choose `5Add as friend``.``|left|\nadd_spacer|small|" : (on_ != 0 ? info_ : "\nadd_textbox|`oNone of your friends are currently online.``|left|\nadd_spacer|small|"))) + "\nadd_spacer|small|\nadd_button|friend_all|Show offline and ignored too|noflags|0|0|\nadd_button|all_friends|Edit Friends|noflags|0|0|\nadd_button|friends_options|Friend Options|noflags|0|0|\nadd_button|back|Back|noflags|0|0|\nadd_button||Close|noflags|0|0|\nend_dialog|friends|||\nadd_quick_exit|");
		}
	}
	static void Social_Portal(ENetPeer* p_, std::string type = "Social") {
		std::string tabs = SetColor(p_) + "set_default_color|`o\nstart_custom_tabs|"
			"\nadd_custom_button|Social_Portal|image:interface/large/gui_button_tabs.rttex;image_size:228,92;frame:" + a + (type == "Social" ? "1,10" : "0,10") + ";width:0.14;min_width:60;|"
			"\nadd_custom_button|Background_Setting|image:interface/large/gui_button_tabs.rttex;image_size:228,92;frame:" + a + (type == "Bg_Setting" ? "1,12" : "0,12") + ";width:0.14;min_width:60;|"
			"\nend_custom_tabs|";
		if (type == "Social") {
			std::string asddd_ = pInfo(p_)->guild_id != 0 ? "\nadd_custom_button|showguild|image:interface/large/tianvan/gui_button.rttex;image_size:400,260;frame:1,0;width:0.23;|\n" : "\nadd_custom_button|showguild|image:interface/large/tianvan/gui_button.rttex;image_size:400,260;frame:0,0;width:0.23;|\n";
			VarList::OnDialogRequest(p_, tabs + "set_default_color|`o\nadd_image_button||interface/large/tianvan/social_hub.rttex|bannerlayout|||\nadd_spacer|small|" + asddd_ + "|\nadd_custom_margin|x:15;y:0|\nadd_custom_button|community_hub|image:interface/large/tianvan/gui_button.rttex;image_size:400,260;frame:8,0;width:0.23;|\nadd_custom_margin|x:15;y:0|\nadd_custom_button|show_friends|image:interface/large/tianvan/gui_button.rttex;image_size:400,260;frame:2,0;width:0.23;|\nadd_custom_margin|x:15;y:0|\nadd_custom_button|trade_history|image:interface/large/tianvan/gui_button.rttex;image_size:400,260;frame:4,0;width:0.23;|\nadd_custom_break|\nadd_spacer|small|\nadd_custom_button|marketplace|image:interface/large/tianvan/gui_button.rttex;image_size:400,260;frame:5,0;width:0.23;|\nadd_custom_margin|x:15;y:0|\nadd_custom_button|proxy_menu|image:interface/large/tianvan/gui_button.rttex;image_size:400,260;frame:3,2;width:0.23;|\nadd_custom_break|\nadd_spacer|small|\nadd_textbox||left|\nadd_spacer|small|\nadd_quick_exit|\nend_dialog|SocialPortal|||", 500);
		}
		if (type == "Bg_Setting") {
			VarList::OnDialogRequest(p_, tabs + "set_default_color|`o\nadd_label_with_icon|big|Background Settings|left|32|\nadd_textbox|You can change your settings here, you can even set custom `$theme colors`` to your liking!|left|\nadd_spacer|small|\nadd_smalltext|Growtopia Theme:<CR>Change your theme colors, this will affect all Dialog colors & make your gameplay experience feel way nicer!|left|\nadd_spacer|small|\nmax_checks|2|\ntext_scaling_string|DEFIBRILLATOR|\nadd_checkicon|theme_0|`!Default``|frame|520||0|\nadd_checkicon|theme_1|`bBlack``|frame|166||0|\nadd_checkicon|theme_2|`#Pink``|frame|182||0|\nadd_checkicon|theme_3|`pPurple``|frame|2026||0|\nadd_checkicon|theme_4|`4Red``|frame|170||0|\nadd_checkicon|theme_5|`eBlue``|frame|180||0|\nadd_checkicon|theme_6|`8Orange``|frame|172||0|\nadd_checkicon|theme_7|`2Green``|frame|176||0|\nadd_checkicon|theme_8|`9Yellow``|frame|174||0|\nadd_button_with_icon||END_LIST|noflags|0||\nadd_spacer|small|\nadd_smalltext|Theme Transparency:<CR>You can adjust the background transparency of dialogs to your liking! By default it is set to 50%!  (Note: this setting only works if you have selected any theme except for default)|left|\nadd_spacer|small|\ntext_scaling_string|DEFIBRILLATOR|\nadd_checkicon|themetrans_0|`$0%``|frame|1052||0|\nadd_checkicon|themetrans_1|`$25%``|frame|1052||0|\nadd_checkicon|themetrans_2|`$50%``|frame|1052||0|\nadd_checkicon|themetrans_3|`$75%``|frame|1052||0|\nadd_checkicon|themetrans_4|`$100%``|frame|1052||0|\nadd_button_with_icon||END_LIST|noflags|0||\nadd_spacer|small|\nadd_button|settings_apply|Apply Changes|no_flags|0|0|\nend_dialog|SocialPortal|||\nadd_quick_exit|\n", 500);
		}
	}
	static void Edit_All_Friends(ENetPeer* p_) {
		std::string info_ = "";
		for (int c_ = 0; c_ < pInfo(p_)->friends.size(); c_++) {
			info_ += "\nadd_checkbox|cf_" + to_string(c_) + "|" + pInfo(p_)->friends[c_].name + (pInfo(p_)->friends[c_].mute ? " <Muted>" : "") + (pInfo(p_)->friends[c_].block_trade ? " <Trade Block>" : "") + "|0";
		}
		VarList::OnDialogRequest(p_, SetColor(p_) + "set_default_color|`o\nadd_label_with_icon|big|`wAll Friends``|left|1366|\nadd_spacer|small|\nadd_button|remove_multi_friends|Remove|noflags|0|0|\nadd_button|block_multi_friends|Block / Unblock Trade|noflags|0|0|\nadd_button|mute_multi_friends|Mute / Unmute|noflags|0|0|\nadd_spacer|small|" + info_ + "\nadd_button|back|Back|noflags|0|0|\nend_dialog|all_friends|||\nadd_quick_exit|");
	}
	static void Edit_Friend(ENetPeer* p_, std::string name_, bool back_ = false) {
		for (int c_ = 0; c_ < pInfo(p_)->friends.size(); c_++) {
			if (pInfo(p_)->friends[c_].name == name_) {
				if (back_) {
					for (ENetPeer* cp_ = server->peers; cp_ < &server->peers[server->peerCount]; ++cp_) {
						if (cp_->state != ENET_PEER_STATE_CONNECTED or cp_->data == NULL) continue;
						if (to_lower(pInfo(cp_)->tankIDName) == to_lower(pInfo(p_)->friends[c_].name)) {
							DialogHandle::Friends(p_, true);
							return;
						}
					}
					DialogHandle::Friends(p_);
					break;
				}
				VarList::OnDialogRequest(p_, SetColor(p_) + "set_default_color|`o\nadd_label_with_icon|big|`4Remove Friend``|left|1366|\nadd_spacer|small|\nadd_textbox|`oAre you sure you wish to `4remove`` " + pInfo(p_)->friends[c_].name + " as a friend?|left|\nadd_spacer|small|\nadd_button|remove|`4Remove Friend``|noflags|0|0|\nembed_data|friendID|" + pInfo(p_)->friends[c_].name + "\nadd_button|back|Back|noflags|0|0|\nend_dialog|friends_remove|||\nadd_quick_exit|");
				break;
			}
		}
	}
	static void Info_Friend(ENetPeer* p_, std::string name_) {
		for (ENetPeer* cp_ = server->peers; cp_ < &server->peers[server->peerCount]; ++cp_) {
			if (cp_->state != ENET_PEER_STATE_CONNECTED or cp_->data == NULL) continue;
			if (to_lower(pInfo(cp_)->tankIDName) == to_lower(name_)) {
				if (pInfo(cp_)->invis or pInfo(cp_)->m_h) continue;
				for (int c_ = 0; c_ < pInfo(p_)->friends.size(); c_++) {
					if (to_lower(pInfo(p_)->friends[c_].name) == to_lower(pInfo(cp_)->tankIDName)) {
						pInfo(p_)->last_edit = pInfo(cp_)->tankIDName;
						if (not pInfo(cp_)->show_location_) {
							VarList::OnDialogRequest(p_, SetColor(p_) + "set_default_color|`o\nadd_label_with_icon|big|`w" + pInfo(cp_)->tankIDName + "``|left|1366|\nadd_spacer|small|\nembed_data|friendID|" + pInfo(cp_)->tankIDName + "\nadd_textbox|`o" + pInfo(cp_)->tankIDName + " is `2online`` now, but has not made their location public to friends.|left|\nadd_spacer|small|\nadd_button|remove|Remove as friend|noflags|0|0|\nadd_button|back|Back|noflags|0|0|\nend_dialog|friends_edit|||\nadd_quick_exit|");
						}
						else {
							VarList::OnDialogRequest(p_, SetColor(p_) + "set_default_color|`o\nadd_label_with_icon|big|`w" + pInfo(cp_)->tankIDName + "``|left|1366|\nadd_spacer|small|\nembed_data|friendID|" + pInfo(cp_)->tankIDName + "\nadd_textbox|`o" + pInfo(cp_)->tankIDName + " is `2online`` now in the world `5" + (pInfo(cp_)->world.empty() ? "EXIT" : pInfo(cp_)->world) + "``.|left|\nadd_spacer|small|\nadd_button|goto|Warp to `5" + (pInfo(cp_)->world.empty() ? "EXIT" : pInfo(cp_)->world) + "``|noflags|0|0|" + (pInfo(p_)->friends[c_].mute ? "\nadd_button||`4Can't Send message``|disabled|0|0|\nadd_button|mute|Un Mute Friend|noflags|0|0|" : "\nadd_button|msg|`5Send message``|noflags|0|0|\nadd_button|mute|Mute Friend|noflags|0|0|") + (pInfo(p_)->friends[c_].block_trade ? "\nadd_button|trade_block|Enable Trade|noflags|0|0|" : "\nadd_button|trade_block|Disable Trade|noflags|0|0|") + "\nadd_spacer|small|\nadd_button|remove|Remove as friend|noflags|0|0|\nadd_button|back|Back|noflags|0|0|\nend_dialog|friends_edit|||\nadd_quick_exit|");
						}
						return;
					}
				}
				return;
			}
		}
		for (int c_ = 0; c_ < pInfo(p_)->friends.size(); c_++) {
			if (to_lower(pInfo(p_)->friends[c_].name) == to_lower(name_)) {
				VarList::OnDialogRequest(p_, SetColor(p_) + "set_default_color|`o\nadd_label_with_icon|big|`w" + name_ + "``|left|1366|\nadd_spacer|small|\nembed_data|friendID|" + name_ + "\nadd_textbox|`o" + name_ + " is `4offline``.|left|\nadd_spacer|small|\nadd_button|remove|Remove as friend|noflags|0|0|\nadd_button|back|Back|noflags|0|0|\nend_dialog|friends_edit|||\nadd_quick_exit|");
				break;
			}
		}
	}
	static void VendHub(ENetPeer* peer, World* world_, WorldBlock* block_, string filter = "") {
		std::string found = "\nadd_label_with_icon_button_list|small|This DigiVend is out of order!|left||mapIndex_vendPrice_wl_count|";
		for (int i_ = (block_->spin == false ? pInfo(peer)->lastwrenchy * 100 - pInfo(peer)->lastwrenchx : 0); i_ < (block_->spin == false ? pInfo(peer)->lastwrenchy * 100 - pInfo(peer)->lastwrenchx + 100 : world_->blocks.size()); i_ += (block_->spin == false ? 1 : 100)) {
			if (i_ > world_->blocks.size()) break;
			else {
				if (world_->blocks[pInfo(peer)->lastwrenchx + i_].fg == 9268) {
					if (not filter.empty() && to_lower(items[world_->blocks[pInfo(peer)->lastwrenchx + i_].id].ori_name).find(to_lower(filter)) != string::npos or filter.empty()) found += to_string(pInfo(peer)->lastwrenchx + i_) + "," + to_string(world_->blocks[pInfo(peer)->lastwrenchx + i_].pr) + ",0," + to_string(world_->blocks[pInfo(peer)->lastwrenchx + i_].c_) + ",";
				}
			}
		}
		if (found == "\nadd_label_with_icon_button_list|small|This DigiVend is out of order!|left||mapIndex_vendPrice_wl_count|") found = "\nadd_textbox|No DigiVends available.|left";
		VarList::OnDialogRequest(peer, SetColor(peer) + "set_default_color|`o\nadd_label_with_icon|big|`wVending Hub - Checkout Counter``|left|9270|\nadd_spacer|small|\nadd_textbox|You can access the contents of any DigiVends connected to this hub by pressing the icon(s) on the left below!|left|\nadd_textbox|Currently scanning DigiVends " + a + (block_->spin == false ? "horizontally" : "vertically") + ".|left|\nadd_button|switchdirection|Scan " + (block_->spin == false ? "Vertically" : "Horizontally") + "|noflags|0|0|\nadd_spacer|small|\nadd_text_input|filtertext|Search||10|\nadd_button|filterbytext|Filter|noflags|0|0|" + found + "\nadd_spacer|small|\nend_dialog|checkoutcounter|Close||");
	}
	static void Storage_Box(ENetPeer* peer, World* world_, WorldBlock* block_) {
		world_->fresh_world = true;
		int got = 0, got2 = 0;
		Inventory::Modify(peer, 1424, got);
		Inventory::Modify(peer, 1424, got *= -1);
		Inventory::Modify(peer, 5816, got2);
		Inventory::Modify(peer, 5816, got2 *= -1);
		string dbox_item = "";
		int itemcount = 0, blockss = block_->fg;
		std::string vault_pass = block_->door_destination, list_ = "", xlist = "";
		for (int i_ = 0; i_ < world_->sbox1.size(); i_++) {
			if (world_->sbox1[i_].x == pInfo(peer)->lastwrenchx and world_->sbox1[i_].y == pInfo(peer)->lastwrenchy and world_->sbox1[i_].count != 0) {
				if (blockss == 8878) {
					if (pInfo(peer)->temporary_vault != vault_pass) break;
				}
				dbox_item += to_string(world_->sbox1[i_].id) + ", " + to_string(world_->sbox1[i_].count) + ", ";
				itemcount++;
			}
		}
		VarList::OnDialogRequest(peer, SetColor(peer) + "set_default_color|`o\nadd_label_with_icon|big|`w" + items[pInfo(peer)->lastwrenchb].name + "``|left|" + to_string(pInfo(peer)->lastwrenchb) + "|" + (dbox_item != "" ? "\nadd_text_input|item_search_field|`oSearch By Name:||30|\nadd_spacer|small|\nadd_searchable_item_list|" + dbox_item + "|listType:iconGrid;resultLimit:" + to_string(items[pInfo(peer)->lastwrenchb].box_size) + ";|item_search_field|\nadd_spacer|small|" : "") + "\nadd_textbox|`w" + to_string(itemcount) + "/" + to_string(items[pInfo(peer)->lastwrenchb].box_size) + "`` items stored.|left|" + (itemcount >= items[pInfo(peer)->lastwrenchb].box_size ? "" : "\nadd_spacer|small|\nadd_item_picker|itemid|`wStore Item``|Choose an item to store|") + (pInfo(peer)->lastwrenchb == 8878 ? "\nadd_textbox|This Safe Vault is " + a + (block_->door_destination.empty() ? "not `4" : "`2") + "password protected``!|left|\nadd_spacer|small|\nadd_textbox|Change your password.|left|\nadd_button|change_password|`wUpdate Password``|noflags|0|0|" : "") + "\nend_dialog|storageboxxtreme|Exit||\nadd_quick_exit|\n");
	}
	static void Lock(ENetPeer* peer, World* world_, int t_, int x_, int y_) {
		if (t_ == 5814 && world_->guild_id != 0) {
			uint32_t guild_id = world_->guild_id;
			std::vector<Guild>::iterator p = find_if(guilds.begin(), guilds.end(), [guild_id](const Guild& a) { return a.guild_id == guild_id; });
			if (p != guilds.end()) {
				std::string access_list_ = "";
				for (int i_ = 0; i_ < world_->admins.size(); i_++) access_list_ += "\nadd_checkbox|checkbox_/" + world_->admins[i_] + "|`w" + world_->admins[i_] + "``|1";
				if (access_list_.empty()) access_list_ = "\nadd_label|small|Currently, you're the only one with access.``|left";
				Guild* guild_information = &guilds[p - guilds.begin()];
				std::string guild_key = "\nadd_button|getKey|Get Guild Key|noflags|0|0|";
				int c_ = 0;
				Inventory::Modify(peer, 5816, c_);
				if (c_ != 0) guild_key = "";
				VarList::OnDialogRequest(peer, SetColor(peer) + "set_default_color|`o\nadd_label_with_icon|big|`wEdit " + items[t_].name + "``|left|" + to_string(t_) + "|\nadd_spacer|small|\nembed_data|tilex|" + to_string(x_) + "\nembed_data|tiley|" + to_string(y_) + "\nadd_progress_bar|`w" + guild_information->guild_name + "``|big|Level " + to_string(guild_information->guild_level) + "|" + (guild_information->guild_level == 15 ? to_string(guild_lvl[guild_information->guild_level - 1][0]) : to_string(guild_information->guild_xp)) + "|" + to_string(guild_lvl[guild_information->guild_level - 1][0]) + "|" + (guild_information->guild_level == 15 ? "(MAX)" : "(" + to_string(guild_information->guild_xp) + "/" + to_string(guild_lvl[guild_information->guild_level - 1][0]) + ")") + "|-3669761|" + (guild_information->guild_level < guild_lvl.size() && guild_information->guild_xp >= guild_lvl[guild_information->guild_level - 1][0] ? "\nadd_spacer|small|\nadd_button|upgrade_guild|`wUpgrade Guild``|noflags|0|0|\nadd_textbox|`oCost:`` `2" + to_string(guild_lvl[guild_information->guild_level - 1][1]) + " Gems``|left|" : "") + "\nadd_spacer|small|\nadd_textbox|`wManage Guild Member access:``|left|\nadd_checkbox|checkbox_coleader|Enable Co-Leader access|" + to_string(guild_information->guild_settings & SETTINGS::SETTINGS_3) + "\nadd_checkbox|checkbox_elder|Enable Co-Leader and Elder access|" + to_string(guild_information->guild_settings & SETTINGS::SETTINGS_2) + "\nadd_checkbox|checkbox_member|Enable all Members access|" + to_string(guild_information->guild_settings & SETTINGS::SETTINGS_1) + "\nadd_spacer|small|" + (guild_information->guild_settings & SETTINGS::SETTINGS_1 ? "\nadd_label|small|`2All guild members have access.``|left" : (guild_information->guild_settings & SETTINGS::SETTINGS_2 ? "\nadd_label|small|`2Guild Co-Leaders and Elders have access.``|left" : (guild_information->guild_settings & SETTINGS::SETTINGS_3 ? "\nadd_label|small|`2Guild Co-Leaders have access.``|left" : ""))) + "\nadd_spacer|small|\nadd_label|small|`wAccess List:``|left\nembed_data|tilex|" + to_string(x_) + "\nembed_data|tiley|" + to_string(y_) + "\nadd_spacer|small|" + access_list_ + "\nadd_spacer|small|\nadd_player_picker|playerNetID|`wAdd``|" + (guild_information->guild_mascot[0] == 0 && guild_information->guild_mascot[1] == 0 ? (guild_information->guild_level >= 3 ? "\nadd_spacer|small|\nadd_button|create_guild_mascot|`wCreate Guild Mascot``|noflags|0|0|" : "\nadd_spacer|small|\nadd_textbox|Increase your guild level to `w3`` and you can set a guild mascot!|left|") : "\nadd_spacer|small|\nadd_button|create_guild_mascot|`wChange Guild Mascot``|noflags|0|0|") + "\nadd_spacer|small|\nadd_checkbox|checkbox_disable_music|Disable Custom Music Blocks|" + (world_->world_settings & SETTINGS::SETTINGS_7 ? "1" : "0") + "\nadd_text_input|tempo|Music BPM|" + to_string(world_->music_bpm) + "|3|\nadd_checkbox|checkbox_disable_music_render|Make Custom Music Blocks invisible|" + to_string(world_->world_settings & SETTINGS::SETTINGS_6) + (not pInfo(peer)->home_world.empty() ? "\nadd_smalltext|Your current home world is: " + pInfo(peer)->home_world + "|left|" : "") + "\nadd_checkbox|checkbox_set_as_home_world|Set as Home World|" + (pInfo(peer)->home_world == world_->name ? "1" : "0") + "|\nadd_text_input|minimum_entry_level|World Level: |" + to_string(world_->entry_level) + "|3|\nadd_smalltext|Set minimum world entry level.|" + (world_->World_Time != 0 ? "\nadd_smalltext|Current World Timer set to: `2" + to_string(world_->World_Time) + " minutes``.|left|" : "") + "\nadd_button|sessionlength_dialog|`wSet World Timer``|noflags|0|0|\nadd_spacer|small|\nadd_button|changecat|`wCategory: " + (world_->category.empty() ? "None" : world_->category) + "``|noflags|0|0|" + guild_key + "\nadd_button|abondonguildconfirm|`wAbandon Guild``|noflags|0|0|\nend_dialog|editguildlock|Cancel|OK|\nadd_quick_exit|");
			}
		}
		else {
			std::string access_list_ = "";
			for (int i_ = 0; i_ < world_->admins.size(); i_++) access_list_ += "\nadd_checkbox|checkbox_/" + world_->admins[i_] + "|`w" + world_->admins[i_] + "``|1";
			if (access_list_.empty()) access_list_ = "\nadd_label|small|Currently, you're the only one with access.``|left";
			std::string world_key = "\nadd_button|getKey|Get World Key|noflags|0|0|";
			int c_ = 0;
			Inventory::Modify(peer, 1424, c_);
			if (c_ != 0) world_key = "";
			VarList::OnDialogRequest(peer, SetColor(peer) + "set_default_color|`o\nadd_label_with_icon|big|`wEdit " + items[t_].name + "``|left|" + to_string(t_) + "|\nadd_label|small|`wAccess list:``|left\nembed_data|tilex|" + to_string(x_) + "\nembed_data|tiley|" + to_string(y_) + "\nadd_spacer|small|" + access_list_ + "\nadd_spacer|small|\nadd_player_picker|playerNetID|`wAdd``|\nadd_checkbox|checkbox_public|Allow anyone to Build and Break|" + to_string(world_->world_settings & SETTINGS::SETTINGS_4) + "\nadd_checkbox|checkbox_vending|Allow admins to edit vending|" + to_string(world_->world_settings & SETTINGS::SETTINGS_3) + "\nadd_checkbox|checkbox_magplant|Allow admins to edit magplant|" + to_string(world_->world_settings & SETTINGS::SETTINGS_10) + "\nadd_checkbox|checkbox_drop|Block picking up items|" + to_string(world_->world_settings & SETTINGS::SETTINGS_2) + "\nadd_checkbox|checkbox_cheater|Disable Cheater Role|" + to_string(world_->world_settings & SETTINGS::SETTINGS_12) + "\nadd_checkbox|checkbox_disable_music|Disable Custom Music Blocks|" + (world_->world_settings & SETTINGS::SETTINGS_5 ? "1" : "0") + "\nadd_text_input|tempo|Music BPM|" + to_string(world_->music_bpm) + "|3|\nadd_checkbox|checkbox_disable_music_render|Make Custom Music Blocks invisible|" + (to_string(world_->world_settings & SETTINGS::SETTINGS_6)) + a + (not pInfo(peer)->home_world.empty() ? "\nadd_smalltext|Your current home world is: " + pInfo(peer)->home_world + "|left|" : "") + "\nadd_checkbox|checkbox_set_as_home_world|Set as Home World|" + (pInfo(peer)->home_world == world_->name ? "1" : "0") + (t_ == 4802 ? "\nadd_label|small|Ye Royal Options|left\nadd_checkbox|checkbox_silence|Silence, Peasants!|" + to_string(world_->world_settings & SETTINGS::SETTINGS_8) + "\nadd_checkbox|checkbox_rainbows|Royal Rainbows!|" + to_string(world_->world_settings & SETTINGS::SETTINGS_7) : "") + "|\nadd_text_input|minimum_entry_level|World Level: |" + to_string(world_->entry_level) + "|3|\nadd_smalltext|Set minimum world entry level.|" + (world_->World_Time != 0 ? "\nadd_smalltext|Current World Timer set to: `2" + to_string(world_->World_Time) + " minutes``.|left|" : "") + "\nadd_button|sessionlength_dialog|`wSet World Timer``|noflags|0|0|" + (t_ == 5980 ? "\nadd_smalltext|Current Gems Bonus in this world: `2x" + to_string(world_->gems) + "|" + (world_->gems_lvl == 12 ? "" : "\nadd_button|upg_gems_world|`wUpgrade Gems Bonus|noflags|0|0|") : "") + "\nadd_button|changecat|`wCategory: " + (world_->category.empty() ? "None" : world_->category) + "``|noflags|0|0|" + world_key + "\nend_dialog|lock_edit|Cancel|OK|");
		}
	}
	static void Growscan_Load(ENetPeer* peer, World* world_, WorldBlock* block_) {
		bool world_public = block_->spin, floating_public = block_->invert, access = Only_Access(peer, world_, block_);
		if (access) {
			VarList::OnDialogRequest(peer, SetColor(peer) + a + "set_default_color|`o\nadd_label_with_icon|big|`wWorld Stats``|left|6016|\nadd_spacer|small|\nadd_textbox|`wThis amazing block can show the stats for the whole world!|left\nadd_spacer|small|\nadd_textbox|`wWhich stats would you like to view?|left\nadd_button|worldBlocks|World Blocks|noflags|0|0|\nadd_button|floatingItems|Floating Items|noflags|0|0|" + (access ? "\nadd_spacer|small|\nadd_textbox|`wYou can set the stats to be usable by the public.|left\nadd_checkbox|isStatsWorldBlockUsableByPublic|World blocks is usable by public|" + a + (world_public == false ? "0" : "1") + "\nadd_checkbox|isStatsFloatingItemsUsableByPublic|Floating items is usable by public|" + (floating_public == false ? "0" : "1") : "") + "\nadd_spacer|small|\nend_dialog|statsblock|Cancel|Apply|\n");
		}
		else VarList::OnDialogRequest(peer, SetColor(peer) + a + "set_default_color|`o\nadd_label_with_icon|big|`wWorld Stats``|left|6016|\nadd_spacer|small|" + (floating_public == false and world_public == false ? "\nadd_textbox|`wYou don't have access to this block.|left" : "\nadd_textbox|`wThis amazing block can show the stats for the whole world!|left\nadd_spacer|small|\nadd_textbox|`wWhich stats would you like to view?|left") + "" + (world_public == true ? "\nadd_button|worldBlocks|World Blocks|noflags|0|0|" : "") + "" + (floating_public == true ? "\nadd_button|floatingItems|Floating Items|noflags|0|0|" : "") + "\nadd_spacer|small|\nend_dialog|statsblock|Cancel||\n");
	}
	static void Growscan_Floating(ENetPeer* peer, std::string search, std::string type) {
		int total_floating = 0, total_rarity = 0, total_super_item = 0, total_gems = 0;
		std::vector<std::pair<int, int>> founditems;
		std::string name_ = pInfo(peer)->world;
		std::string found_list = "";
		std::vector<World>::iterator px = find_if(worlds.begin(), worlds.end(), [name_](const World& a) { return a.name == name_; });
		if (px != worlds.end()) {
			World* world_ = &worlds[px - worlds.begin()];
			for (int i_ = 0; i_ < world_->drop_new.size(); i_++) {
				if (world_->drop_new[i_][0] == 0) continue;
				if (world_->drop_new[i_][0] != 0 || world_->drop_new[i_][3] > 0 || world_->drop_new[i_][4] > 0) {
					if (search == "start") {
						total_floating++;
						if (items[world_->drop_new[i_][0]].rarity < 363) total_rarity += items[world_->drop_new[i_][0]].rarity * world_->drop_new[i_][1];
						else if (items[world_->drop_new[i_][0]].rarity == 999)total_super_item += world_->drop_new[i_][1];
						if (world_->drop_new[i_][0] == 112 || world_->drop_new[i_][0] == 4490) total_gems += (world_->drop_new[i_][0] == 4490 ? 1000 * world_->drop_new[i_][1] : world_->drop_new[i_][1]);
					}
					else if (type == "1" or type == "2" and items[world_->drop_new[i_][0]].blockType == BlockTypes::CLOTHING or type == "3" and items[world_->drop_new[i_][0]].blockType == BlockTypes::CONSUMABLE or type == "4" and items[world_->drop_new[i_][0]].blockType == BlockTypes::FOREGROUND or type == "5" and items[world_->drop_new[i_][0]].blockType == BlockTypes::SEED or type == "6" and items[world_->drop_new[i_][0]].blockType == BlockTypes::LOCK) {
						if (to_lower(items[world_->drop_new[i_][0]].name).find(to_lower(search)) != string::npos) {
							bool copy = true;
							for (int i = 0; i < founditems.size(); i++) {
								if (founditems[i].first == world_->drop_new[i_][0]) {
									founditems[i].second += world_->drop_new[i_][1];
									copy = false;
								}
							}
							if (copy) founditems.push_back(make_pair(world_->drop_new[i_][0], world_->drop_new[i_][1]));
						}
					}
				}
			}
			for (int i = 0; i < founditems.size(); i++) found_list += to_string(founditems[i].first) + "," + to_string(founditems[i].second) + ",";
		}
		if (search == "start") VarList::OnDialogRequest(peer, SetColor(peer) + "set_default_color|`o\nadd_label_with_icon|big|`wFloating Items``|left|6016|\nadd_spacer|small|\nadd_textbox|`wTotal number in world: " + to_string(total_floating) + "|left\nadd_textbox|`wTotal floating item rarity: " + to_string(total_rarity) + "|left|\nadd_textbox|`wTotal super rare items: " + to_string(total_super_item) + "|left|\nadd_textbox|`wTotal gems: " + to_string(total_gems) + "|left|\nadd_spacer|small|\nadd_text_input|searchName|Search by Name||100|\nadd_button|search_1|Search All|noflags|0|0|\nadd_smalltext|`5Or filter search by type``|left|\nadd_button|search_2|Search Clothing|noflags|0|0|\nadd_button|search_3|Search Consumables|noflags|0|0|\nadd_button|search_4|Search Blocks and Backgrounds|noflags|0|0|\nadd_button|search_5|Search Seeds|noflags|0|0|\nadd_button|search_6|Search Locks|noflags|0|0|\nadd_button|search_1|Search Others|noflags|0|0|\nadd_spacer|small|\nadd_button|back_to_gscan|Back|noflags|0|0|\nend_dialog|statsblock|||\n");
		else {
			if (found_list.empty()) VarList::OnDialogRequest(peer, SetColor(peer) + "set_default_color|`o\nadd_label_with_icon|big|`wFloating Items``|left|6016|\nadd_spacer|small|\nadd_textbox|No items found.|left|\nadd_spacer|small|\nadd_button|floatingItems|Back|noflags|0|0|\nend_dialog|statsblock|||\n");
			else VarList::OnDialogRequest(peer, SetColor(peer) + "set_default_color|`o\nadd_label_with_icon|big|`wFloating Items``|left|6016|\nadd_spacer|small|\nadd_textbox|Press on the icon to be directed to the location of the item.|left|\nadd_spacer|small|\nadd_label_with_icon_button_list|small|`w%s : %s|left|findObject_|itemID_itemAmount|" + found_list + "\nadd_spacer|small|\nadd_button|floatingItems|Back|noflags|0|0|\nend_dialog|statsblock|||\n");
		}
	}
	static void Growscan_Blocks(ENetPeer* peer, std::string search, std::string type) {
		int total_block = 0, total_background = 0, total_untradeable = 0, total_super_rare_item = 0, total_rarity = 0, total_fire = 0, total_water = 0, total_earth = 0, total_air = 0;
		std::string name_ = pInfo(peer)->world;
		std::string found_list = "";
		std::vector<std::pair<int, int>> founditems;
		std::vector<World>::iterator px = find_if(worlds.begin(), worlds.end(), [name_](const World& a) { return a.name == name_; });
		if (px != worlds.end()) {
			World* world_ = &worlds[px - worlds.begin()];
			for (int i_ = 0; i_ < world_->blocks.size(); i_++) {
				if (world_->blocks[i_].fg != 8 && world_->blocks[i_].fg != 6) {
					if (search == "start") {
						if (world_->blocks[i_].fg != 0) total_block++;
						if (world_->blocks[i_].bg != 0) total_background++;
						if (world_->blocks[i_].fg != 0 && items[world_->blocks[i_].fg].untradeable == 1 or world_->blocks[i_].bg != 0 && items[world_->blocks[i_].bg].untradeable == 1) total_untradeable++;
						if (world_->blocks[i_].fg != 0 and items[world_->blocks[i_].fg].rarity >= 999 or world_->blocks[i_].bg != 0 and items[world_->blocks[i_].bg].rarity >= 999) total_super_rare_item++;
						if (items[world_->blocks[i_].fg].rarity < 363 and items[world_->blocks[i_].fg].rarity != 999) if (world_->blocks[i_].fg != 0) total_rarity += items[world_->blocks[i_].fg].rarity;
						if (world_->blocks[i_].fg != 0 and items[world_->blocks[i_].fg].chi == 0 or world_->blocks[i_].bg != 0 and items[world_->blocks[i_].bg].chi == 0) total_earth++;
						if (world_->blocks[i_].fg != 0 and items[world_->blocks[i_].fg].chi == 1 or world_->blocks[i_].bg != 0 and items[world_->blocks[i_].bg].chi == 1) total_fire++;
						if (world_->blocks[i_].fg != 0 and items[world_->blocks[i_].fg].chi == 2 or world_->blocks[i_].bg != 0 and items[world_->blocks[i_].bg].chi == 2) total_air++;
						if (world_->blocks[i_].fg != 0 and items[world_->blocks[i_].fg].chi == 3 or world_->blocks[i_].bg != 0 and items[world_->blocks[i_].bg].chi == 3) total_water++;
					}
					else if (type == "1" or type == "2") {
						if (to_lower(items[world_->blocks[i_].fg].name).find(to_lower(search)) != string::npos || (type == "1" && to_lower(items[world_->blocks[i_].bg].name).find(to_lower(search)) != string::npos)) {
							if (world_->blocks[i_].fg != 0) {
								bool copy_fg = true;
								for (int i = 0; i < founditems.size(); i++) {
									if (founditems[i].first == world_->blocks[i_].fg) {
										founditems[i].second++;
										copy_fg = false;
									}
								}
								if (copy_fg) founditems.push_back(make_pair(world_->blocks[i_].fg, 1));
							}
							if (type == "1" && world_->blocks[i_].bg != 0) {
								bool copy_bg = true;
								for (int i = 0; i < founditems.size(); i++) {
									if (founditems[i].first == world_->blocks[i_].bg) {
										founditems[i].second++;
										copy_bg = false;
									}
								}
								if (copy_bg) founditems.push_back(make_pair(world_->blocks[i_].bg, 1));
							}
						}
					}
					else if (type == "3") {
						if (to_lower(items[world_->blocks[i_].bg].name).find(to_lower(search)) != string::npos) {
							if (world_->blocks[i_].bg != 0) {
								bool copy_bg = true;
								for (int i = 0; i < founditems.size(); i++) {
									if (founditems[i].first == world_->blocks[i_].bg) {
										founditems[i].second++;
										copy_bg = false;
									}
								}
								if (copy_bg) founditems.push_back(make_pair(world_->blocks[i_].bg, 1));
							}
						}
					}
					else if (type == "5") {
						if (world_->blocks[i_].fg == 2946 && world_->blocks[i_].id != 0) {
							founditems.push_back(make_pair(world_->blocks[i_].id, 1));
						}
					}
					else if (type == "4") {
						if (to_lower(items[world_->blocks[i_].fg].name).find(to_lower(search)) != string::npos || to_lower(items[world_->blocks[i_].bg].name).find(to_lower(search)) != string::npos) {
							if (world_->blocks[i_].fg != 0 && items[world_->blocks[i_].fg].untradeable == 1 or world_->blocks[i_].bg != 0 && items[world_->blocks[i_].bg].untradeable == 1) {
								if (world_->blocks[i_].fg != 0) {
									bool copy_fg = true;
									for (int i = 0; i < founditems.size(); i++) {
										if (founditems[i].first == world_->blocks[i_].fg) {
											founditems[i].second++;
											copy_fg = false;
										}
									}
									if (copy_fg) founditems.push_back(make_pair(world_->blocks[i_].fg, 1));
								}
								if (world_->blocks[i_].bg != 0) {
									bool copy_bg = true;
									for (int i = 0; i < founditems.size(); i++) {
										if (founditems[i].first == world_->blocks[i_].bg) {
											founditems[i].second++;
											copy_bg = false;
										}
									}
									if (copy_bg) founditems.push_back(make_pair(world_->blocks[i_].bg, 1));
								}
							}
						}
					}
				}
			}
			for (int i = 0; i < founditems.size(); i++) found_list += to_string(founditems[i].first) + "," + to_string(founditems[i].second) + ",";
		}
		if (search == "start") VarList::OnDialogRequest(peer, SetColor(peer) + "set_default_color|`o\nadd_label_with_icon|big|`wWorld Blocks``|left|6016|\nadd_spacer|small|\nadd_label|small|`wThis world contains|left\nadd_textbox|`wBlocks: " + to_string(total_block) + "``|\nadd_textbox|`wBackgrounds: " + to_string(total_background) + "``|\nadd_textbox|`wUntradeable blocks: " + to_string(total_untradeable) + "``|left|\nadd_textbox|`wSuper rare items: " + to_string(total_super_rare_item) + "|left|\nadd_textbox|`wTotal block rarity: " + to_string(total_rarity) + "``|left|\nadd_label_with_icon|small|`wFire: " + to_string(total_fire) + "|left|6020|\nadd_label_with_icon|small|`wWater: " + to_string(total_water) + "|left|6024|\nadd_label_with_icon|small|`wEarth: " + to_string(total_earth) + "|left|6018|\nadd_label_with_icon|small|`wAir: " + to_string(total_air) + "|left|6022|\nadd_spacer|small|\nadd_text_input|searchName|Search by Name||100|\nadd_button|search_1|Search All|noflags|0|0|\nadd_smalltext|`5Or filter search by type``|left|\nadd_button|search_2|Search Blocks|noflags|0|0|\nadd_button|search_3|Search Backgrounds|noflags|0|0|\nadd_button|search_4|Search Untradeable|noflags|0|0|\nadd_button|search_5|Search Display Block|noflags|0|0|\nadd_spacer|small|\nadd_button|back_to_gscan|Back|noflags|0|0|\nend_dialog|statsblockworld|||\n");
		else {
			if (found_list.empty()) VarList::OnDialogRequest(peer, SetColor(peer) + "set_default_color|`o\nadd_label_with_icon|big|`wWorld Blocks``|left|6016|\nadd_spacer|small|\nadd_textbox|No results found.|left|\nadd_spacer|small|\nadd_button|worldBlocks|Back|noflags|0|0|\nend_dialog|statsblock|||\n");
			else VarList::OnDialogRequest(peer, SetColor(peer) + "set_default_color|`o\nadd_label_with_icon|big|`wWorld Blocks``|left|6016|\nadd_spacer|small|\nadd_button|worldBlocks|Back|noflags|0|0|\nadd_spacer|small|\nadd_quick_exit|\nadd_textbox|Press on the icon to be directed to the location of the item.|left|\nadd_spacer|small|\nadd_label_with_icon_button_list|small|`w%s : %s|left|findTile_|itemIDseed2tree_itemAmount|" + found_list + "\nadd_spacer|small|\nadd_button|worldBlocks|Back|noflags|0|0|\nend_dialog|statsblockworld|||\n");
		}
	}
	static void DNA_Processor(ENetPeer* peer, int x, int y, bool Erorr, bool Analisa, bool RemoveDNA, int IDDNARemove, bool MasukinDNA, bool Invalid) {
		std::string name_ = pInfo(peer)->world;
		std::vector<World>::iterator p = find_if(worlds.begin(), worlds.end(), [name_](const World& a) { return a.name == name_; });
		if (p != worlds.end()) {
			World* world_ = &worlds[p - worlds.begin()];
			WorldBlock* block_ = &world_->blocks[pInfo(peer)->lastwrenchx + (pInfo(peer)->lastwrenchy * 100)];
			if (not Only_Access(peer, world_, block_)) return;
			std::string Dialog;
			Dialog += "set_default_color|`o\nadd_label_with_icon|big|`wDNA Processor``|left|4080|";
			Dialog += "\nadd_spacer|small|\nembed_data|tilex|" + to_string(x) + "\nembed_data|tiley|" + to_string(y);
			if (Erorr) {
				Dialog += "\nadd_textbox|`4ERROR:`` That's not a DNA sample.|left|\nadd_spacer|small|";
			}
			if (Analisa) {
				Dialog += "\nadd_textbox|`2DNA analyzed.``|left|\nadd_spacer|small|";
			}
			if (RemoveDNA) {
				Dialog += "\nadd_textbox|`2" + items[IDDNARemove].name + " removed.``|left|\nadd_spacer|small|";
			}
			if (MasukinDNA) {
				if (block_->shelf_4 == 1) {
					Dialog += "\nadd_smalltext|[`2DNA sequence 33% complete``]|left|";
				}
				else if (block_->shelf_4 == 2) {
					Dialog += "\nadd_smalltext|[`2DNA sequence 66% complete``]|left|";
				}
				else if (block_->shelf_4 == 3) {
					Dialog += "\nadd_smalltext|[`2DNA sequence 100% complete``]|left|";
				}
			}
			if (block_->shelf_1 != 0) {
				Dialog += "\nadd_button_with_icon|remove0|`9" + items[block_->shelf_1].name + "``|noflags|" + to_string(block_->shelf_1) + "||";
			}
			if (block_->shelf_2 != 0) {
				Dialog += "\nadd_button_with_icon|remove1|`9" + items[block_->shelf_2].name + "``|noflags|" + to_string(block_->shelf_2) + "||";
			}
			if (block_->shelf_3 != 0) {
				Dialog += "\nadd_button_with_icon|remove2|`9" + items[block_->shelf_3].name + "``|noflags|" + to_string(block_->shelf_3) + "||";
			}
			if (block_->shelf_4 > 0) {
				Dialog += "\nadd_button_with_icon||END_LIST|noflags|0||";
			}
			if (block_->shelf_4 == 3) {
				if (Invalid) {
					Dialog += "\nadd_smalltext|`4DNA SEQUENCE INVALID``|left|";
				}
				else {
					Dialog += "\nadd_button|combine|`2Combine DNA sequence``|noflags|0|0|";
				}
			}
			else {
				if (block_->shelf_4 == 0) {
					Dialog += "\nadd_textbox|DNA Processing ready. Please insert DNA strand.|left|";
				}
				Dialog += "\nadd_item_picker|choose|Insert DNA Here|Select a DNA Strand|";
			}
			Dialog += "\nend_dialog|dnaproc|Exit||";
			VarList::OnDialogRequest(peer, SetColor(peer) + Dialog);
		}
	}
	static void View_Inventory(ENetPeer* peer, const std::string targetName) {
		bool found = false;
		std::string list_ = ""; int total_ = 0;
		for (ENetPeer* cp_ = server->peers; cp_ < &server->peers[server->peerCount]; ++cp_) {
			if (cp_->state != ENET_PEER_STATE_CONNECTED || cp_->data == NULL) continue;
			if (to_lower(pInfo(cp_)->tankIDName) == to_lower(targetName)) {
				found = true;
				for (const auto& inv : pInfo(cp_)->inv) {
					total_++;
					if (inv.first != 0) list_ += to_string(inv.first) + ", " + to_string(inv.second) + ", ";
				}
			}
		}
		if (not found) {
			const auto offline_inventory = getOfflineInventory(targetName);
			for (const auto& inv : offline_inventory) {
				total_++;
				if (inv.first != 0) list_ += to_string(inv.first) + ", " + to_string(inv.second) + ", ";
			}
		}
		VarList::OnDialogRequest(peer, SetColor(peer) + "set_default_color|`o\nembed_data|target_name|" + targetName + "|\nadd_label_with_icon|big|`o" + targetName + "'s Inventory|left|32|\nadd_spacer|small|\nadd_text_input|item_search_field|`oSearch By Name:||30|\nadd_spacer|small|\nadd_searchable_item_list|" + list_ + "|listType:iconGrid;resultLimit:" + to_string(total_) + ";|item_search_field|\nend_dialog|inv_rm|||\nadd_quick_exit|");
	}
};
void insertGiveaway(ENetPeer* peer, int itemID, int count) {
	bool notfound = true;
	if (giveaway.Items.size() > 9) return;
	for (auto& item : giveaway.Items) {
		if (itemID == item.first) {
			notfound = false;
			item.second = count;
			if (count == 0) {
				giveaway.Items.erase(std::remove_if(giveaway.Items.begin(), giveaway.Items.end(), [itemID](const std::pair<int, int>& element) {return element.first == itemID; }), giveaway.Items.end());
			}
		}
	}
	if (notfound) giveaway.Items.push_back({ itemID, count });
	DialogHandle::Giveaway(peer);
}
int get_wls(ENetPeer* peer, bool bgl = false, bool erase = false, int amount = 0, bool add = false) {
	int my_wls = 0, c_ = 0, remove_ = 0;
	Inventory::Modify(peer, 242, c_);
	my_wls += c_;
	if (erase) {
		remove_ = -1 * c_;
		Inventory::Modify(peer, 242, remove_);
	}
	c_ = 0;
	Inventory::Modify(peer, 1796, c_);
	my_wls += c_ * 100;
	if (erase) {
		remove_ = -1 * c_;
		Inventory::Modify(peer, 1796, remove_);
	}
	if (bgl) {
		c_ = 0;
		Inventory::Modify(peer, 7188, c_);
		my_wls += c_ * 10000;
		if (erase) {
			remove_ = -1 * c_;
			Inventory::Modify(peer, 7188, remove_);
		}
	}
	if (erase && amount) {
		int total_wl = my_wls - amount, c_ = 0;
		bool returned = false;
		if (total_wl >= 10000) {
			if (total_wl > 2000000) c_ = 200;
			else c_ = total_wl / 10000;
			total_wl -= c_ * 10000;
			if (Inventory::Modify(peer, 7188, c_) == 0) {
			}
			else pInfo(peer)->pgl_bank_amount += c_, returned = true;
			c_ = 0;
		}
		if (total_wl >= 100) {
			if (total_wl > 20000) c_ = 200;
			else c_ = total_wl / 100;
			total_wl -= c_ * 100;
			if (Inventory::Modify(peer, 1796, c_) == 0) {
			}
			else pInfo(peer)->dl_bank_amount += c_, returned = true;
			c_ = 0;
		}
		if (total_wl >= 1) {
			if (total_wl > 200) c_ = 200;
			else c_ = total_wl;
			total_wl -= c_;
			if (Inventory::Modify(peer, 242, c_) == 0) {
			}
			else pInfo(peer)->wl_bank_amount += c_, returned = true;
			c_ = 0;
		}
		if (returned) {
			gamepacket_t p, p2(1500);
			p.Insert("OnTextOverlay"), p.Insert("Some of the World Locks could not fit in your inventory!"), p.CreatePacket(peer);
			p2.Insert("OnTextOverlay"), p2.Insert("We have placed them in your Personal Backpack."), p2.CreatePacket(peer);
		}
	}
	return my_wls;
}
void get_wl_value(ENetPeer* peer, std::string& hold) {
	uint16_t wl = 0, dl = 0, bgl = 0;
	for (int i_ = 0; i_ < pInfo(peer)->inv.size(); i_++) {
		if (pInfo(peer)->inv[i_].first == 242) wl = pInfo(peer)->inv[i_].second;
		if (pInfo(peer)->inv[i_].first == 1796) dl = pInfo(peer)->inv[i_].second;
		if (pInfo(peer)->inv[i_].first == 7188) bgl = pInfo(peer)->inv[i_].second;
		if (wl && dl && bgl) break;
	}
	hold = "\nadd_smalltext|`9(Hmm, smells like you don't carry any world locks)``|left|";
	if (wl != 0 || dl != 0) hold = "\nadd_smalltext|`9(Hmm, smells like you care carrying";
	if (wl) hold += " " + to_string(wl) + " World Locks" + (dl != 0 ? " and" : ")``|left|") + "";
	if (dl) hold += " " + to_string(dl) + " Diamond Locks)``|left|";
	if (bgl && wl == 0 && dl == 0) hold = "\nadd_smalltext|`9(Hmm, smells like you care carrying " + to_string(bgl) + " Platinum Gem Locks)``|left|";
	else if (bgl) hold += "\nadd_smalltext|`9(You are also holding additional " + to_string(bgl) + " Platinum Gem Locks)``|left|";
}
class Wipe {
public:
	static void Darkticket(ENetPeer* peer, bool prize = false) {
		std::string name_ = pInfo(peer)->world;
		if (Playmods::HasById(pInfo(peer), 127), 30) {
			if (name_ == "TOMBOFGROWGANOTH1" || name_ == "TOMBOFGROWGANOTH2" || name_ == "TOMBOFGROWGANOTH3") {
				if (prize) {
					if (pInfo(peer)->halloween_prize_receive == false) {
						pInfo(peer)->halloween_prize_receive = true;
						std::vector<int> list{ 10328 , 12794  , 12770 , 12402 };
						int item_ = list[rand() % list.size()], give_count = 1, given_ = 0;
						if (item_ == 12794) give_count = 5;
						given_ = give_count;
						if (Inventory::Modify(peer, item_, given_) == 0) {
						}
						else {
							std::vector<World>::iterator p = find_if(worlds.begin(), worlds.end(), [name_](const World& a) { return a.name == name_; });
							if (p != worlds.end()) {
								World* world_ = &worlds[p - worlds.begin()];
								WorldDrop drop_block_{};
								drop_block_.x = pInfo(peer)->x + rand() % 17, drop_block_.y = pInfo(peer)->y + rand() % 17, drop_block_.id = item_, drop_block_.count = give_count, drop_block_.uid = uint16_t(world_->drop_new.size()) + 1;
								VisualHandle::Drop(world_, drop_block_);
							}
						}
						for (ENetPeer* cp_ = server->peers; cp_ < &server->peers[server->peerCount]; ++cp_) {
							if (cp_->state != ENET_PEER_STATE_CONNECTED or cp_->data == NULL or pInfo(cp_)->world != name_) continue;
							CAction::Effect_V2(cp_, 13, (float)pInfo(peer)->x + 16, (float)pInfo(peer)->y + 16);
							CAction::Effect_V2(cp_, 22, (float)pInfo(peer)->x + 16, (float)pInfo(peer)->y + 16);
						}
						VarList::OnEndMission(peer);
						VarList::OnConsoleMessage(peer, "You will be kicked out of the world in `$30 seconds``.");
						VarList::OnTalkBubble(peer, pInfo(peer)->netID, "Thanks for completing the `2Growganoth Parkour``! As a reward I'm giving you `2" + items[item_].ori_name + "``!", 0, 1);
					}
				}
			}
		}
	}
	static void Whistle(ENetPeer* peer) {
		std::string name_ = pInfo(peer)->world;
		if (Playmods::HasById(pInfo(peer), 128, 10)) {
			if (name_ == "WW1" || name_ == "WW2" || name_ == "WW3" || name_ == "WW4" || name_ == "WW5" || name_ == "WW6" || name_ == "WW7") {
				if (not pInfo(peer)->wolf_world.empty()) {
					pInfo(peer)->wolf_world.clear();
					int give_times = 1;
					if (pInfo(peer)->gp) {
						if (complete_gpass_task(peer, "Wolf")) give_times++;
					}
					int item_ = 4354;
					for (int i = 0; i < give_times; i++) {
						int give_count = 1;
						std::vector<int> list{ 13076, 11650, 13042, 12782 ,4354,122,124,1188,4346,8544,2996,4342,3136,10082,12486,4352,8262,8264,8266,8268,2998,3538,2986,2984,2992,4348,4350,6842,3774,4344,3176,7146,11338 };
						item_ = list[rand() % list.size()];
						if (Inventory::Modify(peer, item_, give_count) == 0) {
						}
						else {
							std::vector<World>::iterator p = find_if(worlds.begin(), worlds.end(), [name_](const World& a) { return a.name == name_; });
							if (p != worlds.end()) {
								World* world_ = &worlds[p - worlds.begin()];
								WorldDrop drop_block_{};
								drop_block_.x = pInfo(peer)->x + rand() % 17, drop_block_.y = pInfo(peer)->y + rand() % 17, drop_block_.id = item_, drop_block_.count = 1;
								VisualHandle::Drop(world_, drop_block_);
							}
						}
						int w_ticket = 1;
						if (Inventory::Modify(peer, 4354, w_ticket) == 0) {
						}
						else {
							std::vector<World>::iterator p = find_if(worlds.begin(), worlds.end(), [name_](const World& a) { return a.name == name_; });
							if (p != worlds.end()) {
								World* world_ = &worlds[p - worlds.begin()];
								WorldDrop drop_block_{};
								drop_block_.x = pInfo(peer)->x + rand() % 17, drop_block_.y = pInfo(peer)->y + rand() % 17, drop_block_.id = 4354, drop_block_.count = 1;
								VisualHandle::Drop(world_, drop_block_);
							}
						}
					}
					for (ENetPeer* cp_ = server->peers; cp_ < &server->peers[server->peerCount]; ++cp_) {
						if (cp_->state != ENET_PEER_STATE_CONNECTED or cp_->data == NULL or pInfo(cp_)->world != name_) continue;
						CAction::Effect_V2(cp_, 13, (float)pInfo(peer)->x + 16, (float)pInfo(peer)->y + 16);
						CAction::Effect_V2(cp_, 22, (float)pInfo(peer)->x + 16, (float)pInfo(peer)->y + 16);
					}
					VarList::OnEndMission(peer);
					VarList::OnConsoleMessage(peer, "Thanks for completing the `2Wolf Parkour``! As a reward I'm giving you `2" + items[item_].ori_name + "``!");
					VarList::OnTalkBubble(peer, pInfo(peer)->netID, "Thanks for completing the `2Wolf Parkour``! As a reward I'm giving you `2" + items[item_].ori_name + "``!", 0, 1);
				}
			}
		}
	}
};
void add_peer_xp(ENetPeer* peer, int amount, bool bonus = false, int from = 0) {
	if (pInfo(peer)->gp) amount++;
	if (Playmods::HasById(pInfo(peer), 53) || Playmods::HasById(pInfo(peer), 134) || Playmods::HasById(pInfo(peer), 97) || Playmods::HasById(pInfo(peer), 106) || Playmods::HasByName(pInfo(peer), "Extra XP")) {
		if ((rand() % 25) + 1 == pInfo(peer)->ances != 0 ? items[pInfo(peer)->ances].chance : 7) {
			bonus = true;
			amount *= 2;
		}
	}
	for (int i_2 = 0; i_2 < EditItem.size(); i_2++) {
		if (EditItem[i_2].ID == from or EditItem[i_2].ID == pInfo(peer)->hand or EditItem[i_2].ID == pInfo(peer)->necklace or EditItem[i_2].ID == pInfo(peer)->pants or EditItem[i_2].ID == pInfo(peer)->shirt or EditItem[i_2].ID == pInfo(peer)->face or EditItem[i_2].ID == pInfo(peer)->mask or EditItem[i_2].ID == pInfo(peer)->hair or EditItem[i_2].ID == pInfo(peer)->feet or EditItem[i_2].ID == pInfo(peer)->back) {
			if (EditItem[i_2].Xp != 0) amount *= EditItem[i_2].Xp;
		}
	}
	if (bonus) {
		for (ENetPeer* cp_ = server->peers; cp_ < &server->peers[server->peerCount]; ++cp_) {
			if (cp_->state != ENET_PEER_STATE_CONNECTED or cp_->data == NULL) continue;
			if (pInfo(cp_)->world == pInfo(peer)->world) CAction::Effect(cp_, 49, (float)pInfo(peer)->x + 16, (float)pInfo(peer)->y + 16);
		}
	}
	if (pInfo(peer)->guild_id != 0) {
		uint32_t guild_id = pInfo(peer)->guild_id;
		vector<Guild>::iterator p = find_if(guilds.begin(), guilds.end(), [guild_id](const Guild& a) { return a.guild_id == guild_id; });
		if (p != guilds.end()) {
			Guild* guild_information = &guilds[p - guilds.begin()];
			guild_information->guild_settings &= ~SETTINGS::SETTINGS_0;
			guild_information->guild_settings |= SETTINGS::SETTINGS_0;
			if (guild_information->guild_level < guild_lvl.size()) {
				uint32_t max_xp = guild_lvl[guild_information->guild_level - 1][0];
				if (guild_information->guild_xp < max_xp) {
					guild_information->guild_xp += amount;
					if (guild_information->guild_xp > max_xp) guild_information->guild_xp = max_xp;
				}
			}
		}
	}
	int required = 50 * ((pInfo(peer)->level * pInfo(peer)->level) + 2);
	if (pInfo(peer)->lwiz_step == 8) add_lwiz_points(peer, amount);
	if (pInfo(peer)->C_QuestActive && pInfo(peer)->C_QuestKind == 6 && pInfo(peer)->C_QuestProgress < pInfo(peer)->C_ProgressNeeded) {
		pInfo(peer)->C_QuestProgress += amount;
		if (pInfo(peer)->C_QuestProgress >= pInfo(peer)->C_ProgressNeeded) {
			pInfo(peer)->C_QuestProgress = pInfo(peer)->C_ProgressNeeded;
			VarList::OnTalkBubble(peer, pInfo(peer)->netID, "`9Ring Quest task complete! Go tell the Ringmaster!", 0, 0);
		}
	}
	if (pInfo(peer)->lifegoals1 && not pInfo(peer)->lifegoals_1 and pInfo(peer)->seed_goal < 1000) {
		pInfo(peer)->seed_goal += amount;
		if (pInfo(peer)->seed_goal >= 1000) {
			pInfo(peer)->seed_goal = 1000;
			VarList::OnConsoleMessage(peer, "`9Life Goal ''`2Earn 1,000 XP``'' is complete! Go call Crazy Jim!");
			VarList::OnTalkBubble(peer, pInfo(peer)->netID, "`9Life Goal ''`2Earn 1,000 XP``'' is complete! Go call Crazy Jim!", 0, 0);
		}
	}
	if (pInfo(peer)->level <= 1000) {
		if (pInfo(peer)->level == 1000) return;
		if (pInfo(peer)->show_pets == true) {
			if (pInfo(peer)->Pets_Xp_Lvl == 1) amount += 1;
			if (pInfo(peer)->Pets_Xp_Lvl == 2) amount += 2;
			if (pInfo(peer)->Pets_Xp_Lvl == 3) amount += 3;
			if (pInfo(peer)->Pets_Xp_Lvl == 4) amount += 4;
			if (pInfo(peer)->Pets_Xp_Lvl == 5) amount += 5;
		}
		pInfo(peer)->xp += (Event()->Xp_Event ? Event()->X_Xp * amount : amount);
		pInfo(peer)->xp += (pInfo(peer)->show_pets and pInfo(peer)->ability_xxp > 0 ? pInfo(peer)->ability_xxp * amount : amount);
		int add_more = 0, timer = 0;
		for (add_more = 0; add_more < 1; add_more++) {
			if (pInfo(peer)->xp >= 50 * ((pInfo(peer)->level * pInfo(peer)->level) + 2)) {
				pInfo(peer)->level++;
				pInfo(peer)->xp -= required;
				std::string name_ = pInfo(peer)->world;
				std::vector<World>::iterator p = find_if(worlds.begin(), worlds.end(), [name_](const World& a) { return a.name == name_; });
				if (p != worlds.end()) {
					World* world_ = &worlds[p - worlds.begin()];
					if (pInfo(peer)->level == 5) form_emoji(peer, true);
					if (pInfo(peer)->level == 50 and not pInfo(peer)->mini_you) {
						int give = 1;
						if (Inventory::Modify(peer, 2278, give) != 0) {
							WorldDrop drop_block_{};
							drop_block_.id = 2278, drop_block_.count = 1, drop_block_.x = pInfo(peer)->x + rand() % 17, drop_block_.y = pInfo(peer)->y + rand() % 17;
							VisualHandle::Drop(world_, drop_block_);
						}
						pInfo(peer)->mini_you = true;
						VarList::OnAddNotification(peer, "You've unlocked `$Mini-You``!", "interface/large/friend_button.rttex", "audio/hub_open.wav");
						VarList::OnConsoleMessage(peer, "You've unlocked `$Mini-You``!");
					}
					if (pInfo(peer)->level == 100) Epic_Quest::Add(peer, "Level up to level 100", pInfo(peer)->epicq_lvl100, 100, 100);
				}
				for (ENetPeer* cp_ = server->peers; cp_ < &server->peers[server->peerCount]; ++cp_) {
					if (cp_->state != ENET_PEER_STATE_CONNECTED or cp_->data == NULL) continue;
					if (pInfo(cp_)->world == pInfo(peer)->world) {
						VarList::OnConsoleMessage(cp_, get_player_nick(peer) + " is now level " + to_string(pInfo(peer)->level) + "!", 0, timer);
						VarList::OnTalkBubble(cp_, pInfo(peer)->netID, get_player_nick(peer) + " is now level " + to_string(pInfo(peer)->level) + "!", 0, 0, timer);
						CAction::Effect(cp_, 46, (float)pInfo(peer)->x + 16, (float)pInfo(peer)->y + 16);
					}
				}
			}
			if (pInfo(peer)->xp >= 50 * ((pInfo(peer)->level * pInfo(peer)->level) + 2)) add_more -= 1, timer += 500;
		}
	}
}
void stop_fishing(ENetPeer* peer, bool fail, string error) {
	if (pInfo(peer)->fishing_used != 0) {
		gamepacket_t p, p2;
		p.Insert("OnTalkBubble"), p.Insert(pInfo(peer)->netID);
		p2.Insert("OnConsoleMessage");
		if (error.empty()) {
			if (pInfo(peer)->last_fish_catch + pInfo(peer)->fish_seconds < (duration_cast<milliseconds>(system_clock::now().time_since_epoch())).count()) p.Insert("There was nothing on the line!"), p2.Insert("There was nothing on the line!");
			else {
				int give_times = 1;
				if (pInfo(peer)->gp) {
					if (complete_gpass_task(peer, "Fish")) give_times++;
				}
				int giveitem = 0, c_ = 0;
				bool fish = false, fullinv = false;
				for (int i = 0; i < give_times; i++) {
					fish = false;
					giveitem = items[pInfo(peer)->fishing_used].randomitem[rand() % items[pInfo(peer)->fishing_used].randomitem.size()], c_ = 1;
					vector<int> list;
					if (pInfo(peer)->hand == 10262) {
						for (int i__ = 0; i__ < items[pInfo(peer)->fishing_used].randomitem.size(); i__++) if (items[items[pInfo(peer)->fishing_used].randomitem[i__]].blockType == BlockTypes::FISH) list.push_back(items[pInfo(peer)->fishing_used].randomitem[i__]);
						giveitem = list[rand() % list.size()];
					}
					if (giveitem == 3812) Epic_Quest::Add(peer, "Catch a Octopus Head", pInfo(peer)->epicq_octopushead, 1, 1);
					if (items[giveitem].blockType == BlockTypes::FISH) {
						fish = true, c_ = rand() % items[giveitem].fish_max_lb + 1;
						if (giveitem == 3814 and c_ >= 160) Epic_Quest::Add(peer, "Catch a Perfect Stonefish", pInfo(peer)->epicq_stonefish, 1, 1);
						if (event_item == 6256) EventPool::Guilds::Point::Add(peer, pInfo(peer)->hand);
					}
					if (Playmods::HasById(pInfo(peer), 146) and rand() % 50 < 2) {/*Guild Potion: Fishing*/
						c_ *= 1.05;
					}
					if (pInfo(peer)->hand == 3040 and fish) {
						c_ *= 1.25;
						if (c_ > items[giveitem].fish_max_lb) c_ = items[giveitem].fish_max_lb;
					}
					if (giveitem == 1486) if (pInfo(peer)->lwiz_step == 6) add_lwiz_points(peer, 1);
					if (rand() % 50 < 1) list.push_back(1486);
					if (rand() % 100 < 1) list.push_back(12566);
					if (rand() % 200 < 1) list.push_back(12568);
					if (fish) for (int i_ = 0, remove = 0; i_ < pInfo(peer)->inv.size(); i_++) if (pInfo(peer)->inv[i_].first == giveitem) fullinv = true;
					int give = 1;
					if (fullinv == false && fish == false && Inventory::Modify(peer, giveitem, give) == 0) {
					}
					else fullinv = true;
					if (fullinv || fish) {
						if (Playmods::HasById(pInfo(peer), 145)) VarList::OnBuxGems(peer, 125);
						std::string name_ = pInfo(peer)->world;
						std::vector<World>::iterator p = find_if(worlds.begin(), worlds.end(), [name_](const World& a) { return a.name == name_; });
						if (p != worlds.end()) {
							World* world_ = &worlds[p - worlds.begin()];
							WorldDrop drop_block_{};
							drop_block_.x = pInfo(peer)->x + rand() % 17, drop_block_.y = pInfo(peer)->y + rand() % 17, drop_block_.id = giveitem, drop_block_.count = c_;
							VisualHandle::Drop(world_, drop_block_);
						}
					}
				}
				PlayerMoving data_{};
				data_.x = pInfo(peer)->f_x * 32, data_.y = pInfo(peer)->f_y * 32, data_.packetType = 19, data_.plantingTree = 500, data_.punchX = giveitem, data_.punchY = pInfo(peer)->netID;
				int32_t to_netid = pInfo(peer)->netID;
				BYTE* raw = packPlayerMoving(&data_);
				raw[3] = 5;
				Memory_Copy(raw + 8, &to_netid, 4);
				for (ENetPeer* cp_ = server->peers; cp_ < &server->peers[server->peerCount]; ++cp_) {
					if (cp_->state != ENET_PEER_STATE_CONNECTED or cp_->data == NULL or pInfo(cp_)->world != pInfo(peer)->world) continue;
					send_raw(cp_, 4, raw, 56, ENET_PACKET_FLAG_RELIABLE);
				}
				delete[] raw;
				add_peer_xp(peer, items[pInfo(peer)->fishing_used].rarity + (pInfo(peer)->necklace == 7746 ? 6 : 0), (pInfo(peer)->necklace == 7746 ? true : false));
				if (pInfo(peer)->lvlKit < 100) Kit_Server::Add_Xp(peer, rand() % 28, "kit");
				if (Event()->dailyc_name == "Fish Frenzy") Daily_Challenge::Add_Points(peer, c_);
				Pet_Ai::Add_Xp(peer, items[pInfo(peer)->fishing_used].rarity + (pInfo(peer)->necklace == 7746 ? 6 : 0));
				if (fish && pInfo(peer)->starglitter_fish < 450 && pInfo(peer)->starglitter_fish != -1) DailyEvent_Task::MStarglitter(peer, "fish", c_);
				if (pInfo(peer)->role_quest and (pInfo(peer)->quest_number == 1 or pInfo(peer)->quest_number == 2 or pInfo(peer)->quest_number == 3)) {
					if (pInfo(peer)->role_quest_type == "Fishing" and pInfo(peer)->need_required < pInfo(peer)->quest_required) {
						pInfo(peer)->need_required += c_;
						if (pInfo(peer)->need_required >= pInfo(peer)->quest_required) {
							pInfo(peer)->need_required = pInfo(peer)->quest_required;
							VarList::OnConsoleMessage(peer, "`9Fishing Quest! `ocomplete! Go claim your points!");
							VarList::OnTalkBubble(peer, pInfo(peer)->netID, "`9Fishing Quest! ``complete! Go claim your points!", 0, 0);
						}
					}
				}
				p.Insert("You caught a ```2" + (fish ? to_string(c_) + " lb. " : "") + "" + items[giveitem].name + "!``"), p2.Insert("You caught a ```2" + (fish ? to_string(c_) + " lb. " : "") + "" + items[giveitem].name + "!``");
				if (pInfo(peer)->C_QuestActive && pInfo(peer)->C_QuestKind == 14 && pInfo(peer)->C_QuestProgress < pInfo(peer)->C_ProgressNeeded) {
					pInfo(peer)->C_QuestProgress += c_;
					if (pInfo(peer)->C_QuestProgress >= pInfo(peer)->C_ProgressNeeded) {
						gamepacket_t p;
						p.Insert("OnTalkBubble");
						p.Insert(pInfo(peer)->netID);
						p.Insert("`9Ring Quest task complete! Go tell the Ringmaster!");
						p.Insert(0), p.Insert(0);
						p.CreatePacket(peer);
					}
				}
			}
		}
		else p.Insert(error), p2.Insert(error);
		pInfo(peer)->fishing_used = 0, pInfo(peer)->last_fish_catch = 0;
		PlayerMoving data_{};
		data_.packet_3 = 2, data_.netID = pInfo(peer)->netID, data_.x = pInfo(peer)->f_x, data_.y = pInfo(peer)->f_y;
		BYTE* raw = packFishMoving(&data_);
		for (ENetPeer* cp_ = server->peers; cp_ < &server->peers[server->peerCount]; ++cp_) {
			if (cp_->state != ENET_PEER_STATE_CONNECTED or cp_->data == NULL or pInfo(peer)->world != pInfo(cp_)->world) continue;
			send_raw(cp_, 4, raw, 56, ENET_PACKET_FLAG_RELIABLE);
		}
		delete[] raw;
		p.Insert(0), p.Insert(0);
		p.CreatePacket(peer), p2.CreatePacket(peer);
	}
}
namespace market {
	namespace dialog {
		void enter_player_market(ENetPeer* p_, string whoseStore) {
			bool existx = filesystem::exists("database/players/market/" + whoseStore + "_.json");
			if (!existx) return;
			try {
				std::ifstream ifff("database/players/market/" + whoseStore + "_.json");
				json j;
				ifff >> j;
				ifff.close();
				string item_list = "";
				string str_dial = "set_default_color|";
				str_dial += "\nadd_label_with_icon|big|" + whoseStore + "'s Marketplace.|left|" + j["fg"].get<string>() + "|\nadd_smalltext|`$Welcome to the bustling Growtopia Marketplace, your one-stop destination for trading treasures! Here, adventurers like you gather to buy and trade a myriad of items.|left|\nadd_spacer|small|\nadd_small_font_button|marketreview_" + whoseStore + "|`$Wanna write a review about this marketplace?|noflags|0|0|\nadd_small_font_button|marketreviewcheck_" + whoseStore + "|`$Wanna check this marketplace reviews?|noflags|0|0|\nadd_spacer|small|\nadd_textbox|`$" + whoseStore + "'s selling items:|lrft|\n";
				int kiekItemuBus = 0;
				int id; int kiekis; int aPosition;
				int currentSpaceInStore = j["currentSpaceInStore"];
				for (int i = 0; i < j["itemsInStore"].size(); i++) {
					if (j["itemsInStore"][i]["itemid"] != 0) {
						kiekItemuBus++;
						aPosition = j["itemsInStore"][i]["aposition"];
						id = j["itemsInStore"][i]["itemid"];
						kiekis = j["itemsInStore"][i]["quantityOfItems"];
						item_list += "\nadd_button_with_icon|" + (kiekis == 0 ? "" : "playermarketitementer_" + to_string(aPosition) + "_" + whoseStore + "") + "|`o" + items[id].name + (kiekis == 0 ? " (SOLD)" : "") + "|" + (kiekis == 0 ? "staticGreyFrame,disabled" : "staticYellowFrame") + "|" + to_string(id) + "|" + to_string(kiekis) + "|\n";
					}
				}
				str_dial += "" + (kiekItemuBus >= 1 ? "\nadd_smalltext|`$Total Placed Items (" + to_string(kiekItemuBus) + "/" + to_string(currentSpaceInStore) + ")|left|\nadd_spacer|small|" + item_list + "\nadd_button_with_icon||END_LIST|noflags|0||\nadd_spacer|small|\n" : "\nadd_smalltext|`$There are no items placed in this Marketplace!|left|") + "|\nadd_spacer|small|\nadd_quicl_exit|\nadd_button|backtomarketdialog|`$Close " + whoseStore + "'s Market.|0|0|\nend_dialog|MarketPlace_Gtps|||\n";
				VarList::OnDialogRequest(p_, str_dial);
			}
			catch (exception&) {
				return;
			}
		}
		void enter_my_market(ENetPeer* p_) {
			string str_dial = "set_default_color|", space = "", item_list = "";
			str_dial += "\nadd_label_with_icon|big|My Marketplace|left|13812|\n";
			bool existx = filesystem::exists("database/players/market/" + pInfo(p_)->tankIDName + "_.json");
			if (!existx) return;
			else {
				try {
					std::ifstream ifff("database/players/market/" + pInfo(p_)->tankIDName + "_.json");
					json j;
					ifff >> j;
					ifff.close();
					int id; int kiekis; int aPosition;
					int currentSpaceInStore = 0, kiekItemuBus = 0;
					str_dial += "\nadd_textbox|`$Step right up to the heart of commerce in Growtopia your very own Marketplace.|left|\n";
					currentSpaceInStore = j["currentSpaceInStore"];
					if (currentSpaceInStore < 50) space = "\nadd_button_with_icon|upgradeCurrentSpace|`$Market Space|noflags|9412|";
					else space = "\nadd_button_with_icon||`$Market Space (MAX)|noflags,disabled|9412|";
					str_dial += "\ntext_scaling_string|Subscribtions++++++++|\nadd_button_with_icon|read_market_notif|`$Market History|noflags|13802|\nadd_button_with_icon|my_market_review_check|`$Market Review|noflags|660|\nadd_button_with_icon|market_scan|`$Market Scan|noflags|13816|" + space + "|\nadd_button_with_icon||END_LIST|noflags|0||\nadd_spacer|small|\n";
					for (int i = 0; i < j["itemsInStore"].size(); i++) {
						if (j["itemsInStore"][i]["itemid"] != 0) {
							kiekItemuBus++;
							aPosition = j["itemsInStore"][i]["aposition"];
							id = j["itemsInStore"][i]["itemid"];
							kiekis = j["itemsInStore"][i]["quantityOfItems"];
							item_list += "\nadd_button_with_icon|entermyitem_" + to_string(aPosition) + "|`$" + items[id].name + "|staticPurpleFrame|" + to_string(id) + "|" + to_string(kiekis) + "|\n";
						}
					}
					str_dial += "\nadd_textbox|`$Placed items in your Marketplace:|left|" + a + (kiekItemuBus == currentSpaceInStore ? "" : "\nadd_item_picker|add_item_to_market|`$Add item for sale|Which item you wanna place on sale?|") + "|\n";
					str_dial += "" + (kiekItemuBus >= 1 ? "\nadd_smalltext|`$Total Placed Items (" + to_string(kiekItemuBus) + "/" + to_string(currentSpaceInStore) + ")|left|\nadd_spacer|small|" + item_list + "\nadd_button_with_icon||END_LIST|noflags|0||\nadd_spacer|small|\n" : "\nadd_smalltext|`$Total Placed Items (" + to_string(kiekItemuBus) + "/" + to_string(currentSpaceInStore) + ")|left|\nadd_spacer|small|\nadd_smalltext|`$There are no items placed in your store! You can add for sale.|left|\nadd_spacer|small|") + "|\nadd_quick_exit|\nadd_button|backtomarketdialog|`$Back|0|0|" + (kiekItemuBus == 0 ? "\nadd_custom_button|abandon_my_market|textLabel:Abandon;anchor:_button_backtomarketdialog;left:1;margin:40,0;middle_colour:2415764;border_colour:2415764;|" : "") + "\nend_dialog|MarketPlace_Gtps|||\n";
				}
				catch (exception&) {
					return;
				}
			}
			VarList::OnDialogRequest(p_, str_dial);
		}
		void enter_mymarket_item(ENetPeer* p_, string aposition, int ap) {
			bool existx = filesystem::exists("database/players/market/" + pInfo(p_)->tankIDName + "_.json");
			if (!existx) return;
			try {
				std::ifstream ifff("database/players/market/" + pInfo(p_)->tankIDName + "_.json");
				json j;
				ifff >> j;
				ifff.close();
				bool found = false;
				for (int i = 0; i < j["itemsInStore"].size(); i++) {
					if (j["itemsInStore"][i]["aposition"] == ap) {
						auto mtitems = 0, mtitem = 0;
						int earned = j["itemsInStore"][i]["boughtItems"], itempricePer = j["itemsInStore"][i]["sellPer"], id = j["itemsInStore"][i]["sellForItem"], ids = j["itemsInStore"][i]["itemid"], cnt = j["itemsInStore"][i]["quantityOfItems"];
						string str_dial = "set_default_color|";
						str_dial += "\nadd_label_with_icon|big|`o" + items[j["itemsInStore"][i]["itemid"]].name + "|left|" + to_string(j["itemsInStore"][i]["itemid"]) + "|\nadd_spacer|small|\nadd_label_with_icon|sml|`oThe store contains a total of " + to_string(cnt) + " `2" + items[j["itemsInStore"][i]["itemid"]].name + "|left|" + to_string(j["itemsInStore"][i]["itemid"]) + "|\n";
						for (auto i = 0; i < pInfo(p_)->inv.size(); i++) {
							if (pInfo(p_)->inv[i].first == ids) {
								mtitems = pInfo(p_)->inv[i].second;
								break;
							}
						}
						for (auto i = 0; i < pInfo(p_)->inv.size(); i++) {
							if (pInfo(p_)->inv[i].first == id) {
								mtitem = pInfo(p_)->inv[i].second;
								break;
							}
						}
						if (mtitems > 0) str_dial += "\nadd_smalltext|`oYou have " + to_string(mtitems) + " " + items[ids].name + " in your backpack.|left|\nadd_button|addallitem_" + aposition + "|`oAdd them to the Store|noflags|0|0|\n";
						str_dial += "\nadd_spacer|small|\nadd_textbox|`oFor a cost of:|left|\nadd_label_with_icon|small|`o" + to_string(itempricePer) + " x `8" + items[j["itemsInStore"][i]["sellForItem"]].name + "|left|" + to_string(id) + "|\nadd_spacer|small|\nadd_textbox|`oYou will get:|left|\nadd_label_with_icon|small|`o1 x `2" + items[j["itemsInStore"][i]["itemid"]].name + "|left|" + to_string(j["itemsInStore"][i]["itemid"]) + "|\n";
						if (cnt == 0) str_dial += "\nadd_button|removeitemsfromsell_" + aposition + "|`oRemove that item from selling|noflags|0|0|\n";
						else str_dial += "\nadd_spacer|small|\nadd_button|changeprice_" + aposition + "|`oChange Price|noflags|0|0|" + (mtitems == 200 ? "\nadd_smalltext|`oYou are already carrying 200 " + items[ids].name + "!|left|\nadd_button||`oEmpty the stock|off|0|0|\n" : "\nadd_button|pickupitems_" + aposition + "|`oEmpty the stock|noflags|0|0|\n");
						if (earned > 0) str_dial += "" + (mtitem == 200 ? "\nadd_smalltext|`oYou are already carrying 200 " + items[id].name + "!|left|\nadd_button||`oWithdraw " + items[id].name + ".|off|0|0|\n" : "\nadd_smalltext|`oYou have earned " + to_string(earned) + " " + items[id].name + ".|left|\nadd_button|withdrawallearnings_" + aposition + "|`oWithdraw " + items[id].name + ".|noflags|0|0|\n");
						str_dial += "\nadd_quick_exit|\nadd_button|enter_my_market|`oBack To Market|0|0|\nend_dialog|MarketPlace_Gtps|||\n";
						VarList::OnDialogRequest(p_, str_dial);
					}
				}
			}
			catch (exception&) {
				return;
			}
		}
	}
	namespace rtrn {
		string change(const string text, const string& id_ = "", const string& paym = "", const string& new_price = "", const string& aposition = "") {
			int id = atoi(id_.c_str());
			return "set_default_color|\nadd_label_with_icon|big|`$" + items[id].name + "|left|" + to_string(id) + "|\nadd_spacer|small|\nadd_smalltext|`$You can change Payments, Price of the items.|left|\nadd_smalltext|`4NOTE: `o:" + text + "|left|\nadd_spacer|small|\nadd_smalltext|`$Choose the one that will be used as the price for your selling item.|left|\nmax_checks|1|\ntext_scaling_string|ckc|\nadd_checkicon|WorldLock|||242||0|\ntext_scaling_string|ckc|\nadd_checkicon|DiamondLock|||1796||0|\ntext_scaling_string|ckc|\nadd_checkicon|BGLock|||7188||0|\ntext_scaling_string|ckc|\nadd_button_with_icon||END_LIST|noflags|0||\nadd_smalltext|`$The current new price of this item : " + to_string(atoi(new_price.c_str())) + " " + items[atoi(paym.c_str())].name + " per Items|left|\nadd_text_input|NewPriceItems|`$Price of item:|" + to_string(atoi(new_price.c_str())) + "|3|\nadd_quick_exit|\nadd_button|entermyitem_" + aposition + "|`$Back|\nadd_button|change_price_items|`$Change!|\nend_dialog|MarketPlace_Gtps|||\n";
		}
		string add(const string& text, const string& idn = "", const string& mtitems = "", const string& sellper = "", const string& price = "") {
			int id = atoi(idn.c_str());
			return "set_default_color|\nadd_label_with_icon|big|`$" + items[id].name + "|left|" + idn + "|\nadd_spacer|small|\nadd_smalltext|`4NOTE: `$" + text + "|\nadd_spacer|small|\nadd_smalltext|`$How many of " + items[id].name + " you want to put on sale?|left|\nadd_smalltext|`$You have " + mtitems + " in your inventory.|left|\nadd_text_input|marketitempickercount_" + idn + "|`$How many you want to put?|" + mtitems + "|3|\nadd_spacer|small|\nadd_smalltext|`$Write a description about this item for buyers.|left|\nadd_spacer|small|\nadd_smalltext|`$Choose the one that will be used as the price for your selling item.|left|\nmax_checks|1|\ntext_scaling_string|ckc|\nadd_checkicon|WorldLock|||242||" + (price == "Wlock" ? "1" : "0") + "|\ntext_scaling_string|ckc|\nadd_checkicon|DiamondLock|||1796||" + (price == "Dlock" ? "1" : "0") + "|\ntext_scaling_string|ckc|\nadd_checkicon|BGLock|||7188||" + (price == "BGlock" ? "1" : "0") + "|\nadd_button_with_icon||END_LIST|noflags|0||\nadd_smalltext|`$(Example : `2" + items[id].name + " `55 World Locks each.`$)|left|\nadd_smalltext|`$How many of these items that you wrote above need to buy your selling item?|left|\nadd_text_input|market_item_price|`$How many per?|" + sellper + "|3|\nadd_spacer|small|\nadd_quick_exit|\nend_dialog|confirm_add_item|Cancel|Add item on sale|\nend_dialog|MarketPlace_Gtps|||\n";
		}
		string create(const string& text, const string& id = "", const string& name = "") {
			return "set_default_color|\nadd_label_with_icon|big|Create Marketplace|left|13812|\nadd_smalltext|`oWelcome to Grow Market where you can create a MarketPlace! With a Marketplace you can selling items you want in Marketplace.|left|\nadd_smalltext|`oTo create a Market you must have a `250 Diamond Locks``.|left|\nadd_smalltext|`4NOTE: `o" + text + "|\nadd_spacer|small|\nadd_dual_layer_icon_label|small|`oMascot Preview (Example Id '7188') :|left|7188||1.0|1|\nadd_text_input|market_mascot|`oMascot Id|" + id + "|4|\nadd_text_input|market_name|`oMarket Name|" + name + "|20|\nadd_quick_exit|\nadd_button|backtomarketdialog|`oBack|noflags|0|0|\nadd_button|create_market|`2Create Marketplace|\nend_dialog|MarketPlace_Gtps|||\n";
		}
		string review(const string& text, const string& name = "", const string& review = "", const string& rate = "") {
			return "set_default_color|\nadd_label_with_icon|big|Review Market of " + name + "|left|13812|\nadd_smalltext|`oWrite a review:|left|\nadd_text_box_input|market_review_text||" + review + "|500|2|\nadd_smalltext|`oRate store 0-5:|left|\nadd_text_input|market_review_star||" + rate + "|2|\nadd_spacer|small|\nadd_button|enterplayeritem_" + name + "|`wBack|\nadd_custom_button|market_review|textLabel:`wApply a review;anchor:_button_enterplayeritem_" + name + ";left:1;margin:40,0;|\nend_dialog|MarketPlace_Gtps|||\n";
		}
		string buy(const string& text, const string& name = "") {
			return "set_default_color|\nadd_textbox|`4NOTE: `o" + text + "|\nadd_spacer|small|\nadd_button|enterplayeritem_" + name + "|`$Back|noflags|0|0|\nend_dialog|MarketPlace_Gtps|||\n";
		}
		string buy2(ENetPeer* p_, const string& text, const string& name = "", const string& itemId = "", const string& itemprice = "", const string& citemprice = "", const string& quantity = "") {
			int id = atoi(itemId.c_str());
			short int currentItemCount = Inventory::Contains(p_, id);
			return "set_default_color|\nadd_label_with_icon|big|`o" + items[id].name + "|left|" + itemId + "|\nadd_spacer|small|\nadd_label_with_icon|sml|`oThe store contains a total of " + to_string(atoi(quantity.c_str())) + " `2" + items[id].name + "|left|" + itemId + "|\nadd_textbox|`4NOTE: `o" + text + "|\nadd_textbox|`oFor a cost of:|left|\nadd_label_with_icon|small|`o" + to_string(atoi(citemprice.c_str())) + " x `8" + items[atoi(itemprice.c_str())].name + "|left|" + to_string(atoi(itemprice.c_str())) + "|\nadd_spacer|small|\nadd_textbox|`oYou will get:|left|\nadd_label_with_icon|small|`o1 x `2" + items[id].name + "|left|" + itemId + "|\nadd_spacer|small|\nadd_textbox|`oYou have " + to_string(currentItemCount) + " " + items[atoi(itemprice.c_str())].name + ".|left|\nadd_text_input|quantity_buy_item_player|`oHow many would you like to buy||3|\nadd_spacer|small|\nadd_quick_exit|\nadd_button|enterplayeritem_" + name + "|`wBack|\nadd_custom_button|Buy_Player_Items|textLabel:`wBuy Items;anchor:_button_enterplayeritem_" + name + ";left:1;margin:40,0;|\nend_dialog|MarketPlace_Gtps|||\n";
		}
	}
	namespace check {
		void items_in_inv(ENetPeer* peer, int fItemid, int fQuantity, bool& iscontains) {
			iscontains = false;
			for (int i = 0; i < pInfo(peer)->inv.size(); i++) {
				if (pInfo(peer)->inv[i].first == fItemid && pInfo(peer)->inv[i].second >= fQuantity) {
					iscontains = true;
					break;
				}
			}
		}
		bool items_exists(ENetPeer* peer, const int fItemId) {
			auto isExists = false;
			for (auto i = 0; i < pInfo(peer)->inv.size(); i++) {
				if (pInfo(peer)->inv[i].first == fItemId) {
					isExists = true;
					break;
				}
			}
			return isExists;
		}
		int count_items(ENetPeer* peer, const int fItemId) {
			auto quantity = 0;
			for (auto i = 0; i < pInfo(peer)->inv.size(); i++) {
				if (pInfo(peer)->inv[i].first == fItemId) {
					quantity = pInfo(peer)->inv[i].second;
					break;
				}
			}
			return quantity;
		}
	}
}
int alloc_(World* world_, WorldBlock* block_) {
	if (items[block_->fg].blockType == SEED) return 0;
	if (items[block_->fg].blockType == BlockTypes::VIP_ENTRANCE) {
		if (block_->fg == 14594) return (block_->Admin_Bfg.size() * 4) + 99;
		else return (block_->admins.size() * 4) + 99;
	}
	else if (items[block_->fg].blockType == BlockTypes::LOCK) {
		if (block_->fg == 202 or block_->fg == 204 or block_->fg == 206 or block_->fg == 4994 or block_->fg == 10000) {
			return (block_->admins.size() * 4) + 99;
		}
		return (world_->admins.size() * 4) + 99;
	}
	return 99;
}
int form_visual(BYTE*& blc, WorldBlock block_, World world_, ENetPeer* peer, bool case_ = true, bool show_ = false, int x1 = -1, int y1 = -1) {
	if (not case_) {
		*(__int16*)(blc) = block_.fg;
		*(__int16*)(blc + 2) = block_.bg;
		*(__int32*)(blc + 4) = block_.flags;
	}
	if (items[block_.fg].audio_rack) {
		*(__int8*)(blc + 8) = 56;
		*(__int16*)(blc + 9) = block_.txt.size();
		Memory_Copy(blc + 11, block_.txt.c_str(), block_.txt.size());
		*(__int16*)(blc + 11 + block_.txt.size()) = block_.pr;
		if (case_) {
			blc += 7 + block_.txt.size();
			return 7 + block_.txt.size();
		}
	}
	else if (items[block_.fg].simple_load) {
		*(__int8*)(blc + 8) = 6;
		if (case_) {
			blc += 8;
			return 8;
		}
	}
	else if (block_.fg == 6954) {
		*(__int8*)(blc + 8) = 71;
		*(__int8*)(blc + 9) = block_.pr > 0 ? 1 : 0;
		*(__int16*)(blc + 13) = block_.pr;
		*(__int16*)(blc + 17) = block_.id + (block_.build_only ? 0 : -1);
		*(__int16*)(blc + 25) = block_.id + (block_.invert ? 0 : -1);
		*(__int8*)(blc + 31) = block_.enabled ? 0 : 1;
		if (case_) {
			blc += 13;
			return 13;
		}
	}
	else {
		switch (items[block_.fg].blockType) {
		case BlockTypes::GAME_BLOCK: {
			*(__int8*)(blc + 8) = 0x10;
			*(__int16*)(blc + 9) = (block_.GameGen.Teams);
			if (case_) {
				blc += 2;
				return 2;
			}
			break;
		}
		case BlockTypes::ACHIEVEMENT_BLOCK: {
			if (block_.enabled) {
				*(__int8*)(blc + 8) = 0x10;
				*(__int16*)(blc + 9) = (block_.pr);
				if (case_) {
					blc += 2;
					return 2;
				}
			}
			else {
				BYTE btype = 63;
				Memory_Copy(blc + 8, &btype, 1);
				if (case_) {
					blc += 1 + 4 + 8;
					return 1 + 4 + 8;
				}
			}
			break;
		}
		case BlockTypes::GAME_GENERATOR: {

		}
		case BlockTypes::WEATHER: {
			switch (block_.fg) {
			case 3694: case 5000: {
				*(__int8*)(blc + 8) = 40;
				*(__int32*)(blc + 9) = (block_.fg == 3694 ? (block_.b << 24) | (block_.g << 16) | (block_.r << 8) : block_.id != 0 ? block_.id : 14);
				if (case_) {
					blc += 5;
					return 5;
				}
				break;
			}
			case 5958: {
				BYTE btype = 0x31;
				Memory_Copy(blc + 8, &btype, 1);
				if (case_) {
					blc += 10;
					return 10;
				}
				break;
			}
			case 3832: {
				uint8_t spin = block_.spin;
				*(__int8*)(blc + 8) = 49;
				*(__int16*)(blc + 9) = (block_.id != 0 ? block_.id : 2);
				*(__int16*)(blc + 13) = block_.gravity;
				*(__int8*)(blc + 17) = spin | (block_.invert << 1);
				if (case_) {
					blc += 10;
					return 10;
				}
				break;
			}
			case 6280: {
				if (world_.guild_id == 0) break;
				uint32_t new_id = 0, guild_id = world_.guild_id;
				vector<Guild>::iterator p = find_if(guilds.begin(), guilds.end(), [guild_id](const Guild& a) { return a.guild_id == guild_id; });
				if (p != guilds.end()) {
					Guild* guild_information = &guilds[p - guilds.begin()];
					for (GuildMember member_search : guild_information->guild_members) {
						if (to_lower(member_search.member_name) == to_lower(pInfo(peer)->tankIDName)) {
							new_id = (guild_information->guild_mascot[0] == 0 ? 5814 : guild_information->guild_mascot[0]);
						}
						uint8_t spin = block_.spin;
						*(__int8*)(blc + 8) = 49;
						*(__int16*)(blc + 9) = (block_.id != 0 ? block_.id : new_id);
						*(__int16*)(blc + 13) = block_.gravity;
						*(__int8*)(blc + 17) = spin | (block_.invert << 1);
						if (case_) {
							blc += 10;
							return 10;
						}
					}
				}
				break;
			}
			default: {
				BYTE btype = 5;
				Memory_Copy(blc + 8, &btype, 1);
				if (case_) {
					blc += 1;
					return 1;
				}
			}
			}
			break;
		}
		case BlockTypes::Fish_Mount: {
			int pet = block_.id;
			string text = block_.txt + "`w";
			uint32_t length = uint32_t(text.size());
			int fishlb = block_.c_;
			*(__int8*)(blc + 8) = 47;
			*(__int16*)(blc + 9) = length;
			*(__int16*)(blc + 11 + length) = pet;
			*(__int16*)(blc + 15 + length) = fishlb;
			Memory_Copy(blc + 11, text.c_str(), length);
			if (case_) {
				blc += 8 + length;
				return 8 + length;
			}
			break;
		}
		case BlockTypes::OVEN: {
			int extra = 13;
			int timern = std::chrono::duration_cast<std::chrono::seconds>(std::chrono::system_clock::now().time_since_epoch()).count();
			int cooktype = block_.pr;
			int max = 0;
			int fru = 0;
			if (not block_.food.empty()) fru = block_.food.size() * 2;
			*(__int8*)(blc + 8) = 55;
			*(__int8*)(blc + 9) = cooktype;
			*(__int8*)(blc + 13) = fru;
			if (not block_.food.empty()) {
				extra += 3;
				for (int i = 0; i < block_.food.size(); i++) {
					int id1 = 17 + (i * 8);
					*(__int32*)(blc + id1) = get_cook_id(block_.food[i].id);
					*(__int8*)(blc + id1 + 1) = get_cook_offset(block_.food[i].id);
					*(__int16*)(blc + id1 + 4) = cooktype * (timern - block_.food[i].time);
					max = id1 + 4;
				}
				int val1 = 0;
				int val2 = 0;
				int val3 = 0;
				int val4 = 0;
				if (block_.c_ == 1) {
					val1 = block_.starttime;
					while (val1 >= 256) {
						val2 += 1;
						val1 -= 256;
					}
					while (val2 >= 256) {
						val3 += 1;
						val2 -= 256;
					}
					while (val3 >= 256) {
						val4 += 1;
						val3 -= 256;
					}
				}
				*(__int32*)(blc + max + 8) = val1;
				*(__int32*)(blc + max + 9) = val2;
				*(__int32*)(blc + max + 10) = val3;
				*(__int32*)(blc + max + 11) = val4;
			}
			if (case_) {
				blc += max + extra;
				return max + extra;
			}
			break;
		}
		case BlockTypes::AUTO_BLOCK: {
			*(__int8*)(blc + 8) = block_.fg == 6950 ? 70 : 69;
			*(__int8*)(blc + 9) = block_.pr > 0 ? 1 : 0;
			*(__int16*)(blc + 13) = block_.pr;
			*(__int16*)(blc + 17) = block_.id;
			*(__int8*)(blc + 21) = block_.enabled;
			if (case_) {
				blc += 13;
				return 13;
			}
			break;
		}
		case BlockTypes::FISH_TANK: {
			if (block_.txt != "") {
				const auto pi = explode(",", block_.txt);
				int f1 = -1, lb1 = 0, f2 = -1, lb2 = 0, f3 = -1, lb3 = 0, f4 = -1, lb4 = 0, f5 = -1, lb5 = 0;
				for (auto& a : pi) {
					if (a.empty()) continue;
					else {
						const auto xd = explode("|", a);
						if (f1 == -1) { f1 = stoi(xd.at(0)); lb1 = stoi(xd.at(1)); }
						else if (f2 == -1) { f2 = stoi(xd.at(0)); lb2 = stoi(xd.at(1)); }
						else if (f3 == -1) { f3 = stoi(xd.at(0)); lb3 = stoi(xd.at(1)); }
						else if (f4 == -1) { f4 = stoi(xd.at(0)); lb4 = stoi(xd.at(1)); }
						else if (f5 == -1) { f5 = stoi(xd.at(0)); lb5 = stoi(xd.at(1)); }
					}
				}
				int hh = f1, ll = 0;
				while (hh >= 256) {
					hh -= 256;
					ll++;
				}
				int noman = 10;
				int first = 15;
				if (f1 == -1) f1 = 0, noman -= 2;
				if (f2 == -1) f2 = 0, noman -= 2;
				if (f3 == -1) f3 = 0, noman -= 2;
				if (f4 == -1) f4 = 0, noman -= 2;
				if (f5 == -1) f5 = 0, noman -= 2;
				*(__int8*)(blc + 8) = 25;
				*(__int8*)(blc + 9) = block_.pr;
				*(__int8*)(blc + 10) = noman;
				*(__int8*)(blc + 14) = hh;
				*(__int8*)(blc + 15) = ll;
				*(__int8*)(blc + 18) = lb1;
				if (f2 != 0) {
					int hh = f2, ll = 0;
					while (hh >= 256) {
						hh -= 256;
						ll++;
					}
					*(__int8*)(blc + first + 7) = hh;
					*(__int8*)(blc + first + 8) = ll;
					*(__int8*)(blc + first + 11) = lb2;
					first += 7;
				}
				if (f3 != 0) {
					int hhe = f3, lle = 0;
					while (hhe >= 256) {
						hhe -= 256;
						lle++;
					}
					*(__int8*)(blc + 30) = hhe;
					*(__int8*)(blc + 31) = lle;
					*(__int8*)(blc + 34) = lb3;
				}
				if (f4 != 0) {
					int hh = f4, ll = 0;
					while (hh >= 256) {
						hh -= 256;
						ll++;
					}
					*(__int8*)(blc + 38) = hh;
					*(__int8*)(blc + 38 + 1) = ll;
					*(__int8*)(blc + 38 + 4) = lb4;
				}
				if (f5 != 0) {
					int hh = f5, ll = 0;
					while (hh >= 256) {
						hh -= 256;
						ll++;
					}
					*(__int8*)(blc + 46) = hh;
					*(__int8*)(blc + 46 + 1) = ll;
					*(__int8*)(blc + 46 + 4) = lb5;
				}
			}
			else *(__int8*)(blc + 8) = 25;
			if (case_) {
				blc += 1 + 4 + 8;
				return 1 + 4 + 8;
			}
			break;
		}
		case BlockTypes::FISH: {
			*(__int8*)(blc + 8) = 63;
			if (case_) {
				blc += 1 + 4 + 8;
				return 1 + 4 + 8;
			}
			break;
		}
		case BlockTypes::COUNTRY_FLAG: {
			*(__int8*)(blc + 8) = 0x21;
			*(__int16*)(blc + 9) = block_.heart_monitor.size();
			Memory_Copy(blc + 11, block_.heart_monitor.data(), block_.heart_monitor.size());
			if (case_) {
				blc += 11 + block_.heart_monitor.size();
				return 11 + block_.heart_monitor.size();
			}
			break;
		}
		case BlockTypes::GEIGER_CHARGER: {
			*(int*)(blc + 4) = block_.flags;
			*(__int8*)(blc + 8) = 57;
			*(int*)(blc + 9) = (block_.planted - time(nullptr) <= 0 ? 3600 : 3600 - (block_.planted - time(nullptr)));
			if (case_) {
				blc += 5;
				return 5;
			}
			break;
		}
		case BlockTypes::Spirit_Storage: {
			*(__int8*)(blc + 8) = 41;
			*(__int16*)(blc + 9) = block_.c_;
			if (case_) {
				blc += 5;
				return 5;
			}
			break;
		}
		case BlockTypes::MAGIC_EGG: {
			*(__int8*)(blc + 8) = 15;
			*(__int16*)(blc + 9) = block_.shelf_1;
			if (case_) {
				blc += 5;
				return 5;
			}
			break;
		}
		case BlockTypes::CRIME_VILLAIN: {
			*(__int8*)(blc + 8) = 14;
			*(__int16*)(blc + 9) = block_.txt.size();
			Memory_Copy(blc + 11, block_.txt.c_str(), block_.txt.size());
			if (case_) {
				blc += 26 + block_.txt.size();
				return 26 + block_.txt.size();
			}
			break;
		}
		case BlockTypes::Painting_Easel: {
			*(__int8*)(blc + 8) = 35;
			*(__int16*)(blc + 9) = block_.id;
			*(__int16*)(blc + 13) = block_.txt.size();
			Memory_Copy(blc + 15, block_.txt.c_str(), block_.txt.size());
			if (case_) {
				blc += 7 + block_.txt.size();
				return 7 + block_.txt.size();
			}
			break;
		}
		case BlockTypes::PORTRAIT: {
			*(__int8*)(blc + 8) = 48;
			*(__int16*)(blc + 9) = block_.txt.size();
			Memory_Copy(blc + 11, block_.txt.c_str(), block_.txt.size());
			*(__int16*)(blc + 17) = block_.shelf_3;
			*(__int16*)(blc + 21) = block_.shelf_4;
			if (block_.portrait.c_skin == 0 and block_.portrait.c_face == 0 and block_.portrait.c_head == 0 and block_.portrait.c_hair == 0) {

			}
			else {
				*(__int16*)(blc + 11 + block_.txt.size()) = block_.portrait.c_expression;
				*(__int16*)(blc + 19 + block_.txt.size()) = block_.portrait.c_hair_colour;
				*(__int16*)(blc + 23 + block_.txt.size()) = block_.portrait.c_skin;
				*(__int16*)(blc + 27 + block_.txt.size()) = block_.portrait.c_face;
				*(__int16*)(blc + 29 + block_.txt.size()) = block_.portrait.c_head;
				*(__int16*)(blc + 31 + block_.txt.size()) = block_.portrait.c_hair;
			}
			if (case_) {
				blc += 7 + 15 + 3 + block_.txt.size();
				return 7 + 15 + 3 + block_.txt.size();
			}
			break;
		}
		case BlockTypes::MANNEQUIN: {
			*(__int8*)(blc + 8) = 14;
			*(__int16*)(blc + 9) = block_.txt.size();
			Memory_Copy(blc + 11, block_.txt.c_str(), block_.txt.size());
			*(__int16*)(blc + 16 + block_.txt.size()) = block_.mannequin.c_hair;
			*(__int16*)(blc + 18 + block_.txt.size()) = block_.mannequin.c_shirt;
			*(__int16*)(blc + 20 + block_.txt.size()) = block_.mannequin.c_pants;
			*(__int16*)(blc + 22 + block_.txt.size()) = block_.mannequin.c_feet;
			*(__int16*)(blc + 24 + block_.txt.size()) = block_.mannequin.c_head;
			*(__int16*)(blc + 26 + block_.txt.size()) = block_.mannequin.c_hand;
			*(__int16*)(blc + 28 + block_.txt.size()) = block_.mannequin.c_back;
			*(__int16*)(blc + 30 + block_.txt.size()) = block_.mannequin.c_mask;
			*(__int16*)(blc + 32 + block_.txt.size()) = block_.mannequin.c_neck;
			if (case_) {
				blc += 26 + block_.txt.size();
				return 26 + block_.txt.size();
			}
			break;
		}
		case BlockTypes::KRANKEN: {
			int model_ = block_.kranken_pattern;
			int rgb = (block_.b << 24) | (block_.g << 16) | (block_.r << 8);
			int w_ = rgb + 255;
			BYTE btype = 0x50;
			Memory_Copy(blc + 8, &btype, 1);
			Memory_Copy(blc + 9, &model_, 4);
			Memory_Copy(blc + 13, &w_, 4);
			if (case_) {
				blc += 9;
				return 9;
			}
			break;
		}
		case BlockTypes::SUCKER: {
			*(__int8*)(blc + 8) = 62; 
			*(__int16*)(blc + 9) = block_.id;
			*(__int16*)(blc + 13) = block_.pr;
			*(__int8*)(blc + 17) = block_.enabled;
			if (block_.fg == 5930) {
				*(__int16*)(blc + 18) = block_.spin;
				*(__int16*)(blc + 20) = 1000000;
			}
			else if (block_.fg == 5638 || block_.fg == 5930) {
				*(__int16*)(blc + 18) = block_.spin;
				*(__int16*)(blc + 20) = 5000;
			}
			else {
				*(__int16*)(blc + 21) = 1500;
			}
			if (case_) {
				blc += 15;
				return 15;
			}
			break;
		}
		case BlockTypes::Heart_Monitor: {
			*(__int8*)(blc + 8) = 11;
			{
				uint32_t ijungtas = -1;
				*(__int16*)(blc + 9) = ijungtas;
				if (ijungtas) *(int*)(blc + 4) = block_.flags | 0x00400000;
			}
			*(__int16*)(blc + 13) = block_.heart_monitor.size();
			Memory_Copy(blc + 15, block_.heart_monitor.c_str(), block_.heart_monitor.size());
			if (case_) {
				blc += 7 + block_.heart_monitor.size();
				return 7 + block_.heart_monitor.size();
			}
			break;
		}
		case BlockTypes::TRICKSTER: {
			*(__int8*)(blc + 8) = 52;
			if (case_) {
				blc += 1;
				return 1;
			}
			break;
		}
		case BlockTypes::VIP_ENTRANCE: {
			*(__int8*)(blc + 8) = 44;
			vector<int> vip_members;
			if (block_.limit_admins) {
				for (ENetPeer* cp_ = server->peers; cp_ < &server->peers[server->peerCount]; ++cp_) {
					if (cp_->state != ENET_PEER_STATE_CONNECTED or cp_->data == NULL) continue;
					if (pInfo(cp_)->world == world_.name) vip_members.push_back(name_to_number(to_lower(pInfo(cp_)->tankIDName)));
				}
			}
			else {
				if (peer != NULL && (to_lower(pInfo(peer)->tankIDName) == to_lower(world_.owner_name) or Role::Developer(peer))) vip_members.push_back(name_to_number(to_lower(pInfo(peer)->tankIDName)));
				if (block_.fg == 14594) {
					for (int ii = 0; ii < block_.Admin_Bfg.size(); ii++) {
						vip_members.push_back(name_to_number(to_lower(block_.Admin_Bfg[ii].second)));
					}
				}
				else for (int i = 0; i < block_.admins.size(); i++) vip_members.push_back(name_to_number(to_lower(block_.admins[i])));
			}
			*(__int16*)(blc + 14) = vip_members.size();
			for (int i = 0; i < vip_members.size(); i++) *(__int32*)(blc + 18 + (i * 4)) = vip_members[i];
			if (case_) {
				blc += 10 + (vip_members.size() * 4);
				return 10 + (vip_members.size() * 4);
			}
			break;
		}
		case BlockTypes::TIMER: {
			*(__int8*)(blc + 8) = 45;
			if (case_) {
				blc += 1;
				return 1;
			}
			break;
		}
		case BlockTypes::Display_Shelf: {
			*(__int8*)(blc + 8) = 43;
			*(__int16*)(blc + 9) = block_.shelf_1;
			*(__int16*)(blc + 13) = block_.shelf_2;
			*(__int16*)(blc + 17) = block_.shelf_3;
			*(__int16*)(blc + 21) = block_.shelf_4;
			if (case_) {
				blc += 17;
				return 17;
			}
			break;
		}
		case BlockTypes::CRYSTAL: {
			*(__int8*)(blc + 8) = 20;
			*(__int8*)(blc + 9) = 0;
			Memory_Copy(blc + 11, "", 0);
			*(__int16*)(blc + 17) = block_.id;
			*(__int8*)(blc + 21) = block_.enabled;
			if (case_) {
				blc += 3 + 0;
				return 3 + 0;
			}
			break;
		}
		case BlockTypes::GIVING_TREE: {
			BYTE data_btype = 0x1C, zero = 0;
			uint8_t count = uint8_t(block_.shelf_1);
			uint32_t times = uint32_t(block_.planted - time(nullptr) <= 0 ? 14400 : 14400 - (block_.planted - time(nullptr)));
			Memory_Set(blc + 8, 0, 7);
			Memory_Copy(blc, &block_.fg, 2);
			Memory_Copy(blc + 4, &block_.flags, 4);
			Memory_Copy(blc + 8, &data_btype, 1);
			Memory_Copy(blc + 8 + 1, &zero, 1);
			Memory_Copy(blc + 8 + 2, &times, 4);
			Memory_Copy(blc + 8 + 6, &count, 1);
			if (case_) {
				blc += 7;
				return 7;
			}
			break;
		}
		case BlockTypes::VENDING: {
			*(int*)(blc + 9) = (block_.pr < 0 and block_.id != 0 && block_.c_ < (block_.pr * -1) ? 0 : block_.id);
			*(__int8*)(blc + 8) = 24;
			*(int*)(blc + 4) = (block_.pr < 0 and block_.id != 0 && block_.c_ < (block_.pr * -1) ? block_.flags | ((block_.c_ < (block_.pr * -1)) ? (block_.wl != 0 ? 0x02410000 : 0x00410000) : (block_.wl != 0 ? 0x02410000 : 0x00410000)) : block_.flags | (block_.id == 0 ? (block_.wl != 0 ? 0x02000000 : 0x00000000) : (block_.wl != 0 ? 0x02410000 : 0x00410000)));
			*(int*)(blc + 13) = (block_.pr < 0 and block_.id != 0 && block_.c_ < (block_.pr * -1) ? 0 : block_.pr);
			if (case_) {
				blc += 9;
				return 9;
			}
			break;
		}
		case BlockTypes::DISPLAY: {
			*(__int8*)(blc + 8) = 23;
			*(__int16*)(blc + 9) = block_.id;
			if (case_) {
				blc += 5;
				return 5;
			}
			break;
		}
		case BlockTypes::PROVIDER: {
			*(__int8*)(blc + 8) = 9;
			*(int*)(blc + 9) = time(nullptr) - block_.planted <= items[block_.fg].growTime ? time(nullptr) - block_.planted : items[block_.fg].growTime;
			if (case_) {
				blc += 5;
				return 5;
			}
			break;
		}
		case BlockTypes::RANDOM_BLOCK: {
			*(__int8*)(blc + 8) = 8;
			*(__int16*)(blc + 9) = block_.roll;
			if (case_) {
				blc += 2;
				return 2;
			}
			break;
		}
		case BlockTypes::LOCK: {
			if (block_.spin) *(int*)(blc + 4) = 0x00800000;
			*(__int8*)(blc + 8) = 3;
			uint32_t world_owner_id = -1;
			{
				if (block_.fg == 202 or block_.fg == 204 or block_.fg == 206 or block_.fg == 4994 or block_.fg == 10000) {
					world_owner_id = name_to_number(to_lower(block_.owner_name));
				}
				else {
					world_owner_id = name_to_number(to_lower(world_.owner_name));
				}
			}
			uint8_t world_settings = world_.world_settings & SETTINGS::SETTINGS_5 ? (world_.world_settings & SETTINGS::SETTINGS_6 ? 12345 : 1234) : (world_.world_settings & SETTINGS::SETTINGS_6 ? 100 : 0);
			if (world_.world_settings & SETTINGS::SETTINGS_7 and block_.fg == 4802) world_settings += 128;
			if (block_.build_only and block_.fg == 4994) world_settings |= 64;
			*(__int8*)(blc + 9) = world_settings;
			*(int*)(blc + 10) = world_owner_id;
			*(int*)(blc + 18) = world_.music_bpm * -1;
			uint32_t count_of_admins = 1;
			{
				if (block_.fg == 202 or block_.fg == 204 or block_.fg == 206 or block_.fg == 4994 or block_.fg == 10000) {
					for (int i = 0; i < block_.admins.size(); i++) {
						if (count_of_admins == 1) {
							*(int*)(blc + 22) = name_to_number(to_lower(block_.admins[i]));
						}
						else {
							*(int*)(blc + 22 + (count_of_admins * 4)) = name_to_number(to_lower(block_.admins[i]));
						}
						count_of_admins++;
					}
				}
				else {
					for (int i = 0; i < world_.admins.size(); i++) {
						if (count_of_admins == 1) {
							*(int*)(blc + 22) = name_to_number(to_lower(world_.admins[i]));
						}
						else {
							*(int*)(blc + 22 + (count_of_admins * 4)) = name_to_number(to_lower(world_.admins[i]));
						}
						count_of_admins++;
					}
				}
				*(int*)(blc + 14) = count_of_admins;
			}
			if (block_.fg == 5814 and world_.guild_id != 0) {
				uint32_t guild_id = world_.guild_id;
				vector<Guild>::iterator p = find_if(guilds.begin(), guilds.end(), [guild_id](const Guild& a) { return a.guild_id == guild_id; });
				if (p != guilds.end()) {
					Guild* guild_information = &guilds[p - guilds.begin()];
					if (not case_) {
						Memory_Copy(blc + 30 + (count_of_admins * 4), &guild_information->guild_mascot[0], 2);
						Memory_Copy(blc + 30 + (count_of_admins * 4) + 2, &guild_information->guild_mascot[1], 2);
						Memory_Copy(blc + 30 + (count_of_admins * 4) + 4, &guild_information->guild_level, 2);
						Memory_Copy(blc + 30 + (count_of_admins * 4) + 8, &guild_information->unlocked_mascot, 1);
					}
					else {
						Memory_Copy(blc + (count_of_admins == 1 ? 22 : 22 + ((count_of_admins - 1) * 4)) + 4, &guild_information->guild_mascot[0], 2);
						Memory_Copy(blc + (count_of_admins == 1 ? 22 : 22 + ((count_of_admins - 1) * 4)) + 6, &guild_information->guild_mascot[1], 2);
						Memory_Copy(blc + (count_of_admins == 1 ? 22 : 22 + ((count_of_admins - 1) * 4)) + 8, &guild_information->guild_level, 2);
						Memory_Copy(blc + (count_of_admins == 1 ? 22 : 22 + ((count_of_admins - 1) * 4)) + 12, &guild_information->unlocked_mascot, 1);
					}
					if (case_) {
						blc += 26 + (count_of_admins * 4);
						return 26 + (count_of_admins * 4);
					}
				}
			}
			else {
				if (case_) {
					blc += 10 + (count_of_admins * 4);
					return 10 + (count_of_admins * 4);
				}
			}
			break;
		}
		case BlockTypes::MAIN_DOOR: {
			*(__int8*)(blc + 8) = 1;
			*(__int16*)(blc + 9) = 4;
			Memory_Copy(blc + 11, "EXIT", 4);
			if (case_) {
				blc += 4 + 4;
				return 4 + 4;
			}
			break;
		}
		case BlockTypes::SEED: {
			*(int*)(blc + 4) = block_.flags | 0x100000;
			*(__int8*)(blc + 8) = 4;
			*(int*)(blc + 9) = (time(nullptr) - block_.planted <= items[block_.fg].growTime ? time(nullptr) - block_.planted : items[block_.fg].growTime);
			*(__int16*)(blc + 13) = block_.fruit;
			if (case_) {
				blc += 6;
				return 6;
			}
			break;
		}
		case BlockTypes::DONATION:case BlockTypes::MAILBOX:case BlockTypes::FOSSIL: {
			*(int*)(blc + 4) = block_.flags;
			*(__int8*)(blc + 8) = 12;
			if (case_ && items[block_.fg].blockType != BlockTypes::FOSSIL) {
				blc += 8;
				return 8;
			}
			break;
		}
		case BlockTypes::BATTLE_CAGE: {
			BYTE btype = 0x24;
			int pet = block_.battle_pet.first[0];
			string text = block_.battle_pet.second;
			uint32_t length = uint32_t(text.length());
			Memory_Copy(blc + 8, &btype, 1);
			Memory_Copy(blc + 9, &length, 2);
			Memory_Copy(blc + 11, text.c_str(), length);
			Memory_Copy(blc + 11 + length, &pet, 4);
			if (case_) {
				blc += 15 + length;
				return 15 + length;
			}
			break;
		}
		case BlockTypes::DOOR: case BlockTypes::PORTAL: {
			string duru_tekstas = (block_.txt.empty() ? (block_.door_destination.empty() ? "" : (block_.door_destination.find(":") != string::npos ? explode(":", block_.door_destination)[0] + "..." : block_.door_destination)) : block_.txt);
			*(__int8*)(blc + 8) = 1;
			*(__int16*)(blc + 9) = duru_tekstas.size();
			Memory_Copy(blc + 11, duru_tekstas.c_str(), duru_tekstas.size());
			*(__int8*)(blc + 11 + duru_tekstas.size()) = (block_.open or Role::Developer(peer) ? 0 : 0x08);
			if (case_) {
				blc += 4 + duru_tekstas.size();
				return 4 + duru_tekstas.size();
			}
			break;
		}
		case BlockTypes::SIGN: {
			*(__int8*)(blc + 8) = 2;
			*(int*)(blc + 9) = block_.txt.size();
			Memory_Copy(blc + 11, block_.txt.c_str(), block_.txt.size());
			*(__int16*)(blc + 11 + block_.txt.size()) = 0;
			if (case_) {
				blc += 7 + block_.txt.size();
				return 7 + block_.txt.size();
			}
			break;
		}
		}
	}
	return 0;
}
void upd_lock(WorldBlock block_2, World world_, ENetPeer* peer) {
	int l_x = block_2.lock_origin % 100, l_y = block_2.lock_origin / 100;
	WorldBlock block_ = world_.blocks[l_x + (l_y * 100)];
	if (items[block_.fg].blockType != BlockTypes::LOCK) return;
	vector<vector<int>> locked_tiles_around_lock;
	vector<int> new_tiles;
	new_tiles.push_back(l_x + (l_y * 100));
	for (int i2 = 0; i2 < new_tiles.size(); i2++) {
		int s_x_ = new_tiles[i2] % 100, s_y_ = new_tiles[i2] / 100;
		if (s_x_ < (world_.max_x - 1) and world_.blocks[s_x_ + 1 + (s_y_ * 100)].locked and world_.blocks[s_x_ + 1 + (s_y_ * 100)].lock_origin == (l_x + (l_y * 100))) {
			if (not world_.blocks[s_x_ + 1 + (s_y_ * 100)].scanned) {
				world_.blocks[s_x_ + 1 + (s_y_ * 100)].scanned = true;
				new_tiles.push_back(s_x_ + 1 + (s_y_ * 100));
				locked_tiles_around_lock.push_back({ s_x_ + 1, s_y_ });
			}
		} 
		if (s_x_ > 0 and world_.blocks[s_x_ - 1 + (s_y_ * 100)].locked and world_.blocks[s_x_ - 1 + (s_y_ * 100)].lock_origin == (l_x + (l_y * 100))) {
			if (not world_.blocks[s_x_ - 1 + (s_y_ * 100)].scanned) {
				world_.blocks[s_x_ - 1 + (s_y_ * 100)].scanned = true;
				new_tiles.push_back(s_x_ - 1 + (s_y_ * 100));
				locked_tiles_around_lock.push_back({ s_x_ - 1, s_y_ });
			}
		} 
		if (s_y_ < (world_.max_y - 1) and world_.blocks[s_x_ + ((s_y_ + 1) * 100)].locked and world_.blocks[s_x_ + ((s_y_ + 1) * 100)].lock_origin == (l_x + (l_y * 100))) {
			if (not world_.blocks[s_x_ + ((s_y_ + 1) * 100)].scanned) {
				world_.blocks[s_x_ + ((s_y_ + 1) * 100)].scanned = true;
				new_tiles.push_back(s_x_ + ((s_y_ + 1) * 100));
				locked_tiles_around_lock.push_back({ s_x_, s_y_ + 1 });
			}
		}
		if (s_y_ > 0 and world_.blocks[s_x_ + ((s_y_ - 1) * 100)].locked and world_.blocks[s_x_ + ((s_y_ - 1) * 100)].lock_origin == (l_x + (l_y * 100))) {
			if (not world_.blocks[s_x_ + ((s_y_ - 1) * 100)].scanned) {
				world_.blocks[s_x_ + ((s_y_ - 1) * 100)].scanned = true;
				new_tiles.push_back(s_x_ + ((s_y_ - 1) * 100));
				locked_tiles_around_lock.push_back({ s_x_, s_y_ - 1 });
			}
		}
	}
	if (locked_tiles_around_lock.size() != 0) {
		PlayerMoving data_{};
		data_.packetType = 15, data_.punchX = l_x, data_.punchY = l_y, data_.characterState = 0x8;
		data_.netID = name_to_number(to_lower(block_.owner_name));
		data_.plantingTree = block_.fg;
		BYTE* raw;
		raw = packPlayerMoving(&data_, 112 + (locked_tiles_around_lock.size() * 2) + alloc_(&world_, &block_));
		int lalala = 8, lock_size = locked_tiles_around_lock.size();
		Memory_Copy(raw + 8, &lock_size, 2);
		Memory_Copy(raw + 12, &lalala, 2);
		BYTE* blc = raw + 56;
		for (int i_ = 0; i_ < locked_tiles_around_lock.size(); i_++) {
			int x = locked_tiles_around_lock[i_][0];
			int y = locked_tiles_around_lock[i_][1];
			int sq_ = x + (y * 100);
			Memory_Copy(blc + (i_ * 2), &sq_, 2);
			world_.blocks[x + (y * 100)].scanned = false;
		}
		PlayerMoving data_2{};
		data_2.packetType = 5, data_2.punchX = l_x, data_2.punchY = l_y, data_2.characterState = 0x8;
		BYTE* raw2 = packPlayerMoving(&data_2, 112 + alloc_(&world_, &block_));
		BYTE* blc2 = raw2 + 56;
		form_visual(blc2, block_, world_, peer, false);
		for (ENetPeer* cp_ = server->peers; cp_ < &server->peers[server->peerCount]; ++cp_) { //fix
			if (cp_->state != ENET_PEER_STATE_CONNECTED or cp_->data == NULL or world_.name != pInfo(cp_)->world) continue;
			send_raw(cp_, 4, raw, 112 + (locked_tiles_around_lock.size() * 2) + alloc_(&world_, &block_), ENET_PACKET_FLAG_RELIABLE);
			send_raw(cp_, 4, raw2, 112 + alloc_(&world_, &block_), ENET_PACKET_FLAG_RELIABLE);
		}
		delete[] raw, blc;
		delete[] raw2, blc2;
	}
	else {
		PlayerMoving data_{};
		data_.packetType = 15, data_.punchX = l_x, data_.punchY = l_y, data_.characterState = 0x8;
		data_.netID = name_to_number(to_lower(block_.owner_name));
		data_.plantingTree = block_.fg;
		BYTE* raw = packPlayerMoving(&data_, 56);
		PlayerMoving data_2{};
		data_2.packetType = 5, data_2.punchX = l_x, data_2.punchY = l_y, data_2.characterState = 0x8;
		BYTE* raw2 = packPlayerMoving(&data_2, 112 + alloc_(&world_, &block_));
		BYTE* blc2 = raw2 + 56;
		form_visual(blc2, block_, world_, NULL, false);
		for (ENetPeer* cp_ = server->peers; cp_ < &server->peers[server->peerCount]; ++cp_) {
			if (cp_->state != ENET_PEER_STATE_CONNECTED or cp_->data == NULL or world_.name != pInfo(cp_)->world) continue;
			send_raw(cp_, 4, raw, 56, ENET_PACKET_FLAG_RELIABLE);
			send_raw(cp_, 4, raw2, 112 + alloc_(&world_, &block_), ENET_PACKET_FLAG_RELIABLE);
		}
		delete[] raw2, blc2;
		delete[] raw;
	}
}
void update_block(World* world_, WorldBlock* block_, int x_, int y_) {
	PlayerMoving data_{};
	data_.packetType = 5, data_.punchX = x_, data_.punchY = y_, data_.characterState = 0x8;
	BYTE* raw = packPlayerMoving(&data_, 112 + alloc_(world_, block_));
	BYTE* blc = raw + 56;
	for (ENetPeer* cp_ = server->peers; cp_ < &server->peers[server->peerCount]; ++cp_) {
		if (cp_->state != ENET_PEER_STATE_CONNECTED or cp_->data == NULL) continue;
		if (pInfo(cp_)->world == world_->name) {
			form_visual(blc, *block_, *world_, cp_, false);
			send_raw(cp_, 4, raw, 112 + alloc_(world_, block_), ENET_PACKET_FLAG_RELIABLE);
		}
	}
	delete[] raw, blc;
}
void tile_update(ENetPeer* peer, World* world_, WorldBlock* block_, int x_, int y_) {
	PlayerMoving data_{};
	data_.packetType = 5, data_.punchX = x_, data_.punchY = y_, data_.characterState = 0x8;
	int alloc = alloc_(world_, block_);
	BYTE* raw = packPlayerMoving(&data_, 112 + alloc);
	BYTE* blc = raw + 56;
	form_visual(blc, *block_, *world_, peer, false);
	for (ENetPeer* cp_ = server->peers; cp_ < &server->peers[server->peerCount]; ++cp_) {
		if (cp_->state != ENET_PEER_STATE_CONNECTED or cp_->data == NULL or pInfo(cp_)->world != world_->name) continue;
		send_raw(cp_, 4, raw, 112 + alloc, ENET_PACKET_FLAG_RELIABLE);
	}
	delete[] raw, blc;
	if (block_->locked) upd_lock(*block_, *world_, peer);
}
void drop_from_magic_egg(ENetPeer* peer, World* world_, WorldBlock* block_, int x_, int y_) {
	WorldDrop drop_block_{};
	uint32_t percentage = block_->shelf_1 / 10;
	if (percentage <= 9) {
		{
			PlayerMoving data_{};
			data_.packetType = 17, data_.netID = 42, data_.YSpeed = 42, data_.x = pInfo(peer)->x + rand() % 17, data_.y = pInfo(peer)->y + rand() % 22;
			BYTE* raw = packPlayerMoving(&data_);
			for (ENetPeer* cp_ = server->peers; cp_ < &server->peers[server->peerCount]; ++cp_) {
				if (cp_->state != ENET_PEER_STATE_CONNECTED or cp_->data == NULL) continue;
				if (pInfo(cp_)->world == world_->name) {
					send_raw(cp_, 4, raw, 56, ENET_PACKET_FLAG_RELIABLE);
				}
			}
			delete[] raw;
		}
		Playmods::Add(peer, 4);
		Clothing_V2::Update(peer);
	}
	else if (percentage <= 19) {
		vector<int> pastel_blocks{510, 512, 514, 516, 518, 520, 522};
		drop_block_.id = pastel_blocks[rand() % pastel_blocks.size()], drop_block_.count = 5;
	}
	else if (percentage <= 24) 	drop_block_.id = 10760, drop_block_.count = 5;
	else if (percentage <= 29) drop_block_.id = 4624, drop_block_.count = 7;
	else if (percentage >= 30 && percentage <= 34) drop_block_.id = 13388, drop_block_.count = 1;
	else if (percentage <= 39) drop_block_.id = ((rand() % 100) < 50 ? 616 : 618), drop_block_.count = 1;
	else if (percentage <= 49) drop_block_.id = ((rand() % 100) < 50 ? 1548 : 8044), drop_block_.count = 1;
	else if (percentage <= 59) {
		vector<int> easter_set{502, 500, 498, 508};
		drop_block_.id = easter_set[rand() % easter_set.size()], drop_block_.count = 1;
	}
	else if (percentage <= 69) {
		vector<int> bunny_set{504, 506, 524};
		drop_block_.id = bunny_set[rand() % bunny_set.size()], drop_block_.count = 1;
	}
	else if (percentage <= 79) drop_block_.id = 8038, drop_block_.count = 1;
	else if (percentage <= 89) drop_block_.id = 2558, drop_block_.count = 1;
	else if (percentage <= 99) drop_block_.id = 1550, drop_block_.count = 1;
	else if (percentage == 100) drop_block_.id = 1552, drop_block_.count = 1;
	else if (percentage >= 100 && percentage <= 104) drop_block_.id = 13374, drop_block_.count = 1;
	else if (percentage <= 119) drop_block_.id = 9452, drop_block_.count = 1;
	else if (percentage <= 159) drop_block_.id = 9468, drop_block_.count = 1;
	else if (percentage <= 179) drop_block_.id = 9454, drop_block_.count = 1;
	else if (percentage <= 199) drop_block_.id = 9442, drop_block_.count = 1;
	else if (percentage == 200)drop_block_.id = 9446, drop_block_.count = 1;
	drop_block_.x = x_ * 32 + rand() % 17, drop_block_.y = y_ * 32 + rand() % 17;
	VisualHandle::Drop(world_, drop_block_);
}
void add_magic_egg(ENetPeer* peer, World* world_, WorldBlock* block_, int x_, int y_, int eggs = 1) {
	pInfo(peer)->magic_egg += eggs;
	PlayerMoving data_{};
	data_.packetType = 17, data_.netID = 66, data_.YSpeed = 66, data_.x = x_ * 32 + 16, data_.y = y_ * 32 + 16;
	BYTE* raw_e = packPlayerMoving(&data_);
	if (block_->shelf_1 < 2001) {
		block_->shelf_1 += eggs;
	}
	if (block_->shelf_1 > 1000) {
		int burst_chance = 350;
		if (block_->shelf_1 > 1500) burst_chance = 125;
		gamepacket_t p;
		p.Insert("OnTalkBubble"), p.Insert(pInfo(peer)->netID);
		bool not_crack = false;
		for (int i = 0; i < eggs; i++) {
			if (rand() % burst_chance < 1) {
				drop_from_magic_egg(peer, world_, block_, x_, y_);
				p.Insert("`6The egg has exploded!``");
				block_->fg = 0, block_->shelf_1 = 0;
				update_tile(peer, x_, y_, 0, false, true);
				not_crack = true;
				break;
			}
		}
		if (not_crack == false) p.Insert(block_->shelf_1 <= 1500 ? "This oversized egg has a fair chance to burst!" : "`6This over-sized egg has a good chance to burst!``");
		p.Insert(0), p.Insert(1), p.CreatePacket(peer);
	}
	for (ENetPeer* cp_ = server->peers; cp_ < &server->peers[server->peerCount]; ++cp_) {
		if (cp_->state != ENET_PEER_STATE_CONNECTED or cp_->data == NULL) continue;
		if (pInfo(cp_)->world == world_->name) {
			send_raw(cp_, 4, raw_e, 56, ENET_PACKET_FLAG_RELIABLE);
		}
	}
	delete[] raw_e;
	tile_update(peer, world_, block_, x_, y_);
}
void SendRespawn(ENetPeer* peer, bool kickall, int instant, bool kill = false) {
	if (pInfo(peer)->trading_with != -1) cancel_trade(peer, false, true);
	if (pInfo(peer)->respawn_time + 1000 < (duration_cast<milliseconds>(system_clock::now().time_since_epoch())).count() || kickall) {
		pInfo(peer)->respawn_time = (duration_cast<milliseconds>(system_clock::now().time_since_epoch())).count();
		std::string name_ = pInfo(peer)->world;
		std::vector<World>::iterator p = find_if(worlds.begin(), worlds.end(), [name_](const World& a) { return a.name == name_; });
		if (p != worlds.end()) {
			World* world_ = &worlds[p - worlds.begin()];
			bool skip_ = false;
			if (pInfo(peer)->c_x < 0 || pInfo(peer)->c_y < 0 || pInfo(peer)->c_x >= world_->max_x || pInfo(peer)->c_y >= world_->max_y) skip_ = true;
			if (skip_ == false && (items[world_->blocks[pInfo(peer)->c_x + (pInfo(peer)->c_y * 100)].fg].blockType == BlockTypes::CHECKPOINT or items[world_->blocks[pInfo(peer)->c_x + (pInfo(peer)->c_y * 100)].fg].blockType == BlockTypes::MAIN_DOOR or world_->blocks[pInfo(peer)->c_x + (pInfo(peer)->c_y * 100)].fg == 1912)) {
			}
			else {
				int ySize = (int)world_->blocks.size() / 100, xSize = (int)world_->blocks.size() / ySize, square = (int)world_->blocks.size();
				for (int i_ = 0; i_ < square; i_++) {
					if (items[world_->blocks[i_].fg].blockType == BlockTypes::MAIN_DOOR) {
						pInfo(peer)->c_x = (i_ % xSize);
						pInfo(peer)->c_y = (i_ / xSize);
						gamepacket_t p(0, pInfo(peer)->netID);
						p.Insert("SetRespawnPos");
						p.Insert(i_);
						p.CreatePacket(peer);
						break;
					}
				}
			}
		}
		{
			gamepacket_t p(0, pInfo(peer)->netID);
			p.Insert("OnSetFreezeState");
			p.Insert(2);
			p.CreatePacket(peer);
		}
		{
			gamepacket_t p(0, pInfo(peer)->netID);
			p.Insert("SetRespawnPos");
			p.Insert(pInfo(peer)->c_x + (pInfo(peer)->c_y * 100));
			p.CreatePacket(peer);
		}
		{
			if (kill) {
				gamepacket_t p(0, pInfo(peer)->netID);
				p.Insert("OnKilled");
				p.CreatePacket(peer);
			}
		}
		{
			if (pInfo(peer)->adventure_begins && pInfo(peer)->lives != 0) {
				if (pInfo(peer)->lives > 1) {
					pInfo(peer)->lives--;
					VisualHandle::Nick(peer, NULL);
				}
				else {
					pInfo(peer)->adventure_begins = false;
					pInfo(peer)->lives = 0;
					gamepacket_t packet(0, pInfo(peer)->netID);
					packet.Insert("OnCountdownEnd");
					packet.CreatePacket(peer);
					VisualHandle::Nick(peer, NULL);
					VarList::OnTalkBubble(peer, pInfo(peer)->netID, ":'( I failed my adventure!", 1, true);
				}
			}
			VarList::OnSetPos(peer, pInfo(peer)->c_x * 32, pInfo(peer)->c_y * 32, (instant == 0 ? 2000 : 100));
		}
		{
			gamepacket_t p((instant == 0 ? 2020 : 100), pInfo(peer)->netID);
			p.Insert("OnPlayPositioned");
			p.Insert("audio/teleport.wav");
			for (ENetPeer* cp_ = server->peers; cp_ < &server->peers[server->peerCount]; ++cp_) {
				if (cp_->state != ENET_PEER_STATE_CONNECTED or cp_->data == NULL) continue;
				if (pInfo(cp_)->world == pInfo(peer)->world) {
					p.CreatePacket(cp_);
				}
			}
		}
		{
			gamepacket_t p((instant == 0 ? 2000 : 100), pInfo(peer)->netID);
			p.Insert("OnSetFreezeState");
			p.Insert(0);
			p.CreatePacket(peer);
		}
	}
}
void end_surgery(ENetPeer* peer) {
	if (pInfo(peer)->surgery_started) {
		if (pInfo(peer)->surged_display == "Surg-E" || pInfo(peer)->surged_display == "Train-E") {
			std::string name_ = pInfo(peer)->surgery_world;
			std::vector<World>::iterator p = find_if(worlds.begin(), worlds.end(), [name_](const World& a) { return a.name == name_; });
			if (p != worlds.end()) {
				World* world_ = &worlds[p - worlds.begin()];
				WorldBlock* block_ = &world_->blocks[pInfo(peer)->lastwrenchx + (pInfo(peer)->lastwrenchy * 100)];
				if (block_->fg == 4296 || block_->fg == 8558) {
					block_->fg = 0;
					update_tile(peer, pInfo(peer)->lastwrenchx, pInfo(peer)->lastwrenchy, 0, false, true);
				}
			}
		}
		for (ENetPeer* cp_ = server->peers; cp_ < &server->peers[server->peerCount]; ++cp_) {
			if (cp_->state != ENET_PEER_STATE_CONNECTED or cp_->data == NULL or pInfo(cp_)->world != pInfo(peer)->world) continue;
			if (pInfo(peer)->surged_person != "" && pInfo(peer)->surged_person == pInfo(cp_)->tankIDName) Player_Respawn(cp_, true, 0, 1), add_peer_xp(cp_, 700); Pet_Ai::Add_Xp(cp_, 500);
			VarList::OnConsoleMessage(peer, "`7[``" + get_player_nick(peer) + " `4failed to save`` " + pInfo(peer)->surged_display + " from " + pInfo(peer)->surgery_name + "!`7]``");
		}
		VarList::OnConsoleMessage(peer, "`4The patient has succumbed to infection.`` `4YOUR MEDICAL LICENSE IS REVOKED!``");
		if (pInfo(peer)->started_type != 30) {
			if (pInfo(peer)->pants == 3172) {
				gamepacket_t p, p2;
				VarList::OnConsoleMessage(peer, "`2Your briefs have stunned the judge!``");
				p2.Insert("OnTalkBubble"), p2.Insert(pInfo(peer)->netID), p2.Insert("`2Your briefs have stunned the judge!``"), p2.Insert(0), p2.Insert(0), p2.CreatePacket(peer);
				int remove = -1;
				Inventory::Modify(peer, 3172, remove);
			}
			else {
				int seconds = 3600;
				if (pInfo(peer)->pants == 3172) seconds = 0;
				if (pInfo(peer)->necklace == 8954) seconds *= 0.75;
				Playmods::Add(peer, 86, seconds);
			}
		}
		pInfo(peer)->surged_person = "";
		pInfo(peer)->surgery_started = false;
	}
}
void memory_clean_world(const string world_name) {
	if (ServerPool::PlayerCountWorld(world_name) < 1) save_world(world_name, true);
}
class Winter_Fest {
public:
	static vector<double> Calendar_2022(int id) {
		if (id == 1 || id == 5 || id == 9 || id == 13 || id == 18 || id == 22) return WinterFest.Calendar_2022[0];
		else if (id == 2 || id == 6 || id == 10 || id == 14 || id == 19 || id == 23) return WinterFest.Calendar_2022[1];
		else if (id == 3 || id == 7 || id == 11 || id == 16 || id == 20 || id == 24) return WinterFest.Calendar_2022[2];
		else if (id == 4 || id == 8 || id == 12 || id == 17 || id == 21) return WinterFest.Calendar_2022[3];
		else if (id == 15) return WinterFest.Calendar_2022[4];
		else if (id == 25) return WinterFest.Calendar_2022[5];
		else return WinterFest.Calendar_2022[0];
	}
	static vector<double> Calendar_2023(int id) {
		if (id == 1 || id == 5 || id == 9 || id == 13 || id == 18 || id == 22) return WinterFest.Calendar_2023[0];
		else if (id == 2 || id == 6 || id == 10 || id == 14 || id == 19 || id == 23) return WinterFest.Calendar_2023[1];
		else if (id == 3 || id == 7 || id == 11 || id == 16 || id == 20 || id == 24) return WinterFest.Calendar_2023[2];
		else if (id == 4 || id == 8 || id == 12 || id == 17 || id == 21) return WinterFest.Calendar_2023[3];
		else if (id == 15) return WinterFest.Calendar_2023[4];
		else if (id == 25) return WinterFest.Calendar_2023[5];
		else return WinterFest.Calendar_2023[0];
	}
	static vector<double> Calendar_2024(int id) {
		if (id == 1 || id == 5 || id == 9 || id == 13 || id == 18 || id == 22) return WinterFest.Calendar_2024[0];
		else if (id == 2 || id == 6 || id == 10 || id == 14 || id == 19 || id == 23) return WinterFest.Calendar_2024[1];
		else if (id == 3 || id == 7 || id == 11 || id == 16 || id == 20 || id == 24) return WinterFest.Calendar_2024[2];
		else if (id == 4 || id == 8 || id == 12 || id == 17 || id == 21) return WinterFest.Calendar_2024[3];
		else if (id == 15) return WinterFest.Calendar_2024[4];
		else if (id == 25) return WinterFest.Calendar_2024[5];
		else return WinterFest.Calendar_2024[0];
	}
	static void Growch_Heart(ENetPeer* peer, World* world_) {
		WinterFest.Progress_Gifted++;
		if (WinterFest.Progress_Gifted == 200) {
			WinterFest.Progress_Gifted = 0;
			WinterFest.GiftedGrowch += 1;
			world_->weather = 12;
			for (ENetPeer* cp_ = server->peers; cp_ < &server->peers[server->peerCount]; ++cp_) {
				if (cp_->state != ENET_PEER_STATE_CONNECTED or cp_->data == NULL) continue;
				VarList::OnConsoleMessage(cp_, "`oThanks to " + pInfo(peer)->tankIDName + ", the Growch's Heart is " + to_string(WinterFest.GiftedGrowch) + "% of the way to getting bigger!");
				if (pInfo(cp_)->world == "GROWCH") {
					VarList::OnSetCurrentWeather(cp_, world_->weather);
				}
			}
			if (WinterFest.GiftedGrowch == 100) {
				world_->weather = 12;
				WinterFest.Growch_Happy = false;
				Inventory::Modify(peer, day_item, day_count);
				WinterFest.GiftedGrowch = 0;
				for (ENetPeer* cp_ = server->peers; cp_ < &server->peers[server->peerCount]; ++cp_) {
					if (cp_->state != ENET_PEER_STATE_CONNECTED or cp_->data == NULL) continue;
					VarList::OnConsoleMessage(cp_, "`wGrowch is now very angry because " + pInfo(peer)->tankIDName + " `w he got one a `2" + items[day_item].name + " exclusive rewards.");
					if (pInfo(cp_)->world == "GROWCH") {
						VarList::OnSetCurrentWeather(cp_, world_->weather);
					}
				}
			}
		}
		if (WinterFest.Growch_Happy_Time - time(nullptr) <= 0 and WinterFest.GiftedGrowch != 0 and WinterFest.Growch_Happy) {
			world_->weather = 12;
			WinterFest.Growch_Happy = false;
			WinterFest.Growch_Happy_Time = time(nullptr) + (300 * 60);
			for (ENetPeer* cp_ = server->peers; cp_ < &server->peers[server->peerCount]; ++cp_) {
				if (cp_->state != ENET_PEER_STATE_CONNECTED or cp_->data == NULL) continue;
				VarList::OnConsoleMessage(cp_, "`oThe Growch is angry again, making he happy again!");
				if (pInfo(cp_)->world == "GROWCH") {
					VarList::OnSetCurrentWeather(cp_, world_->weather);
				}
			}
		}
		if (WinterFest.Growch_Happy_Time - time(nullptr) <= 0 and WinterFest.GiftedGrowch != 0 and not WinterFest.Growch_Happy) {
			if (WinterFest.GiftedGrowch == 5 and WinterFest.Heart_Size == 0 or WinterFest.GiftedGrowch == 10 and WinterFest.Heart_Size == 1 or WinterFest.GiftedGrowch == 15 and WinterFest.Heart_Size == 2 or WinterFest.GiftedGrowch == 20 and WinterFest.Heart_Size == 3 or WinterFest.GiftedGrowch == 25 and WinterFest.Heart_Size == 4 or WinterFest.GiftedGrowch == 30 and WinterFest.Heart_Size == 5 or WinterFest.GiftedGrowch == 35 and WinterFest.Heart_Size == 6 or WinterFest.GiftedGrowch == 40 and WinterFest.Heart_Size == 7 or WinterFest.GiftedGrowch == 45 and WinterFest.Heart_Size == 8 or WinterFest.GiftedGrowch == 50 and WinterFest.Heart_Size == 9 or WinterFest.GiftedGrowch == 55 and WinterFest.Heart_Size == 10 or WinterFest.GiftedGrowch == 60 and WinterFest.Heart_Size == 11) {
				world_->weather = 13;
				if (WinterFest.Heart_Size < 11) WinterFest.Heart_Size++;
				WinterFest.Progress_Gifted = 0;
				WinterFest.Growch_Happy = true;
				WinterFest.Growch_Happy_Time = time(nullptr) + (300 * 60);
				for (ENetPeer* cp_ = server->peers; cp_ < &server->peers[server->peerCount]; ++cp_) {
					if (cp_->state != ENET_PEER_STATE_CONNECTED or cp_->data == NULL) continue;
					if (WinterFest.Heart_Size == 1) VarList::OnConsoleMessage(cp_, "`o*** `2The Growch's heart has grown a size bigger`o! New items available: `#Tangyuan``, `#Elf Hat``, `#Icicles``, `#Snow Crust Block``, `#Partridge in a Pear Tree`` ***``");
					if (WinterFest.Heart_Size == 2) VarList::OnConsoleMessage(cp_, "`o*** `2The Growch's heart has grown a size bigger`o! New items available: `#Candy Cane Block``, `#Reindeer Bell``, `#Lumber Axe``, `#Gingerbread Man Mask``, `#Snowy Rocks Platform`` ***``");
					if (WinterFest.Heart_Size == 3) VarList::OnConsoleMessage(cp_, "`o*** `2The Growch's heart has grown a size bigger`o! New items available: `#Snowball``, `#Yeti Hat``, `#Festivus Pole``, `#Abominable Snowman Suit``, `#Abominable Snowman Mask``, `#Last Christmas Cut`` ***``");
					if (WinterFest.Heart_Size == 4) VarList::OnConsoleMessage(cp_, "`o*** `2The Growch's heart has grown a size bigger`o! New items available: `#Giant Candle``, `#Buckskin Pants``, `#Snow Husky``, `#Winterfest Checkpoint`` ***``");
					if (WinterFest.Heart_Size == 5) VarList::OnConsoleMessage(cp_, "`o*** `2The Growch's heart has grown a size bigger`o! New items available: `#Candy Cane Fence``, `#Buckskin Jacket``, `#Winter Flu Vaccine``, `#Pumpkin Pie``, `#Eggnog``, `#Zamgrowni``, `#Dinosaur in Ice Block`` ***``");
					if (WinterFest.Heart_Size == 6) VarList::OnConsoleMessage(cp_, "`o*** `2The Growch's heart has grown a size bigger`o! New items available: `#Antler Hat``, `#Buckskin Hood``, `#Snowmobile``, `#Ice Sculptures``, `#Chocolate Checkpoint`` ***``");
					if (WinterFest.Heart_Size == 7) VarList::OnConsoleMessage(cp_, "`o*** `2The Growch's heart has grown a size bigger`o! New items available: `#Glowing Nose``, `#Candy Cane Platform``, `#Sock On The Wall``, `#Candy Cane Streetlamp``, `#Dancing Snow Globe`` ***``");
					if (WinterFest.Heart_Size == 8) VarList::OnConsoleMessage(cp_, "`o*** `2The Growch's heart has grown a size bigger`o! New items available: `#Holiday Cheer Bomb``, `#Parka Hood - Orange``, `#Ice Dragon Hand``, `#Parka Hood - Blue``, `#Puffy Blue Jacket``, `#Cloak of Fire and Ice``, `#Malanka Mask`` ***``");
					if (WinterFest.Heart_Size == 9) VarList::OnConsoleMessage(cp_, "`o*** `2The Growch's heart has grown a size bigger`o! New items available: `#Yeonnalligi``, `#Magic Reindeer Bell``, `#Riding Winter Wolf``, `#Armored WinterBot - Feet``, `#Ice Shard Hair`` ***``");
					if (WinterFest.Heart_Size == 10) VarList::OnConsoleMessage(cp_, "`o*** `2The Growch's heart has grown a size bigger`o! New items available: `#Holiday Gift Box``, `#Mighty Snow Rod``, `#Gingerbread Man``, `#Snow Leopard Shawl`` ***``");
					if (WinterFest.Heart_Size == 11) VarList::OnConsoleMessage(cp_, "`o*** `2The Growch's heart has grown a size bigger`o! New items available: `#Snow Leopard Tail``, `#Snow Husky Sledge``, `#Armored WinterBot - Fists``, `#Aura Antlers`` ***``");
					if (pInfo(cp_)->world == "GROWCH") {
						VarList::OnConsoleMessage(cp_, "`2Party With The Growch!:`` `oCelebrate the holidays with your ol' buddy, the `2Growch``!``");
						VarList::OnAddNotification(cp_, "`2Party With The Growch!:`` `oCelebrate the holidays with your ol' buddy, the `2Growch``!``", "interface/large/special_event.rttex", "audio/gong.wav");
						CAction::Positioned(cp_, pInfo(cp_)->netID, "audio/love_in.wav", 0);
						VarList::OnSetCurrentWeather(cp_, world_->weather);
					}
				}
			}
		}
	}
	static void Spawn_Event(ENetPeer* peer) {
		std::string name_ = pInfo(peer)->world;
		std::vector<World>::iterator p = find_if(worlds.begin(), worlds.end(), [name_](const World& a) { return a.name == name_; });
		if (p != worlds.end()) {
			int event_item = 0;
			World* world_ = &worlds[p - worlds.begin()];
			world_->special_event_item = 9186;
			event_item = world_->special_event_item;
			world_->special_event = true;
			for (ENetPeer* cp__event = server->peers; cp__event < &server->peers[server->peerCount]; ++cp__event) {
				if (cp__event->state != ENET_PEER_STATE_CONNECTED or cp__event->data == NULL or pInfo(cp__event)->world != name_) continue;
				VarList::OnConsoleMessage(cp__event, "`2Royal Winter: `5Royal Winter Seals `ofor everyone! Be quick you have `w30 `oseconds for collect them!");
				VarList::OnAddNotification(cp__event, "`2Royal Winter: `5Royal Winter Seals `ofor everyone! Be quick you have `w30 `oseconds for collect them!", "interface/large/special_event.rttex", "audio/cumbia_horns.wav");
			}
			if (find(Environment()->Another_Worlds.begin(), Environment()->Another_Worlds.end(), world_->name) == Environment()->Another_Worlds.end()) Environment()->Another_Worlds.push_back(world_->name);
			server_event_spawn = (duration_cast<milliseconds>(system_clock::now().time_since_epoch())).count();
			WorldDrop drop_block_{};
			drop_block_.count = 1;
			for (int i_ = 0; i_ < items[event_item].event_total; i_++) {
				drop_block_.id = event_item, drop_block_.x = rand() % 99 * 32, drop_block_.y = rand() % 54 * 32;
				world_->world_event_items.push_back(event_item);
				VisualHandle::Drop(world_, drop_block_, true);
			}
		}
	}
};
class Anniversary {
public:
	static void Spawn_Event(ENetPeer* peer) {
		std::string name_ = pInfo(peer)->world;
		std::vector<World>::iterator p = find_if(worlds.begin(), worlds.end(), [name_](const World& a) { return a.name == name_; });
		if (p != worlds.end()) {
			World* world_ = &worlds[p - worlds.begin()];
			std::vector<string> list = { "Party Tunes","Party Block","Party Tunes","Party Screamer","Party Block","Party Bunting","Party Block","Party Style Scarf","Party Table","Party Block","Raver Hoodie","Party Socks","Party Block","Party Screamer","Party Popper","Party Block","Party-In-A-Box Head","Party Block","Party Glasses","Party Block","Party Couch","Party Confetti","Party Block","Party Cake","Party Block","Party Bunting","Party Block","Party Hat","Party Horn","Party Vest","Sheet Music: Electric Guitar","Rave Cap","Electric Guitar","Party Bunting","Rave Cap","Party Bunting","Party Bunting","Party Vest","Party Cake","Party Confetti","Golden Party-In-A-Box","Party Confetti","Party Cake" };
			int randomIndex = std::rand() % list.size(), id_prize = GetItemIDByName(list[randomIndex]);
			world_->special_event_item = 2306;
			world_->special_event = true;
			for (ENetPeer* cp__event = server->peers; cp__event < &server->peers[server->peerCount]; ++cp__event) {
				if (cp__event->state != ENET_PEER_STATE_CONNECTED or cp__event->data == NULL or pInfo(cp__event)->world != name_) continue;
				if (id_prize == 7672) {
					VarList::OnConsoleMessage(cp__event, "`wCongratulations for Partying super hard you've been awarded a `2Golden Party-In-A-Box``!");
					VarList::OnConsoleMessage(cp__event, "`wGolden Party-In-A-Box for everyone Partying super hard!");
					VarList::OnAddNotification(cp__event, "`wGolden Party-In-A-Box for everyone Partying super hard!", "interface/large/anni_plu.rttex", "audio/cumbia_horns.wav");
				}
				else {
					VarList::OnConsoleMessage(cp__event, "`2Anniversary Party!: `oGrowtopia's still here! Have some free stuff!");
					VarList::OnAddNotification(cp__event, "`2Anniversary Party!: `oGrowtopia's still here! Have some free stuff!", "interface/large/special_event.rttex", "audio/cumbia_horns.wav");
				}
			}
			if (find(Environment()->Another_Worlds.begin(), Environment()->Another_Worlds.end(), world_->name) == Environment()->Another_Worlds.end()) Environment()->Another_Worlds.push_back(world_->name);
			server_event_spawn = (duration_cast<milliseconds>(system_clock::now().time_since_epoch())).count();
			WorldDrop drop_block_{};
			drop_block_.count = 1;
			for (int i_ = 0; i_ < items[2306].event_total; i_++) {
				drop_block_.id = id_prize, drop_block_.x = rand() % 99 * 32, drop_block_.y = rand() % 54 * 32;
				world_->world_event_items.push_back(id_prize);
				VisualHandle::Drop(world_, drop_block_, true);
			}
		}
	}
};
struct temp_locked_worlds {
	string name = "";
	long long int time = 0;
};
vector<temp_locked_worlds>t_l_worlds;
void add_temp_locked_world(string name) {
	temp_locked_worlds tmp;
	tmp.name = to_lower(name);
	tmp.time = time(nullptr) + 1;
	t_l_worlds.push_back(tmp);
}
bool check_and_remove_temp_locked_world(string name) {
	for (int i = 0; i < t_l_worlds.size(); i++) {
		if (t_l_worlds.at(i).name == name) {
			if (t_l_worlds.at(i).time > time(nullptr)) {
				return true;
			}
			else {
				t_l_worlds.erase(t_l_worlds.begin() + i);
				return false;
			}
			break;
		}
	}
	return false;
}
void exit_(ENetPeer* peer, bool reset_ = false) {
	string name_ = pInfo(peer)->world;
	std::string folderPath = "database/worlds/";
	fs::path filePath = folderPath + name_ + "_.json";
	if (pInfo(peer)->In_World_Mining) {
		fs::remove(filePath);
		pInfo(peer)->In_World_Mining = false;
		VarList::OnEndMission(peer);
	}
	if (pInfo(peer)->DrDes) {
		for (ENetPeer* currentPeer_event = server->peers; currentPeer_event < &server->peers[server->peerCount]; ++currentPeer_event) {
			if (currentPeer_event->state != ENET_PEER_STATE_CONNECTED or currentPeer_event->data == NULL or pInfo(currentPeer_event)->world != name_) continue;
			pInfo(peer)->d_name = "";
			pInfo(peer)->DrDes = false, pInfo(peer)->ghost = false;
			pInfo(peer)->Health_DrDes = 100, pInfo(peer)->face = 0, pInfo(peer)->shirt = 0, pInfo(peer)->pants = 0, pInfo(peer)->hair = 0, pInfo(peer)->necklace = 0, pInfo(peer)->back = 0, pInfo(peer)->feet = 0, pInfo(peer)->hand = 0, pInfo(peer)->punched = 0;
			VisualHandle::Nick(peer, NULL);
			VisualHandle::State(pInfo(peer));
			Clothing_V2::Update_Value(peer);
			VarList::OnConsoleMessage(currentPeer_event, "`4Dr. Destructo `oescaped!");
			VarList::OnAddNotification(currentPeer_event, "`4Dr. Destructo `oescaped!", "interface/large/special_event.rttex", "audio/cumbia_horns.wav");
		}
		std::vector<World>::iterator p = find_if(worlds.begin(), worlds.end(), [name_](const World& a) { return a.name == name_; });
		if (p != worlds.end()) {
			World* world = &worlds[p - worlds.begin()];
			world->world_event_items.clear();
			world->last_special_event = (duration_cast<milliseconds>(system_clock::now().time_since_epoch())).count(), world->special_event_item = 0, world->special_event_item_taken = 0, world->special_event = false, world->special_event_name = "";
		}
	}
	pInfo(peer)->rr_used = 0;
	pInfo(peer)->random_geiger_time = 0;
	pInfo(peer)->World_Timed = 0;
	pInfo(peer)->WorldTimed = false;
	pInfo(peer)->isNpcTipsCall = false;
	pInfo(peer)->isNpcPromotionCalling = false;
	pInfo(peer)->isNpcTrading = false;
	pInfo(peer)->isNpcBfg = false;
	pInfo(peer)->isNpcWelcomeLoad = false;
	pInfo(peer)->adventure_item.clear();
	if (pInfo(peer)->spotlight) {
		pInfo(peer)->spotlight = false;
		VisualHandle::State(pInfo(peer));
	}
	pInfo(peer)->temp_transmute = false;
	autofarm_status(peer), end_surgery(peer);
	if (pInfo(peer)->invis == false) {
		ServerPool::CctvLogs::Add(peer, "left", "");
		CAction::Positioned(peer, pInfo(peer)->netID, "audio/door_shut.wav", 0);
	}
	string world_name = pInfo(peer)->world;
	pInfo(peer)->world = "", pInfo(peer)->world_owner = "";
	pInfo(peer)->access_offers.clear();
	if (ServerPool::PlayerCountWorld(world_name) == 0) {
		add_temp_locked_world(world_name);
		save_world(world_name, true);
	}
	for (ENetPeer* cp_ = server->peers; cp_ < &server->peers[server->peerCount]; ++cp_) {
		if (cp_->state != ENET_PEER_STATE_CONNECTED or cp_->data == NULL) continue;
		if (pInfo(cp_)->world == world_name) {
			VarList::OnRemove(cp_, pInfo(peer)->netID, name_to_number(to_lower(pInfo(peer)->tankIDName)));
			if (pInfo(peer)->show_pets and pInfo(peer)->pet_netID != 0) {
				VarList::OnRemove(cp_, pInfo(peer)->pet_netID, 0);
			}
			if (not pInfo(peer)->invis) {
				if (pInfo(peer)->show_pets and pInfo(peer)->pet_netID != 0) {
					VarList::OnConsoleMessage(cp_, "`5<`0" + pInfo(peer)->pet_name + " (" + pInfo(peer)->tankIDName + ")`` left, `w" + to_string(ServerPool::PlayerCountWorld(world_name)) + " `5others here>``");
				}
				CAction::Positioned(cp_, pInfo(cp_)->netID, "audio/door_shut.wav", 0);
				VarList::OnConsoleMessage(cp_, "`5<`0" + get_player_nick(peer) + "`` left, `w" + to_string(ServerPool::PlayerCountWorld(world_name)) + " `5others here>``");
			}
		}
	}
	if (not reset_) world_menu(peer);
}
void send_fix_world(World* world_) {
	for (int i_ = 0, add_up = -1; i_ < world_->drop_new.size(); i_++) {
		if (world_->drop_new[i_][0] == 0) {
			world_->drop_new.erase(world_->drop_new.begin() + i_);
			i_--;
		}
		else world_->drop_new[i_][2] = add_up += 1;
	}
	int lock_ = 0, first_ = -1;
	for (int i_ = 0; i_ < world_->blocks.size(); i_++) {
		if (items[world_->blocks[i_].fg].blockType == BlockTypes::LOCK) {
			if (world_->blocks[i_].fg != 202 and world_->blocks[i_].fg != 204 and world_->blocks[i_].fg != 206 and world_->blocks[i_].fg != 4994 and world_->blocks[i_].fg != 10000) {
				lock_++;
			}
		}
	}
	if (lock_ > 1) {
		for (int i_ = 0; i_ < world_->blocks.size(); i_++) {
			if (items[world_->blocks[i_].fg].blockType == BlockTypes::LOCK) {
				if (world_->blocks[i_].fg != 202 and world_->blocks[i_].fg != 204 and world_->blocks[i_].fg != 206 and world_->blocks[i_].fg != 4994 and world_->blocks[i_].fg != 10000) {
					if (first_ == -1) first_ = i_;
					world_->blocks[i_].fg = 0;
				}
			}
		}
		if (first_ != -1) world_->blocks[first_].fg = 242;
	}
	world_->total_drop_uid = world_->drop_new.size();
	for (ENetPeer* cp_ = server->peers; cp_ < &server->peers[server->peerCount]; ++cp_) {
		if (cp_->state != ENET_PEER_STATE_CONNECTED or cp_->data == NULL or pInfo(cp_)->world != world_->name) continue;
		Exit_World(cp_);
	}
}
void create_address_world(ENetPeer* peer, string name_, string currentworld_) {
	int rm = -1;
	name_ = to_upper(name_);
	currentworld_ = to_upper(currentworld_);
	get_world(name_);
	std::vector<World>::iterator p = find_if(worlds.begin(), worlds.end(), [name_](const World& a) { return a.name == name_; });
	if (p != worlds.end()) {
		World world_ = worlds[p - worlds.begin()];
		std::vector<World>::iterator p2 = find_if(worlds.begin(), worlds.end(), [currentworld_](const World& b) { return b.name == currentworld_; });
		if (p2 != worlds.end()) {
			World c_world_ = worlds[p2 - worlds.begin()];
			c_world_.fresh_world = true;
			if (to_lower(world_.owner_name) != to_lower(pInfo(peer)->tankIDName) || to_lower(c_world_.owner_name) != to_lower(pInfo(peer)->tankIDName)) return;
			if (Inventory::Modify(peer, 2580, rm) == 0) {
				for (ENetPeer* cp_ = server->peers; cp_ < &server->peers[server->peerCount]; ++cp_) {
					if (cp_->state != ENET_PEER_STATE_CONNECTED or cp_->data == NULL) continue;
					if (pInfo(cp_)->world == world_.name or pInfo(cp_)->world == c_world_.name) {
						VarList::OnAddNotification(cp_, "This world has just been renamed to `5" + name_ + "`` by the owner! (Please join it again)", "interface/large/jump_icon.rttex", "audio/gate_close.wav", 500);
						VarList::OnConsoleMessage(cp_, "Ok, " + currentworld_ + " and " + name_ + " have swapped names!", false, 500);
						VarList::OnConsoleMessage(cp_, "This world has just been renamed to `5" + name_ + "`` by the owner! (Please join it again)", false, 500);
						Exit_World(cp_, false);
						pInfo(cp_)->AddressName = name_;
						pInfo(cp_)->AddressHasTrue = true;
					}
				}
			}
			ServerPool::Logs::Add(pInfo(peer)->tankIDName + " Rename World : " + currentworld_ + " to " + name_ + ".", "Change of Address");
			if (world_.guild_id != 0) {
				uint32_t guild_id = pInfo(peer)->guild_id;
				vector<Guild>::iterator p = find_if(guilds.begin(), guilds.end(), [guild_id](const Guild& a) { return a.guild_id == guild_id; });
				if (p != guilds.end()) {
					Guild* guild_information = &guilds[p - guilds.begin()];
					guild_information->guild_world = currentworld_;
					save_guilds();
				}
			}
			if (c_world_.guild_id != 0) {
				uint32_t guild_id = pInfo(peer)->guild_id;
				vector<Guild>::iterator p = find_if(guilds.begin(), guilds.end(), [guild_id](const Guild& a) { return a.guild_id == guild_id; });
				if (p != guilds.end()) {
					Guild* guild_information = &guilds[p - guilds.begin()];
					guild_information->guild_world = name_;
					save_guilds();
				}
			}
			for (int i = 0; i < worlds.size(); i++) {
				if (worlds[i].name == currentworld_ or worlds[i].name == name_) {
					save_world(worlds[i].name, false);
					worlds.erase(worlds.begin() + i);
					i--;
				}
			}
			string path_ = "database/worlds/" + world_.name + "_.json";
			string path_2 = "database/worlds/" + c_world_.name + "_.json";
			string path_4 = "database/worlds/t_" + world_.name + "_.json";
			string path_3 = "database/worlds/t_" + c_world_.name + "_.json";
			if (rename(path_2.c_str(), path_3.c_str()));
			if (rename(path_.c_str(), path_4.c_str()));
			if (rename(path_3.c_str(), path_.c_str()));
			if (rename(path_4.c_str(), path_2.c_str()));
		}
	}
}
void load_surgery(ENetPeer* peer, uint16_t tool) {
	std::string name_ = pInfo(peer)->world;
	std::vector<World>::iterator p = find_if(worlds.begin(), worlds.end(), [name_](const World& a) { return a.name == name_; });
	if (p != worlds.end()) {
		World* world_ = &worlds[p - worlds.begin()];
		if (tool != 0 && tool != 1296) {
			int got = 0;
			if (Inventory::Contains(peer, tool) == 0) {
				end_surgery(peer);
				return;
			}
			if (pInfo(peer)->hand == 9068 && rand() % 100 < 10) {
			}
			else Inventory::Modify(peer, tool, got = -1);
		}
		bool has_tool = false;
		if (tool != 0) for (int i = 0; i < pInfo(peer)->available_surg_items.size(); i++) if (pInfo(peer)->available_surg_items[i] == tool) has_tool = true;
		if (tool == 0) has_tool = true;
		uint8_t skill = pInfo(peer)->surgery_skill;
		if (skill <= 10)	skill += 10;
		string surgery_fail_text = "", cured = "";
		if (Playmods::HasByName(pInfo(peer), "Calm Nerves") || Playmods::HasById(pInfo(peer),84)) skill *= 2;
		else {
			if (pInfo(peer)->hand == 6252) skill += 5;
			else if (pInfo(peer)->hand == 9068) skill += 5; // chance of not using surigcal tool
			if (pInfo(peer)->hair == 9592) skill += 5;
			if (pInfo(peer)->necklace == 3130) skill *= 2;
		}
		if (skill >= 100) skill = 100;
		if (rand() % skill < 3) {
			pInfo(peer)->s = false;
		}
		if (pInfo(peer)->started_type == 30) pInfo(peer)->gems += 500;
		if (pInfo(peer)->hand == 8536 && (pInfo(peer)->started_type == 27 || pInfo(peer)->started_type == 21 || pInfo(peer)->started_type == 22 || pInfo(peer)->started_type == 19 || pInfo(peer)->started_type == 18 || pInfo(peer)->started_type == 28 || pInfo(peer)->started_type == 23 || pInfo(peer)->started_type == 26 || pInfo(peer)->started_type == 24 || pInfo(peer)->started_type == 25)) pInfo(peer)->s = true;
		if (tool == 999) pInfo(peer)->endtext = "giveup";
		if (tool != 0) {
			if (tool == 1258) {
				pInfo(peer)->spongUsed += 1;
				if (pInfo(peer)->s) {
					pInfo(peer)->dirt = 0;
					cured = "mopped up the operating site.";
					pInfo(peer)->tooltext = "You mopped up the operating site.";
				}
				else
					pInfo(peer)->tooltext = "You somehow managed to eat the sponge.";
			}
			if (tool == 1260) {
				pInfo(peer)->scalpUsed += 1;
				if (pInfo(peer)->sleep == 0)
					pInfo(peer)->endtext = "You have cut the awake patient!";
				if (pInfo(peer)->incisions == pInfo(peer)->incneeded && pInfo(peer)->shattered == 0) {
					pInfo(peer)->tooltext = "You stabbed the patient in a vital organ!";
					pInfo(peer)->bleeding += 1;
					pInfo(peer)->s = false;
				}
				else {
					pInfo(peer)->incisions += 1;
					if (pInfo(peer)->s)
						pInfo(peer)->tooltext = "You've made a neat incision.";
					else
						pInfo(peer)->tooltext = "This will leave a nasty scar, but you managed to cut the right place.";
				}
			}
			if (tool == 1270) {
				pInfo(peer)->stitcUsed += 1;
				if (pInfo(peer)->s) {
					if (pInfo(peer)->incisions > 0) {
						cured = "stitched up an incision.";
						pInfo(peer)->tooltext = "You stitched up an incision.";
					}
					else if (pInfo(peer)->bleeding > 0) {
						cured = "bandaged some injuries.";
						pInfo(peer)->tooltext = "You bandaged some injuries.";
					}
					else
						pInfo(peer)->tooltext = "You tried to stitch your patient's mouth shut!.";
					if (pInfo(peer)->bleeding > 0)
						pInfo(peer)->bleeding -= 1;
					if (pInfo(peer)->incisions > 0)
						pInfo(peer)->incisions -= 1;
				}
				else
					pInfo(peer)->tooltext = "You somehow tied yourself up in stitches!";
			}
			if (tool == 1264) {
				pInfo(peer)->antisUsed += 1;
				if (pInfo(peer)->s) {
					pInfo(peer)->site = min(pInfo(peer)->site + 20, 20);
					cured = "disinfected the operating site.";
				}
				else
					pInfo(peer)->tooltext = "You spilled antiseptic on your shoes. They are very clean now.";
			}
			if (tool == 1266) {
				pInfo(peer)->antibUsed += 1;
				if (pInfo(peer)->s) {
					pInfo(peer)->fever -= 3;
					pInfo(peer)->tooltext = "You used antibiotics to reduce the patient's infection.";
					cured = "cured you with antibiotics.";
					if (pInfo(peer)->fever > -3)
						pInfo(peer)->antibs = true;
				}
				else {
					pInfo(peer)->fever += 1;
					pInfo(peer)->tooltext = "This is the wrong medication! The bacteria like it.";
				}
			}
			if (tool == 1268) {
				pInfo(peer)->splinUsed += 1;
				if (pInfo(peer)->s) {
					pInfo(peer)->broken -= 1;
					cured = "splinted a broken bone.";
					pInfo(peer)->tooltext = "You splinted a broken bone.";
				}
				else
					pInfo(peer)->tooltext = "You ate a splint, good job!";
			}
			if (tool == 1262) {
				pInfo(peer)->anestUsed += 1;
				if (pInfo(peer)->s) {
					pInfo(peer)->sleep += 10;
					cured = "falls into a deep sleep.";
					pInfo(peer)->tooltext = "The patient falls into a deep sleep.";
				}
				else
					pInfo(peer)->tooltext = "You end up inhaling all the anesthetic yourself. You feel woozy.";
			}
			if (tool == 4318) {
				pInfo(peer)->labkiUsed += 1;
				if (pInfo(peer)->s) {
					cured = "used a lab kit to discover you are suffering from " + pInfo(peer)->scantext;
					pInfo(peer)->labworked = true;
					if (pInfo(peer)->flu)
						pInfo(peer)->tooltext = "You performed lab work on the patient, and discovered they are suffering from " + pInfo(peer)->scantext;
					else
						pInfo(peer)->tooltext = "You performed lab work on the patient, and have antibiotics at the ready.";
				}
				else
					pInfo(peer)->tooltext = "You contaminated the sample.";
			}
			if (tool == 4316) {
				pInfo(peer)->ultraUsed += 1;
				if (pInfo(peer)->s) {
					pInfo(peer)->sounded = true;
					if (pInfo(peer)->flu)
						pInfo(peer)->tooltext = "You scanned the patient , but didn't find any abnormal masses.";
					else {
						cured = "used a ultrasound to discover you are suffering from " + pInfo(peer)->scantext;
						pInfo(peer)->tooltext = "You scanned the patient with ultrasound, discovering they are suffering from " + pInfo(peer)->scantext;
					}
				}
				else
					pInfo(peer)->tooltext = "You scanned the nurse with your ultrasound!";
			}
			if (tool == 4308) {
				pInfo(peer)->pinsUsed += 1;
				if (pInfo(peer)->s) {
					pInfo(peer)->shattered -= 1;
					pInfo(peer)->broken += 1;
					cured = "pinned a shattered bone together.";
					pInfo(peer)->tooltext = "You pinned a shattered bone together. Don't forget to splint it!";
				}
				else {
					pInfo(peer)->bleeding += 1;
					pInfo(peer)->tooltext = "You jabbed the pin through the artery!";
				}
			}
			if (tool == 4312) {
				pInfo(peer)->defibUsed += 1;
				if (pInfo(peer)->s) {
					pInfo(peer)->heart = 0;
					cured = "used a defibrillator and shocken your life back!";
					pInfo(peer)->tooltext = "You shocked the patient back to life!";
				}
				else
					pInfo(peer)->tooltext = "You electrocuted yourself!";
			}
			if (tool == 4310) {
				pInfo(peer)->transUsed += 1;
				if (pInfo(peer)->s) {
					pInfo(peer)->pulse = min(pInfo(peer)->pulse + 15, 40);
					cured = "tranfused several pints of blood into patient.";
					pInfo(peer)->tooltext = "You transfused several pints of blood into your patient.";
				}
				else
					pInfo(peer)->tooltext = "You spilled all of it! Kind of gross.";
			}
			if (tool == 4314) {
				pInfo(peer)->clampUsed += 1;
				if (pInfo(peer)->s) {
					pInfo(peer)->bleeding -= 1;
					cured = "clamped up some blood vessels.";
					pInfo(peer)->tooltext = "You clamped up some blood vessels.";
				}
				else
					pInfo(peer)->tooltext = "The clamp fell out of your hand, oh well.";
			}
			if (tool == 1296) {
				if (pInfo(peer)->s) {
					pInfo(peer)->fixed = true;
					cured = pInfo(peer)->postext;
					pInfo(peer)->tooltext = pInfo(peer)->postext;
				}
				else
					pInfo(peer)->tooltext = "You screwed it up! Try again.";
			}
			if (cured != "") {
				if (pInfo(peer)->surged_person != "") {
					for (ENetPeer* cp_ = server->peers; cp_ < &server->peers[server->peerCount]; ++cp_) {
						if (cp_->state != ENET_PEER_STATE_CONNECTED or cp_->data == NULL or pInfo(cp_)->world != pInfo(peer)->world or pInfo(peer)->surged_person != pInfo(cp_)->tankIDName) continue;
						gamepacket_t p2;
						p2.Insert("OnConsoleMessage"), p2.Insert(get_player_nick(peer) + " " + cured), p2.CreatePacket(cp_);
					}
				}
				gamepacket_t p2;
				p2.Insert("OnConsoleMessage"), p2.Insert(cured), p2.CreatePacket(peer);
			}
			surgery_fail_text = pInfo(peer)->tooltext;
			// Making Glove available
			if (!pInfo(peer)->fixable && (pInfo(peer)->incisions == pInfo(peer)->incneeded) && pInfo(peer)->sounded) {
				pInfo(peer)->fixable = true;
				pInfo(peer)->tooltext += "\nadd_smalltext|`3" + pInfo(peer)->fixtext + "``|left|";
			}
			// Managing bleeding, site, dirt
			pInfo(peer)->dirt += pInfo(peer)->bleeding + pInfo(peer)->incisions;
			if (pInfo(peer)->dirt > 10)
				pInfo(peer)->dirt = 10;
			pInfo(peer)->site -= floor(pInfo(peer)->dirt / 3);
			if (pInfo(peer)->site < -25)
				pInfo(peer)->site = -25;
			if (pInfo(peer)->sleep == 0 && pInfo(peer)->incisions > 0)
				pInfo(peer)->bleeding += 1;
			if (pInfo(peer)->bleeding > 4)
				pInfo(peer)->bleeding = 4;

			// Managing temp, fever
			if (pInfo(peer)->fever < 0) {
				if (pInfo(peer)->fever > -0.06)
					pInfo(peer)->fever = 0;
				else if (!pInfo(peer)->antibs)
					pInfo(peer)->fever = (pInfo(peer)->fever - 3) / 2;
			}
			else if ((pInfo(peer)->site <= 2) && (pInfo(peer)->bleeding > 0) || (pInfo(peer)->site <= 4) && (pInfo(peer)->incisions > 0))
				pInfo(peer)->fever += 0.06;
			pInfo(peer)->temp += pInfo(peer)->fever;
			pInfo(peer)->temp = round(pInfo(peer)->temp * 100) / 100;
			if (pInfo(peer)->temp < 98.6)
				pInfo(peer)->temp = 98.6;
			pInfo(peer)->antibs = false;
			if (((pInfo(peer)->sleep > 0) && (rand() % 100 < 5)) || (pInfo(peer)->heart > 0)) {
				pInfo(peer)->heart += 1;
			}
			else pInfo(peer)->sleep = max(pInfo(peer)->sleep - 1, 0);
			pInfo(peer)->pulse -= pInfo(peer)->bleeding + min(pInfo(peer)->incisions, 1);
			if (pInfo(peer)->pulse < 1 && pInfo(peer)->endtext.empty())
				pInfo(peer)->endtext = "Your patient bled out!";
			else if (pInfo(peer)->temp >= 111)
				pInfo(peer)->endtext = "Your patient succumbed to infection!";
			else if (pInfo(peer)->heart == 3)
				pInfo(peer)->endtext = "You failed to resucicate your patient in time!";
			else if (pInfo(peer)->sleep > 15)
				pInfo(peer)->endtext = "You put your patient to sleep. Permanently!";
			else if ((pInfo(peer)->incisions == 0) && (pInfo(peer)->broken == 0) && (pInfo(peer)->shattered == 0) && pInfo(peer)->fixed && (pInfo(peer)->bleeding == 0) && (pInfo(peer)->temp < 101))
				pInfo(peer)->endtext = "success";
			if (pInfo(peer)->s)
				pInfo(peer)->tooltext = "`3" + pInfo(peer)->tooltext + "``";
			else {
				pInfo(peer)->tooltext = "`3[```4Skill Fail (" + to_string(30 - pInfo(peer)->surgery_skill / 4) + "%)```3] `6" + pInfo(peer)->tooltext + "``";
				if (pInfo(peer)->surged_person != "") {
					for (ENetPeer* cp_ = server->peers; cp_ < &server->peers[server->peerCount]; ++cp_) {
						if (cp_->state != ENET_PEER_STATE_CONNECTED or cp_->data == NULL or pInfo(cp_)->world != pInfo(peer)->world or pInfo(peer)->surged_person != pInfo(cp_)->tankIDName) continue;
						gamepacket_t p2;
						p2.Insert("OnConsoleMessage"), p2.Insert("[`4Skill Fail (" + to_string(30 - skill / 4) + "%)``] `6" + surgery_fail_text + "``"), p2.CreatePacket(cp_);
					}
				}
			}
		}
		string diagnosed = "";
		if (!pInfo(peer)->sounded && !pInfo(peer)->flu || !pInfo(peer)->labworked && pInfo(peer)->flu)
			diagnosed += "`4The patient has not been diagnosed.``";
		else if (!pInfo(peer)->fixable || pInfo(peer)->flu || pInfo(peer)->incneeded == 0)
			diagnosed += (pInfo(peer)->pretext);
		else if (!pInfo(peer)->fixed) {
			diagnosed += (pInfo(peer)->fixtext);
		}
		else
			diagnosed += (pInfo(peer)->postext);
		string pulse = "Pulse: ";
		if (pInfo(peer)->pulse < 11)
			pulse += "`4Extremely Weak``";
		else if (pInfo(peer)->pulse < 21)
			pulse += "`6Weak``";
		else if (pInfo(peer)->pulse < 31)
			pulse += "`3Steady``";
		else
			pulse += "`2Strong``";
		string status = "Status: ";
		if (pInfo(peer)->heart > 0)
			status += "`4Heart `4stopped!``";
		else if (pInfo(peer)->sleep == 0)
			status += (pInfo(peer)->fixed ? "`3" : "`4") + a + "Awake``";
		else if (pInfo(peer)->sleep < 3)
			status += "`6Coming to``";
		else
			status += "`2Unconcsious``";
		string temp = "Temp: ";
		stringstream stream;
		stream << std::fixed << std::setprecision(1) << pInfo(peer)->temp;
		if (pInfo(peer)->temp < 100)
			temp += "`2" + stream.str() + "``";
		else if (pInfo(peer)->temp < 104)
			temp += "`3" + stream.str() + "``";
		else if (pInfo(peer)->temp < 106)
			temp += "`6" + stream.str() + "``";
		else
			temp += "`4" + stream.str() + "``";
		string operation = "Operation site: ";
		if (pInfo(peer)->site < -3)
			operation += "`4Uns`4anitary``";
		else if (pInfo(peer)->site < -1)
			operation += "`6Unc`6lean``";
		else if (pInfo(peer)->site < 1)
			operation += "`3Not `3sanitized``";
		else operation += "`2Cl`2ean``";
		string dirt = "";
		if (pInfo(peer)->dirt == 10)
			dirt += "`4You can't see what you `4are doing!";
		else if (pInfo(peer)->dirt > 4)
			dirt += "`6It is becoming hard to see your work.";
		string incisions = "Incisions: ";
		if (pInfo(peer)->incisions == 0)
			incisions += "`2" + to_string(pInfo(peer)->incisions) + "``";
		else
			incisions += "`3" + to_string(pInfo(peer)->incisions) + "``";
		string bones = "";
		if (pInfo(peer)->broken + pInfo(peer)->shattered > 0 && pInfo(peer)->sounded) {
			bones += "Bones: ";
			if (pInfo(peer)->broken > 0) {
				if (pInfo(peer)->broken > 2)
					bones += "`4" + to_string(pInfo(peer)->broken) + " broken``";
				else
					bones += "`6" + to_string(pInfo(peer)->broken) + " broken``";
			}
			if (pInfo(peer)->broken > 0 && pInfo(peer)->shattered > 0)
				bones += ", ";
			if (pInfo(peer)->shattered > 0) {
				if (pInfo(peer)->shattered > 2)
					bones += "`4" + to_string(pInfo(peer)->shattered) + " shattered``";
				else
					bones += "`6" + to_string(pInfo(peer)->shattered) + " shattered``";
			}
		}
		string bleeding = "";
		if (pInfo(peer)->bleeding > 0) {
			bleeding += "Patient is ";
			if (pInfo(peer)->bleeding == 1)
				bleeding += "losing blood `3slow`3ly.``";
			else if (pInfo(peer)->bleeding == 4)
				bleeding += "losing blood `4Extremely `4Fast!``";
			else {
				bleeding += "`6losing `6blood!``";
			}
		}
		string fever = "";
		if (pInfo(peer)->fever > 0 && pInfo(peer)->temp > 100) {
			fever += "Patient's fever is ";
			if (pInfo(peer)->fever < 0.5)
				fever += "`3slowly `3rising.``";
			else if (pInfo(peer)->fever > 2)
				fever += "`4climbing `4fast!``";
			else {
				fever += "`6clim`6bing!``";
			}
		}
		string heart_stopped = "";
		if (pInfo(peer)->heart == 1)
			heart_stopped += "`4The patient's `4heart `4has stopped!``";
		else if (pInfo(peer)->incisions > 0 && pInfo(peer)->sleep == 0)
			heart_stopped += "`4The patient `4screams and flails!``";
		string tools_available = "";
		pInfo(peer)->available_surg_items.clear();
		vector <int> tools{ 1258 , 1260 ,1270,1266, 1264 , 1296 ,4316, 4318 , 1262, 1268, 4312, 4308, 4314, 4310 };
		for (int i = 0, have_tools = 0; i < tools.size(); i++) {
			if (toolavailable(peer, tools[i], have_tools)) {
				if (tools[i] == 1296) have_tools = 1;
				string name = items[tools[i]].ori_name;
				replaceAll(name, "Surgical ", "");
				tools_available += "\nadd_button_with_icon|tool"+to_string(tools[i]) + "|`$"+name + "``|noflags|" + to_string(tools[i]) + "|" + to_string(have_tools) + "|";
				pInfo(peer)->available_surg_items.push_back(tools[i]);
			}
			else tools_available += "\nadd_button_with_icon|tool0||noflags|4320||";
		}
		if (pInfo(peer)->endtext.empty()) {
			gamepacket_t p;
			p.Insert("OnDialogRequest");
			p.Insert("set_default_color|`o\nadd_label_with_icon|big|`w" + (pInfo(peer)->surged_person.empty() ? "Surg-E" : pInfo(peer)->surged_display) + "``|left|18|\nadd_smalltext|" + diagnosed + "|left|\nadd_smalltext|" + pulse + "    " + status + "|left|\nadd_smalltext|" + temp + "    " + operation + "|left|" + (dirt != "" ? "\nadd_smalltext|" + dirt + "|left|" : "") + "\nadd_smalltext|" + incisions + "    " + (bones != "" ? bones : "") + "|left|" + (fever != "" ? "\nadd_smalltext|" + fever + "|left|" : "") + "" + (bleeding != "" ? "\nadd_smalltext|" + bleeding + "|left|" : "") + "\nadd_spacer|small|" + (pInfo(peer)->tooltext != "" ? "\nadd_smalltext|" + pInfo(peer)->tooltext + "|left|" : "") + "" + (heart_stopped != "" ? "\nadd_spacer|small|\nadd_smalltext|" + heart_stopped + "|left|" : "") + "\ntext_scaling_string|Defibrillator|" + tools_available + "\nadd_button_with_icon||END_LIST|noflags|0||\nadd_button|tool999|Give up!|noflags|0|0|\nend_dialog|surgery|||");
			p.CreatePacket(peer);
			pInfo(peer)->s = true;
		}
		else {
			if (pInfo(peer)->hand == 8536 && pInfo(peer)->started_type == 27 || pInfo(peer)->started_type == 21 || pInfo(peer)->started_type == 22 || pInfo(peer)->started_type == 19 || pInfo(peer)->started_type == 18 || pInfo(peer)->started_type == 28 || pInfo(peer)->started_type == 23 || pInfo(peer)->started_type == 26 || pInfo(peer)->started_type == 24 || pInfo(peer)->started_type == 25) {
				int remove = -1;
				Inventory::Modify(peer, 8536, remove);
			}
			if (pInfo(peer)->endtext == "success") {
				if (pInfo(peer)->lwiz_step == 12) add_lwiz_points(peer, 1);
				if (event_item == 6250) EventPool::Guilds::Point::Add(peer, pInfo(peer)->hand);
				if (Playmods::HasById(pInfo(peer), 142)) VarList::OnBuxGems(peer, 250);
				if (pInfo(peer)->starglitter_surgery < 5 && pInfo(peer)->starglitter_surgery != -1) DailyEvent_Task::MStarglitter(peer, "surgery", 1);
				pInfo(peer)->surgery_started = false;
				if (pInfo(peer)->surgery_skill < 100) pInfo(peer)->surgery_skill++;
				if (pInfo(peer)->lvlKit < 100) Kit_Server::Add_Xp(peer, rand() % 28, "kit");
				if (Event()->dailyc_name == "Surgeon") Daily_Challenge::Add_Points(peer, rand() % 350);
				if (pInfo(peer)->role_quest and pInfo(peer)->quest_number == 1) {
					if (pInfo(peer)->role_quest_type == "Surgeon" and pInfo(peer)->need_required < pInfo(peer)->quest_required) {
						pInfo(peer)->need_required += 1;
						if (pInfo(peer)->need_required >= pInfo(peer)->quest_required) {
							pInfo(peer)->need_required = pInfo(peer)->quest_required;
							VarList::OnConsoleMessage(peer, "`9Surgery Quest! `ocomplete! Go claim your points!");
							VarList::OnTalkBubble(peer, pInfo(peer)->netID, "`9Surgery Quest! ``complete! Go claim your points!", 0, 0);
						}
					}
				}
				pInfo(peer)->surgery_done++;
				if (Playmods::HasById(pInfo(peer), 107)) {
					Pet_Ai::Add_Xp(peer, (pInfo(peer)->hand == 7754 ? 450 * 1.3 : 150 * 1.3));
					add_peer_xp(peer, (pInfo(peer)->hand == 7754 ? 450 * 1.3 : 150 * 1.3), (pInfo(peer)->hand == 7754 ? true : false));
				}
				else {
					Pet_Ai::Add_Xp(peer, (pInfo(peer)->hand == 7754 ? 450 : 150));
					add_peer_xp(peer, (pInfo(peer)->hand == 7754 ? 450 : 150), (pInfo(peer)->hand == 7754 ? true : false));
				}
				if (pInfo(peer)->su_8552_2 >= 3000 && pInfo(peer)->hair == 9488) pInfo(peer)->su_8552_3++;
				if (pInfo(peer)->shirt == 8448 && pInfo(peer)->feet == 8550 && pInfo(peer)->hair == 8444 && pInfo(peer)->necklace == 8442 && pInfo(peer)->face == 8446 && pInfo(peer)->pants == 8450) pInfo(peer)->su_8552_1++;
				if (pInfo(peer)->su_8552_1 >= 2000 && pInfo(peer)->back == 8552) pInfo(peer)->su_8552_2++;
				if (pInfo(peer)->su_8552_1 >= 2000 && pInfo(peer)->mercy == false) {
					gamepacket_t p;
					p.Insert("OnTalkBubble"), p.Insert(pInfo(peer)->netID);
					int c_ = 1;
					if (Inventory::Modify(peer, 8552, c_) == 0) {
						pInfo(peer)->mercy = true;
						CAction::Positioned(peer, pInfo(peer)->netID, "audio/piano_nice.wav", 0);
						p.Insert("You received `2Angel of Mercy's Wings`` for completing 2,000 Surgeries while wearing Blinking Set!");
						gamepacket_t p3;
						p3.Insert("OnParticleEffect"), p3.Insert(46), p3.Insert((float)pInfo(peer)->x + 16, (float)pInfo(peer)->y +16);
						p.CreatePacket(peer);
					}
					else p.Insert("You have finished Angel of Mercy quest, but your inventory is full! Clear inventory and complete another surgery.");
					p.Insert(0), p.Insert(1), p.CreatePacket(peer);
				}
				if (pInfo(peer)->su_8552_2 >= 3000 && pInfo(peer)->Title.Doctor == false) {
					pInfo(peer)->Title.Doctor = true;
					CAction::Positioned(peer, pInfo(peer)->netID, "audio/piano_nice.wav", 0);
					gamepacket_t p, p2, p3;
					p.Insert("OnTalkBubble"), p.Insert(pInfo(peer)->netID), p.Insert("You received `2Dr.Title`` for completing 3,000 Surgeries while wearing Angel Of Mercy Wings!"), p.Insert(0), p.Insert(1);
					p2.Insert("OnConsoleMessage"), p2.Insert("You received `2Dr.Title`` for completing 3,000 Surgeries while wearing Angel Of Mercy Wings!");
					p3.Insert("OnParticleEffect"), p3.Insert(46), p3.Insert((float)pInfo(peer)->x + 16, (float)pInfo(peer)->y +16);
					p3.CreatePacket(peer);
					p.CreatePacket(peer), p2.CreatePacket(peer);
				}
				int give_times = 1;
				if (pInfo(peer)->gp) {
					if (complete_gpass_task(peer, "Surg")) give_times++;
				}
				vector<int> list{ 9902,7960, 13138, 2992, 12466, 12468, 12470, 1258, 1268, 1264, 1266, 1262, 1260, 1270, 4318, 4314, 4308, 4310, 4316, 4312, 1242, 1244, 1246, 1248, 1282, 1284, 1286, 1290, 1292, 1288, 1294, 1256, 1258, 1268, 1264, 1266, 1262, 1260, 1270, 4318, 4314, 4308, 4310, 4316, 4312, 1242, 1244, 1246, 1248, 1282, 1284, 1286, 1290, 1292, 1288, 1294, 1256, 2586, 782, 3536, 764, 4176, 13138, 2992, 12466, 12468, 12470, 1258, 1268, 1264, 1266, 1262, 1260, 1270, 4318, 4314, 4308, 4310, 4316, 4312, 1242, 1244, 1246, 1248, 1282, 1284, 1286, 1290, 1292, 1288, 1294, 1256, 1258, 1268, 1264, 1266, 1262, 1260, 1270, 4318, 4314, 4308, 4310, 4316, 4312, 1242, 1244, 1246, 1248, 1282, 1284, 1286, 1290, 1292, 1288, 1294, 1256, 2586, 782, 3536, 764, 4176, 13138, 2992, 12466, 12468, 12470, 1258, 1268, 1264, 1266, 1262, 1260, 1270, 4318, 4314, 4308, 4310, 4316, 4312, 1242, 1244, 1246, 1248, 1282, 1284, 1286, 1290, 1292, 1288, 1294, 1256, 1258, 1268, 1264, 1266, 1262, 1260, 1270, 4318, 4314, 4308, 4310, 4316, 4312, 1242, 1244, 1246, 1248, 1282, 1284, 1286, 1290, 1292, 1288, 1294, 1256, 2586, 782, 3536, 764, 4176, 13138, 2992, 12466, 12468, 12470, 1258, 1268, 1264, 1266, 1262, 1260, 1270, 4318, 4314, 4308, 4310, 4316, 4312, 1242, 1244, 1246, 1248, 1282, 1284, 1286, 1290, 1292, 1288, 1294, 1256, 1258, 1268, 1264, 1266, 1262, 1260, 1270, 4318, 4314, 4308, 4310, 4316, 4312, 1242, 1244, 1246, 1248, 1282, 1284, 1286, 1290, 1292, 1288, 1294, 1256, 2586, 782, 3536, 764, 4176 };
				int prize_to_pacient = list[rand() % list.size()];
				if (pInfo(peer)->started_type == 27 || pInfo(peer)->started_type == 21 || pInfo(peer)->started_type == 22 || pInfo(peer)->started_type == 19 || pInfo(peer)->started_type == 18 || pInfo(peer)->started_type == 28 || pInfo(peer)->started_type == 23 || pInfo(peer)->started_type == 26 || pInfo(peer)->started_type == 24 || pInfo(peer)->started_type == 25) list.push_back(8534);
				if (rand() % 250 < 1) list = { 4334, 4330, 4326, 4328, 4324, 10570, 12224, 4334, 4330, 4326, 4328, 4324, 10570, 12224, 4334, 4330, 4326, 4328, 4324, 10570, 12224, 4334, 4330, 4326, 4328, 4324, 10570, 12224, 9488 };
				if (rand() % 200 < 1) list.insert(list.end(), { 13034, 3172,4322,10774,11770 });
				if (rand() % 450 < 1) list = { 12224, 4322 ,2976, 4080,11872, 3790, 4990, 8954, 1506, 1274, 1252, 2992, 3172, 10092, 11224, 9000, 10112, 10094 };
				if (rand() % 450 < 1) list = { 12292, 12294, 12342, 12372, 12444 };
				if (rand() % 2 < 1) {
					if (pInfo(peer)->started_type == 27) list.push_back(8442);
					if (pInfo(peer)->started_type == 21) list.push_back(8482);
					if (pInfo(peer)->started_type == 22) list.push_back(8486);
					if (pInfo(peer)->started_type == 19) list.push_back(8480);
					if (pInfo(peer)->started_type == 18) {
						list.push_back(8478);
						if (rand() % 3 < 1) list.insert(list.end(), { 8488,8452,8454 });
					}
					if (pInfo(peer)->started_type == 28 && rand() % 10 < 1)  list.insert(list.end(), { 8466,8468,8494 });
					if (pInfo(peer)->started_type == 23) {
						list.push_back(8444);
						if (rand() % 3 < 1) list.push_back(8492);
					}
					if (pInfo(peer)->started_type == 26) {
						list.push_back(8448);
						if (rand() % 3 < 1) list.insert(list.end(), { 8474,8476,8498 });
					}
					if (pInfo(peer)->started_type == 24) {
						list.push_back(8450);
						if (rand() % 3 < 1) list.insert(list.end(), { 8472,8496 });
					}
					if (pInfo(peer)->started_type == 25) {
						list.push_back(8550);
						if (rand() % 3 < 1) list.insert(list.end(), { 8458,8456,8490 });
					}
				}
				if (rand() % 3500 < 1) list = { 8284, 1614 };
				if (pInfo(peer)->started_type == 31) list.push_back(2900);
				if (rand() % 100 < 1) list.push_back(12566);
				if (rand() % 200 < 1) list.push_back(12568);
				int item = 0, got = 1;
				for (int i = 0; i < give_times; i++) {
					item = list[rand() % list.size()], got = 1;
					if (item == 1290) got = 10;
					if (item == 1294 || item == 1288 || item == 1292 || item == 1258 || item == 1268 || item == 1264 || item == 1266 || item == 1262 || item == 1260 || item == 1270 || item == 4318 || item == 4314 || item == 4308 || item == 4310 || item == 4316 || item == 4312) got = 5;
					int give_prize = 1;
					int give_rn = got;
					if (Inventory::Modify(peer, item, give_prize = got) != 0) {
						std::string name_ = pInfo(peer)->world;
						std::vector<World>::iterator p = find_if(worlds.begin(), worlds.end(), [name_](const World& a) { return a.name == name_; });
						if (p != worlds.end()) {
							World* world_ = &worlds[p - worlds.begin()];
							world_->fresh_world = true;
							WorldDrop drop_block_{};
							drop_block_.id = item, drop_block_.count = give_rn, drop_block_.x = pInfo(peer)->x + rand() % 17, drop_block_.y = pInfo(peer)->y + rand() % 17;
							VisualHandle::Drop(world_, drop_block_);
						}
					}
					give_prize = 1;
					if (Inventory::Modify(peer, 4298, give_prize = 1) == 0) {
					}
					else {
						int has_caduc = 0;
						Inventory::Modify(peer, 4298, has_caduc);
						if (Inventory::Modify(peer, 4300, give_prize = 2) == 0 and has_caduc >= 200) Inventory::Modify(peer, 4298, has_caduc = -199);
					}
				}
				gamepacket_t p, p2, p3;
				p.Insert("OnConsoleMessage");
				if (pInfo(peer)->surged_person.empty()) p.Insert("Hey, somebody left " + to_string(got) + " " + items[item].ori_name + " in this patient last time they operated!");
				else p.Insert("`w" + pInfo(peer)->surged_display + "``'s parents are so glad you saved their child that they give you " + to_string(got) + " " + items[item].ori_name + "!");
				p.CreatePacket(peer);
				p3.Insert("OnConsoleMessage"), p3.Insert("`2YOU `2SAVED YOUR `2PATIENT!`"), p3.CreatePacket(peer);
				p2.Insert("OnConsoleMessage"), p2.Insert("You got " + to_string(got) + " `2" + items[item].ori_name + "`` and a `3Caduceus``!"), p2.CreatePacket(peer);
				if (pInfo(peer)->surged_person != "") {
					gamepacket_t p, p2;
					p.Insert("OnTalkBubble"), p.Insert(pInfo(peer)->netID), p.Insert("`7[``" + get_player_nick(peer) + " `2cured`` `0" + pInfo(peer)->surged_display + "`` of " + pInfo(peer)->surgery_name + "`7]``"), p.Insert(0), p.Insert(0);
					p2.Insert("OnConsoleMessage"), p2.Insert("`7[``" + get_player_nick(peer) + " `2cured`` `0" + pInfo(peer)->surged_display + "`` of " + pInfo(peer)->surgery_name + "`7]``");
					for (ENetPeer* cp_ = server->peers; cp_ < &server->peers[server->peerCount]; ++cp_) {
						if (cp_->state != ENET_PEER_STATE_CONNECTED or cp_->data == NULL or pInfo(cp_)->world != pInfo(peer)->world) continue;
						if (pInfo(peer)->surged_person == pInfo(cp_)->tankIDName) {
							add_peer_xp(cp_, 500); Pet_Ai::Add_Xp(cp_, 500);
							int give_prize = got;
							if (Inventory::Modify(cp_, prize_to_pacient, give_prize) == 0) {
							}
							gamepacket_t p3;
							p3.Insert("OnConsoleMessage"), p3.Insert("You are healed! Celebrate your good health with 500 Gems and 1 " + items[prize_to_pacient].ori_name + "!"), p3.CreatePacket(cp_);
							VarList::OnBuxGems(cp_, 500);
						}
						p.CreatePacket(cp_);
						p2.CreatePacket(cp_);
					}
				}
				pInfo(peer)->surged_person = "", pInfo(peer)->surged_display = "";
			}
			else end_surgery(peer);
		}
	}
}
string get_lwiz_quest_name(ENetPeer* peer) {
	string deliver_text = "You have none to deliver!";
	if ((pInfo(peer)->legendary_quest[pInfo(peer)->lwiz_step - 1].size() == 3 && Inventory::Contains(peer, pInfo(peer)->legendary_quest[pInfo(peer)->lwiz_step - 1][2]) != 0) or (pInfo(peer)->legendary_quest[pInfo(peer)->lwiz_step - 1][0] >= pInfo(peer)->legendary_quest[pInfo(peer)->lwiz_step - 1][1])) deliver_text = "Deliver!";
	return "set_default_color|`o\nadd_label_with_icon|big|`9" + get_quest_item("", pInfo(peer)->lwiz_quest) + "``|left|1790|\nadd_smalltext|(Step " + to_string(pInfo(peer)->lwiz_step) + "/20)|left|\nadd_spacer|small|\nadd_textbox|" + get_quest_name(peer, pInfo(peer)->lwiz_quest, pInfo(peer)->lwiz_step) + "|left|" + (pInfo(peer)->lwiz_step == 15 ? "\nadd_smalltext|(For example, if you smash a rarity-50 tree and get 3 fruit from it, you get 150 points)|left|" : "") + "" + (pInfo(peer)->lwiz_step == 5 || pInfo(peer)->lwiz_step == 11 ? "\nadd_smalltext|(For example, if you " + a + (pInfo(peer)->lwiz_step == 5 ? "plant a tree" : "smash a block") + " of rarity 50, you get 50 points. A Dirt " + (pInfo(peer)->lwiz_step == 5 ? "Tree" : "block") + " is 1 point because it is rarity 1)|left|" : (pInfo(peer)->lwiz_step == 13 ? "\nadd_smalltext|(Providers are items like Science Stations and Cows, that give you an item on a regular basis)|" : "")) + "\nadd_spacer|small|\nadd_smalltext|(Current progress: " + Set_Count(pInfo(peer)->legendary_quest[pInfo(peer)->lwiz_step - 1][0]) + "/" + Set_Count(pInfo(peer)->legendary_quest[pInfo(peer)->lwiz_step - 1][1]) + ")|left|\nadd_button|deliver|`oDeliver!``|noflags|0|0|\nadd_button|give_up|`oGive up this quest``|noflags|0|0|\nend_dialog|wizard_quests|Goodbye!||";
}
void lwiz_quest(ENetPeer* peer, string type) {
	std::string name_ = pInfo(peer)->world;
	std::vector<World>::iterator p = find_if(worlds.begin(), worlds.end(), [name_](const World& a) { return a.name == name_; });
	if (p != worlds.end()) {
		World* world_ = &worlds[p - worlds.begin()];
		WorldBlock* block_ = &world_->blocks[pInfo(peer)->lastwrenchx + (pInfo(peer)->lastwrenchy * 100)];
		if (not Only_Access(peer, world_, block_)) return;
		if (block_->fg == 1790) {
			gamepacket_t p;
			p.Insert("OnDialogRequest");
			if (pInfo(peer)->level >= 40) {
				if (pInfo(peer)->lwiz_quest == 0) {
					if (type == "open") p.Insert("set_default_color|`o\nadd_label_with_icon|big|`9Legendary Wizard``|left|1790|\nadd_label|small|Greetings, traveler! I am the Legendary Wizard.  Should you wish to embark on a Legendary Quest, simply choose one blow.|left|\nadd_spacer|small|\nadd_button|Quest For Honor|`9Quest For Honor``|noflags|0|0|\nadd_button|Quest For Fire|`9Quest For Fire``|noflags|0|0|\nadd_button|Quest Of Steel|`9Quest Of Steel``|noflags|0|0|\nadd_button|Quest Of The Heavens|`9Quest Of The Heavens``|noflags|0|0|\nadd_button|Quest For The Blade|`9Quest For The Blade``|noflags|0|0|\nadd_button|Quest For Candour|`9Quest For Candour``|noflags|0|0|\nadd_button|Quest For The Sky|`9Quest For The Sky``|noflags|0|0|\nadd_button|Quest Of The Owl|`9Quest Of The Owl``|noflags|0|0|\nadd_button|Quest Of The Mech|`9Quest Of The Mech``|noflags|0|0|\nadd_button|Quest Of The Dark|`9Quest Of The Dark``|noflags|0|0|\nend_dialog|wizard|No Thanks||");
					else if (type == "open_Quest Of The Dark" || type == "open_Quest Of The Mech" || type == "open_Quest Of The Owl" || type == "open_Quest For The Sky" || type == "open_Quest For Honor" || type == "open_Quest For Fire" || type == "open_Quest Of Steel" || type == "open_Quest Of The Heavens" || type == "open_Quest For The Blade" || type == "open_Quest For Candour") {
						string vardas = type;
						replaceAll(vardas, "open_", "");
						p.Insert("set_default_color|`o\nadd_label_with_icon|big|`9" + vardas + "``|left|1790|\nadd_smalltext|This quest will challenge every fiber of your Growtopian being. It will cost you thousands of gems, weeks or months of time, and possibly your friends and family.|left|\nadd_smalltext|Every quest has 20 steps to complete, and each step alone is probably more than most Growtopians could manage.|left|\nadd_smalltext|But the rewards are also vast. If you complete this quest, you will earn the `9" + get_quest_item(type) + "``! These quest rewards are `5Untradeable``, and you will truly be a Legendary Growtopian if you complete a quest.|left|\nadd_smalltext|You may turn in your quests at any Legendary Wizard you have access to (we're in a union), but I will vanish permamently if somebody turns in their final quest step to me, so don't let other people have access to me!|left|\nadd_smalltext|There's one last thing you should know before you begin. You can quit your quest at any time, but be aware that if you do, you'll lose all progress on this quest. So choose your quest wisely and see it through to the end!|left|\nadd_spacer|small|\nadd_textbox|So... now that you've received the official disclaimer, are you truly prepared to embark on the " + vardas + "?|left|\nembed_data|type|" + type + "\nend_dialog|wizard_start|No!|Yes!|");
					}
					else if (type == "start_open_Quest Of The Dark" || type == "start_open_Quest Of The Mech" || type == "start_open_Quest Of The Owl" || type == "start_open_Quest For The Sky" || type == "start_open_Quest For Honor" || type == "start_open_Quest For Fire" || type == "start_open_Quest Of Steel" || type == "start_open_Quest Of The Heavens" || type == "start_open_Quest For The Blade" || type == "start_open_Quest For Candour") {
						if (type == "start_open_Quest For Honor") pInfo(peer)->legendary_quest = Environment()->legendary_quests[0], pInfo(peer)->lwiz_quest = 1;
						else if (type == "start_open_Quest For Fire") pInfo(peer)->legendary_quest = Environment()->legendary_quests[1], pInfo(peer)->lwiz_quest = 2;
						else if (type == "start_open_Quest Of Steel") pInfo(peer)->legendary_quest = Environment()->legendary_quests[2], pInfo(peer)->lwiz_quest = 3;
						else if (type == "start_open_Quest Of The Heavens") pInfo(peer)->legendary_quest = Environment()->legendary_quests[3], pInfo(peer)->lwiz_quest = 4;
						else if (type == "start_open_Quest For The Blade") pInfo(peer)->legendary_quest = Environment()->legendary_quests[4], pInfo(peer)->lwiz_quest = 5;
						else if (type == "start_open_Quest For Candour") pInfo(peer)->legendary_quest = Environment()->legendary_quests[5], pInfo(peer)->lwiz_quest = 6;
						else if (type == "start_open_Quest For The Sky") pInfo(peer)->legendary_quest = Environment()->legendary_quests[6], pInfo(peer)->lwiz_quest = 7;
						else if (type == "start_open_Quest Of The Owl") pInfo(peer)->legendary_quest = Environment()->legendary_quests[7], pInfo(peer)->lwiz_quest = 8;
						else if (type == "start_open_Quest Of The Mech") pInfo(peer)->legendary_quest = Environment()->legendary_quests[8], pInfo(peer)->lwiz_quest = 9;
						else if (type == "start_open_Quest Of The Dark") pInfo(peer)->legendary_quest = Environment()->legendary_quests[9], pInfo(peer)->lwiz_quest = 10;
						p.Insert(get_lwiz_quest_name(peer));
					}
				}
				else p.Insert(get_lwiz_quest_name(peer));
			}
			else p.Insert("set_default_color|\nadd_label_with_icon|big|`9The Legendary Wizard|left|1790|\nadd_smalltext|`oGreetings, traveler! I am the Legendary Wizard. Should you wish to embark on a Legendary Quest, simply choose one below,|left|\nadd_spacer|small|\nadd_smalltext|`oOh wait, sorry... looks like you aren't yet Legendary enough for Legendary Quests. You must be at least level 40 to begin your journey!|left|\nadd_smalltext|`oBut hey, since you can't do a quest, maybe there's something else you can do. Step a little closer...|left|\nadd_button|yeslwz|`9Yes?|0|0|0|\nend_dialog|wizard_quests|Darn it||");
			p.CreatePacket(peer);
		}
	}
}
void offering_table(ENetPeer* peer, WorldBlock* block_ = NULL, string button = "", int item = 0, int count = 0, int slot = 0) {
	std::string name_ = pInfo(peer)->world;
	std::vector<World>::iterator p = find_if(worlds.begin(), worlds.end(), [name_](const World& a) { return a.name == name_; });
	if (p != worlds.end()) {
		World* world_ = &worlds[p - worlds.begin()];
		if (block_ == NULL) block_ = &world_->blocks[pInfo(peer)->lastwrenchx + (pInfo(peer)->lastwrenchy * 100)];
		if (block_ != NULL) {
			if (Only_Access(peer, world_, block_)) {
				if (block_->fg == 12598) {
					gamepacket_t p;
					p.Insert("OnDialogRequest");
					if (button.empty()) {
						if (item != 0) {
							if (block_->donates.size() < 10) {
								Donate donate_{};
								donate_.item = item, donate_.count = count, donate_.name = pInfo(peer)->tankIDName, donate_.text = "";
								block_->donates.push_back(donate_);
								Inventory::Modify(peer, item, count *= -1);
							}
						}
						int count = 0, all_ = 0;
						string list = "";
						for (int i_ = 0; i_ < block_->donates.size(); i_++, all_++) {
							count += block_->donates[i_].count;
							list += "\nadd_button_with_icon|slot_btn_" + to_string(i_) + "||frame|" + to_string(block_->donates[i_].item) + "|" + to_string(block_->donates[i_].count) + "|\nadd_custom_margin|x:-15;y:0|" + (i_ == 4 || i_ == 9 ? "\nadd_button_with_icon||END_LIST|noflags|0||\nadd_custom_margin|x:0;y:-15|" : "");
						}
						for (int i_ = all_; i_ < 10; i_++, all_++) list += "\nadd_button_with_icon|slot_btn_" + to_string(i_) + "||frame|982||\nadd_custom_margin|x:-15;y:0|" + (i_ == 4 || i_ == 9 ? "\nadd_button_with_icon||END_LIST|noflags|0||\nadd_custom_margin|x:0;y:-15|" : "");
						p.Insert("set_default_color|`w\nadd_label_with_icon|big|`wOffer Mooncakes to the Moon``|left|12598|\nadd_spacer|small|\nadd_textbox|Fill the table with 10 Mooncakes and offer them to the Moon to receive 1 random reward.|left|\nadd_textbox|Select a Mooncake to place on the table.|left|" + list + "\nadd_textbox|Total Mooncakes on table: `5" + to_string(count) + "``|left|\nadd_smalltext|You get 1 reroll for every 100 Mooncakes offered.| left |\nadd_smalltext|The current offering will get `5" + to_string(count / 100) + " rerolls``.| left |\nadd_spacer|small|\nadd_button|offer_btn|Offer Mooncakes|noflags|0|0|\nadd_spacer|small|\nadd_spacer|small|\nadd_textbox|Depending on the types of Mooncakes offered the rewards may vary. You can check the possible rewards that can be received from your current offering here:|left|\nadd_spacer|small|\nadd_button|reward_list_btn|Reward List|noflags|0|0|\nend_dialog|mooncake_altar_dialog|Close||");
					}
					else if (button == "reward") {
						string epic = "", rare = "", uncommon = "";
						vector<int> already_added, already_added2;
						if (block_->donates.size() > 0) {
							for (int i_ = 0; i_ < block_->donates.size(); i_++) {
								if (find(already_added.begin(), already_added.end(), block_->donates[i_].item) == already_added.end()) {
									already_added.push_back(block_->donates[i_].item);
									for (int i = 0; i < items[block_->donates[i_].item].rare.size(); i++) {
										if (find(already_added2.begin(), already_added2.end(), items[block_->donates[i_].item].rare[i]) == already_added2.end()) {
											already_added2.push_back(items[block_->donates[i_].item].rare[i]);
											rare += "\nadd_label_with_icon|small|`w" + items[items[block_->donates[i_].item].rare[i]].ori_name + "``|left|" + to_string(items[block_->donates[i_].item].rare[i]) + "|";
										}
									}
									for (int i = 0; i < items[block_->donates[i_].item].epic.size(); i++) {
										if (find(already_added2.begin(), already_added2.end(), items[block_->donates[i_].item].epic[i]) == already_added2.end()) {
											already_added2.push_back(items[block_->donates[i_].item].epic[i]);
											epic += "\nadd_label_with_icon|small|`w" + items[items[block_->donates[i_].item].epic[i]].ori_name + "``|left|" + to_string(items[block_->donates[i_].item].epic[i]) + "|";
										}
									}
									for (int i = 0; i < items[block_->donates[i_].item].uncommon.size(); i++) {
										if (find(already_added2.begin(), already_added2.end(), items[block_->donates[i_].item].uncommon[i]) == already_added2.end()) {
											already_added2.push_back(items[block_->donates[i_].item].uncommon[i]);
											uncommon += "\nadd_label_with_icon|small|`w" + items[items[block_->donates[i_].item].uncommon[i]].ori_name + "``|left|" + to_string(items[block_->donates[i_].item].uncommon[i]) + "|";
										}
									}
								}
							}
						}
						p.Insert("set_default_color|`w\nadd_label_with_icon|big|`wRewards table!``|left|12598|\nadd_spacer|small|\nadd_textbox|The following items my be received for the current offering:|left|" + a + (epic.empty() ? "" : "\nadd_spacer|small|\nadd_textbox|Epic|left|" + epic) + (rare.empty() ? "" : "\nadd_spacer|small|\nadd_textbox|Rare|left|" + rare) + "\nadd_spacer|small|\nadd_textbox|Uncommon|left|" + uncommon + "\nadd_label_with_icon|small|`wSunflower Pinwheel``|left|11270|\nadd_label_with_icon|small|`wTraditional Harvest Hat``|left|12622|\nadd_label_with_icon|small|`wTraditional Harvest Shirt``|left|12624|\nadd_label_with_icon|small|`wTraditional Harvest Dress``|left|12626|\nadd_spacer|small|\nadd_textbox|Common|left|\nadd_label_with_icon|small|`wChinese Lantern``|left|1054|\nadd_label_with_icon|small|`wScarecrow``|left|1064|\nadd_label_with_icon|small|`wSky Lantern``|left|1066|\nadd_label_with_icon|small|`wYellow Hanbok Top``|left|1070|\nadd_label_with_icon|small|`wPurple Hanbok Top``|left|1072|\nadd_label_with_icon|small|`wGreen Hanbok Top``|left|1074|\nadd_label_with_icon|small|`wPink Hanbok Skirt``|left|1076|\nadd_label_with_icon|small|`wBlue Hanbok Skirt``|left|1078|\nadd_label_with_icon|small|`wOrange Hanbok Skirt``|left|1080|\nadd_label_with_icon|small|`wYellow Hanbok Pants``|left|1082|\nadd_label_with_icon|small|`wPurple Hanbok Pants``|left|1084|\nadd_label_with_icon|small|`wGreen Hanbok Pants``|left|1086|\nadd_label_with_icon|small|`wMoon Block``|left|1834|\nadd_label_with_icon|small|`wHarvest Horn``|left|3868|\nadd_label_with_icon|small|`wBlue Hanbok Top``|left|3872|\nadd_label_with_icon|small|`wOrange Hanbok Top``|left|3874|\nadd_label_with_icon|small|`wBlue Hanbok Pants``|left|3876|\nadd_label_with_icon|small|`wOrange Hanbok Pants``|left|3878|\nadd_label_with_icon|small|`wGreen Hanbok Skirt``|left|3880|\nadd_label_with_icon|small|`wYellow Hanbok Skirt``|left|3882|\nadd_label_with_icon|small|`wSunflower Hair Pin``|left|3884|\nadd_label_with_icon|small|`wSheep``|left|3888|\nadd_label_with_icon|small|`wDragon Scales``|left|5098|\nadd_label_with_icon|small|`wLeaves``|left|5102|\nadd_label_with_icon|small|`wScarecrow Mask``|left|5118|\nadd_label_with_icon|small|`wZen Garden``|left|5198|\nadd_label_with_icon|small|`wMoon Palace``|left|12604|\nadd_label_with_icon|small|`wMoon Palace Roof``|left|12606|\nadd_label_with_icon|small|`wBuddy To He``|left|12608|\nadd_label_with_icon|small|`wMoon Palace Door``|left|12652|\nadd_spacer|small|\nadd_button|goto_maindialog|Thanks for the info|0|0|\nend_dialog|mooncake_reward_list_dialog|||");
					}
					else if (button == "reroll") {
						if (block_->offering_items.size() == 0) block_->offering_items = { 5118, 5198, 12604, 12606, 12652, 1054 ,1064, 1066, 1834,1834, 1834, 1834,  5098, 5102, 5118, 5198, 12604, 12606, 12652, 1054 ,1064, 1066, 1834,  5098, 5102, 5118, 5198, 12604, 12606, 12652, 1054 ,1064, 1066, 1834,  5098, 5102, 5118, 5198, 12604, 12606, 12652, 1054 ,1064, 1066, 1834,  5098, 5102, 5118, 5198, 12604, 12606, 12652, 1054 ,1064, 1066, 1834,  5098, 5102, 5118, 5198, 12604, 12606, 12652, 1054 ,1064, 1066, 1834,  5098, 5102, 5118, 5198, 12604, 12606, 12652, 1054 ,1064, 1066, 1834,  5098, 5102, 5118, 5198, 12604, 12606, 12652, 1054 ,1064, 1066, 1070, 1072, 1074, 1076, 1078, 1080, 1082, 1084, 1086, 1834, 3868, 3872, 3874, 3876, 3878, 3880, 3882, 3884, 3888, 5098, 5102, 1062, 12604, 12604, 12604 };
						if (block_->shelf_1 > 100) {
							block_->shelf_1 -= 100;
							if (block_->offering_items.size() == 0) block_->shelf_1 = 5118;
							else block_->shelf_1 = block_->offering_items[rand() % block_->offering_items.size()];
						}
						p.Insert("set_default_color|`w\nadd_label_with_icon|big|`wReward!``|left|12598|\nadd_spacer|small|\nadd_textbox|You received:|left|\nadd_label_with_icon|small|`w1 x " + items[block_->shelf_1].name + "``|left|" + to_string(block_->shelf_1) + "|\nadd_spacer|small|" + (block_->shelf_1 > 100 ? "\nadd_textbox|You have " + to_string(block_->shelf_1 / 100) + " rerolls remaining.|left|\nadd_button|reroll|Reroll|0|0|" : "") + "\nadd_button|take_reward|Claim Reward|0|0|" + (block_->shelf_1 > 100 ? "\nadd_smalltext|`6Claiming the reward will forfeit any remaining rerolls.``|left|" : "") + "\nend_dialog|mooncake_reward_dialog|||");
					}
					else if (button == "offer") {
						int start_offer = 0;
						for (int i_ = 0; i_ < block_->donates.size(); i_++) start_offer += block_->donates[i_].count;
						if (start_offer > 100 && block_->donates.size() >= 10) {
							block_->offering_items = { 5118, 5198, 12604, 12606, 12652, 1054 ,1064, 1066, 1834,1834, 1834, 1834,  5098, 5102, 5118, 5198, 12604, 12606, 12652, 1054 ,1064, 1066, 1834,  5098, 5102, 5118, 5198, 12604, 12606, 12652, 1054 ,1064, 1066, 1834,  5098, 5102, 5118, 5198, 12604, 12606, 12652, 1054 ,1064, 1066, 1834,  5098, 5102, 5118, 5198, 12604, 12606, 12652, 1054 ,1064, 1066, 1834,  5098, 5102, 5118, 5198, 12604, 12606, 12652, 1054 ,1064, 1066, 1834,  5098, 5102, 5118, 5198, 12604, 12606, 12652, 1054 ,1064, 1066, 1834,  5098, 5102, 5118, 5198, 12604, 12606, 12652, 1054 ,1064, 1066, 1070, 1072, 1074, 1076, 1078, 1080, 1082, 1084, 1086, 1834, 3868, 3872, 3874, 3876, 3878, 3880, 3882, 3884, 3888, 5098, 5102, 1062, 12604, 12604, 12604 };
							block_->shelf_1 = start_offer;
							vector<Donate>::iterator p3 = find_if(block_->donates.begin(), block_->donates.end(), [&](const Donate& a) { return a.item == 1096 || a.item == 7058 || a.item == 1828 || a.item == 11286; });
							if (p3 != block_->donates.end()) {
								Donate* found = &block_->donates[p3 - block_->donates.begin()];
								if (found->item == 1096) {
									vector<Donate>::iterator p2 = find_if(block_->donates.begin(), block_->donates.end(), [&](const Donate& a) { return a.item == 1828 || a.item == 11286 || a.item == 7058; });
									if (p2 != block_->donates.end()) {
										Donate* found2 = &block_->donates[p2 - block_->donates.begin()];
										if (found2->item == 1828)block_->offering_items.insert(block_->offering_items.end(), { 12380 });
										if (found2->item == 11286)block_->offering_items.insert(block_->offering_items.end(), { 12388 });
										if (found2->item == 7058)block_->offering_items.insert(block_->offering_items.end(), { 12390 });
									}
									if (rand() % 20 < 1)  block_->offering_items.insert(block_->offering_items.end(), { 12604, 12652, 12606, 12608, 12622, 12624, 12626 });
								}
							}
							for (int i_ = 0; i_ < block_->donates.size(); i_++) {
								int chance = 0;

								for (int i = 0; i < items[block_->donates[i_].item].epic.size(); i++) {
									if (rand() % 6500 - block_->donates[i_].count + items[block_->donates[i_].item].grindable_count < 1) {
										block_->offering_items.insert(block_->offering_items.end(), items[block_->donates[i_].item].epic[i]);
									}
								}
								for (int i = 0; i < items[block_->donates[i_].item].rare.size(); i++) {
									if (rand() % 4000 - block_->donates[i_].count + items[block_->donates[i_].item].grindable_count < 1) {
										block_->offering_items.insert(block_->offering_items.end(), items[block_->donates[i_].item].rare[i]);
									}
								}
								for (int i = 0; i < items[block_->donates[i_].item].uncommon.size(); i++) {
									if (rand() % 700 - block_->donates[i_].count + items[block_->donates[i_].item].grindable_count < 1) {
										block_->offering_items.insert(block_->offering_items.end(), items[block_->donates[i_].item].uncommon[i]);
										block_->offering_items.insert(block_->offering_items.end(), items[block_->donates[i_].item].uncommon[i]);
									}
								}
							}
							block_->donates.clear();
							block_->shelf_1 = block_->offering_items[rand() % block_->offering_items.size()];
							p.Insert("set_default_color|`w\nadd_label_with_icon|big|`wReward!``|left|12598|\nadd_spacer|small|\nadd_textbox|You received:|left|\nadd_label_with_icon|small|`w1 x " + items[block_->shelf_1].name + "``|left|" + to_string(block_->shelf_1) + "|\nadd_spacer|small|" + (block_->shelf_1 > 100 ? "\nadd_textbox|You have " + to_string(block_->shelf_1 / 100) + " rerolls remaining.|left|\nadd_button|reroll|Reroll|0|0|" : "") + "\nadd_button|take_reward|Claim Reward|0|0|" + (block_->shelf_1 > 100 ? "\nadd_smalltext|`6Claiming the reward will forfeit any remaining rerolls.``|left|" : "") + "\nend_dialog|mooncake_reward_dialog|||");
						}
						else p.Insert("set_default_color|`o\nadd_label_with_icon|big|`wNot Enough Mooncakes``|left|1432|\nadd_textbox|You must fill the table before you can offer the Mooncakes.|left|\nadd_spacer|small|\nadd_button|goto_maindialog|OK|0|0|\nadd_spacer|small|\nend_dialog|altar_warning_dialog|||");
					}
					p.CreatePacket(peer);
				}
			}
		}
	}
}
bool setstats(ENetPeer* peer, int i, string surged, string surged_display) {
	if (pInfo(peer)->surgery_started) {
		end_surgery(peer);
		return false;
	}
	if (Playmods::HasById(pInfo(peer), 86)) {
		gamepacket_t p;
		p.Insert("OnTalkBubble"), p.Insert(pInfo(peer)->netID), p.Insert(surged.empty() ? "I know it's just a robot, but the authorities don't even trust you operating on that with your malpractice issues." : "You can't perform surgery right now."), p.Insert(0), p.Insert(0), p.CreatePacket(peer);
		return false;
	}
	if (i < 0 || i > 31) i = rand() % 31;
	pInfo(peer)->started_type = i;
	pInfo(peer)->surged_person = surged;
	pInfo(peer)->surged_display = surged_display;
	pInfo(peer)->surgery_world = pInfo(peer)->world;
	pInfo(peer)->surgery_started = true;
	pInfo(peer)->sounded = false;
	pInfo(peer)->labworked = false;
	pInfo(peer)->fixed = false;
	pInfo(peer)->fixable = false;
	pInfo(peer)->flu = false;
	pInfo(peer)->pulse = 40;
	pInfo(peer)->site = 0;
	pInfo(peer)->sleep = 0;
	pInfo(peer)->dirt = 0;
	pInfo(peer)->broken = 0;
	pInfo(peer)->shattered = 0;
	pInfo(peer)->incisions = 0;
	pInfo(peer)->bleeding = 0;
	pInfo(peer)->incneeded = 0;
	pInfo(peer)->heart = 0;
	pInfo(peer)->temp = 98.6;
	pInfo(peer)->fever = 0;
	pInfo(peer)->pretext = "";
	pInfo(peer)->fixtext = "";
	pInfo(peer)->postext = "";
	pInfo(peer)->scantext = "";
	pInfo(peer)->tooltext = "Patient is prepped for surgery.";
	pInfo(peer)->endtext = "";
	pInfo(peer)->s = true;
	pInfo(peer)->spongUsed = 0;
	pInfo(peer)->scalpUsed = 0;
	pInfo(peer)->stitcUsed = 0;
	pInfo(peer)->antibUsed = 0;
	pInfo(peer)->antisUsed = 0;
	pInfo(peer)->ultraUsed = 0;
	pInfo(peer)->labkiUsed = 0;
	pInfo(peer)->anestUsed = 0;
	pInfo(peer)->defibUsed = 0;
	pInfo(peer)->splinUsed = 0;
	pInfo(peer)->pinsUsed = 0;
	pInfo(peer)->clampUsed = 0;
	pInfo(peer)->transUsed = 0;
	pInfo(peer)->surgery_name = "";
	if (pInfo(peer)->surged_person.empty() and pInfo(peer)->surged_display.empty()) {
		std::string name_ = pInfo(peer)->surgery_world;
		std::vector<World>::iterator p = find_if(worlds.begin(), worlds.end(), [name_](const World& a) { return a.name == name_; });
		if (p != worlds.end()) {
			World* world_ = &worlds[p - worlds.begin()];
			WorldBlock* block_ = &world_->blocks[pInfo(peer)->lastwrenchx + (pInfo(peer)->lastwrenchy * 100)];
			if (block_->fg == 4296 || block_->fg == 8558) {
				block_->fg = 0;
				update_tile(peer, pInfo(peer)->lastwrenchx, pInfo(peer)->lastwrenchy, 0, false, true);
			}
			else return false;
		}
	}
	switch (i) {
	case 0:
		pInfo(peer)->fixed = true;
		pInfo(peer)->bleeding = 1;
		pInfo(peer)->broken = 1;
		pInfo(peer)->pretext = "Patient broke his arm.";
		pInfo(peer)->scantext = "a broken arm! You found 1 broken bone.";
		pInfo(peer)->surgery_name = "a broken arm.";
		break;
	case 1:
		pInfo(peer)->fixed = true;
		pInfo(peer)->bleeding = 1;
		pInfo(peer)->broken = 1;
		pInfo(peer)->shattered = 1;
		pInfo(peer)->pretext = "Patient broke his leg.";
		pInfo(peer)->scantext = "a broken leg! You found 1 broken bone and 1 shattered bone.";
		pInfo(peer)->surgery_name = "a broken leg.";
		break;
	case 2:
		pInfo(peer)->fixed = true;
		pInfo(peer)->flu = true;
		pInfo(peer)->temp = 104.6;
		pInfo(peer)->fever = 2.5;
		pInfo(peer)->dirt = 6;
		pInfo(peer)->pretext = "Patient is showing signs of the bird flu.";
		pInfo(peer)->scantext = "bird flu!";
		pInfo(peer)->surgery_name = "a bird flu!";
		break;
	case 3:
		pInfo(peer)->fixed = true;
		pInfo(peer)->flu = true;
		pInfo(peer)->temp = 101.6;
		pInfo(peer)->fever = 3.6;
		pInfo(peer)->dirt = 6;
		pInfo(peer)->pretext = "Patient is showing signs of the turtle flu.";
		pInfo(peer)->scantext = "turtle flu!";
		pInfo(peer)->surgery_name = "a turtle flu!";
		break;
	case 4:
		pInfo(peer)->fixed = true;
		pInfo(peer)->flu = true;
		pInfo(peer)->temp = 107.6;
		pInfo(peer)->fever = 2.4;
		pInfo(peer)->pretext = "Patient is showing signs of the monkey flu.";
		pInfo(peer)->scantext = "monkey flu!";
		pInfo(peer)->surgery_name = "a monkey flu!";
		break;
	case 5:
		pInfo(peer)->sounded = true;
		pInfo(peer)->incneeded = 1;
		pInfo(peer)->pretext = "Patient wants a nose job.";
		pInfo(peer)->fixtext = "You have cut into nasal area.";
		pInfo(peer)->postext = "You rearranged their face!";
		pInfo(peer)->surgery_name = "a nose job.";
		break;
	case 6:
		pInfo(peer)->incneeded = 1;
		pInfo(peer)->scantext = "a lung tumor!";
		pInfo(peer)->pretext = "Patient has a tumor in their lung.";
		pInfo(peer)->fixtext = "The lungs are now exposed.";
		pInfo(peer)->postext = "You excised the tumor!";
		pInfo(peer)->surgery_name = "a lung tumor!";
		break;
	case 7:
		pInfo(peer)->incneeded = 2;
		pInfo(peer)->scantext = "a heart attack!";
		pInfo(peer)->pretext = "Patient had a heart attack.";
		pInfo(peer)->fixtext = "The heart is now exposed for operating.";
		pInfo(peer)->postext = "You grafted in some nice new arteries!";
		pInfo(peer)->surgery_name = "a heart attack!";
		break;
	case 8:
		pInfo(peer)->incneeded = 5;
		pInfo(peer)->scantext = "a brain tumor!";
		pInfo(peer)->pretext = "Patient has a brain tumor, deep inside.";
		pInfo(peer)->fixtext = "You've finally found the tumor!";
		pInfo(peer)->postext = "You excised the tumor!";
		pInfo(peer)->surgery_name = "a brain tumor!";
		break;
	case 9:
		pInfo(peer)->incneeded = 2;
		pInfo(peer)->temp = 104.6;
		pInfo(peer)->fever = 0.6;
		pInfo(peer)->pulse = 30;
		pInfo(peer)->scantext = "a liver infection!";
		pInfo(peer)->pretext = "Patient has a liver infection.";
		pInfo(peer)->fixtext = "You've accessed the liver.";
		pInfo(peer)->postext = "You treated the source of the infection!";
		pInfo(peer)->surgery_name = "a liver infection!";
		break;
	case 10:
		pInfo(peer)->incneeded = 2;
		pInfo(peer)->temp = 101.6;
		pInfo(peer)->fever = 1.2;
		pInfo(peer)->scantext = "kidney failure!";
		pInfo(peer)->pretext = "Patient suffers from kidney failure.";
		pInfo(peer)->fixtext = "You now have access to the bad kidney.";
		pInfo(peer)->postext = "You popped in a fresh new kidney!";
		pInfo(peer)->surgery_name = "kidney failure!";
		break;
	case 11:
		pInfo(peer)->incneeded = 3;
		pInfo(peer)->temp = 104.6;
		pInfo(peer)->fever = 1.2;
		pInfo(peer)->pulse = 30;
		pInfo(peer)->scantext = "appendicitis!";
		pInfo(peer)->pretext = "Patient suffers from appendicitis.";
		pInfo(peer)->fixtext = "You now have access to the appendix.";
		pInfo(peer)->postext = "You yanked out the appendix!";
		pInfo(peer)->surgery_name = "appendicitis!";
		break;
	case 12:
		pInfo(peer)->incneeded = 2;
		pInfo(peer)->temp = 101.6;
		pInfo(peer)->bleeding = 1;
		pInfo(peer)->dirt = 6;
		pInfo(peer)->scantext = "swallowed World Lock!";
		pInfo(peer)->pretext = "Patient has swallowed a world lock.";
		pInfo(peer)->fixtext = "You've opened the stomach.";
		pInfo(peer)->postext = "You got the lock out!";
		pInfo(peer)->surgery_name = "a swallowed World Lock!";
		break;
	case 13:
		pInfo(peer)->incneeded = 3;
		pInfo(peer)->temp = 100.4;
		pInfo(peer)->scantext = "a herniated disc!";
		pInfo(peer)->pretext = "Patient's spine is damaged.";
		pInfo(peer)->fixtext = "You've opened up the vertebrae.";
		pInfo(peer)->postext = "You repaired the disc!";
		pInfo(peer)->surgery_name = "a herniated disc!";
		break;
	case 14:
		pInfo(peer)->incneeded = 2;
		pInfo(peer)->temp = 100.58;
		pInfo(peer)->dirt = 6;
		pInfo(peer)->bleeding = 1;
		pInfo(peer)->shattered = 4;
		pInfo(peer)->scantext = "broken everything! You found 4 shattered bones.";
		pInfo(peer)->pretext = "Patient was run over by a truck.";
		pInfo(peer)->fixtext = "You've found gravel in the knees.";
		pInfo(peer)->postext = "You removed the gravel!";
		pInfo(peer)->surgery_name = "a broken everything!";
		break;
	case 15:
		pInfo(peer)->incneeded = 1;
		pInfo(peer)->pulse = 20;
		pInfo(peer)->dirt = 6;
		pInfo(peer)->bleeding = 4;
		pInfo(peer)->scantext = "a serious head injury!";
		pInfo(peer)->pretext = "Patient has a serious head injury.";
		pInfo(peer)->fixtext = "You've opened the skull.";
		pInfo(peer)->postext = "You reduced the swelling!";
		pInfo(peer)->surgery_name = "a serious head injury!";
		break;
	case 16:
		pInfo(peer)->incneeded = 2;
		pInfo(peer)->pulse = 30;
		pInfo(peer)->dirt = 10;
		pInfo(peer)->bleeding = 3;
		pInfo(peer)->broken = 2;
		pInfo(peer)->shattered = 1;
		pInfo(peer)->scantext = "serious trauma! You found 2 broken bones and 1 shattered bone.";
		pInfo(peer)->pretext = "Patient suffered serious trauma with a punctured lung.";
		pInfo(peer)->fixtext = "You found the lung puncture.";
		pInfo(peer)->postext = "You repaired it.";
		pInfo(peer)->surgery_name = "a serious trauma!";
		break;
	case 17:
		pInfo(peer)->incneeded = 3;
		pInfo(peer)->pulse = 30;
		pInfo(peer)->dirt = 10;
		pInfo(peer)->bleeding = 4;
		pInfo(peer)->broken = 2;
		pInfo(peer)->shattered = 2;
		pInfo(peer)->scantext = "massive trauma! You found 2 broken bones and 2 shattered bones.";
		pInfo(peer)->pretext = "Patient suffered massive trauma with internal bleeding.";
		pInfo(peer)->fixtext = "You found the internal bleed.";
		pInfo(peer)->postext = "You cauterized it.";
		pInfo(peer)->surgery_name = "a massive trauma!";
		break;
	case 18:
		pInfo(peer)->incneeded = 1;
		pInfo(peer)->dirt = 15;
		pInfo(peer)->scantext = "torn punching muscle!";
		pInfo(peer)->pretext = "Patient has a torn punching muscle.";
		pInfo(peer)->fixtext = "You've accessed the arm muscles. ";
		pInfo(peer)->postext = "You patched the torn punching muscle! They should be back to punching in no time.";
		pInfo(peer)->surgery_name = "a torn punching muscle!";
		break;
	case 19:
		pInfo(peer)->fixable = false;
		pInfo(peer)->incneeded = 2;
		pInfo(peer)->temp = 98.6;
		pInfo(peer)->dirt = 0;
		pInfo(peer)->fever = 0;
		pInfo(peer)->bleeding = 1;
		pInfo(peer)->scantext = "gem cuts!";
		pInfo(peer)->pretext = "Patient is bleeding from multiple gem-induced cuts.";
		pInfo(peer)->fixtext = "You've examined the wounds.";
		pInfo(peer)->postext = "You've stitches the gem cuts closed and stopped the bleeding.";
		pInfo(peer)->surgery_name = "gem cuts!";
		break;
	case 20:
		pInfo(peer)->fixable = false;
		pInfo(peer)->incneeded = 1;
		pInfo(peer)->temp = 104.6;
		pInfo(peer)->pulse = 20;
		pInfo(peer)->shattered = 1;
		pInfo(peer)->dirt = 5;
		pInfo(peer)->scantext = "Grumbleteeth! You found 1 shattered bones.";
		pInfo(peer)->pretext = "Patient's teeth are chattering They sound angry.";
		pInfo(peer)->fixtext = "You removed grumbleteeth";
		pInfo(peer)->postext = "You've replaced the patient's angriest teeth and quited";
		pInfo(peer)->surgery_name = "Grumbleteeth!";
		break;
	case 21:
		pInfo(peer)->fixable = false;
		pInfo(peer)->temp = 98.6;
		pInfo(peer)->incneeded = 2;
		pInfo(peer)->heart = 0;
		pInfo(peer)->fever = 1.56;
		pInfo(peer)->dirt = 10;
		pInfo(peer)->shattered = 2;
		pInfo(peer)->scantext = "chicken feet! You found 2 shattered bones.";
		pInfo(peer)->pretext = "Patient feet have turned into chicken toes.";
		pInfo(peer)->fixtext = "You've insvestigated the feet.";
		pInfo(peer)->postext = "You fixed the patient feet. They look like normal blocky toes again!";
		pInfo(peer)->surgery_name = "chicken feet!";
		break;
	case 22:
		pInfo(peer)->fixable = false;
		pInfo(peer)->incneeded = 1;
		pInfo(peer)->shattered = 2;
		pInfo(peer)->temp = 107.6;
		pInfo(peer)->fever = 1.2;
		pInfo(peer)->dirt = 2;
		pInfo(peer)->scantext = "Broken Heart! You found 2 shattered bones.";
		pInfo(peer)->pretext = "Patient suffered from a Broken Heart.";
		pInfo(peer)->fixtext = "You've revealed the heart.";
		pInfo(peer)->postext = "You've repaired the fractured in the patient's heart";
		pInfo(peer)->surgery_name = "Broken heart!";
		break;
	case 23:
		pInfo(peer)->incneeded = 2;
		pInfo(peer)->temp = 100.58;
		pInfo(peer)->shattered = 1;
		pInfo(peer)->fever = 0.8;
		pInfo(peer)->dirt = 10;
		pInfo(peer)->bleeding = 5;
		pInfo(peer)->scantext = "brain worms! You found 1 Shattered bone.";
		pInfo(peer)->pretext = "You've exposed the brain.";
		pInfo(peer)->fixtext = "You made a neat incision.";
		pInfo(peer)->postext = "You've shut down the worm party in the patient brain and cleared away their trash.";
		pInfo(peer)->surgery_name = "brain worms!";
		break;
	case 24:
		pInfo(peer)->incneeded = 0;
		pInfo(peer)->fixable = false;
		pInfo(peer)->temp = 98.6;
		pInfo(peer)->dirt = 0;
		pInfo(peer)->broken = 6;
		pInfo(peer)->shattered = 2;
		pInfo(peer)->bleeding = 1;
		pInfo(peer)->scantext = "ecto bones! You found 6 Broken bones and 2 Shattered bones.";
		pInfo(peer)->pretext = "You've exposed the ribs";
		pInfo(peer)->fixtext = "You made an incision";
		pInfo(peer)->postext = "You pinned down all patient major bones and dyed them back to their normal color.";
		pInfo(peer)->surgery_name = "ecto bones!";
		break;
	case 25:
		pInfo(peer)->fixable = false;
		pInfo(peer)->pulse = 20;
		pInfo(peer)->temp = 104.6;
		pInfo(peer)->fever = 1.98;
		pInfo(peer)->shattered = 1;
		pInfo(peer)->incneeded = 2;
		pInfo(peer)->scantext = "Moldy Guts! You found 1 shattered bone.";
		pInfo(peer)->pretext = "Patient suffers from Moldy Guts.";
		pInfo(peer)->fixtext = "You've openned the abdomen.";
		pInfo(peer)->postext = "You'e cleaned out the patient's internal organs and applied a light air freshener";
		pInfo(peer)->surgery_name = "Moldy Guts!";
		break;
	case 26:
		pInfo(peer)->fixable = false;
		pInfo(peer)->incneeded = 3;
		pInfo(peer)->temp = 101.6;
		pInfo(peer)->fever = 2.0;
		pInfo(peer)->dirt = 10;
		pInfo(peer)->incneeded = 3;
		pInfo(peer)->bleeding = 3;
		pInfo(peer)->scantext = "fatty liver!";
		pInfo(peer)->pretext = "Patient suffered fatty liver.";
		pInfo(peer)->fixtext = "Patient poor diet has led to a high degree of fat build-up in their liver";
		pInfo(peer)->postext = "You pickup it.";
		pInfo(peer)->surgery_name = "fatty liver!";
		break;
	case 27:
		pInfo(peer)->fixed = false;
		pInfo(peer)->incneeded = 3;
		pInfo(peer)->temp = 105.6;
		pInfo(peer)->broken = 2;
		pInfo(peer)->fever = 2.6;
		pInfo(peer)->dirt = 10;
		pInfo(peer)->bleeding = 3;
		pInfo(peer)->scantext = "Chaos Infection! You found 2 Broken bones.";
		pInfo(peer)->pretext = "Patient suffered chaos infection.";
		pInfo(peer)->fixtext = "Patient poor diet has led to a high degree of fat build-up in their liver";
		pInfo(peer)->postext = "You removed it.";
		pInfo(peer)->surgery_name = "Chaos Infection!";
		break;
	case 28:
		pInfo(peer)->fixed = false;
		pInfo(peer)->incneeded = 4;
		pInfo(peer)->temp = 100.1;
		pInfo(peer)->broken = 2;
		pInfo(peer)->fever = 3.1;
		pInfo(peer)->sleep = 3;
		pInfo(peer)->shattered = 2;
		pInfo(peer)->dirt = 10;
		pInfo(peer)->incneeded = 3;
		pInfo(peer)->bleeding = 3;
		pInfo(peer)->scantext = "Lupus! You found 2 Broken bones.";
		pInfo(peer)->pretext = "Patient suffered lupus.";
		pInfo(peer)->fixtext = "Chance of patient tearing skin, adding one extra incision";
		pInfo(peer)->postext = "You removed it.";
		pInfo(peer)->surgery_name = "Lupus!";
		break;
	case 29:
		pInfo(peer)->fixed = true;
		pInfo(peer)->flu = true;
		pInfo(peer)->temp = 107.6;
		pInfo(peer)->fever = 2.5;
		pInfo(peer)->dirt = 6;
		pInfo(peer)->pretext = "Patient is showing signs of the COVID-19.";
		pInfo(peer)->scantext = "COVID-19!";
		pInfo(peer)->surgery_name = "a COVID-19!";
		break;
	case 30:
		pInfo(peer)->incneeded = 7;
		pInfo(peer)->temp = 102.6;
		pInfo(peer)->fever = 0.6;
		pInfo(peer)->scantext = "a Ebola! Patient is having seizure.";
		pInfo(peer)->pretext = "Patient has Ebola.";
		pInfo(peer)->fixtext = "You've finally cured the seizure!";
		pInfo(peer)->postext = "You made the patient experience a seizure!";
		pInfo(peer)->surgery_name = "a Ebola!";
		break;
	case 31:
		pInfo(peer)->incneeded = 6;
		pInfo(peer)->temp = 103.6;
		pInfo(peer)->fever = 1.5;
		pInfo(peer)->scantext = "a Monkeypox! Patient is having pimples.";
		pInfo(peer)->pretext = "Patient has Monkeypox.";
		pInfo(peer)->fixtext = "You've finally cured the pimples!";
		pInfo(peer)->postext = "You made the patient experience a exhaustion!";
		pInfo(peer)->surgery_name = "a Monkeypox!";
		break;
	}
	gamepacket_t p;
	p.Insert("OnTalkBubble"), p.Insert(pInfo(peer)->netID), p.Insert("`7[``" + get_player_nick(peer) + " is performing surgery on " + pInfo(peer)->surged_display + "!`7]``"), p.Insert(0), p.Insert(0);
	for (ENetPeer* cp_ = server->peers; cp_ < &server->peers[server->peerCount]; ++cp_) {
		if (cp_->state != ENET_PEER_STATE_CONNECTED or cp_->data == NULL or pInfo(cp_)->world != pInfo(peer)->world) continue;
		p.CreatePacket(cp_);
	}
	load_surgery(peer, 0);
	return true;
}
void cant_enter(ENetPeer* peer, string text, bool door, int delay, string world_name = "") {
	gamepacket_t p2(delay);
	if (door) {
		gamepacket_t p(delay, pInfo(peer)->netID), p3(delay), p4(delay, pInfo(peer)->netID);
		p.Insert("OnSetFreezeState"), p.Insert(1), p.CreatePacket(peer);
		p3.Insert("OnZoomCamera"), p3.Insert((float)10000.000000), p3.Insert(1000), p3.CreatePacket(peer);
		p4.Insert("OnSetFreezeState"), p4.Insert(0), p4.CreatePacket(peer);
	}
	else {
		gamepacket_t p2;
		p2.Insert("OnFailedToEnterWorld"), p2.CreatePacket(peer);
	}
	p2.Insert("OnConsoleMessage"), p2.Insert(text), p2.CreatePacket(peer);
	if (not world_name.empty()) memory_clean_world(world_name);
	return;
}
class NonPlayerCharacter {
public:
	static void Spawn(ENetPeer* peer, GTPS_NPC npcID) {
		gamepacket_t p;
		p.Insert("OnSpawn");
		p.Insert("spawn|avatar\nnetID|" + to_string(npcID) + "\nuserID|" + to_string(npcID) + "\ncolrect|0|0|20|30\nposXY|" + to_string(getNpcSpawnPos(npcID)[0]) + "|" + to_string(getNpcSpawnPos(npcID)[1]) + "\nname|" + getNPCNickname(npcID) + "``\ntitleIcon|{\"PlayerWorldID\":" + to_string((int)npcID) + ",\"WrenchCustomization\":{\"WrenchForegroundID\":-1,\"WrenchIconID\":14492}}\ncountry|ccBadge\ninvis|0\nmstate|1\nsmstate|1\nonlineID|");
		p.CreatePacket(peer);
	}
	static void State(ENetPeer* peer, GTPS_NPC npcID, bool isLeft) {
		PlayerMoving pmov;
		pmov.netID = int(npcID);
		pmov.effect_flags_check = 1;
		pmov.packetType = 0;
		pmov.characterState = isLeft ? 48 : 32;
		pmov.plantingTree = 0;
		pmov.punchX = -1;
		pmov.punchY = -1;
		pmov.secondnetID = 0;
		pmov.x = getNpcSpawnPos(npcID)[0];
		pmov.y = getNpcSpawnPos(npcID)[1];
		pmov.XSpeed = 0;
		pmov.YSpeed = 0;
		pmov.packet_3 = -1;
		pmov.packet_int_40 = 0;
		BYTE* raw = packPlayerMoving(&pmov);
		send_raw(peer, 4, raw, 56, ENET_PACKET_FLAG_RELIABLE);
		delete[]raw;
	}
	static void Cloth(ENetPeer* peer, GTPS_NPC npcID) {
		if (npcID == NPC_EXCHANGE) {
			gamepacket_t p(0, npcID);
			p.Insert("OnSetClothing");
			p.Insert((float)10084, (float)12114, (float)12116); // hair shirt pants
			p.Insert((float)12118, (float)9498, (float)10046); // feet face hand 
			p.Insert((float)11386, (float)0, (float)0); // back mask neck
			p.Insert((int)4042322175);
			p.Insert((float)5170, 0, 0);
			p.CreatePacket(peer);
		}
		if (npcID == NPC_MARKETPLACE) {
			gamepacket_t p(0, npcID);
			p.Insert("OnSetClothing");
			p.Insert((float)10084, (float)12114, (float)12116); // hair shirt pants
			p.Insert((float)12118, (float)9498, (float)10046); // feet face hand 
			p.Insert((float)11386, (float)0, (float)0); // back mask neck
			p.Insert((int)4042322175);
			p.Insert((float)5170, 0, 0);
			p.CreatePacket(peer);
		}
	}
	static void Action(ENetPeer* peer, GTPS_NPC npcID, std::string act) {
		gamepacket_t p(0, npcID);
		p.Insert("OnAction");
		p.Insert(act);
		p.CreatePacket(peer);
	}
	static void Talk(ENetPeer* peer, GTPS_NPC npcID, std::string message) {
		VarList::OnTalkBubble(peer, npcID, message, 2, true);
	}
};
class WorldAttribute {
public:
	static void UpdateMachine(ENetPeer* peer, World& world_) {
		for (int i_ = 0; i_ < world_.machines.size(); i_++) {
			WorldMachines machine_ = world_.machines[i_];
			if (machine_.enabled) tile_update(peer, &world_, &world_.blocks[machine_.x + (machine_.y * 100)], machine_.x, machine_.y);
		}
	}
	static void Attribute(ENetPeer* peer, std::string const& user_name, std::string const& name_, World world_, std::uint32_t const& square, int spawn_x, int spawn_y, int const& spawnas_x, int const& spawnas_y, std::uint32_t const& xSize, std::uint32_t const& ySize, std::vector<string> world_mods, bool door) {
		bool wipe = false, dont_add = false; int net_ = 1;
		if (name_.find("GENERATE_") != string::npos or name_.find("GENERATED_") != string::npos or name_.find("GROWMINES") != string::npos or name_.find("_") != string::npos) dont_add = true;
		for (int i_ = 0; i_ < pInfo(peer)->inv.size(); i_++) {
			if (pInfo(peer)->inv[i_].first == 9506 and pInfo(peer)->tankIDName != "Ocho" || pInfo(peer)->inv[i_].second > 200 || items[pInfo(peer)->inv[i_].first].name.find("null") != string::npos or items[pInfo(peer)->inv[i_].first].name.find("null_item") != string::npos || pInfo(peer)->inv[i_].first == 1424 || pInfo(peer)->inv[i_].first == 5816 || pInfo(peer)->inv[i_].first == 5640 || pInfo(peer)->inv[i_].first == 9158 || pInfo(peer)->inv[i_].first == 5814 || pInfo(peer)->inv[i_].first == 8430) {
				wipe = true;
				if (pInfo(peer)->inv[i_].first == 5640 || pInfo(peer)->inv[i_].first == 9158) pInfo(peer)->magnetron_id = 0, pInfo(peer)->magnetron_x = 0, pInfo(peer)->magnetron_y = 0;
				pInfo(peer)->inv[i_].first = 0;
				pInfo(peer)->inv[i_].second = 0;
			}
		}
		pInfo(peer)->inv.erase(std::remove_if(pInfo(peer)->inv.begin(), pInfo(peer)->inv.end(), isCorrupt), pInfo(peer)->inv.end());
		if (wipe) Inventory::Visuals(peer);
		pInfo(peer)->netID = 0;
		ServerPool::NetId(world_.name, net_);
		pInfo(peer)->netID = net_;
		VarList::HideCurrency(peer);
		//if (name_.find("DUNGEON_") != string::npos) {
		//	VarList::OnSetDungeonSouls(peer, 0);
		//	VarList::SetTapjoyTags(peer, "TJ4209834|");
		//	VarList::OnSetMissionTimer(peer, 1000);
		//}
		if (spawnas_x != 0 or spawnas_y != 0) spawn_x = spawnas_x * 32, spawn_y = spawnas_y * 32;
		pInfo(peer)->name_color = Role::Prefix2(peer, world_);
		vector<pair<string, string>>::iterator paa = find_if(Honors_Update.world_honors.begin(), Honors_Update.world_honors.end(), [&](const pair<string, string>& a) { return a.first == world_.name; });
		if (paa != Honors_Update.world_honors.end()) world_.honors = Honors_Update.world_honors[paa - Honors_Update.world_honors.begin()].second;
		if (world_.world_settings & SETTINGS::SETTINGS_1) world_.honors += a + (world_.honors.empty() ? "" : ", ") + "`$WOTD Winner";
		if (pInfo(peer)->xenonite != 0) VarList::OnConsoleMessage(peer, xenonite_text(pInfo(peer)->xenonite));
		VarList::OnConsoleMessage(peer, "" + (Role::Moderator(peer) ? (not world_.nuked_by.empty() ? "`0[NUKED: " + world_.nuked_by + "]`` " : "") : "") + "World `w" + world_.name + "`` " + (pInfo(peer)->lock == 5980 and world_.gems > 1 ? "`0[`2X" + to_string(world_.gems) + "ė``] " : "") + (world_mods.size() != 0 ? "`0[``" + join(world_mods, ", ") + "`0]`` " : "") + (world_.honors.empty() ? "" : "(`3Honors:`` " + world_.honors + ") ") + "`oentered.  There are `w" + to_string(ServerPool::PlayerCountWorld(world_.name)) + "`` other people here, `w" + Set_Count(ServerPool::PlayerCountServer()) + "`` online.");
		if (world_.name == "TRADE") NonPlayerCharacter::Spawn(peer, NPC_EXCHANGE);
		if (world_.name == "MARKETPLACE") NonPlayerCharacter::Spawn(peer, NPC_MARKETPLACE);
		if (world_.name != "GROWGANOTH" && Event()->Comet_Dust) VarList::OnSetCurrentWeather(peer, 16);
		else VarList::OnSetCurrentWeather(peer, (world_.weather == 0 || world_.weather == 80 && world_.d_weather != 0 ? world_.d_weather : (world_.weather == 0 ? 80 : world_.weather)));
		{
			for (ENetPeer* cp_ = server->peers; cp_ < &server->peers[server->peerCount]; ++cp_) {
				if (cp_->state != ENET_PEER_STATE_CONNECTED || cp_->data == NULL) continue;
				if (pInfo(cp_)->world == name_) {
					if (pInfo(peer)->pet_netID != 0 && pInfo(peer)->show_pets) {
						if (pInfo(cp_)->cheater_settings & SETTINGS::SETTINGS_17);
						else {
							VarList::OnSpawn(cp_, "spawn|avatar\nnetID|" + to_string(pInfo(peer)->pet_netID) + "\nuserID|0\ncolrect|0|0|20|30\nposXY|" + to_string((pInfo(peer))->x) + "|" + to_string((pInfo(peer))->y) + "\nname|`w" + pInfo(peer)->pet_name + " `4(" + (pInfo(peer)->pet_level == 50 ? "MAX" : to_string(pInfo(peer)->pet_level)) + ")``\ntitleIcon|{\"PlayerWorldID\":" + to_string(pInfo(peer)->pet_netID) + ",\"WrenchCustomization\":{\"WrenchForegroundID\":-1,\"WrenchIconID\":14360}}\ncountry|ccBadge\ninvis|0\nmstate|1\nsmstate|1\nonlineID|");
							Pet_Ai::Update(cp_, pInfo(peer)->pet_netID, pInfo(peer)->pet_level, pInfo(peer)->master_pet, pInfo(peer)->active_bluename);
							pInfo(peer)->pet_ClothesUpdated = false;
						}
					}
					if (pInfo(peer)->cheater_settings & SETTINGS::SETTINGS_17);
					else if (pInfo(cp_)->pet_netID != 0 && pInfo(cp_)->show_pets) {
						VarList::OnSpawn(peer, "spawn|avatar\nnetID|" + to_string(pInfo(cp_)->pet_netID) + "\nuserID|0\ncolrect|0|0|20|30\nposXY|" + to_string((pInfo(cp_))->x) + "|" + to_string((pInfo(cp_))->y) + "\nname|`w" + pInfo(cp_)->pet_name + " `4(" + (pInfo(cp_)->pet_level == 50 ? "MAX" : to_string(pInfo(cp_)->pet_level)) + ")``\ntitleIcon|{\"PlayerWorldID\":" + to_string(pInfo(cp_)->pet_netID) + ",\"WrenchCustomization\":{\"WrenchForegroundID\":-1,\"WrenchIconID\":14360}}\ncountry|ccBadge\ninvis|0\nmstate|1\nsmstate|1\nonlineID|");
						Pet_Ai::Update(peer, pInfo(cp_)->pet_netID, pInfo(cp_)->pet_level, pInfo(cp_)->master_pet, pInfo(cp_)->active_bluename);
						pInfo(cp_)->pet_ClothesUpdated = false;
					}
				}
			}
			VarList::OnSpawn(peer, "spawn|avatar\nnetID|" + to_string(net_) + "\nuserID|" + to_string(name_to_number(to_lower(pInfo(peer)->tankIDName))) + "\ncolrect|0|0|20|30\nposXY|" + to_string(spawn_x) + "|" + to_string(spawn_y) + "\nname|" + get_player_nick(peer) + "\ntitleIcon|" + get_player_custom_wrench(peer) + "\ncountry|" + pInfo(peer)->country + "\ninvis|" + (pInfo(peer)->invis ? "1" : "0") + "\nmstate|" + (Role::Moderator(peer) ? "1" : "0") + "\nsmstate|" + (Role::Developer(peer) ? "1" : "0") + "\nonlineID|\ntype|local");
			for (ENetPeer* cp_ = server->peers; cp_ < &server->peers[server->peerCount]; ++cp_) {
				if (cp_->state != ENET_PEER_STATE_CONNECTED or cp_->data == NULL or pInfo(cp_)->world != name_ or pInfo(peer)->tankIDName == pInfo(cp_)->tankIDName) continue;
				if (pInfo(cp_)->cheater_settings & SETTINGS::SETTINGS_17);
				else VarList::OnSpawn(cp_, "spawn|avatar\nnetID|" + to_string(net_) + "\nuserID|" + to_string(name_to_number(to_lower(pInfo(peer)->tankIDName))) + "\ncolrect|0|0|20|30\nposXY|" + to_string(spawn_x) + "|" + to_string(spawn_y) + "\nname|" + get_player_nick(peer) + "\ntitleIcon|" + get_player_custom_wrench(peer) + "\ncountry|" + pInfo(peer)->country + "\ninvis|" + (pInfo(peer)->invis ? "1" : "0") + "\nmstate|" + (Role::Moderator(peer) ? "1" : "0") + "\nsmstate|" + (Role::Developer(peer) ? "1" : "0") + "\nonlineID|");
				if (pInfo(peer)->invis == false) {
					CAction::Positioned(cp_, pInfo(cp_)->netID, "audio/door_open.wav", 0);
					VarList::OnConsoleMessage(cp_, "`5<`0" + get_player_nick(peer) + "`` entered, `w" + to_string(ServerPool::PlayerCountWorld(world_.name)) + " `5others here>``");
					VarList::OnTalkBubble(cp_, pInfo(peer)->netID, "`5<`0" + get_player_nick(peer) + "`` entered, `w" + to_string(ServerPool::PlayerCountWorld(world_.name)) + " `5others here>``", 0, 1);
				}
				if (pInfo(peer)->cheater_settings & SETTINGS::SETTINGS_17);
				else VarList::OnSpawn(peer, "spawn|avatar\nnetID|" + to_string(pInfo(cp_)->netID) + "\nuserID|" + to_string(name_to_number(to_lower(pInfo(cp_)->tankIDName))) + "\ncolrect|0|0|20|30\nposXY|" + to_string(pInfo(cp_)->x) + "|" + to_string(pInfo(cp_)->y) + "\nname|" + get_player_nick(cp_) + "\ntitleIcon|" + get_player_custom_wrench(cp_) + "\ncountry|" + pInfo(cp_)->country + "\ninvis|" + (pInfo(cp_)->invis ? "1" : "0") + "\nmstate|" + (Role::Moderator(cp_) ? "1" : "0") + "\nsmstate|" + (Role::Developer(cp_) ? "1" : "0") + "\nonlineID|");
			}
		}
		if (not world_.owner_name.empty()) {
			if (to_lower(pInfo(peer)->tankIDName) == to_lower(world_.owner_name)) {
				if ((pInfo(peer)->name_color != "`0" or Role::Moderator(peer) || Role::Administrator(peer)) && pInfo(peer)->name_color != "`2") world_.owner_named = pInfo(peer)->name_color + pInfo(peer)->tankIDName;
				else world_.owner_named = pInfo(peer)->tankIDName;
			}
			else pInfo(peer)->worlds_owned.erase(remove(pInfo(peer)->worlds_owned.begin(), pInfo(peer)->worlds_owned.end(), world_.name), pInfo(peer)->worlds_owned.end());
			if (world_.owner_named.substr(0, 2) == "`2" || world_.owner_named.substr(0, 2) == "`o") world_.owner_named = world_.owner_name;
			VarList::OnConsoleMessage(peer, "`5[```w" + world_.name + "`` `$World Locked`` by " + (world_.owner_named.empty() ? world_.owner_name : world_.owner_named) + "``" + (to_lower(world_.owner_name) == to_lower(pInfo(peer)->tankIDName) or (guild_access(peer, world_.guild_id) or find(world_.admins.begin(), world_.admins.end(), user_name) != world_.admins.end()) ? " (`2ACCESS GRANTED``)" : (world_.world_settings & SETTINGS::SETTINGS_4 ? " (`$PUBLIC``)" : "")) + "`5]``");
		}
		else {
			pInfo(peer)->worlds_owned.erase(remove(pInfo(peer)->worlds_owned.begin(), pInfo(peer)->worlds_owned.end(), world_.name), pInfo(peer)->worlds_owned.end());
		}
		if (world_.owner_name == pInfo(peer)->tankIDName && not world_.honors.empty()) {
			if (find(pInfo(peer)->growtoken_worlds.begin(), pInfo(peer)->growtoken_worlds.end(), world_.name) == pInfo(peer)->growtoken_worlds.end()) {
				vector<pair<int, string>>::iterator p2 = find_if(Environment()->top_yesterday.begin(), Environment()->top_yesterday.end(), [&](const pair < int, string>& element) { return element.second.substr(0, element.second.find("|")) == world_.name; });
				if (p2 != Environment()->top_yesterday.end()) {
					int give_tokens = 1, given = 0;
					given = give_tokens;
					if (Inventory::Modify(peer, 1486, give_tokens) == 0) {
						pInfo(peer)->growtoken_worlds.push_back(world_.name);
						if (pInfo(peer)->lwiz_step == 6) add_lwiz_points(peer, 1);
						VarList::OnConsoleMessage(peer, "You received `$" + to_string(given) + " Growtoken`` from the players visiting your world yesterday.");
					}
				}
			}
		}
		if (pInfo(peer)->lock == 5980 and world_.gems > 1) VarList::OnTalkBubble(peer, pInfo(peer)->netID, "`#Electrical Evil Lock ``has changed everyone's powers! `2" + to_string(world_.gems) + "x Gems!", 0, 0);
		if (world_.special_event) VarList::OnConsoleMessage(peer, "`2" + items[world_.special_event_item].event_name + ":`` " + (items[world_.special_event_item].event_total == 1 ? "`oYou have`` `030`` `oseconds to find and grab the`` `#" + items[world_.special_event_item].name + "```o.``" : "`#" + to_string(items[world_.special_event_item].event_total) + " " + items[world_.special_event_item].name + "`` `ospawn in your world, you have`` `030`` `oseconds to collect them.``") + "");
		if (pInfo(peer)->xenonite != 0) VarList::OnTalkBubble(peer, pInfo(peer)->netID, xenonite_text(pInfo(peer)->xenonite), 0, 0);
		if (dont_add == false) {
			for (int i_ = 0; i_ < pInfo(peer)->last_visited_worlds.size(); i_++) {
				if (pInfo(peer)->last_visited_worlds[i_] == world_.name) {
					pInfo(peer)->last_visited_worlds.erase(pInfo(peer)->last_visited_worlds.begin() + i_);
					pInfo(peer)->last_visited_worlds.push_back(world_.name);
				}
				else if (i_ + 1 == pInfo(peer)->last_visited_worlds.size()) {
					if (pInfo(peer)->last_visited_worlds.size() + 1 > 11) {
						pInfo(peer)->last_visited_worlds.erase(pInfo(peer)->last_visited_worlds.begin());
					}
					pInfo(peer)->last_visited_worlds.push_back(world_.name);
				}
			}
			if (pInfo(peer)->last_visited_worlds.size() == 0) pInfo(peer)->last_visited_worlds.push_back(world_.name);
		}
		if (not pInfo(peer)->invis) CAction::Positioned(peer, pInfo(peer)->netID, "audio/door_open.wav", 0);
		WorldAttribute::UpdateMachine(peer, world_);
		if (pInfo(peer)->world == "CARNIVAL") CAction::Log(peer, "action|play_music\nfile|audio/mp3/funtime.mp3\ndelayMS|0");
		if (pInfo(peer)->world == "TRADE") CAction::Log(peer, "action|play_music\nfile|audio/mp3/pubg.mp3\ndelayMS|0");
		if (pInfo(peer)->world == "SHOP") CAction::Log(peer, "action|play_music\nfile|audio/mp3/duke.mp3\ndelayMS|0");
		if (pInfo(peer)->world == "REC") CAction::Log(peer, "action|play_music\nfile|audio/mp3/dukaxserana.mp3\ndelayMS|0");
		if (pInfo(peer)->world == "GROWCH") {
			CAction::Log(peer, "action|play_music\nfile|audio/mp3/tsirhc.mp3\ndelayMS|0");
			if (WinterFest.Active) {
				if (WinterFest.Growch_Happy) VarList::OnSetCurrentWeather(peer, 13);
				else VarList::OnSetCurrentWeather(peer, 12);
			}
			else VarList::OnSetCurrentWeather(peer, 11);
		}
		if (pInfo(peer)->world == "GROWGANOTH") {
			CAction::Log(peer, "action|play_music\nfile|audio/mp3/ykoops.mp3\ndelayMS|0");
			if (Event()->Halloween) VarList::OnSetCurrentWeather(peer, 9);
			else VarList::OnSetCurrentWeather(peer, 8);
		}
		if (pInfo(peer)->DrDes) {
			pInfo(peer)->DrDes = false;
			pInfo(peer)->Health_DrDes = 100;
			pInfo(peer)->face = 0, pInfo(peer)->shirt = 0, pInfo(peer)->pants = 0, pInfo(peer)->hair = 0, pInfo(peer)->necklace = 0, pInfo(peer)->back = 0, pInfo(peer)->feet = 0, pInfo(peer)->hand = 0;
			pInfo(peer)->punched = 0;
			pInfo(peer)->ghost = false;
			VisualHandle::State(pInfo(peer));
			Clothing_V2::Update_Value(peer);
		}
		if (pInfo(peer)->starglitter_enter == false) DailyEvent_Task::MStarglitter(peer, "enter", 1);
		ServerPool::CctvLogs::Add(peer, "entered", "");
		if (world_.World_Time != 0) {
			pInfo(peer)->World_Timed = time(nullptr) + (world_.World_Time * 60);
			pInfo(peer)->WorldTimed = true;
		}
		if (world_.category != "None" and not world_.category.empty()) VarList::OnConsoleMessage(peer, "`9Type /rate to give your opinion of this world!`` `4/rate 1`` if you hate it, `2/rate 5`` if you love it, or anywhere in between. Share your thoughts!", 0, 5000);
		if (world_.category == "Casino") {
			if (find(Environment()->Verifed_Csn_World.begin(), Environment()->Verifed_Csn_World.end(), pInfo(peer)->world) != Environment()->Verifed_Csn_World.end()) {
				VarList::OnAddNotification(peer, "This casino world has a `2Verified`` License", "interface/large/playerportal_button.rttex", "audio/harp.wav");
			}
			if (to_lower(world_.owner_name) == to_lower(pInfo(peer)->tankIDName)) {
				if (find(Environment()->Verifed_Csn_World.begin(), Environment()->Verifed_Csn_World.end(), pInfo(peer)->world) != Environment()->Verifed_Csn_World.end()) {}
				else if (find(Environment()->Waiting_Verif_Csn.begin(), Environment()->Waiting_Verif_Csn.end(), pInfo(peer)->world) != Environment()->Waiting_Verif_Csn.end()) {}
				else VarList::OnConsoleMessage(peer, "`oType /reqverifycsn to verify your world as a verifed world casino. if you don't sumbit world casino verification you will be banned!", 0, 2000);
			}
		}
		if (pInfo(peer)->hair == 7102 && door == false) VarList::OnAction(peer, pInfo(peer)->netID, "/omg", 0);
		if (Role::Moderator(peer) and pInfo(peer)->no_clip and to_lower(world_.owner_name) != to_lower(pInfo(peer)->tankIDName) or !Role::Developer(peer) and (pInfo(peer)->world == "CARNIVAL" or pInfo(peer)->world == "GROWCH")) {
			pInfo(peer)->ghost = false, pInfo(peer)->no_clip = false;
			VisualHandle::State(pInfo(peer));
			Clothing_V2::Update(peer);
		}
	}
	static void Visual(ENetPeer* peer, World world_, std::string const& user_name, std::string const& name_, std::uint32_t const& square, int const& spawnas_x, int const& spawnas_y, bool door) {
		uint32_t ySize = world_.blocks.size() / 100, xSize = world_.blocks.size() / ySize;
		pInfo(peer)->lock = 0;
		pInfo(peer)->world_owner = world_.owner_name;
		pInfo(peer)->world = world_.name;
		pInfo(peer)->xenonite = world_.xenonite;
		int total = 78 + world_.name.length() + world_.blocks.size() + 24 + ((8 * world_.blocks.size()) + (world_.drop_new.size() * 16)), spawn_x = 0, spawn_y = 0;
		BYTE* data = (BYTE*)malloc(world_.blocks.size() * sizeof(WorldBlock) + sizeof(World) + world_.drop_new.size());
		Memory_Set(data, 0, total);
		*(__int8*)(data) = 4;
		*(__int8*)(data + 4) = 4;
		*(__int8*)(data + 16) = 8;
		*(__int8*)(data + 66) = world_.name.length();
		Memory_Copy(data + 68, world_.name.c_str(), world_.name.length());
		*(__int8*)(data + 68 + world_.name.length()) = xSize;
		*(__int8*)(data + 72 + world_.name.length()) = ySize;
		*(__int16*)(data + 76 + world_.name.length()) = world_.blocks.size();
		BYTE* blc = data + 80 + world_.name.length();
		blc += 5;
		vector<vector<unsigned int>> world_locks;
		world_.active_jammers.clear();
		vector<string> world_mods;
		string verif = "";
		if (find(Environment()->Verifed_Csn_World.begin(), Environment()->Verifed_Csn_World.end(), pInfo(peer)->world) != Environment()->Verifed_Csn_World.end()) verif = "`2VERIFIED";
		else verif = "`4NOT VERIFIED";
		if (not world_.category.empty() and world_.category != "None") {
			vector<string>::iterator pz = find_if(Environment()->world_rate_types[world_category_id(world_.category)].begin(), Environment()->world_rate_types[world_category_id(world_.category)].end(), [&](const string& element) { return element.substr(0, element.find("|")) == world_.name; });
			if (pz != Environment()->world_rate_types[world_category_id(world_.category)].end()) {
				int spot = int(pz - Environment()->world_rate_types[world_category_id(world_.category)].begin());
				world_mods.push_back("`9#" + to_string(spot + 1) + " " + (world_.category == "Casino" ? "Casino ``(" + verif + "``)" : world_.category) + "``");
			}
			else world_mods.push_back("`9" + (world_.category == "Casino" ? "Casino ``(" + verif + "``)" : world_.category) + "``");
		}
		for (int i_ = 0; i_ < world_.blocks.size(); i_++) {
			*(__int16*)(blc) = world_.blocks[i_].fg;
			*(__int16*)(blc + 2) = world_.blocks[i_].bg;
			*(__int32*)(blc + 4) = world_.blocks[i_].flags;
			if (world_.blocks[i_].fg) {
				if (world_.blocks[i_].flags & 0x00400000 && (world_.blocks[i_].fg == 226 || world_.blocks[i_].fg == 1276 || world_.blocks[i_].fg == 1278 || world_.blocks[i_].fg == 4884 || world_.blocks[i_].fg == 4992)) world_mods.push_back("`" + a + (world_.blocks[i_].fg == 226 ? "4JAMMED" : (world_.blocks[i_].fg == 1276 ? "2NOPUNCH" : (world_.blocks[i_].fg == 1278 ? "2IMMUNE" : (world_.blocks[i_].fg == 4884 ? "2NOWAR" : "2ANTIGRAVITY")))) + "``"), world_.active_jammers.push_back(world_.blocks[i_].fg);
				if (items[world_.blocks[i_].fg].audio_rack) {
					*(__int8*)(blc + 8) = 56;
					*(__int16*)(blc + 9) = world_.blocks[i_].txt.size();
					Memory_Copy(blc + 11, world_.blocks[i_].txt.c_str(), world_.blocks[i_].txt.size());
					*(__int16*)(blc + 11 + world_.blocks[i_].txt.size()) = world_.blocks[i_].pr;
					blc += 7 + world_.blocks[i_].txt.size();
					total += 7 + world_.blocks[i_].txt.size();
				}
				else if (items[world_.blocks[i_].fg].simple_load) {
					*(__int8*)(blc + 8) = 6;
					blc += 8;
					total += 8;
				}
				else if (world_.blocks[i_].fg == 3202) {
					BYTE btype = 63;
					Memory_Copy(blc + 8, &btype, 1);
					blc += 1 + 4 + 8;
					total += 1 + 4 + 8;
				}
				else {
					switch (items[world_.blocks[i_].fg].blockType) {
					case BlockTypes::GAME_BLOCK: {
						*(__int8*)(blc + 8) = 0x10;
						*(__int16*)(blc + 9) = (world_.blocks[i_].GameGen.Teams);
						blc += 2;
						total += 2;
						break;
					}
					case BlockTypes::ACHIEVEMENT_BLOCK: {
						if (world_.blocks[i_].enabled) {
							*(__int8*)(blc + 8) = 0x10;
							*(__int16*)(blc + 9) = (world_.blocks[i_].pr);
							blc += 2;
							total += 2;
						}
						else {
							BYTE btype = 63;
							Memory_Copy(blc + 8, &btype, 1);
							blc += 1 + 4 + 8;
							total += 1 + 4 + 8;
						}
						break;
					}
					case BlockTypes::GAME_GENERATOR: case BlockTypes::SEWINGMACHINE: case BlockTypes::LOCK_BOT: case BlockTypes::PET_TRAINER: {
						BYTE btype = 63;
						Memory_Copy(blc + 8, &btype, 1);
						blc += 1 + 4 + 8;
						total += 1 + 4 + 8;
						break;
					}
					case BlockTypes::WEATHER: {
						switch (world_.blocks[i_].fg) {
						case 10058: {
							*(__int8*)(blc + 8) = 19;
							blc += 19;
							total += 19;
							break;
						}
						case 3694: case 5000: {
							*(__int8*)(blc + 8) = 40;
							*(__int32*)(blc + 9) = (world_.blocks[i_].fg == 3694 ? (world_.blocks[i_].b << 24) | (world_.blocks[i_].g << 16) | (world_.blocks[i_].r << 8) : world_.blocks[i_].id != 0 ? world_.blocks[i_].id : 14);
							blc += 5;
							total += 5;
							break;
						}
						case 5958: {
							BYTE btype = 0x31;
							Memory_Copy(blc + 8, &btype, 1);
							blc += 10;
							total += 10;
							break;
						}
						case 3832: {
							*(__int8*)(blc + 8) = 49;
							*(__int16*)(blc + 9) = (world_.blocks[i_].id != 0 ? world_.blocks[i_].id : 2);
							*(__int16*)(blc + 13) = world_.blocks[i_].gravity;
							*(__int16*)(blc + 17) = (int)world_.blocks[i_].spin | ((int)world_.blocks[i_].invert << 1);
							blc += 10;
							total += 10;
							break;
						}
						case 6280: {
							if (world_.guild_id == 0) break;
							uint32_t new_id = 0, guild_id = world_.guild_id;
							vector<Guild>::iterator p = find_if(guilds.begin(), guilds.end(), [guild_id](const Guild& a) { return a.guild_id == guild_id; });
							if (p != guilds.end()) {
								Guild* guild_information = &guilds[p - guilds.begin()];
								for (GuildMember member_search : guild_information->guild_members) {
									if (to_lower(member_search.member_name) == to_lower(pInfo(peer)->tankIDName)) {
										new_id = (guild_information->guild_mascot[0] == 0 ? 5814 : guild_information->guild_mascot[0]);
									}
									*(__int8*)(blc + 8) = 49;
									*(__int16*)(blc + 9) = (world_.blocks[i_].id != 0 ? world_.blocks[i_].id : new_id);
									*(__int16*)(blc + 13) = world_.blocks[i_].gravity;
									*(__int16*)(blc + 17) = (int)world_.blocks[i_].spin | ((int)world_.blocks[i_].invert << 1);
									blc += 10;
									total += 10;
								}
							}
							break;
						}
						default: {
							if (items[world_.blocks[i_].fg].actionType == 81) {
								*(__int8*)(blc + 8) = 5;
								blc += 1;
								total += 1;
							}
							break;
						}
						}
						break;
					}
					case BlockTypes::OVEN: {
						int extra = 13;
						WorldBlock block_ = world_.blocks[i_];
						int timern = std::chrono::duration_cast<std::chrono::seconds>(std::chrono::system_clock::now().time_since_epoch()).count();
						int cooktype = block_.pr;
						int max = 0;
						int fru = 0;
						if (not block_.food.empty()) fru = block_.food.size() * 2;
						*(__int8*)(blc + 8) = 55;
						*(__int8*)(blc + 9) = cooktype;
						*(__int8*)(blc + 13) = fru;
						if (not block_.food.empty()) {
							extra += 3;
							for (int i = 0; i < block_.food.size(); i++) {
								int id1 = 17 + (i * 8);
								*(__int32*)(blc + id1) = get_cook_id(block_.food[i].id);
								*(__int8*)(blc + id1 + 1) = get_cook_offset(block_.food[i].id);
								*(__int16*)(blc + id1 + 4) = cooktype * (timern - block_.food[i].time);
								max = id1 + 4;
							}
							int val1 = 0;
							int val2 = 0;
							int val3 = 0;
							int val4 = 0;
							if (block_.c_ == 1) {
								val1 = block_.starttime;
								while (val1 >= 256) {
									val2 += 1;
									val1 -= 256;
								}
								while (val2 >= 256) {
									val3 += 1;
									val2 -= 256;
								}
								while (val3 >= 256) {
									val4 += 1;
									val3 -= 256;
								}
							}
							*(__int32*)(blc + max + 8) = val1;
							*(__int32*)(blc + max + 9) = val2;
							*(__int32*)(blc + max + 10) = val3;
							*(__int32*)(blc + max + 11) = val4;
						}
						blc += max + extra;
						total += max + extra;
						break;
					}
					case BlockTypes::AUTO_BLOCK: {
						switch (world_.blocks[i_].fg) {
						case 10058: {
							*(__int8*)(blc + 8) = 62;
							*(__int16*)(blc + 9) = world_.blocks[i_].id;
							*(__int16*)(blc + 13) = world_.blocks[i_].pr;
							*(__int8*)(blc + 17) = world_.blocks[i_].enabled;
							*(__int16*)(blc + 21) = 1500;
							*(__int16*)(blc + 21) = 1500;
							blc += 15;
							total += 15;
							break;
						}
						default: {
							*(__int8*)(blc + 8) = world_.blocks[i_].fg == 6950 ? 70 : 69;
							*(__int8*)(blc + 9) = world_.blocks[i_].pr > 0 ? 1 : 0;
							*(__int16*)(blc + 13) = world_.blocks[i_].pr;
							*(__int16*)(blc + 17) = world_.blocks[i_].id;
							*(__int8*)(blc + 21) = world_.blocks[i_].enabled;
							blc += 13;
							total += 13;
							break;
						}
						}
						break;
					}
					case BlockTypes::FISH: {
						*(__int8*)(blc + 8) = 63;
						blc += 1 + 4 + 8;
						total += 1 + 4 + 8;
						break;
					}
					case BlockTypes::COUNTRY_FLAG: {
						*(__int8*)(blc + 8) = 0x21;
						*(__int16*)(blc + 9) = world_.blocks[i_].heart_monitor.size();
						Memory_Copy(blc + 11, world_.blocks[i_].heart_monitor.data(), world_.blocks[i_].heart_monitor.size());
						blc += 3 + world_.blocks[i_].heart_monitor.size();
						total += 3 + world_.blocks[i_].heart_monitor.size();
						break;
					}
					case BlockTypes::GEIGER_CHARGER: {
						*(int*)(blc + 4) = world_.blocks[i_].flags;
						*(__int8*)(blc + 8) = 57;
						*(__int16*)(blc + 9) = (world_.blocks[i_].planted - time(nullptr) <= 0 ? 3600 : 3600 - (world_.blocks[i_].planted - time(nullptr)));
						blc += 5;
						total += 5;
						break;
					}
					case BlockTypes::Spirit_Storage: {
						*(__int8*)(blc + 8) = 41;
						*(__int16*)(blc + 9) = world_.blocks[i_].c_;
						blc += 5;
						total += 5;
						break;
					}
					case BlockTypes::MAGIC_EGG: {
						*(__int8*)(blc + 8) = 15;
						*(__int16*)(blc + 9) = world_.blocks[i_].shelf_1;
						blc += 5;
						total += 5;
						break;
					}
					case BlockTypes::CRIME_VILLAIN: {
						*(__int8*)(blc + 8) = 14;
						*(__int16*)(blc + 9) = world_.blocks[i_].txt.size();
						Memory_Copy(blc + 11, world_.blocks[i_].txt.c_str(), world_.blocks[i_].txt.size());
						blc += 26 + world_.blocks[i_].txt.size();
						total += 26 + world_.blocks[i_].txt.size();
						break;
					}
					case BlockTypes::Painting_Easel: {
						*(__int8*)(blc + 8) = 35;
						*(__int16*)(blc + 9) = world_.blocks[i_].id;
						*(__int16*)(blc + 13) = world_.blocks[i_].txt.size();
						Memory_Copy(blc + 15, world_.blocks[i_].txt.c_str(), world_.blocks[i_].txt.size());
						blc += 7 + world_.blocks[i_].txt.size();
						total += 7 + world_.blocks[i_].txt.size();
						break;
					}
					case BlockTypes::Fish_Mount: {
						int fish = world_.blocks[i_].id;
						string text = world_.blocks[i_].txt + "`w";
						uint32_t length = uint32_t(text.size());
						*(__int8*)(blc + 8) = 47;
						*(__int16*)(blc + 9) = length;
						*(__int16*)(blc + 11 + length) = fish;
						*(__int16*)(blc + 15 + length) = world_.blocks[i_].c_;
						Memory_Copy(blc + 11, text.c_str(), length);
						blc += 8 + length;
						total += 8 + length;
						break;
					}
					case BlockTypes::PORTRAIT: {
						*(__int8*)(blc + 8) = 48;
						*(__int16*)(blc + 9) = world_.blocks[i_].txt.size();
						Memory_Copy(blc + 11, world_.blocks[i_].txt.c_str(), world_.blocks[i_].txt.size());
						if (world_.blocks[i_].portrait.c_skin == 0 and world_.blocks[i_].portrait.c_face == 0 and world_.blocks[i_].portrait.c_head == 0 and world_.blocks[i_].portrait.c_hair == 0) {

						}
						else {
							*(int*)(blc + 11 + world_.blocks[i_].txt.size()) = world_.blocks[i_].portrait.c_expression;
							*(int*)(blc + 19 + world_.blocks[i_].txt.size()) = world_.blocks[i_].portrait.c_hair_colour;
							*(int*)(blc + 23 + world_.blocks[i_].txt.size()) = world_.blocks[i_].portrait.c_skin;
							*(int*)(blc + 27 + world_.blocks[i_].txt.size()) = world_.blocks[i_].portrait.c_face;
							*(int*)(blc + 29 + world_.blocks[i_].txt.size()) = world_.blocks[i_].portrait.c_head;
							*(int*)(blc + 31 + world_.blocks[i_].txt.size()) = world_.blocks[i_].portrait.c_hair;
						}
						blc += 7 + 15 + 3 + world_.blocks[i_].txt.size();
						total += 7 + 15 + 3 + world_.blocks[i_].txt.size();
						break;
					}
					case BlockTypes::MANNEQUIN: {
						*(__int8*)(blc + 8) = 14;
						*(__int16*)(blc + 9) = world_.blocks[i_].txt.size();
						Memory_Copy(blc + 11, world_.blocks[i_].txt.c_str(), world_.blocks[i_].txt.size());
						*(__int16*)(blc + 16 + world_.blocks[i_].txt.size()) = world_.blocks[i_].mannequin.c_hair;
						*(__int16*)(blc + 18 + world_.blocks[i_].txt.size()) = world_.blocks[i_].mannequin.c_shirt;
						*(__int16*)(blc + 20 + world_.blocks[i_].txt.size()) = world_.blocks[i_].mannequin.c_pants;
						*(__int16*)(blc + 22 + world_.blocks[i_].txt.size()) = world_.blocks[i_].mannequin.c_feet;
						*(__int16*)(blc + 24 + world_.blocks[i_].txt.size()) = world_.blocks[i_].mannequin.c_head;
						*(__int16*)(blc + 26 + world_.blocks[i_].txt.size()) = world_.blocks[i_].mannequin.c_hand;
						*(__int16*)(blc + 28 + world_.blocks[i_].txt.size()) = world_.blocks[i_].mannequin.c_back;
						*(__int16*)(blc + 30 + world_.blocks[i_].txt.size()) = world_.blocks[i_].mannequin.c_mask;
						*(__int16*)(blc + 32 + world_.blocks[i_].txt.size()) = world_.blocks[i_].mannequin.c_neck;
						blc += 26 + world_.blocks[i_].txt.size();
						total += 26 + world_.blocks[i_].txt.size();
						break;
					}
					case BlockTypes::KRANKEN: {
						int model_ = world_.blocks[i_].kranken_pattern;
						int rgb = (world_.blocks[i_].b << 24) | (world_.blocks[i_].g << 16) | (world_.blocks[i_].r << 8);
						int w_ = rgb + 255;
						BYTE btype = 0x50;
						Memory_Copy(blc + 8, &btype, 1);
						Memory_Copy(blc + 9, &model_, 4);
						Memory_Copy(blc + 13, &w_, 4);
						blc += 9;
						total += 9;
						break;
					}
					case BlockTypes::SUCKER: {
						*(__int8*)(blc + 8) = 62;
						*(__int16*)(blc + 9) = world_.blocks[i_].id;
						*(__int16*)(blc + 13) = world_.blocks[i_].pr;
						*(__int8*)(blc + 17) = world_.blocks[i_].enabled;
						if (world_.blocks[i_].fg == 5930) {
							*(__int16*)(blc + 18) = world_.blocks[i_].spin;
							*(__int16*)(blc + 20) = 1000000;
						}
						else if (world_.blocks[i_].fg == 5638) {
							*(__int16*)(blc + 18) = world_.blocks[i_].spin;
							*(__int16*)(blc + 20) = 5000;
						}
						else {
							*(__int16*)(blc + 21) = 1500;
						}
						blc += 15;
						total += 15;
						break;
					}
					case BlockTypes::Heart_Monitor: {
						*(__int8*)(blc + 8) = 11;
						{
							bool ijungtas = false;
							for (ENetPeer* cp_ = server->peers; cp_ < &server->peers[server->peerCount]; ++cp_) {
								if (cp_->state != ENET_PEER_STATE_CONNECTED or cp_->data == NULL) continue;
								if (fixchar(pInfo(cp_)->tankIDName) == fixchar(world_.blocks[i_].heart_monitor)) {
									ijungtas = 1;
									break;
								}
							}
							if (ijungtas)*(int*)(blc + 4) = world_.blocks[i_].flags | 0x00400000;
							*(int*)(blc + 9) = ijungtas;
						}
						*(int*)(blc + 13) = world_.blocks[i_].heart_monitor.size();
						Memory_Copy(blc + 15, world_.blocks[i_].heart_monitor.c_str(), world_.blocks[i_].heart_monitor.size());
						blc += 7 + world_.blocks[i_].heart_monitor.size();
						total += 7 + world_.blocks[i_].heart_monitor.size();
						break;
					}
					case BlockTypes::TRICKSTER: {
						*(__int8*)(blc + 8) = 52;
						blc += 1;
						total += 1;
						break;
					}
					case BlockTypes::TIMER: {
						*(__int8*)(blc + 8) = 45;
						blc += 1;
						total += 1;
						break;
					}
					case BlockTypes::Display_Shelf: {
						*(__int8*)(blc + 8) = 43;
						*(__int16*)(blc + 9) = world_.blocks[i_].shelf_1;
						*(__int16*)(blc + 13) = world_.blocks[i_].shelf_2;
						*(__int16*)(blc + 17) = world_.blocks[i_].shelf_3;
						*(__int16*)(blc + 21) = world_.blocks[i_].shelf_4;
						blc += 17;
						total += 17;
						break;
					}
					case BlockTypes::VIP_ENTRANCE: {
						*(__int8*)(blc + 8) = 44;
						vector<int> vip_members;
						string name = pInfo(peer)->tankIDName;
						if (world_.blocks[i_].fg != 14594 and world_.blocks[i_].limit_admins or to_lower(pInfo(peer)->tankIDName) == to_lower(world_.owner_name) or Role::Developer(peer) or world_.owner_name.empty()) vip_members.push_back(name_to_number(to_lower(pInfo(peer)->tankIDName)));	
						auto it = std::find_if(world_.blocks[i_].Admin_Bfg.begin(), world_.blocks[i_].Admin_Bfg.end(), [&name](const std::pair<long long int, std::string>& pair) {
							return pair.second == name;
							});
						if (it != world_.blocks[i_].Admin_Bfg.end()) {
							vip_members.push_back(name_to_number(to_lower(pInfo(peer)->tankIDName)));
						}
						*(__int16*)(blc + 14) = vip_members.size();
						for (int i = 0; i < vip_members.size(); i++) *(__int32*)(blc + 18 + (i * 4)) = vip_members[i];
						blc += 10 + (vip_members.size() * 4);
						total += 10 + (vip_members.size() * 4);
						break;
					}
					case BlockTypes::VENDING: {
						*(int*)(blc + 9) = (world_.blocks[i_].pr < 0 and world_.blocks[i_].id != 0 && world_.blocks[i_].c_ < (world_.blocks[i_].pr * -1) ? 0 : world_.blocks[i_].id);
						*(__int8*)(blc + 8) = 24;
						*(int*)(blc + 4) = (world_.blocks[i_].pr < 0 and world_.blocks[i_].id != 0 && world_.blocks[i_].c_ < (world_.blocks[i_].pr * -1) ? world_.blocks[i_].flags | ((world_.blocks[i_].c_ < (world_.blocks[i_].pr * -1)) ? (world_.blocks[i_].wl != 0 ? 0x02410000 : 0x00410000) : (world_.blocks[i_].wl != 0 ? 0x02410000 : 0x00410000)) : world_.blocks[i_].flags | (world_.blocks[i_].id == 0 ? (world_.blocks[i_].wl != 0 ? 0x02000000 : 0x00000000) : (world_.blocks[i_].wl != 0 ? 0x02410000 : 0x00410000)));
						*(int*)(blc + 13) = (world_.blocks[i_].pr < 0 and world_.blocks[i_].id != 0 && world_.blocks[i_].c_ < (world_.blocks[i_].pr * -1) ? 0 : world_.blocks[i_].pr);
						blc += 9;
						total += 9;
						break;
					}
					case BlockTypes::FISH_TANK: {
						WorldBlock block_ = world_.blocks[i_];
						int fish_size = 0;
						int extra = 0;
						if (block_.txt != "") {
							const auto pi = explode(",", block_.txt);
							int f1 = -1, lb1 = 0, f2 = -1, lb2 = 0, f3 = -1, lb3 = 0, f4 = -1, lb4 = 0, f5 = -1, lb5 = 0;
							for (auto& a : pi) {
								if (a.empty()) continue;
								else {
									const auto xd = explode("|", a);
									if (f1 == -1) { f1 = stoi(xd.at(0)); lb1 = stoi(xd.at(1)); }
									else if (f2 == -1) { f2 = stoi(xd.at(0)); lb2 = stoi(xd.at(1)); }
									else if (f3 == -1) { f3 = stoi(xd.at(0)); lb3 = stoi(xd.at(1)); }
									else if (f4 == -1) { f4 = stoi(xd.at(0)); lb4 = stoi(xd.at(1)); }
									else if (f5 == -1) { f5 = stoi(xd.at(0)); lb5 = stoi(xd.at(1)); }
								}
							}
							int hh = f1, ll = 0;
							while (hh >= 256) {
								hh -= 256;
								ll++;
							}
							int noman = 10;
							int first = 15;
							if (f1 == -1) f1 = 0, noman -= 2;
							if (f2 == -1) f2 = 0, noman -= 2;
							if (f3 == -1) f3 = 0, noman -= 2;
							if (f4 == -1) f4 = 0, noman -= 2;
							if (f5 == -1) f5 = 0, noman -= 2;
							*(__int8*)(blc + 8) = 25;
							*(__int8*)(blc + 9) = block_.pr;
							*(__int8*)(blc + 10) = noman;
							*(__int8*)(blc + 14) = hh;
							*(__int8*)(blc + 15) = ll;
							*(__int8*)(blc + 18) = lb1;
							extra += 8;
							if (f2 != 0) {
								int hh = f2, ll = 0;
								while (hh >= 256) {
									hh -= 256;
									ll++;
								}
								*(__int8*)(blc + first + 7) = hh;
								*(__int8*)(blc + first + 8) = ll;
								*(__int8*)(blc + first + 11) = lb2;
								extra += 8;
							}
							if (f3 != 0) {
								int hhe = f3, lle = 0;
								while (hhe >= 256) {
									hhe -= 256;
									lle++;
								}
								*(__int8*)(blc + 30) = hhe; //28 + 7
								*(__int8*)(blc + 31) = lle; //29 + 8
								*(__int8*)(blc + 34) = lb3; //32 + 11
								extra += 8;
							}
							if (f4 != 0) {
								int hh = f4, ll = 0;
								while (hh >= 256) {
									hh -= 256;
									ll++;
								}
								*(__int8*)(blc + 38) = hh;
								*(__int8*)(blc + 38 + 1) = ll;
								*(__int8*)(blc + 38 + 4) = lb4;
								extra += 8;
							}
							if (f5 != 0) {
								int hh = f5, ll = 0;
								while (hh >= 256) {
									hh -= 256;
									ll++;
								}
								*(__int8*)(blc + 46) = hh;
								*(__int8*)(blc + 46 + 1) = ll;
								*(__int8*)(blc + 46 + 4) = lb5;
								extra += 8;
							}
						}
						else *(__int8*)(blc + 8) = 25;
						blc += 5 + extra + 1;
						total += 5 + extra + 1;
						break;
					}
					case BlockTypes::GIVING_TREE: {
						BYTE data_btype = 0x1C, zero = 0;
						uint8_t count = uint8_t(world_.blocks[i_].shelf_1);
						uint32_t times = uint32_t(world_.blocks[i_].planted - time(nullptr) <= 0 ? 14400 : 14400 - (world_.blocks[i_].planted - time(nullptr)));
						Memory_Set(blc + 8, 0, 7);
						Memory_Copy(blc, &world_.blocks[i_].fg, 2);
						Memory_Copy(blc + 4, &world_.blocks[i_].flags, 4);
						Memory_Copy(blc + 8, &data_btype, 1);
						Memory_Copy(blc + 8 + 1, &zero, 1);
						Memory_Copy(blc + 8 + 2, &times, 4);
						Memory_Copy(blc + 8 + 6, &count, 1);
						blc += 7;
						total += 7;
						break;
					}
					case BlockTypes::DISPLAY: {
						*(__int8*)(blc + 8) = 23;
						*(__int16*)(blc + 9) = world_.blocks[i_].id;
						blc += 5;
						total += 5;
						break;
					}
					case BlockTypes::PROVIDER: {
						*(__int8*)(blc + 8) = 9;
						*(__int32*)(blc + 9) = (time(nullptr) - world_.blocks[i_].planted <= items[world_.blocks[i_].fg].growTime ? time(nullptr) - world_.blocks[i_].planted : items[world_.blocks[i_].fg].growTime);
						blc += 5;
						total += 5;
						break;
					}
					case BlockTypes::RANDOM_BLOCK: {
						*(__int8*)(blc + 8) = 8;
						*(__int32*)(blc + 9) = world_.blocks[i_].roll;
						blc += 2;
						total += 2;
						break;
					}
					case BlockTypes::LOCK: {
						if (world_.blocks[i_].fg == 202 or world_.blocks[i_].fg == 204 or world_.blocks[i_].fg == 206 or world_.blocks[i_].fg == 4994 or world_.blocks[i_].fg == 10000) world_locks.push_back({ i_ % xSize, i_ / xSize });
						else pInfo(peer)->lock = world_.blocks[i_].fg;
						if (world_.blocks[i_].spin) *(int*)(blc + 4) = 0x00800000;
						*(__int8*)(blc + 8) = 3;
						uint8_t world_settings = world_.world_settings & SETTINGS::SETTINGS_5 ? (world_.world_settings & SETTINGS::SETTINGS_6 ? 12345 : 1234) : (world_.world_settings & SETTINGS::SETTINGS_6 ? 100 : 0);
						if (world_.world_settings & SETTINGS::SETTINGS_7 and world_.blocks[i_].fg == 4802) world_settings += 128;
						if (world_.blocks[i_].build_only and world_.blocks[i_].fg == 4994) world_settings |= 64;
						*(__int16*)(blc + 9) = world_settings;
						*(int*)(blc + 10) = (to_lower(world_.blocks[i_].owner_name) == to_lower(pInfo(peer)->tankIDName) || to_lower(world_.owner_name) == to_lower(pInfo(peer)->tankIDName) ? name_to_number(to_lower(pInfo(peer)->tankIDName)) : -1);
						*(int*)(blc + 18) = world_.music_bpm * -1;
						bool access = false;
						uint16_t count_of_admins = 1;
						{
							if (world_.blocks[i_].fg == 202 or world_.blocks[i_].fg == 204 or world_.blocks[i_].fg == 206 or world_.blocks[i_].fg == 4994 or world_.blocks[i_].fg == 10000) if (find(world_.blocks[i_].admins.begin(), world_.blocks[i_].admins.end(), user_name) != world_.blocks[i_].admins.end())access = true;
							if (access or (world_.owner_name != "" && find(world_.admins.begin(), world_.admins.end(), user_name) != world_.admins.end())) *(int*)(blc + 22) = name_to_number(to_lower(pInfo(peer)->tankIDName)), count_of_admins++;
						}
						*(__int8*)(blc + 14) = count_of_admins;
						if (world_.blocks[i_].fg == 5814 and world_.guild_id != 0) {
							uint32_t guild_id = world_.guild_id;
							vector<Guild>::iterator p = find_if(guilds.begin(), guilds.end(), [guild_id](const Guild& a) { return a.guild_id == guild_id; });
							if (p != guilds.end()) {
								Guild* guild_information = &guilds[p - guilds.begin()];
								Memory_Copy(blc + (count_of_admins == 1 ? 22 : 22 + ((count_of_admins - 1) * 4)) + 4, &guild_information->guild_mascot[0], 2);
								Memory_Copy(blc + (count_of_admins == 1 ? 22 : 22 + ((count_of_admins - 1) * 4)) + 6, &guild_information->guild_mascot[1], 2);
								Memory_Copy(blc + (count_of_admins == 1 ? 22 : 22 + ((count_of_admins - 1) * 4)) + 8, &guild_information->guild_level, 2);
								Memory_Copy(blc + (count_of_admins == 1 ? 22 : 22 + ((count_of_admins - 1) * 4)) + 12, &guild_information->unlocked_mascot, 1);
								blc += 26 + (count_of_admins * 4);
								total += 26 + (count_of_admins * 4);
							}
						}
						else {
							blc += 10 + (count_of_admins * 4);
							total += 10 + (count_of_admins * 4);
						}
						break;
					}
					case BlockTypes::MAIN_DOOR: {
						spawn_x = (i_ % xSize) * 32, spawn_y = (i_ / xSize) * 32;
						pInfo(peer)->c_x = spawn_x / 32;
						pInfo(peer)->c_y = spawn_y / 32;
						*(__int8*)(blc + 8) = 1;
						*(__int16*)(blc + 9) = 4;
						Memory_Copy(blc + 11, "EXIT", 4);
						blc += 8;
						total += 8;
						break;
					}
					case BlockTypes::SEED: {
						*(int*)(blc + 4) = 0 | 0x100000;
						*(__int8*)(blc + 8) = 4;
						*(int*)(blc + 9) = (time(nullptr) - world_.blocks[i_].planted <= items[world_.blocks[i_].fg].growTime ? time(nullptr) - world_.blocks[i_].planted : items[world_.blocks[i_].fg].growTime);
						*(__int16*)(blc + 13) = world_.blocks[i_].fruit;
						blc += 6;
						total += 6;
						break;
					}
					case BlockTypes::DONATION:case BlockTypes::MAILBOX: case BlockTypes::FOSSIL: {
						*(__int8*)(blc + 8) = 12;
						if (items[world_.blocks[i_].fg].blockType != BlockTypes::FOSSIL) {
							blc += 8;
							total += 8;
						}
						break;
					}
					case BlockTypes::BATTLE_CAGE: {
						BYTE btype = 0x24;
						int pet = world_.blocks[i_].battle_pet.first[0];
						string text = world_.blocks[i_].battle_pet.second;
						uint32_t length = uint32_t(text.length());
						Memory_Copy(blc + 8, &btype, 1);
						Memory_Copy(blc + 9, &length, 2);
						Memory_Copy(blc + 11, text.c_str(), length);
						Memory_Copy(blc + 11 + length, &pet, 4);
						blc += 15 + length;
						total += 15 + length;
						break;
					}
					case BlockTypes::DOOR: case BlockTypes::PORTAL: {
						string duru_tekstas = (world_.blocks[i_].txt.empty() ? (world_.blocks[i_].door_destination.empty() ? "" : (world_.blocks[i_].door_destination.find(":") != string::npos ? explode(":", world_.blocks[i_].door_destination)[0] + "..." : world_.blocks[i_].door_destination)) : world_.blocks[i_].txt);
						*(__int8*)(blc + 8) = 1;
						*(__int16*)(blc + 9) = duru_tekstas.size();
						Memory_Copy(blc + 11, duru_tekstas.c_str(), duru_tekstas.size());
						*(__int8*)(blc + 11 + duru_tekstas.size()) = (world_.blocks[i_].open or Role::Developer(peer) ? 0 : 0x08);
						blc += 4 + duru_tekstas.size();
						total += 4 + duru_tekstas.size();
						break;
					}
					case BlockTypes::SIGN: {
						*(__int8*)(blc + 8) = 2;
						*(int*)(blc + 9) = world_.blocks[i_].txt.size();
						Memory_Copy(blc + 11, world_.blocks[i_].txt.c_str(), world_.blocks[i_].txt.size());
						*(__int16*)(blc + 11 + world_.blocks[i_].txt.size()) = 0;
						blc += 7 + world_.blocks[i_].txt.size();
						total += 7 + world_.blocks[i_].txt.size();
						break;
					}
					}
				}
			}
			blc += 8;
		}
		blc += 12;
		*(int*)(blc) = world_.drop_new.size();
		*(int*)(blc + 4) = world_.total_drop_uid;
		blc += 8;
		for (int i_ = 0; i_ < world_.drop_new.size(); i_++) {
			*(__int16*)(blc) = world_.drop_new[i_][0];
			*(float*)(blc + 2) = world_.drop_new[i_][3];
			*(float*)(blc + 6) = world_.drop_new[i_][4];
			*(__int8*)(blc + 10) = world_.drop_new[i_][1];
			*(int*)(blc + 12) = world_.drop_new[i_][2];
			blc += 16;
		}
		enet_peer_send(peer, 0, enet_packet_create(data, total, ENET_PACKET_FLAG_RELIABLE));
		std::free(data);
		if (world_locks.size() > 0) {
			std::vector<World>::iterator p = find_if(worlds.begin(), worlds.end(), [name_](const World& a) { return a.name == name_; });
			if (p != worlds.end()) {
				World* world_pointer_ = &worlds[p - worlds.begin()];
				for (std::vector<unsigned int> sk_ : world_locks) {
					int l_x = sk_[0];
					int l_y = sk_[1];
					WorldBlock block_ = world_.blocks[l_x + (l_y * 100)];
					block_.owner_named = block_.owner_name;
					world_pointer_->blocks[l_x + (l_y * 100)].owner_named = block_.owner_named;
					world_.blocks[l_x + (l_y * 100)].owner_named = block_.owner_name;
					std::vector<std::vector<int>> locked_tiles_around_lock{};
					std::vector<int> new_tiles{};
					new_tiles.push_back(l_x + (l_y * 100));
					for (int i2 = 0; i2 < new_tiles.size(); i2++) {
						int s_x_ = new_tiles[i2] % 100, s_y_ = new_tiles[i2] / 100;
						if (s_x_ < (world_.max_x - 1) and world_.blocks[s_x_ + 1 + (s_y_ * 100)].locked and world_.blocks[s_x_ + 1 + (s_y_ * 100)].lock_origin == (l_x + (l_y * 100))) {
							if (not world_.blocks[s_x_ + 1 + (s_y_ * 100)].scanned) {
								world_.blocks[s_x_ + 1 + (s_y_ * 100)].scanned = true;
								new_tiles.push_back(s_x_ + 1 + (s_y_ * 100));
								locked_tiles_around_lock.push_back({ s_x_ + 1, s_y_ });
							}
						} if (s_x_ > 0 and world_.blocks[s_x_ - 1 + (s_y_ * 100)].locked and world_.blocks[s_x_ - 1 + (s_y_ * 100)].lock_origin == (l_x + (l_y * 100))) {
							if (not world_.blocks[s_x_ - 1 + (s_y_ * 100)].scanned) {
								world_.blocks[s_x_ - 1 + (s_y_ * 100)].scanned = true;
								new_tiles.push_back(s_x_ - 1 + (s_y_ * 100));
								locked_tiles_around_lock.push_back({ s_x_ - 1, s_y_ });
							}
						} if (s_y_ < (world_.max_y - 1) and world_.blocks[s_x_ + ((s_y_ + 1) * 100)].locked and world_.blocks[s_x_ + ((s_y_ + 1) * 100)].lock_origin == (l_x + (l_y * 100))) {
							if (not world_.blocks[s_x_ + ((s_y_ + 1) * 100)].scanned) {
								world_.blocks[s_x_ + ((s_y_ + 1) * 100)].scanned = true;
								new_tiles.push_back(s_x_ + ((s_y_ + 1) * 100));
								locked_tiles_around_lock.push_back({ s_x_, s_y_ + 1 });
							}
						} if (s_y_ > 0 and world_.blocks[s_x_ + ((s_y_ - 1) * 100)].locked and world_.blocks[s_x_ + ((s_y_ - 1) * 100)].lock_origin == (l_x + (l_y * 100))) {
							if (not world_.blocks[s_x_ + ((s_y_ - 1) * 100)].scanned) {
								world_.blocks[s_x_ + ((s_y_ - 1) * 100)].scanned = true;
								new_tiles.push_back(s_x_ + ((s_y_ - 1) * 100));
								locked_tiles_around_lock.push_back({ s_x_, s_y_ - 1 });
							}
						}
					}
					if (locked_tiles_around_lock.size() != 0) {
						PlayerMoving data_{};
						data_.packetType = 15, data_.punchX = l_x, data_.punchY = l_y, data_.characterState = 0x8;
						data_.netID = name_to_number(to_lower(block_.owner_name));
						data_.plantingTree = block_.fg;
						BYTE* raw;
						int alloc = alloc_(&world_, &block_);
						raw = packPlayerMoving(&data_, 112 + (locked_tiles_around_lock.size() * 2) + alloc);
						*(int*)(raw + 8) = locked_tiles_around_lock.size();
						*(__int8*)(raw + 12) = 8;
						BYTE* blc = raw + 56;
						for (int i_ = 0; i_ < locked_tiles_around_lock.size(); i_++) {
							std::vector<int> update_tiles = locked_tiles_around_lock[i_];
							int x = update_tiles[0];
							int y = update_tiles[1];
							int sq_ = x + (y * 100);
							*(int*)(blc + (i_ * 2)) = sq_;
							world_.blocks[x + (y * 100)].scanned = false;
						}
						send_raw(peer, 4, raw, 112 + (locked_tiles_around_lock.size() * 2) + alloc, ENET_PACKET_FLAG_RELIABLE);
						PlayerMoving data_2{};
						data_2.packetType = 5, data_2.punchX = l_x, data_2.punchY = l_y, data_2.characterState = 0x8;
						BYTE* raw2 = packPlayerMoving(&data_2, 112 + alloc);
						BYTE* blc2 = raw2 + 56;
						form_visual(blc2, block_, world_, peer, false);
						send_raw(peer, 4, raw2, 112 + alloc, ENET_PACKET_FLAG_RELIABLE);
						delete[] raw, blc, raw2, blc2;
					}
				}
			}
		}
		Attribute(peer, user_name, name_, world_, square, spawn_x, spawn_y, spawnas_x, spawnas_y, xSize, ySize, world_mods, door);
	}
	static void Process(ENetPeer* peer, World world_, std::string const& user_name, std::string const& name_, std::uint32_t const& square, int const& spawnas_x, int const& spawnas_y, bool door) {
		std::lock_guard<std::mutex> guard(pInfo(peer)->worldSecurity.loadAssetsMutex);
		Visual(peer, world_, user_name, name_, square, spawnas_x, spawnas_y, door);
		pInfo(peer)->worldSecurity.loadAssets = true;
	}
	static void Load(ENetPeer* peer, World world_, std::string const& user_name, std::string const& name_, std::uint32_t const& square, int const& spawnas_x, int const& spawnas_y, bool door) {
		bool loadRequired = false;
		{
			std::lock_guard<std::mutex> guard(pInfo(peer)->worldSecurity.loadAssetsMutex);
			loadRequired = !pInfo(peer)->worldSecurity.loadAssets;
		}
		if (loadRequired) {
			auto start = std::chrono::high_resolution_clock::now();
			std::thread t([&peer, &world_, &user_name, &name_, &square, &spawnas_x, &spawnas_y, &door]() {
				Process(peer, world_, user_name, name_, square, spawnas_x, spawnas_y, door);
				});
			t.join();
			auto end = std::chrono::high_resolution_clock::now();
			auto duration = std::chrono::duration_cast<std::chrono::milliseconds>(end - start);
		}
	}
};
void join_world(ENetPeer* peer, string& name_, int spawnas_x = 0, int spawnas_y = 0, int delay = 0, bool locked = false, bool door = false, bool not_found = false) {
	if (check_and_remove_temp_locked_world(name_)) {
		return cant_enter(peer, "The system is currently experiencing high loads and is not allowing server moves, please try again later.", door, delay);
	}
	if (name_.find("GROWMINES") != std::string::npos and not pInfo(peer)->In_World_Mining or name_.find("CLASHPARKOUR") != std::string::npos and not pInfo(peer)->In_World_Clash) {
		return cant_enter(peer, "`oThis world is in an unreachable dimension.", door, delay);
	}
	if (name_ == "LEGENDARYMOUNTAIN" && pInfo(peer)->lwiz_quest == 0) {
		if (not Role::Moderator(peer)) {
			return cant_enter(peer, "`oYou're not legendary enough for that mountain.", door, delay);
		}
	}
	if (not WinterFest.Active and name_ == "GROWCH") {
		if (not Role::Clist(pInfo(peer)->tankIDName)) {
			return cant_enter(peer, "We are now taking a break, goodbye see you next time.", door, delay);
		}
	}
	if (!Event()->Carnival and name_ == "CARNIVAL" and not Role::Moderator(peer)) {
		return cant_enter(peer, "We are now taking a break, goodbye see you next time.", door, delay);
	}
	if (!Event()->Halloween and name_ == "GROWGANOTH" and not Role::Moderator(peer)) {
		return cant_enter(peer, "`4They are in an unreachable dimension.", door, delay);
	}
	if (pInfo(peer)->AddressHasTrue == true and name_ == pInfo(peer)->AddressName) {
		VarList::OnAddNotification(peer, "`wThe name of this world has recently been changed!", "interface/large/jump_icon.rttex", "audio/gate_close.wav");
		pInfo(peer)->AddressHasTrue = false;
		pInfo(peer)->AddressName = "";
	}
	pInfo(peer)->x = -1, pInfo(peer)->y = -1;
	pInfo(peer)->last_x = -1, pInfo(peer)->last_y = -1;
	pInfo(peer)->onetimecollect = true;
	pInfo(peer)->collect_allowed = false;
	pInfo(peer)->collect_total = 0;
	if (not door) {
		if (pInfo(peer)->spotlight) {
			pInfo(peer)->spotlight = false;
			VisualHandle::State(pInfo(peer));
		}
		pInfo(peer)->cheater_settings &= ~SETTINGS::SETTINGS_0;
		if (pInfo(peer)->world_time + 1500 > (duration_cast<milliseconds>(system_clock::now().time_since_epoch())).count()) {
			if (pInfo(peer)->world.empty()) {
				VarList::OnFailedToEnterWorld(peer);
			}
			return;
		}
		pInfo(peer)->world_time = (duration_cast<milliseconds>(system_clock::now().time_since_epoch())).count();
		if (Environment()->World_Time + 4000 < (duration_cast<milliseconds>(system_clock::now().time_since_epoch())).count()) {
			Environment()->Enter_Count = 0;
			Environment()->World_Time = (duration_cast<milliseconds>(system_clock::now().time_since_epoch())).count();
		}
		else Environment()->Enter_Count++;
		if (Environment()->Enter_Count > 20) {
			if (pInfo(peer)->world.empty()) {
				return cant_enter(peer, "The system is currently experiencing high loads and is not allowing server moves, please try again later.", door, delay);
			}
			return;
		}
	}
	if (Playmods::HasById(pInfo(peer), 139)) {
		name_ = "HELL";
	}
	if (not pInfo(peer)->In_World_Mining) {
		if (not check_name(name_)) {
			return cant_enter(peer, name_, door, delay);
		}
	}
	bool dont_add = false;
	if (name_ == "MINING" and not door) VarList::OnDialogRequest(peer, SetColor(peer) + "set_default_color|`o\nadd_custom_button|section|image:interface/large/tianvan/newsection.rttex;image_size:1024,256;width:1.0;frame:0,0;state:disabled|\nadd_custom_label|`bWELCOME TO MINING INSTRUCTIONS|target:section;top:0.13;left:0.50;size:big|\nadd_custom_label|`bBefore starting mining you have to read the instructions first!|target:section;top:0.23;left:0.50;size:small|\nadd_custom_label|`b1. Master Zhang `e(MINING INSTRUCTIONS)|target:section;top:0.43;left:0.50;size:small|\nadd_custom_label|`b2. Wagner `e(FORGING PICKAXE & SHOP)  |target:section;top:0.59;left:0.50;size:small|\nadd_custom_label|`b3. Albert `e(EXCHANGE PLACE)                    |target:section;top:0.75;left:0.50;size:small|\nadd_custom_label|`b@" + Environment()->server_name + " Team|target:section;top:0.88;left:0.85;size:small|\nadd_custom_button||icon:14512;state:disabled;color:255,255,255,255;anchor:section;top:0.35;left:0.200;width:0.100;width:0.150;display:inline_free;|\nadd_custom_button||icon:14510;state:disabled;color:255,255,255,255;anchor:section;top:0.50;left:0.200;width:0.100;width:0.150;display:inline_free;|\nadd_custom_button||icon:14514;state:disabled;color:255,255,255,255;anchor:section;top:0.65;left:0.200;width:0.100;width:0.150;display:inline_free;|\nadd_custom_margin|x:180;y:0|\nadd_custom_button|NEXT|image:interface/tutorial/taptocontinue.rttex;image_size:382,53;width:0.35;min_width:100;|\nend_dialog|Miner_License|||", 1500);
	if (name_ == "WW1" || name_ == "WW2" || name_ == "WW3" || name_ == "WW4" || name_ == "WW5" || name_ == "WW6" || name_ == "WW7") {
		if (pInfo(peer)->wolf_world == name_) {
			for (int i_ = 0; i_ < pInfo(peer)->playmods.size(); i_++) {
				if (pInfo(peer)->playmods[i_].id == 128) {
					int times_ = pInfo(peer)->playmods[i_].time - time(nullptr);
					VarList::OnSetMissionTimer(peer, times_, 400);
					VarList::OnTalkBubble(peer, pInfo(peer)->netID, "Welcome to `2Wolf World!``. I will give you `210`` minutes to finish this world..", 0, 1, 400);
					dont_add = true;
					break;
				}
			}
		}
		else if (not pInfo(peer)->wolf_world.empty()) return cant_enter(peer, "Your must enter Wolf World `2" + pInfo(peer)->wolf_world + "``!", door, delay);
		if (dont_add == false) {
			if (Role::Developer(peer));
			else return cant_enter(peer, "You must consume Wolf Whistle to ENTER!", door, delay);
		}
	}
	World world_ = get_world(name_);
	string owner_name = to_lower(world_.owner_name), user_name = to_lower(pInfo(peer)->tankIDName);
	std::uint32_t square = world_.blocks.size();
	if (world_.world_settings & SETTINGS::SETTINGS_12 && owner_name != user_name) {
		pInfo(peer)->disable_cheater = 1;
		Clothing_V2::Update_Value(peer);
	}
	else pInfo(peer)->disable_cheater = 0;
	if (world_.name != pInfo(peer)->world) {
		if (world_.drop_new.size() > 160000) {
			return cant_enter(peer, "Sub-server 7 is currently experiencing high load. Please try again in 30 seconds, hopefully loading balancing will fix it.", door, delay, world_.name);
		}
		if (not world_.nuked_by.empty() && not Role::Moderator(peer)) return cant_enter(peer, "That world is inaccessible.", door, delay, world_.name);
		if (pInfo(peer)->level < world_.entry_level and (to_lower(world_.owner_name) != to_lower(pInfo(peer)->tankIDName) and not Role::Moderator(peer))) {
			if (!guild_access(peer, world_.guild_id) and find(world_.admins.begin(), world_.admins.end(), user_name) == world_.admins.end()) return cant_enter(peer, "Players lower than level " + to_string(world_.entry_level) + " can't enter " + world_.name + ".", door, delay, world_.name);
		}
		for (pair<string, long long int> p : world_.bannedPlayers) {
			if (p.first == to_lower(pInfo(peer)->tankIDName)) if (p.second + (3600 * 1000) > (duration_cast<milliseconds>(system_clock::now().time_since_epoch())).count()) return cant_enter(peer, "`4Oh no!`` You've been banned from that world by its owner! Try again later after the world ban wears off.", door, delay, world_.name);
		}
		if (pInfo(peer)->pet_type != -1) pInfo(peer)->pet_ClothesUpdated = false;
		if (name_ != "HELL" && ServerPool::PlayerCountWorld(world_.name) >= 50 and not Role::Administrator(peer) and not Role::Moderator(peer)) return cant_enter(peer, "Oops, `5" + world_.name + "`` already has `450`` people in it. Try again later.", door, delay, world_.name);
		pInfo(peer)->update = true;
		pInfo(peer)->updated_clothes = true;
	}
	else {
		if (door) {
			VarList::OnSetFreezeState(peer, pInfo(peer)->netID, delay, 1);
			if (not_found) {
				int found_door = 0;
				std::vector<WorldBlock>::iterator p = find_if(world_.blocks.begin(), world_.blocks.end(), [&](const WorldBlock& a) { return a.fg == 6; });
				if (p != world_.blocks.end()) {
					found_door = p - world_.blocks.begin();
					VarList::OnSetPos(peer, found_door % 100 * 32, found_door / 100 * 32, delay);
				}
			}
			else {
				if (not locked) {
					VarList::OnSetPos(peer, spawnas_x * 32, spawnas_y * 32, delay);
					if (not pInfo(peer)->invis) {
						CAction::Positioned(peer, pInfo(peer)->netID, "audio/door_open.wav", delay);
					}
				}
				else if (locked) {
					VarList::OnTalkBubble(peer, pInfo(peer)->netID, "The door is locked.", 0, 0, delay);
				}
			}
			VarList::OnZoomCamera(peer, delay);
			VarList::OnSetFreezeState(peer, pInfo(peer)->netID, delay, 0);
		}
		else {
			if (spawnas_x != 0 && spawnas_y != 0) VarList::OnSetPos(peer, spawnas_x * 32, spawnas_y * 32, delay);
			else VarList::OnSetPos(peer, pInfo(peer)->c_x * 32, pInfo(peer)->c_y * 32, delay);
		}
		return;
	}
	pInfo(peer)->worldSecurity.loadAssets = false;
	WorldAttribute::Load(peer, world_, user_name, name_, square, spawnas_x, spawnas_y, door);
}
ENetPeer* get_clicked_on(World* world_, int x_, int y_) {
	for (ENetPeer* cp_ = server->peers; cp_ < &server->peers[server->peerCount]; ++cp_) {
		if (cp_->state != ENET_PEER_STATE_CONNECTED or cp_->data == NULL or pInfo(cp_)->world != world_->name or pInfo(cp_)->ghost) continue;
		if (y_ == pInfo(cp_)->y / 32) {
			if (pInfo(cp_)->state == 0 and x_ * 32 < pInfo(cp_)->x and abs(x_ * 32 - pInfo(cp_)->x) < 32 or pInfo(cp_)->state == 16 and abs(x_ * 32 - pInfo(cp_)->x) < 32 or pInfo(cp_)->state != 16 and abs(x_ * 32 - pInfo(cp_)->x) < 20) {
				return cp_;
			}
		}
	}
	return NULL;
}
string return_last_online(string player_) {
	string times_ = "";
	for (ENetPeer* cp_ = server->peers; cp_ < &server->peers[server->peerCount]; ++cp_) {
		if (cp_->state != ENET_PEER_STATE_CONNECTED or cp_->data == NULL) continue;
		if (to_lower(pInfo(cp_)->tankIDName) == to_lower(player_)) {
			times_ = pInfo(cp_)->last_online;
			break;
		}
	}
	if (times_.empty()) {
		std::string filePath = "database/players/" + player_ + "_.json";
		if (std::filesystem::exists(filePath)) {
			std::ifstream file(filePath);
			if (!file.is_open()) {
				Logger::Info("ERROR", "File tidak dapat dibuka! : " + filePath);
				return "";
			}
			if (file.peek() == std::ifstream::traits_type::eof()) {
				Logger::Info("ERROR", "JSON file has corrupted : " + filePath);
				return "";
			}
			try {
				nlohmann::json j;
				file >> j;
				file.close();
				times_ = j["lo"].get<string>();
			}
			catch (const json::parse_error& e) {
				std::cerr << "Error saat parsing JSON: " << e.what() << std::endl;
				return "";
			}
			catch (const std::exception& e) {
				std::cerr << "Terjadi kesalahan: " << e.what() << std::endl;
				return "";
			}
		}
		else {
			Logger::Info("ERROR", "JSON file not found at : " + filePath);
			return "";
		}
	}
	if (times_.empty()) return to_string(100 + rand() % 50);
	long long time_ = time(nullptr);
	replace_str(times_, "\n", "|"), replace_str(times_, "/", "|"), replace_str(times_, ":", "|"), replace_str(times_, " ", "|");
	vector<string> a_ = explode("|", times_);
	time_t rawtime;
	struct tm* timeinfo;
	int year = atoi(a_[2].c_str()), month = atoi(a_[0].c_str()), day = atoi(a_[1].c_str()), hour = atoi(a_[3].c_str()), min = atoi(a_[4].c_str()), sec = atoi(a_[5].c_str());
	if (year == 123) year = 2023;
	time(&rawtime);
	struct tm local_timeinfo;
#ifdef _WIN32
	localtime_s(&local_timeinfo, &rawtime);
#elif defined(__linux__)
	localtime_r(&rawtime, &local_timeinfo);
#endif
	timeinfo = &local_timeinfo;
	timeinfo->tm_year = year - 1900;
	timeinfo->tm_mon = month - 1;    //months since January - [0,11]
	timeinfo->tm_mday = day;          //day of the month - [1,31] 
	timeinfo->tm_hour = hour;         //hours since midnight - [0,23]
	timeinfo->tm_min = min;          //minutes after the hour - [0,59]
	timeinfo->tm_sec = sec;          //seconds after the minute - [0,59]
	string days = Time::Playmod(time_ - mktime(timeinfo), true);
	if (time_ - mktime(timeinfo) < 0) return "1";
	else  return days;
}
string form_mods(Player* p_, int text) {
	string t_ = "";
	vector<string> player_playmods;
	long long time_ = time(nullptr);
	vector<string> added_{};
	for (PlayMods peer_playmod : p_->playmods) {
		string playmod_name = info_about_playmods[peer_playmod.id - 1][3];
		if (find(added_.begin(), added_.end(), playmod_name) == added_.end()) {
			if (playmod_name.find("Subscription") != string::npos or playmod_name.find("Recently Pet Name-Changed") != string::npos) continue;
			added_.push_back(playmod_name);
			if (peer_playmod.time - time_ >= 1) {
				t_ += (text == 0 ? "\nadd_label_with_icon|small|`w" + playmod_name + "`` (`w" + Time::Playmod(peer_playmod.time - time_) + "`` left)``|left|" + info_about_playmods[peer_playmod.id - 1][6] + "|" : "\n`w" + playmod_name + "``");
			}
		}
	}
	player_playmods.push_back(items[p_->hair].playmod), player_playmods.push_back(to_string(p_->hair));
	player_playmods.push_back(items[p_->shirt].playmod), player_playmods.push_back(to_string(p_->shirt));
	player_playmods.push_back(items[p_->pants].playmod), player_playmods.push_back(to_string(p_->pants));
	player_playmods.push_back(items[p_->feet].playmod), player_playmods.push_back(to_string(p_->feet));
	player_playmods.push_back(items[p_->face].playmod), player_playmods.push_back(to_string(p_->face));
	player_playmods.push_back(items[p_->hand].playmod), player_playmods.push_back(to_string(p_->hand));
	player_playmods.push_back(items[p_->back].playmod), player_playmods.push_back(to_string(p_->back));
	player_playmods.push_back(items[p_->mask].playmod), player_playmods.push_back(to_string(p_->mask));
	player_playmods.push_back(items[p_->necklace].playmod), player_playmods.push_back(to_string(p_->necklace));
	player_playmods.push_back(items[p_->ances].playmod), player_playmods.push_back(to_string(p_->ances));
	if (p_->gp) player_playmods.push_back("Grow Pass"), player_playmods.push_back("11304");
	if (p_->ghost) player_playmods.push_back("Ghost in the Shell"), player_playmods.push_back("290");
	if (p_->b_s != 0) player_playmods.push_back("Duct Tape"), player_playmods.push_back("408");
	if (p_->show_pets) player_playmods.push_back("Pet Ai: " + a + (p_->pet_ID == 9502 ? "`4@Liyue HTouFly" : p_->pet_ID == 9504 ? "`e@Abyss Mage Fly" : "`b@Legendary Uuuzz Fly")), player_playmods.push_back(to_string(p_->pet_ID));
	if (p_->hand == 2286 or p_->hand == 2560) player_playmods.push_back("Charging " + items[p_->hand].ori_name + "`` (" + to_string(p_->geiger_) + "%)"), player_playmods.push_back(""+to_string(p_->hand) + "");
	if (p_->spotlight) player_playmods.push_back("In the Spotlight"), player_playmods.push_back("2646");
	if (p_->cheater_settings & SETTINGS::SETTINGS_0) player_playmods.push_back("`wCheat Active: Autofarm Ĝ -> " + items[p_->last_used_block].ori_name + " ````"), player_playmods.push_back("18");
	if (p_->Role.BOOST and p_->Role.BOOST_TIME != 0) player_playmods.push_back("`5[BOOST]`` 2x Gems (" + Time::Event(p_->Role.BOOST_TIME - time(nullptr)) + " `$left``)"), player_playmods.push_back("15046");
	if (p_->Role.SUPER_BOOST and p_->Role.SUPER_BOOST_TIME != 0) player_playmods.push_back("`8[SUPER-BOOST]`` 4x Gems (" + Time::Event(p_->Role.SUPER_BOOST_TIME - time(nullptr)) + " `$left``)"), player_playmods.push_back("15050");
	if (WinterFest.Active) {
		if (p_->winter_power) player_playmods.push_back("Double-Jump + Slow-Fail: Royal Winter Power!"), player_playmods.push_back("9186");
	}
	int active = 0;
	for (int i_ = 0; i_ < player_playmods.size(); i_++) {
		if (player_playmods[i_].empty() or isdigit(player_playmods[i_][0])) continue;
		t_ += (text == 0 ? "\nadd_label_with_icon|small|`w" + player_playmods[i_] + "``|left|" + player_playmods[i_ + 1] + "|" : "\n`w" + player_playmods[i_] + "``");
		active++;
	}
	std::string name_ = p_->world;
	std::vector<World>::iterator p = find_if(worlds.begin(), worlds.end(), [name_](const World& a) { return a.name == name_; });
	if (p != worlds.end()) {
		World* world_ = &worlds[p - worlds.begin()];
		if (world_->xenonite) {
			t_ += "\nadd_label_with_icon|small|`wXenonite|left|2072|";
		}
	}
	if (t_.empty()) t_ = "";
	else
		if (text == 0) t_ = "\nadd_textbox|`wActive effects:``|left|\nadd_label_with_icon|small|" + t_;
		else t_ = "\n" + to_string(active) + " mods active:" + t_;
	return t_;
}
void gems_(ENetPeer* peer, World* world_, int c_, int x_, int y_, int from) {
	if (from == 5136 || from == 9386 || from == 9400 || from == 9902 || from == 9600 || from == 10716) return;
	bool doubled = false;
	if (peer != NULL) {
		if (rand() % 10 < 4) {
			if (Playmods::HasById(pInfo(peer), 113) || pInfo(peer)->hand == 10930) {
				if (rand() % 100 < 10) c_++, doubled = true;
			}
			if (Playmods::HasByName(pInfo(peer), "Extra Wealth") && rand() % 5 + 1 == 5) {
				c_ = ((items[pInfo(peer)->ances].chance + 100) * c_) / 100;
				PlayerMoving data_{};
				data_.packetType = 17, data_.netID = 29, data_.YSpeed = 29, data_.x = pInfo(peer)->x + 16, data_.y = pInfo(peer)->y + 16;
				BYTE* raw = packPlayerMoving(&data_);
				for (ENetPeer* cp_ = server->peers; cp_ < &server->peers[server->peerCount]; ++cp_) {
					if (cp_->state != ENET_PEER_STATE_CONNECTED or cp_->data == NULL) continue;
					if (pInfo(cp_)->world == world_->name) {
						send_raw(cp_, 4, raw, 56, ENET_PACKET_FLAG_RELIABLE);
					}
				}
				delete[] raw;
				doubled = true;
			}
			if (from % 2 == 0) {
				if (pInfo(peer)->lock == 2408) {
					if (rand() % 50 < 1) {
						c_ += 2;
						PlayerMoving data_{};
						data_.packetType = 17, data_.netID = 125, data_.YSpeed = 125, data_.x = x_ + 16, data_.y = y_ + 16;
						BYTE* raw = packPlayerMoving(&data_);
						for (ENetPeer* cp_ = server->peers; cp_ < &server->peers[server->peerCount]; ++cp_) {
							if (cp_->state != ENET_PEER_STATE_CONNECTED or cp_->data == NULL) continue;
							if (pInfo(cp_)->world == world_->name) send_raw(cp_, 4, raw, 56, ENET_PACKET_FLAG_RELIABLE);
						}
						delete[] raw;
					}
				}
			}
			if (doubled) c_ *= 2;
		}
	}
	if (from == 5196) c_ *= 1.13;
	if (c_ > 300) c_ = 300;
	c_ *= (Event()->Gems_Event ? Event()->X_Gems : 1);
	if (peer != NULL) {
		for (int i_2 = 0; i_2 < EditItem.size(); i_2++) {
			if (EditItem[i_2].ID == pInfo(peer)->hand or EditItem[i_2].ID == pInfo(peer)->necklace or EditItem[i_2].ID == pInfo(peer)->pants or EditItem[i_2].ID == pInfo(peer)->shirt or EditItem[i_2].ID == pInfo(peer)->face or EditItem[i_2].ID == pInfo(peer)->mask or EditItem[i_2].ID == pInfo(peer)->hair or EditItem[i_2].ID == pInfo(peer)->feet or EditItem[i_2].ID == pInfo(peer)->back) {
				if (EditItem[i_2].Gems != 0) c_ *= EditItem[i_2].Gems;
			}
		}
		if (pInfo(peer)->lock == 5980) c_ *= (world_->gems > 0 ? world_->gems : 1);
		if (Playmods::HasById(pInfo(peer), 149) and rand() % 50 < 2) {/*Guild Potion: Gems*/
			c_ *= 1.05;
		}
		if (pInfo(peer)->Role.BOOST and pInfo(peer)->Role.BOOST_TIME != 0 and rand() % 50 < 1) c_ *= 2;
		if (pInfo(peer)->Role.SUPER_BOOST and pInfo(peer)->Role.SUPER_BOOST_TIME != 0 and rand() % 50 < 1) c_ *= 4;
		if (pInfo(peer)->show_pets and pInfo(peer)->ability_xgems != 0 and rand() % 100 < 1) c_ *= rand() % pInfo(peer)->ability_xgems + 1;
		if ((pInfo(peer)->cheater_settings & SETTINGS::SETTINGS_6 && pInfo(peer)->disable_cheater == 0)) {
			if (pInfo(peer)->gems >= MAX_GEMS) {
				VarList::OnTalkBubble(peer, pInfo(peer)->netID, "Warning! Your gems have reached the maximum limit", 0, 0);
			}
			else {
				VarList::OnBuxGems(peer, c_);
				gamepacket_t p1;
				p1.Insert("OnTalkBubble");
				p1.Insert(pInfo(peer)->netID);
				p1.Insert("ė`c" + Set_Count(c_));
				p1.CreatePacket(peer);
				return;
			}
		}
	}
	int black_gems = c_ / 1000;
	if (black_gems != 0) c_ = c_ - (black_gems * 1000);
	int purple_ = c_ >= 100 ? c_ / 100 : 0, green_ = c_ - (purple_ * 100) >= 50 ? (c_ - (purple_ * 100)) / 50 : 0, red_ = c_ - (purple_ * 100) - (green_ * 50) >= 10 ? (c_ - (purple_ * 100) - (green_ * 50)) / 10 : 0, blue_ = c_ - (green_ * 50) - (purple_ * 100) - (red_ * 10) >= 5 ? (c_ - (green_ * 50) - (purple_ * 100) - (red_ * 10)) / 5 : 0, yellow_ = c_ - (red_ * 10) - (green_ * 50) - (purple_ * 100) - (blue_ * 5) > 0 ? (c_ - (red_ * 10) - (green_ * 50) - (purple_ * 100) - (blue_ * 5)) / 1 : 0;
	WorldDrop item_{};
	if (black_gems != 0) {
		item_.id = 4490;
		item_.count = black_gems;
		item_.x = x_ + rand() % 17, item_.y = y_ + rand() % 17;
		VisualHandle::Drop(world_, item_);
	}
	item_.id = 112;
	item_.count = 100;
	for (int i_ = 0; i_ < purple_; i_++) {
		item_.x = x_ + rand() % 17, item_.y = y_ + rand() % 17;
		VisualHandle::Drop(world_, item_);
	}
	item_.count = 50;
	for (int i_ = 0; i_ < green_; i_++) {
		item_.x = x_ + rand() % 17, item_.y = y_ + rand() % 17;
		VisualHandle::Drop(world_, item_);
	}
	item_.count = 10;
	for (int i_ = 0; i_ < red_; i_++) {
		item_.x = x_ + rand() % 17, item_.y = y_ + rand() % 17;
		VisualHandle::Drop(world_, item_);
	}
	item_.count = 5;
	for (int i_ = 0; i_ < blue_; i_++) {
		item_.x = x_ + rand() % 17, item_.y = y_ + rand() % 17;
		VisualHandle::Drop(world_, item_);
	}
	item_.count = 1;
	for (int i_ = 0; i_ < yellow_; i_++) {
		item_.x = x_ + rand() % 17, item_.y = y_ + rand() % 17;
		VisualHandle::Drop(world_, item_);
	}
}
void change_guild_name(ENetPeer* peer, string error = "", bool errors = false) {
	if (Inventory::Contains(peer, 7190) == 0) return;
	uint32_t guild_id = pInfo(peer)->guild_id;
	if (guild_id == 0) {
		gamepacket_t p2;
		p2.Insert("OnTalkBubble"), p2.Insert(pInfo(peer)->netID), p2.Insert("You must own a guild to change name!"), p2.Insert(1), p2.Insert(1), p2.CreatePacket(peer);
		return;
	}
	vector<Guild>::iterator p = find_if(guilds.begin(), guilds.end(), [guild_id](const Guild& a) { return a.guild_id == guild_id; });
	if (p != guilds.end()) {
		Guild* guild_information = &guilds[p - guilds.begin()];
		guild_information->guild_settings &= ~SETTINGS::SETTINGS_0;
		guild_information->guild_settings |= SETTINGS::SETTINGS_0;
		for (GuildMember member_search : guild_information->guild_members) {
			if (to_lower(member_search.member_name) == to_lower(pInfo(peer)->tankIDName)) {
				if (member_search.role_id == 3) {
					gamepacket_t p;
					p.Insert("OnDialogRequest");
					if (error.empty() || errors) {
						p.Insert("set_default_color|`o\nadd_label_with_icon|big|`wChange Guild Name``|left|5814|\nadd_textbox|Current Guild Name:" + guild_information->guild_name + "|left|" + (errors ? "\nadd_textbox|" + error + "|left|" : "") + "\nadd_text_input|name|Guild Name:||32|\nadd_spacer|small|\nend_dialog|change_guild_name|Cancel|Confirm|");
					}
					else {
						string path_ = "database/guilds/" + guild_information->guild_name + ".json";
						remove(path_.c_str());
						guild_information->guild_name = error;
						save_guilds();
						int got = -1;
						Inventory::Modify(peer, 7190, got);
						string guild_info = get_guild_info(peer);
						if (guild_info == "set_default_color|`o\nadd_label_with_icon|big|`wGrow Guild ``|left|5814|\nadd_textbox|Something went wrong!|left|\nend_dialog|guildalreadyjoined|Close||") set_Guilds(peer);
						p.Insert(guild_info);
						{
							gamepacket_t p_leave;
							p_leave.Insert("OnConsoleMessage");
							p_leave.Insert("`5[GUILD ALERT]`` " + pInfo(peer)->tankIDName + " changed guild name to " + error + "!");
							for (ENetPeer* cp_ = server->peers; cp_ < &server->peers[server->peerCount]; ++cp_) {
								if (cp_->state != ENET_PEER_STATE_CONNECTED or cp_->data == NULL) continue;
								if (pInfo(cp_)->guild_id == guild_id) {
									p_leave.CreatePacket(cp_);
								}
							}
						}
					}
					p.CreatePacket(peer);
				}
				else error = "ownership", errors = false;
			}
		}
	}
	if (error == "ownership" && errors == false) {
		gamepacket_t p2;
		p2.Insert("OnTalkBubble"), p2.Insert(pInfo(peer)->netID), p2.Insert("You must own the guild to change name!"), p2.Insert(1), p2.Insert(1), p2.CreatePacket(peer);
	}
}
void update_guild_name(ENetPeer* peer, string guild_world, World* world_) {
	uint32_t guild_id = pInfo(peer)->guild_id;
	Clothing_V2::Update_Value(peer, true);
	uint32_t my_role = pInfo(peer)->guild_role;
	if (pInfo(peer)->world == guild_world and not guild_world.empty()) {
		if (to_lower(world_->owner_name) == to_lower(pInfo(peer)->tankIDName)) {
			if (not Role::Moderator(peer)) pInfo(peer)->name_color = "`2";
		}
		else if (not guild_access(peer, guild_id) and find(world_->admins.begin(), world_->admins.end(), to_lower(pInfo(peer)->tankIDName)) == world_->admins.end()) {
			if (not Role::Moderator(peer)) pInfo(peer)->name_color = "`0";
		}
		else {
			if (not Role::Moderator(peer)) pInfo(peer)->name_color = "`^";
		}
		Clothing_V2::Update(peer);
		VisualHandle::Nick(peer, NULL);
		return;
	}
}
void update_world(ENetPeer* peer, World* world_, string newName, string worldName) {
	if (world_->owner_name.empty() or world_->owner_name == pInfo(peer)->tankIDName) return;
	int lock_id = 0, lock_x = -1, lock_y = -1;
	int ySize = (int)world_->blocks.size() / 100, xSize = (int)world_->blocks.size() / ySize;
	for (int i_ = 0; i_ < world_->blocks.size(); i_++) {
		if (items[world_->blocks[i_].fg].blockType == BlockTypes::LOCK) {
			if (world_->blocks[i_].fg == 202 || world_->blocks[i_].fg == 204 || world_->blocks[i_].fg == 206 || world_->blocks[i_].fg == 4994) {
				world_->blocks[i_].owner_name = newName;
			}
		}
	}
	world_->owner_name = newName;
	if (pInfo(peer)->name_color != "`0" or Role::Moderator(peer) || Role::Administrator(peer) && pInfo(peer)->name_color != "`2")  world_->owner_named = pInfo(peer)->name_color + pInfo(peer)->tankIDName;
	else world_->owner_named = pInfo(peer)->tankIDName;
	save_world(worldName, false);
}
void transfer_world(World* world_, ENetPeer* from_, ENetPeer* to_) {
	if (world_->owner_name.empty()) return;
	int lock_id = 0, lock_x = -1, lock_y = -1;
	int ySize = (int)world_->blocks.size() / 100, xSize = (int)world_->blocks.size() / ySize;
	for (int i_ = 0; i_ < world_->blocks.size(); i_++) {
		if (items[world_->blocks[i_].fg].blockType == BlockTypes::LOCK) {
			if (world_->blocks[i_].fg == 202 || world_->blocks[i_].fg == 204 || world_->blocks[i_].fg == 206 || world_->blocks[i_].fg == 4994) continue;
			uint32_t id_ = world_->blocks[i_].fg;
			lock_id = id_, lock_x = i_ % xSize, lock_y = i_ / xSize;
			break;
		}
	}
	if (lock_id == 0) return;
	if (world_->guild_id != 0) {
		uint32_t guild_id = world_->guild_id;
		vector<Guild>::iterator p = find_if(guilds.begin(), guilds.end(), [guild_id](const Guild& a) { return a.guild_id == guild_id; });
		if (p != guilds.end()) {
			Guild* guild_information = &guilds[p - guilds.begin()];
			uint32_t my_rank = 0;
			for (GuildMember member_search : guild_information->guild_members) {
				if (member_search.member_name == pInfo(from_)->tankIDName) {
					my_rank = member_search.role_id;
					break;
				}
			}
			if (my_rank < 3 || pInfo(from_)->guild_id != world_->guild_id || pInfo(to_)->guild_id != 0) {
				cancel_trade(from_, false);
				return;
			}
			if (pInfo(from_)->tankIDName == world_->owner_name) {
				pInfo(from_)->worlds_owned.erase(remove(pInfo(from_)->worlds_owned.begin(), pInfo(from_)->worlds_owned.end(), world_->name), pInfo(from_)->worlds_owned.end());
			}
			else {
				bool on_ = false;
				for (ENetPeer* cp_ = server->peers; cp_ < &server->peers[server->peerCount]; ++cp_) {
					if (cp_->state != ENET_PEER_STATE_CONNECTED or cp_->data == NULL) continue;
					if (pInfo(cp_)->tankIDName == world_->owner_name) {
						pInfo(cp_)->worlds_owned.erase(remove(pInfo(cp_)->worlds_owned.begin(), pInfo(cp_)->worlds_owned.end(), world_->name), pInfo(cp_)->worlds_owned.end());
						on_ = true;
						break;
					}
				}
				if (not on_) {
					try {
						string path_ = "database/players/" + world_->owner_name + "_.json";
						if (_access_s(path_.c_str(), 0) == 0) {
							json r_;
							std::ifstream f_(path_, ifstream::binary);
							if (f_.fail()) {
								return;
							}
							f_ >> r_;
							f_.close();
							try {
								json f_ = r_["worlds_owned"].get<json>();
								for (int i_ = 0; i_ < f_.size(); i_++) {
									if (f_[i_]["name"] == world_->name) {
										f_.erase(f_.begin() + i_);
										break;
									}
								}
								r_["worlds_owned"] = f_;
							}
							catch (exception) {
								return;
							}
							{
								std::ofstream f_(path_, ifstream::binary);
								f_ << r_;
								f_.close();
							}
						}
					}
					catch (exception) {

					}
				}
			}
			string before_name = world_->owner_name;
			world_->owner_name = pInfo(to_)->tankIDName;
			if (pInfo(to_)->name_color != "`0" or Role::Moderator(to_) || Role::Administrator(to_) && pInfo(to_)->name_color != "`2")  world_->owner_named = pInfo(to_)->name_color + pInfo(to_)->tankIDName;
			else world_->owner_named = pInfo(to_)->tankIDName;
			pInfo(to_)->worlds_owned.push_back(world_->name);
			PlayerMoving data_{};
			data_.packetType = 15, data_.punchX = lock_x, data_.punchY = lock_y, data_.characterState = 0x8;
			data_.netID = pInfo(to_)->id;
			data_.plantingTree = lock_id;
			BYTE* raw = packPlayerMoving(&data_, 56);
			Clothing_V2::Update(to_);
			Clothing_V2::Update(from_);
			for (int i_ = 0; i_ < guild_information->guild_members.size(); i_++) {
				GuildMember* edit_member = &guild_information->guild_members[i_];
				if (edit_member->member_name == before_name) edit_member->role_id = 2;
			}
			GuildMember new_member{};
			new_member.member_name = pInfo(to_)->tankIDName;
			pInfo(to_)->guild_id = guild_information->guild_id;
			new_member.role_id = 3;
			new_member.last_online = time(NULL);
			guild_information->guild_members.push_back(new_member);
			guild_information->guild_settings &= ~SETTINGS::SETTINGS_0;
			guild_information->guild_settings |= SETTINGS::SETTINGS_0;
			ServerPool::SaveDatabase::Players(pInfo(to_), false); save_guilds();
			VarList::OnAddNotification(to_, "You have been promoted to Leader", "interface/large/gd_prom.rttex", "audio/levelup2.wav");
			VarList::OnAddNotification(from_, "You have been demoted to Co-Leader", "interface/large/gd_prom.rttex", "audio/levelup2.wav");
			int x_ = 0, y_ = 0;
			int ySize = (int)world_->blocks.size() / 100, xSize = (int)world_->blocks.size() / ySize;
			for (int i_ = 0; i_ < world_->blocks.size(); i_++) {
				if (items[world_->blocks[i_].fg].blockType == BlockTypes::LOCK) {
					uint32_t id_ = world_->blocks[i_].fg;
					if (id_ == 5814) {
						x_ = i_ % xSize;
						y_ = i_ / xSize;
						break;
					}
				}
			}
			WorldBlock* block_ = &world_->blocks[x_ + (y_ * 100)];
			PlayerMoving dataa_{};
			dataa_.packetType = 5, dataa_.punchX = x_, dataa_.punchY = y_, dataa_.characterState = 0x8;
			BYTE* raww = packPlayerMoving(&dataa_, 112 + alloc_(world_, block_));
			BYTE* blc = raww + 56;
			form_visual(blc, *block_, *world_, to_, false);
			for (ENetPeer* cp_ = server->peers; cp_ < &server->peers[server->peerCount]; ++cp_) {
				if (cp_->state != ENET_PEER_STATE_CONNECTED or cp_->data == NULL) continue;
				if (pInfo(cp_)->guild_id == guild_id) {
					VarList::OnConsoleMessage(cp_, "`5[GUILD ALERT]`` `2" + pInfo(from_)->tankIDName + "`` has been `4demoted`` to Co-Leader!");
					VarList::OnConsoleMessage(cp_, "`5[GUILD ALERT]`` `2" + pInfo(to_)->tankIDName + "`` has been `2promoted`` to Leader!");
				}
				if (pInfo(cp_)->world == world_->name) {
					CAction::Positioned(cp_, pInfo(cp_)->netID, "audio/use_lock.wav", 0);
					send_raw(cp_, 4, raw, 56, ENET_PACKET_FLAG_RELIABLE);
					send_raw(cp_, 4, raww, 112 + alloc_(world_, block_), ENET_PACKET_FLAG_RELIABLE);
					VarList::OnConsoleMessage(cp_, "`5[```w" + world_->name + "`` has been `$World Locked`` by " + pInfo(to_)->name_color + world_->owner_name + "```5]``");
					VarList::OnTalkBubble(cp_, pInfo(to_)->netID, "`5[```w" + world_->name + "`` has been `$World Locked`` by " + pInfo(to_)->name_color + world_->owner_name + "```5]``", 0, 0);
				}
			}
			update_guild_name(from_, world_->name, world_);
			update_guild_name(to_, world_->name, world_);
			delete[] raw, raww, blc;
		}
		save_world(pInfo(to_)->world, false);
	}
	else {
		if (pInfo(from_)->tankIDName == world_->owner_name) {
			pInfo(from_)->worlds_owned.erase(remove(pInfo(from_)->worlds_owned.begin(), pInfo(from_)->worlds_owned.end(), world_->name), pInfo(from_)->worlds_owned.end());
		}
		else {
			bool on_ = false;
			for (ENetPeer* cp_ = server->peers; cp_ < &server->peers[server->peerCount]; ++cp_) {
				if (cp_->state != ENET_PEER_STATE_CONNECTED or cp_->data == NULL) continue;
				if (pInfo(cp_)->tankIDName == world_->owner_name) {
					pInfo(cp_)->worlds_owned.erase(remove(pInfo(cp_)->worlds_owned.begin(), pInfo(cp_)->worlds_owned.end(), world_->name), pInfo(cp_)->worlds_owned.end());
					on_ = true;
					break;
				}
			}
			if (not on_) {
				try {
					string path_ = "database/players/" + world_->owner_name + "_.json";
					if (_access_s(path_.c_str(), 0) == 0) {
						json r_;
						ifstream f_(path_, ifstream::binary);
						if (f_.fail()) {
							return;
						}
						f_ >> r_;
						f_.close();
						try {
							json f_ = r_["worlds_owned"].get<json>();
							for (int i_ = 0; i_ < f_.size(); i_++) {
								if (f_[i_]["name"] == world_->name) {
									f_.erase(f_.begin() + i_);
									break;
								}
							}
							r_["worlds_owned"] = f_;
						}
						catch (exception) {
							return;
						}
						{
							std::ofstream f_(path_, ifstream::binary);
							f_ << r_;
							f_.close();
						}
					}
				}
				catch (exception) {
				}
			}
		}
		string before_name = world_->owner_name;
		world_->owner_name = pInfo(to_)->tankIDName;
		if (pInfo(to_)->name_color != "`0" or Role::Moderator(to_) || Role::Administrator(to_) && pInfo(to_)->name_color != "`2")  world_->owner_named = pInfo(to_)->name_color + pInfo(to_)->tankIDName;
		else world_->owner_named = pInfo(to_)->tankIDName;
		pInfo(to_)->worlds_owned.push_back(world_->name);
		PlayerMoving data_{};
		data_.packetType = 15, data_.punchX = lock_x, data_.punchY = lock_y, data_.characterState = 0x8;
		data_.netID = pInfo(to_)->id;
		data_.plantingTree = lock_id;
		BYTE* raw = packPlayerMoving(&data_, 56);
		Clothing_V2::Update(to_);
		Clothing_V2::Update(from_);
		for (ENetPeer* cp_ = server->peers; cp_ < &server->peers[server->peerCount]; ++cp_) {
			if (cp_->state != ENET_PEER_STATE_CONNECTED or cp_->data == NULL) continue;
			if (pInfo(cp_)->world == world_->name) {
				CAction::Positioned(cp_, pInfo(cp_)->netID, "audio/use_lock.wav", 0);
				send_raw(cp_, 4, raw, 56, ENET_PACKET_FLAG_RELIABLE);
				VarList::OnConsoleMessage(cp_, "`5[```w" + world_->name + "`` has been `$World Locked`` by " + pInfo(to_)->name_color + world_->owner_name + "```5]``");
				VarList::OnTalkBubble(cp_, pInfo(to_)->netID, "`5[```w" + world_->name + "`` has been `$World Locked`` by " + pInfo(to_)->name_color + world_->owner_name + "```5]``", 0, 0);
			}
		}
		delete[] raw;
		save_world(pInfo(to_)->world, false);
	}
}
bool is_false_state(WorldBlock block_, int t_) {
	if (items[block_.fg].collisionType == 0) return false;
	if (items[block_.fg].collisionType == 1) {
		return true;
	}
	if (block_.flags & t_) {
		return false;
	}
	return true;
}
bool patchPath(World* world_, int x, int y, int fg, ENetPeer* p_) {
	if (x < 0 || x >= world_->max_x * 32 || y < 0 || y >= world_->max_y * 32 || fg > world_->blocks.size() || world_->blocks[fg].fg == 8676) return false;
	vector<int> new_tiles{};
	WorldBlock* block_ = &world_->blocks[(int)x / 32 + ((int)y / 32 * 100)];
	bool public_world = world_->world_settings & SETTINGS::SETTINGS_4;
	if (items[world_->blocks[(int)x / 32 + ((int)y / 32 * 100)].fg].collisionType != 1 or items[world_->blocks[(int)x / 32 + ((int)y / 32 * 100)].fg].blockType == BlockTypes::GATEWAY or items[world_->blocks[(int)x / 32 + ((int)y / 32 * 100)].fg].toggleable or items[world_->blocks[(int)x / 32 + ((int)y / 32 * 100)].fg].blockType == BlockTypes::VIP_ENTRANCE) {
		if (items[world_->blocks[(int)x / 32 + ((int)y / 32 * 100)].fg].blockType == BlockTypes::VIP_ENTRANCE and not world_->blocks[(int)x / 32 + ((int)y / 32 * 100)].limit_admins and world_->owner_name != pInfo(p_)->tankIDName and not world_->owner_name.empty() and find(world_->blocks[(int)x / 32 + ((int)y / 32 * 100)].admins.begin(), world_->blocks[(int)x / 32 + ((int)y / 32 * 100)].admins.end(), to_lower(pInfo(p_)->tankIDName)) == world_->blocks[(int)x / 32 + ((int)y / 32 * 100)].admins.end()) {
		}
		else if (items[world_->blocks[(int)x / 32 + ((int)y / 32 * 100)].fg].blockType == BlockTypes::VIP_ENTRANCE and Vip_Bfg(block_, pInfo(p_)->tankIDName)) {
		}
		else if (items[world_->blocks[(int)x / 32 + ((int)y / 32 * 100)].fg].blockType == BlockTypes::GATEWAY and is_false_state(world_->blocks[(int)x / 32 + ((int)y / 32 * 100)], 0x00800000) and world_->owner_name != pInfo(p_)->tankIDName and not public_world and not world_->owner_name.empty() and !guild_access(p_, world_->guild_id) and find(world_->admins.begin(), world_->admins.end(), to_lower(pInfo(p_)->tankIDName)) == world_->admins.end()) {
		}
		else if (items[world_->blocks[(int)x / 32 + ((int)y / 32 * 100)].fg].toggleable and is_false_state(world_->blocks[(int)x / 32 + ((int)y / 32 * 100)], 0x00400000)) {
		}
		else {
			new_tiles.push_back((int)x / 32 + ((int)y / 32 * 100));
		}
	}
	int ySize = world_->blocks.size() / 100, xSize = world_->blocks.size() / ySize;
	std::vector<WorldBlock> shadow_copy = world_->blocks;
	for (int i2 = 0; i2 < new_tiles.size(); i2++) {
		int x_ = new_tiles[i2] % 100, y_ = new_tiles[i2] / 100;
		WorldBlock* block_1 = &world_->blocks[x_ + (y_ * 100)];
		if (&world_->blocks[x_ + (y_ * 100)] == &world_->blocks[fg] and items[shadow_copy[x_ + (y_ * 100)].fg].collisionType != 1) {
			return false;
		}
		if (x_ < (world_->max_x - 1) and items[shadow_copy[x_ + 1 + (y_ * 100)].fg].collisionType != 1 or x_ < (world_->max_x - 1) and items[shadow_copy[x_ + 1 + (y_ * 100)].fg].blockType == BlockTypes::GATEWAY or x_ < (world_->max_x - 1) and items[shadow_copy[x_ + 1 + (y_ * 100)].fg].toggleable) {
			if (items[shadow_copy[x_ + 1 + (y_ * 100)].fg].blockType == BlockTypes::VIP_ENTRANCE and not shadow_copy[x_ + 1 + (y_ * 100)].limit_admins and world_->owner_name != pInfo(p_)->tankIDName and not world_->owner_name.empty() and find(shadow_copy[x_ + 1 + (y_ * 100)].admins.begin(), shadow_copy[x_ + 1 + (y_ * 100)].admins.end(), to_lower(pInfo(p_)->tankIDName)) == shadow_copy[x_ + 1 + (y_ * 100)].admins.end()) {
			}
			else if (items[shadow_copy[x_ + 1 + (y_ * 100)].fg].blockType == BlockTypes::VIP_ENTRANCE and Vip_Bfg(block_1, pInfo(p_)->tankIDName)) {
			}
			else if (items[shadow_copy[x_ + 1 + (y_ * 100)].fg].blockType == BlockTypes::GATEWAY and is_false_state(shadow_copy[x_ + 1 + (y_ * 100)], 0x00800000) and world_->owner_name != pInfo(p_)->tankIDName and not public_world and not world_->owner_name.empty() and !guild_access(p_, world_->guild_id) and find(world_->admins.begin(), world_->admins.end(), to_lower(pInfo(p_)->tankIDName)) == world_->admins.end()) {
			}
			else if (items[shadow_copy[x_ + 1 + (y_ * 100)].fg].toggleable and is_false_state(shadow_copy[x_ + 1 + (y_ * 100)], 0x00400000)) {
			}
			else {
				if (not shadow_copy[x_ + 1 + (y_ * 100)].scanned) {
					shadow_copy[x_ + 1 + (y_ * 100)].scanned = true;
					new_tiles.push_back(x_ + 1 + (y_ * 100));
				}
			}
		}
		WorldBlock* block_2 = &world_->blocks[x_ - 1 + (y_ * 100)];
		if (x_ > 0 and items[shadow_copy[x_ - 1 + (y_ * 100)].fg].collisionType != 1 or x_ > 0 and items[shadow_copy[x_ - 1 + (y_ * 100)].fg].blockType == BlockTypes::GATEWAY or x_ > 0 and items[shadow_copy[x_ - 1 + (y_ * 100)].fg].toggleable) {
			if (items[shadow_copy[x_ - 1 + (y_ * 100)].fg].blockType == BlockTypes::VIP_ENTRANCE and not shadow_copy[x_ - 1 + (y_ * 100)].limit_admins and world_->owner_name != pInfo(p_)->tankIDName and not world_->owner_name.empty() and find(shadow_copy[x_ - 1 + (y_ * 100)].admins.begin(), shadow_copy[x_ - 1 + (y_ * 100)].admins.end(), to_lower(pInfo(p_)->tankIDName)) == shadow_copy[x_ - 1 + (y_ * 100)].admins.end()) {
			}
			else if (items[shadow_copy[x_ - 1 + (y_ * 100)].fg].blockType == BlockTypes::VIP_ENTRANCE and Vip_Bfg(block_2, pInfo(p_)->tankIDName)) {
			}
			else if (items[shadow_copy[x_ - 1 + (y_ * 100)].fg].blockType == BlockTypes::GATEWAY and is_false_state(shadow_copy[x_ - 1 + (y_ * 100)], 0x00800000) and world_->owner_name != pInfo(p_)->tankIDName and not public_world and not world_->owner_name.empty() and !guild_access(p_, world_->guild_id) and find(world_->admins.begin(), world_->admins.end(), to_lower(pInfo(p_)->tankIDName)) == world_->admins.end()) {
			}
			else if (items[shadow_copy[x_ - 1 + (y_ * 100)].fg].toggleable and is_false_state(shadow_copy[x_ - 1 + (y_ * 100)], 0x00400000)) {
			}
			else {
				if (not shadow_copy[x_ - 1 + (y_ * 100)].scanned) {
					shadow_copy[x_ - 1 + (y_ * 100)].scanned = true;
					new_tiles.push_back(x_ - 1 + (y_ * 100));
				}
			}
		}
		WorldBlock* block_3 = &world_->blocks[x_ + ((y_ + 1) * 100)];
		if (y_ < (world_->max_y - 1) and items[shadow_copy[x_ + ((y_ + 1) * 100)].fg].collisionType != 1 or y_ < (world_->max_y - 1) and items[shadow_copy[x_ + ((y_ + 1) * 100)].fg].blockType == BlockTypes::GATEWAY or y_ < (world_->max_y - 1) and items[shadow_copy[x_ + ((y_ + 1) * 100)].fg].toggleable) {
			if (items[shadow_copy[x_ + ((y_ + 1) * 100)].fg].blockType == BlockTypes::VIP_ENTRANCE and not shadow_copy[x_ + ((y_ + 1) * 100)].limit_admins and world_->owner_name != pInfo(p_)->tankIDName and not world_->owner_name.empty() and find(shadow_copy[x_ + ((y_ + 1) * 100)].admins.begin(), shadow_copy[x_ + ((y_ + 1) * 100)].admins.end(), to_lower(pInfo(p_)->tankIDName)) == shadow_copy[x_ + ((y_ + 1) * 100)].admins.end()) {
			}
			else if (items[shadow_copy[x_ + ((y_ + 1) * 100)].fg].blockType == BlockTypes::VIP_ENTRANCE and Vip_Bfg(block_3, pInfo(p_)->tankIDName)) {
			}
			else if (items[shadow_copy[x_ + ((y_ + 1) * 100)].fg].blockType == BlockTypes::GATEWAY and is_false_state(shadow_copy[x_ + ((y_ + 1) * 100)], 0x00800000) and world_->owner_name != pInfo(p_)->tankIDName and not public_world and not world_->owner_name.empty() and !guild_access(p_, world_->guild_id) and find(world_->admins.begin(), world_->admins.end(), to_lower(pInfo(p_)->tankIDName)) == world_->admins.end()) {
			}
			else if (items[shadow_copy[x_ + ((y_ + 1) * 100)].fg].toggleable and is_false_state(shadow_copy[x_ + ((y_ + 1) * 100)], 0x00400000)) {
			}
			else {
				if (not shadow_copy[x_ + ((y_ + 1) * 100)].scanned) {
					shadow_copy[x_ + ((y_ + 1) * 100)].scanned = true;
					new_tiles.push_back(x_ + ((y_ + 1) * 100));
				}
			}
		}
		WorldBlock* block_4 = &world_->blocks[x_ + ((y_ - 1) * 100)];
		if (y_ > 0 and items[shadow_copy[x_ + ((y_ - 1) * 100)].fg].collisionType != 1 or y_ > 0 and items[shadow_copy[x_ + 1 + ((y_ - 1) * 100)].fg].blockType == BlockTypes::GATEWAY or y_ > 0 and items[shadow_copy[x_ + 1 + ((y_ - 1) * 100)].fg].toggleable) {
			if (items[shadow_copy[x_ + ((y_ - 1) * 100)].fg].blockType == BlockTypes::VIP_ENTRANCE and not shadow_copy[x_ + ((y_ - 1) * 100)].limit_admins and world_->owner_name != pInfo(p_)->tankIDName and not world_->owner_name.empty() and find(shadow_copy[x_ + ((y_ - 1) * 100)].admins.begin(), shadow_copy[x_ + ((y_ - 1) * 100)].admins.end(), to_lower(pInfo(p_)->tankIDName)) == shadow_copy[x_ + ((y_ - 1) * 100)].admins.end()) {
			}
			else if (items[shadow_copy[x_ + ((y_ - 1) * 100)].fg].blockType == BlockTypes::VIP_ENTRANCE and Vip_Bfg(block_4, pInfo(p_)->tankIDName)) {
			}
			else if (items[shadow_copy[x_ + ((y_ - 1) * 100)].fg].blockType == BlockTypes::GATEWAY and is_false_state(shadow_copy[x_ + ((y_ - 1) * 100)], 0x00800000) and world_->owner_name != pInfo(p_)->tankIDName and not public_world and not world_->owner_name.empty() and !guild_access(p_, world_->guild_id) and find(world_->admins.begin(), world_->admins.end(), to_lower(pInfo(p_)->tankIDName)) == world_->admins.end()) {
			}
			else if (items[shadow_copy[x_ + ((y_ - 1) * 100)].fg].toggleable and is_false_state(shadow_copy[x_ + ((y_ - 1) * 100)], 0x00400000)) {
			}
			else {
				if (not shadow_copy[x_ + ((y_ - 1) * 100)].scanned) {
					shadow_copy[x_ + ((y_ - 1) * 100)].scanned = true;
					new_tiles.push_back(x_ + ((y_ - 1) * 100));
				}
			}
		}
	}
	return true;
}
void remove_friend(ENetPeer* p_, World* world_, string name_, bool show_Dialog = true) {
	for (int c_ = 0; c_ < pInfo(p_)->friends.size(); c_++) {
		if (to_lower(pInfo(p_)->friends[c_].name) == to_lower(name_)) {
			if (show_Dialog) {
				gamepacket_t p;
				p.Insert("OnDialogRequest");
				p.Insert("set_default_color|`o\nadd_label_with_icon|big|`4Friend removed``|left|1366|\nadd_spacer|small|\nadd_textbox|`oOk, you are no longer friends with " + pInfo(p_)->friends[c_].name + ".|left|\nadd_spacer|small|\nadd_button|back|OK|noflags|0|0|\nend_dialog|friends_remove_finish|||\nadd_quick_exit|");
				p.CreatePacket(p_);
			}
			bool on_ = false;
			for (ENetPeer* cp_ = server->peers; cp_ < &server->peers[server->peerCount]; ++cp_) {
				if (cp_->state != ENET_PEER_STATE_CONNECTED or cp_->data == NULL) continue;
				if (to_lower(pInfo(cp_)->tankIDName) == to_lower(name_)) {
					gamepacket_t p;
					p.Insert("OnConsoleMessage");
					p.Insert("`3FRIEND ALERT:`` " + pInfo(p_)->name_color + pInfo(p_)->tankIDName + "`` has removed you as a friend.");
					p.CreatePacket(cp_);
					for (int c_ = 0; c_ < pInfo(cp_)->friends.size(); c_++) {
						if (to_lower(pInfo(cp_)->friends[c_].name) == to_lower(pInfo(p_)->tankIDName)) {
							pInfo(cp_)->friends.erase(pInfo(cp_)->friends.begin() + c_);
							break;
						}
					}
					on_ = true;
					break;
				}
			} 
			if (not on_) {
				try {
					string path_ = "database/players/" + name_ + "_.json";
					if (_access_s(path_.c_str(), 0) == 0) {
						json r_;
						std::ifstream f_(path_, ifstream::binary);
						if (f_.fail()) {
							Logger::Info("ERROR", "failed reading data for " + name_);
							return;
						}
						f_ >> r_;
						f_.close();
						try {
							json f_ = r_["friends"].get<json>();
							for (int i_ = 0; i_ < f_.size(); i_++) {
								if (f_[i_]["name"] == pInfo(p_)->tankIDName) {
									f_.erase(f_.begin() + i_);
									break;
								}
							}
							r_["friends"] = f_;
						}
						catch (exception) {
							return;
						}
						{
							std::ofstream f_(path_, ifstream::binary);
							f_ << r_;
							f_.close();
						}
					}
				}
				catch (exception) {
					Logger::Info("ERROR", "something failed players/json 2");
				}
			}
			pInfo(p_)->friends.erase(pInfo(p_)->friends.begin() + c_);
		}
	}
}
void send_wrench_self(ENetPeer* peer, string type = "") {
	time_t s__;
	s__ = time(NULL);
	int days_ = int(s__) / (60 * 60 * 24);
	double hours_ = (double)((s__ - pInfo(peer)->playtime) + pInfo(peer)->seconds) / 3600;
	string num_text = to_string(hours_);
	string rounded = num_text.substr(0, num_text.find(".") + 3);
	string tabs = SetColor(peer) + "set_default_color|`o\nstart_custom_tabs|"
		"\nadd_custom_button|info|image:interface/large/gui_button_tabs.rttex;image_size:228,92;frame:" + a + (type == "info" or type == "" ? "1,17" : "0,17") + ";width:0.14;min_width:60;|"
		+ (pInfo(peer)->glo ? "\nadd_custom_button|road_to_glory|image:interface/large/gui_button_tabs.rttex;image_size:228,92;frame:" + a + (type == "road_to_glory" ? "1,18" : "0,18") + ";width:0.14;min_width:60;|" : "") +
		"\nadd_custom_button|kit_pass|image:interface/large/gui_button_tabs.rttex;image_size:228,92;frame:" + a + (type == "kit_pass" ? "1,19" : "0,19") + ";width:0.14;min_width:60;|"
		"\nadd_custom_button|level_rwds|image:interface/large/gui_button_tabs.rttex;image_size:228,92;frame:" + a + (type == "level_rwds" ? "1,14" : "0,14") + ";width:0.14;min_width:60;|"
		"\nadd_custom_button|skill_and_assets|image:interface/large/gui_button_tabs.rttex;image_size:228,92;frame:" + a + (type == "skill_and_assets" ? "1,13" : "0,13") + ";width:0.14;min_width:60;|"
		"\nadd_custom_margin|x:50;y:0|\nadd_custom_button|star|image:interface/large/gui_store_pearls_top.rttex;image_size:335,64;frame:0,0;width:0.20;min_width:90;state:disabled;|\nadd_custom_label|" + Set_Count(pInfo(peer)->Masterless_Starglitter) + "|target:star;top:0.4;left:0.51;size:small|\nadd_custom_button||image:interface/large/gacha_btn.rttex;image_size:228,92;frame:1,5;width:0.14;min_width:60;|\nend_custom_tabs|";
	if (type == "road_to_glory") {
		if (pInfo(peer)->glo >= 1) {
			string prizes = "";
			for (int i = 1; i < 10; i++) {
				if (std::find(pInfo(peer)->glo_p.begin(), pInfo(peer)->glo_p.end(), i) != pInfo(peer)->glo_p.end()) prizes += "\nadd_smalltext|`r#" + to_string(i + 1) + ": Level " + to_string(i * 10) + " claimed.``|left|\nadd_label_with_icon|small|`r" + Set_Count(i * 10000) + " Gems``|left|14590|\nadd_spacer|small|";
				else if (pInfo(peer)->level >= i * 10) prizes += "\nadd_smalltext|`w#" + to_string(i + 1) + ": Reach Level " + to_string(i * 10) + " to claim this reward:``|left|\nadd_label_with_icon|small|`w" + Set_Count(i * 10000) + " Gems``|left|14590|\nadd_small_font_button|claimreward" + to_string(i) + "|Claim Reward|noflags|0|0|";
				else if (pInfo(peer)->level < i * 10) prizes += "\nadd_smalltext|`s#" + to_string(i + 1) + ": Reach Level " + to_string(i * 10) + " to claim this reward:``|left|\nadd_label_with_icon|small|`s" + Set_Count(i * 10000) + " Gems``|left|14590|";
			}
			VarList::OnDialogRequest(peer, tabs + "set_default_color|`o\nadd_label_with_icon|big|`wRoad to Glory``|left|9436|\nadd_image_button||interface/large/rtg_banner.rttex||||\nadd_spacer|small|\nadd_smalltext|Claim your Road to Glory Rewards Here|left|\nadd_spacer|small|\nadd_progress_bar|`wYour Level: " + to_string(pInfo(peer)->level) + "``|small|LVL 1|" + (pInfo(peer)->level > 90 ? "90" : to_string(pInfo(peer)->level)) + "|90|LVL 90|\nadd_spacer|small|\nadd_smalltext|`r#1: Road to Glory Pack instant reward claimed:``|left|\nadd_label_with_icon|small|`r100,000 Gems``|left|14590|\nadd_spacer|small|" + prizes + "\nadd_spacer|small|\nadd_textbox||left|\nadd_spacer|small|\nend_dialog|roadtoglory|||\nadd_quick_exit|\n", 500);
		}
	}
	if (type == "kit_pass") DialogHandle::Kit_Pass(peer);
	if (type == "level_rwds") DialogHandle::Level_Rewards(peer);
	if (type == "skill_and_assets") {
		gamepacket_t p(500);
		p.Insert("OnDialogRequest");
		p.Insert(tabs +
			"set_default_color|`o\nadd_label_with_icon|big|My Assets & Skills|left|12436|"
			"\nadd_spacer|small|"
			"\nadd_smalltext|`oAll of your assets & life-skills will be displayed here below! Life skills are defined as a group of psychosocial competencies and interpersonal skills that help people make informed decisions, solve problems, think critically and creatively, communicate effectively.``|left|"
			"\nadd_spacer|small|"
			"\nadd_textbox|- Gems -|left|\nadd_label_with_icon|small|`w" + Set_Count(pInfo(peer)->gems) + "|left|14590|"
			"\nadd_spacer|small|"
			"\nadd_textbox|- Gems Storage -|left|\nadd_label_with_icon|small|`w" + formatWithCommas(pInfo(peer)->Gems_Storage) + "|left|14592|"
			"\nadd_spacer|small|"
			"\nadd_textbox|- Level -|left|\nadd_label_with_icon|small|`w" + Set_Count(pInfo(peer)->level) + "|left|1488|"
			"\nadd_spacer|small|"
			"\nadd_textbox|- Online Point Currency -|left|\nadd_label_with_icon|small|`w" + Set_Count(pInfo(peer)->opc) + "|left|10668|"
			"\nadd_spacer|small|"
			"\nadd_textbox|- " + Environment()->server_name + " Coins -|left|\nadd_label_with_icon|small|`w" + Set_Count(pInfo(peer)->gtwl) + "|left|244|"
			"\nadd_spacer|small|"
			"\nadd_textbox|- Spring Tokens -|left|\nadd_label_with_icon|small|`w" + Set_Count(pInfo(peer)->spring_token) + "|left|7844|"
			"\nadd_spacer|small|"
			"\nadd_textbox|- Summer Tokens -|left|\nadd_label_with_icon|small|`w" + Set_Count(pInfo(peer)->summer_token) + "|left|6198|"
			"\nadd_spacer|small|"
			"\nadd_textbox|- Winter Tokens -|left|\nadd_label_with_icon|small|`w" + Set_Count(pInfo(peer)->winter_token) + "|left|7328|"
			"\nadd_spacer|small|"
			"\nadd_textbox|- Winter Seal -|left|\nadd_label_with_icon|small|`w" + Set_Count(pInfo(peer)->winter_seal) + "|left|9186|"
			"\nadd_spacer|small|"
			"\nadd_textbox|- Bank Locks -|left|"
			"\nadd_label_with_icon|small|World Locks: " + Set_Count(pInfo(peer)->wl_bank_amount) + "|left|242|"
			"\nadd_label_with_icon|small|Diamond Locks: " + Set_Count(pInfo(peer)->dl_bank_amount) + "|left|1796|"
			"\nadd_label_with_icon|small|Platinum Gem Locks: " + Set_Count(pInfo(peer)->pgl_bank_amount) + "|left|7188|"
			"\nadd_label_with_icon|small|" + Environment()->server_name + " Gem Locks: " + Set_Count(pInfo(peer)->mgl_bank_amount) + "|left|8470|"
			"\nadd_label_with_icon|small|Infinity Gem Locks: " + Set_Count(pInfo(peer)->igl_bank_amount) + "|left|13200|"
			"\nadd_spacer|small|\nadd_textbox|- Awesomeness -|left|\nadd_label_with_icon|small|" + to_string(pInfo(peer)->awesomeness) + "%|left||"
			"\nadd_spacer|small|\nadd_textbox|- You've Punched -|left|\nadd_label_with_icon|small|" + to_string(pInfo(peer)->punch_count) + " times|left|18|"
			"\nadd_spacer|small|\nadd_textbox|- Fires Put Out -|left|\nadd_label_with_icon|small|" + to_string(pInfo(peer)->fires) + "|left|3062|"
			"\nadd_spacer|small|\nadd_textbox|- Carnival Games Won -|left|\nadd_label_with_icon|small|" + to_string(pInfo(peer)->carnivalgameswon) + "|left|1882|"
			"\nadd_spacer|small|\nadd_textbox|- Surgeries Completed (using Bling set) -|left|"
			"\nadd_label_with_icon|small|" + to_string(pInfo(peer)->su_8552_1) + " (2000 more until Angel of Mercy's Wings)|left|1270|\nadd_label_with_icon|small|" + to_string(pInfo(peer)->su_8552_1) + " (3000 more until `4Dr.`` Title)|left|1270|\nadd_spacer|small|\nadd_button|backto_wrench|`wBack|noflags|0|0|\nend_dialog|popup|||"
		);
		p.CreatePacket(peer);
	}
	if (type == "" or type == "info") {
		string guild_notebook = "", extra = "", subs = "", Ezio = "", status = "\nadd_custom_button|online_status|image:interface/large/gui_wrench_online_status_" + a + (pInfo(peer)->p_status == 0 ? "1green" : pInfo(peer)->p_status == 1 ? "3red" : "2yellow") + ".rttex;image_size:400,260;width:0.19;|";
		/*feet*/
		if (pInfo(peer)->feet == 10618)  Ezio += "\nadd_custom_button|feet|image:interface/large/gui_wrench_pps_transform.rttex;image_size_x:400;image_size_y:260;width: 0.19;|";
		/*ances*/
		if (pInfo(peer)->ances == 12634) Ezio += "\nadd_custom_button|eq_aura|image:interface/large/gui_wrench_eq_a.rttex;image_size:400,260;width:0.19;|";
		/*back*/
		if (pInfo(peer)->back == 10424) Ezio += "\nadd_custom_button|Rift_Cape|image:interface/large/gui_wrench_rift_cape.rttex;image_size_x:400;image_size_y:260;width: 0.19;|";
		else if (pInfo(peer)->back == 11478) Ezio += "\nadd_custom_button|Rift_Wings|image:interface/large/gui_wrench_rift_wings.rttex;image_size_x:400;image_size_y:260;width: 0.19;|";
		else if (pInfo(peer)->back == 12640) Ezio += "\nadd_custom_button|minokawa_wings|image:interface/large/gui_wrench_mkw.rttex;image_size:400,260;width:0.19;|";
		else if (pInfo(peer)->back == 10182) Ezio += "\nadd_custom_button|piano_wings_edit|image:interface/large/gui_wrench_musical_wings.rttex;image_size:400,260;width:0.19;|";
		/*necklace*/
		if (pInfo(peer)->necklace == 13220 || pInfo(peer)->necklace == 13196) Ezio += "\nadd_custom_button|neck|image:interface/large/gui_wrench_u2_transform.rttex;image_size_x:400;image_size_y:260;width: 0.19;|";
		else if (pInfo(peer)->necklace == 11560 || pInfo(peer)->necklace == 11554 || pInfo(peer)->necklace == 11556 || pInfo(peer)->necklace == 11558) Ezio += "\nadd_custom_button|neck|image:interface/large/gui_wrench_u_transform.rttex;image_size_x:400;image_size_y:260;width: 0.19;|";
		else if (pInfo(peer)->necklace == 11748) Ezio += "\nadd_custom_button|bannerbandolier|image:interface/large/gui_wrench_banner_bandolier.rttex;image_size_x:400;image_size_y:260;width:0.19;|";
		else if (pInfo(peer)->necklace == 11818) Ezio += "\nadd_custom_button|scarf_of_seasons_edit|image:interface/large/gui_wrench_banner_seasons_item2.rttex;image_size:400,260;width:0.19;|";
		else if (pInfo(peer)->necklace == 12648 || pInfo(peer)->necklace == 12646 || pInfo(peer)->necklace == 12650) Ezio += "\nadd_custom_button|neck|image:interface/large/gui_wrench_a15.rttex;image_size:400,260;width:0.19;|";
		/*hand*/
		if (pInfo(peer)->hand == 10952 || pInfo(peer)->hand == 10954 || pInfo(peer)->hand == 10956 || pInfo(peer)->hand == 10958 || pInfo(peer)->hand == 10960) Ezio += "\nadd_custom_button|hand|image:interface/large/gui_wrench_space_animals_transform.rttex;image_size_x:400;image_size_y:260;width: 0.19;|";
		else if (pInfo(peer)->hand == 12866 || pInfo(peer)->hand == 12868) Ezio += "\nadd_custom_button|hand|image:interface/large/gui_wrench_st_ani.rttex;image_size_x:400;image_size_y:260;width: 0.19;|";
		else if (pInfo(peer)->hand == 12014 || pInfo(peer)->hand == 12016 || pInfo(peer)->hand == 12018 || pInfo(peer)->hand == 12020) Ezio += "\nadd_custom_button|hand|image:interface/large/gui_wrench_st_transform.rttex;image_size_x:400;image_size_y:260;width: 0.19;|";
		/*hair*/
		if (pInfo(peer)->hair == 12958) Ezio += "\nadd_custom_button|infinity_crown_edit|image:interface/large/gui_wrench_icr.rttex;image_size:400,260;width:0.19;|";
		else if (pInfo(peer)->hair == 10674) Ezio += "\nadd_custom_button|cernuous_mask_edit|image:interface/large/gui_wrench_crown_seasons.rttex;image_size:400,260;width:0.19;|";
		else if (pInfo(peer)->hair == 12872 || pInfo(peer)->hair == 12874) Ezio += "\nadd_custom_button|panda_spirit|image:interface/large/gui_wrench_rpan.rttex;image_size:400,260;width:0.19;|";
		/*guild*/
		if (pInfo(peer)->guild_id != 0) {
			uint32_t guild_id = pInfo(peer)->guild_id;
			vector<Guild>::iterator p = find_if(guilds.begin(), guilds.end(), [guild_id](const Guild& a) { return a.guild_id == guild_id; });
			if (p != guilds.end()) {
				Guild* guild_information = &guilds[p - guilds.begin()];
				uint32_t my_rank = 0;
				string guild_point_personal = "";
				if (top_basher.size() == 0 && Event()->Can_Event) {
					auto it = std::find_if(last_guild_last.begin(), last_guild_last.end(), [&](const std::pair<long long int, std::string>& element) {
						return element.second == std::to_string(pInfo(peer)->guild_id); });
					if (it != last_guild_last.end()) {
						if (it->first > 0) {
							guild_point_personal += "\nadd_smalltext|`9Guild Point: `2" + Set_Count(it->first) + "|left|\n";
						}
					}
				}
				else {
					auto it = std::find_if(top_guild.begin(), top_guild.end(), [&](const std::pair<long long int, std::string>& element) {
						return element.second == std::to_string(pInfo(peer)->guild_id); });
					if (it != top_guild.end()) {
						if (it->first > 0) {
							guild_point_personal += "\nadd_smalltext|`9Guild Point: `2" + Set_Count(it->first) + "|left|\n";
						}
					}
				}
				for (GuildMember member_search : guild_information->guild_members) {
					if (to_lower(member_search.member_name) == to_lower(pInfo(peer)->tankIDName)) {
						my_rank = member_search.role_id;
						break;
					}
				}
				if (my_rank == 3) guild_notebook = "\nadd_custom_button|guild_notebook_edit|image:interface/large/gui_wrench_guild_notebook.rttex;image_size:400,260;width:0.19;|";
				if (guild_information->guild_mascot[1] == 0 and guild_information->guild_mascot[0] == 0) extra += "\nadd_label_with_icon|small|`9Guild: `2" + guild_information->guild_name + "``|left|5814||\nadd_smalltext|`9Rank: `2" + (my_rank == 0 ? "Member" : (my_rank == 1 ? "Elder" : (my_rank == 2 ? "Co-Leader" : "Leader"))) + "``|left|" + guild_point_personal + "|\nadd_spacer|small|";
				else extra += "\nadd_dual_layer_icon_label|small|`9Guild: `2" + guild_information->guild_name + "``|left|" + to_string(guild_information->guild_mascot[1]) + "|" + to_string(guild_information->guild_mascot[0]) + "|1.0|1||\nadd_smalltext|`9Rank: `2" + (my_rank == 0 ? "Member" : (my_rank == 1 ? "Elder" : (my_rank == 2 ? "Co-Leader" : "Leader"))) + "``|left|" + guild_point_personal + "|\nadd_spacer|small|";
			}
		}
		/*guild invite*/
		if (pInfo(peer)->pending_guild != 0 and pInfo(peer)->guild_id == 0) {
			uint32_t guild_id = pInfo(peer)->pending_guild;
			vector<Guild>::iterator p = find_if(guilds.begin(), guilds.end(), [guild_id](const Guild& a) { return a.guild_id == guild_id; });
			if (p != guilds.end()) {
				Guild* guild_information = &guilds[p - guilds.begin()];
				if (guild_information->guild_members.size() < guild_information->guild_level * 5) {
					extra += "\nadd_button|acceptguild|`2Join " + guild_information->guild_name + " Guild``|noflags|0|0|";
				}
			}
		}
		/*access*/
		if (pInfo(peer)->access_offers.size() != 0) {
			for (ENetPeer* cp_ = server->peers; cp_ < &server->peers[server->peerCount]; ++cp_) {
				if (cp_->state != ENET_PEER_STATE_CONNECTED or cp_->data == NULL) continue;
				if (pInfo(cp_)->world == pInfo(peer)->world) {
					if (pInfo(peer)->access_offers.find(pInfo(cp_)->netID) != pInfo(peer)->access_offers.end()) {
						std::string name_ = pInfo(peer)->world;
						std::vector<World>::iterator p = find_if(worlds.begin(), worlds.end(), [name_](const World& a) { return a.name == name_; });
						if (p != worlds.end()) {
							World* world_ = &worlds[p - worlds.begin()];
							std::string owner_name = to_lower(world_->owner_name), user_name = to_lower(pInfo(cp_)->tankIDName);
							WorldBlock block_ = world_->blocks[pInfo(peer)->access_offers[pInfo(cp_)->netID]];
							if (block_.fg == 202 or block_.fg == 204 or block_.fg == 206 or block_.fg == 4994 or block_.fg == 10000) {
								if (to_lower(block_.owner_name) != user_name) break;
							}
							else {
								if (owner_name != user_name) break;
							}
							extra += "\nadd_button|acceptlock|`2Accept Access on " + items[block_.fg].name + "``|noflags|0|0|";
						}
						break;
					}
				}
			}
			if (extra.empty()) pInfo(peer)->access_offers.clear();
		}
		/*Subscription*/
		if (Playmods::HasById(pInfo(peer), 133) or Playmods::HasById(pInfo(peer), 132) or Playmods::HasById(pInfo(peer), 131) or Playmods::HasById(pInfo(peer), 130) or Playmods::HasById(pInfo(peer), 129)) {
			int time_ = 0;
			for (PlayMods peer_playmod : pInfo(peer)->playmods) {
				if (peer_playmod.id == 133) time_ = peer_playmod.time - time(nullptr);
				if (peer_playmod.id == 132) time_ = peer_playmod.time - time(nullptr);
				if (peer_playmod.id == 131) time_ = peer_playmod.time - time(nullptr);
				if (peer_playmod.id == 130) time_ = peer_playmod.time - time(nullptr);
				if (peer_playmod.id == 129) time_ = peer_playmod.time - time(nullptr);
				subs = "\nadd_spacer|small|\nadd_textbox|`oPremium Subscription ends in: `2" + Time::Subscription(time_) + "|left|\n";
			}
		}
		/*pineappple*/
		std::string pine = "";
		uint16_t stage = pInfo(peer)->stage_pineapple;
		if (stage >= 200) stage -= (stage / 200) * 200;
		if (stage == 0 && (pInfo(peer)->stage_pineapple == 200 || pInfo(peer)->stage_pineapple == 400 || pInfo(peer)->stage_pineapple == 600)) stage = 200;
		uint8_t stage_level = (pInfo(peer)->stage_pineapple <= 200 ? 1 : (pInfo(peer)->stage_pineapple <= 400 ? 2 : 3));
		if (pInfo(peer)->stage_pineapple != 0) {
			pine += "\nadd_progress_bar||small|`wPineapple Stage " + to_string(stage_level) + "|" + (pInfo(peer)->stage_pineapple >= 600 && stage_level == 3 ? "200" : to_string(stage)) + "|200|" + (pInfo(peer)->stage_pineapple >= 600 && stage_level == 3 ? "(MAX)" : "(" + to_string(stage) + "/200)") + "|16777215|";
		}
		/*Card License*/
		std::string card_license = "\nadd_inner_image_label_button|get_card_battle| `oGet Card Battle License|game/vilpix.rttex|1.6|6|1|32|";
		if (pInfo(peer)->unlock_card_license) {
			card_license = "\nadd_spacer|small|\nadd_progress_bar|`9Card Battle Level``|small|Level " + to_string(pInfo(peer)->card_level) + "|" + (pInfo(peer)->card_level == 30 ? to_string(10 * ((pInfo(peer)->card_level * pInfo(peer)->card_level) + 2)) : to_string(pInfo(peer)->card_xp)) + "|" + to_string(10 * ((pInfo(peer)->card_level * pInfo(peer)->card_level) + 2)) + "|" + (pInfo(peer)->card_level > 29 ? "(MAX)" : "(" + to_string(pInfo(peer)->card_xp) + "/" + to_string(10 * ((pInfo(peer)->card_level * pInfo(peer)->card_level) + 2)) + ")") + "|-3669761|";
		}
		std::string name_ = pInfo(peer)->world;
		std::vector<World>::iterator p = find_if(worlds.begin(), worlds.end(), [name_](const World& a) { return a.name == name_; });
		if (p != worlds.end()) {
			World* world_ = &worlds[p - worlds.begin()];
			VarList::OnDialogRequest(peer, tabs + "set_default_color|\nadd_progress_bar|`w" + Role::Prefix(peer) + pInfo(peer)->tankIDName + "``|big|Level " + to_string(pInfo(peer)->level) + "|" + to_string(pInfo(peer)->xp) + "|" + to_string(50 * ((pInfo(peer)->level * pInfo(peer)->level) + 2)) + "|(" + to_string(pInfo(peer)->xp) + "/" + to_string(50 * ((pInfo(peer)->level * pInfo(peer)->level) + 2)) + ")|-3669761|\nadd_spacer|small|\nadd_custom_textbox|`$Masterless Starglitter (" + to_string(pInfo(peer)->Masterless_Starglitter) + "/4800) Regeneration Time: (" + (pInfo(peer)->Masterless_Starglitter >= 4800 ? "`2FULL" : Time::Event(pInfo(peer)->St_Regen_Time - time(nullptr))) + ")|size:small;icon:14552;|" + (pInfo(peer)->Used_VipDoor.size() != 0 ? "\nadd_custom_textbox|`$You have Pay VIP Access in World '" + pInfo(peer)->Used_VipDoor[0].first + "' Time Remaining: (" + Time::Event(pInfo(peer)->Used_VipDoor[0].second - time(nullptr)) + ")|size:small;icon:14594;|" : "") + "" + subs + "|" + pine + "|\nadd_spacer|small|" + extra + "|" + card_license + "\nadd_spacer|small|" + (pInfo(peer)->World_Timed - time(nullptr) != 0 && pInfo(peer)->WorldTimed && pInfo(peer)->tankIDName != world_->owner_name ? "\nadd_textbox|`wWorld Timer value `w" + CooldownText(pInfo(peer)->World_Timed - time(nullptr)) + "``|left|\nadd_spacer|small|" : "") + "\nset_custom_spacing|x:5;y:10|" + status + "" + (pInfo(peer)->supp != 0 ? "\nadd_custom_button|billboard_edit|image:interface/large/gui_wrench_edit_billboard.rttex;image_size:400,260;width:0.19;|" : "") + "\nadd_custom_button|notebook_edit|image:interface/large/gui_wrench_notebook.rttex;image_size:400,260;width:0.19;|" + guild_notebook + "|\nadd_custom_button|goals|image:interface/large/gui_wrench_goals_quests.rttex;image_size:400,260;width:0.19;|\nadd_custom_button|bonus|image:interface/large/gui_wrench_daily_bonus_active.rttex;image_size:400,260;width:0.19;|\nadd_custom_button|my_worlds|image:interface/large/gui_wrench_my_worlds.rttex;image_size:400,260;width:0.19;|\nadd_custom_button|growmoji|image:interface/large/gui_wrench_growmojis.rttex;image_size:400,260;width:0.19;|\nadd_custom_button|marvelous_missions|image:interface/large/gui_wrench_marvelous_missions.rttex;image_size:400,260;width:0.19;|\nadd_custom_button|title_edit|image:interface/large/gui_wrench_title.rttex;image_size:400,260;width:0.19;||" + (Role::Cheater(peer) or Playmods::HasById(pInfo(peer), 143) ? "\nadd_custom_button|cheats_menu|image:interface/large/gui_wrench_cheatmenu.rttex;image_size:400,260;width:0.19;||" : "") + "\nadd_custom_button|playing_music|image:interface/large/gui_wrench_playingmusic.rttex;image_size:400,260;width:0.19;||\nadd_custom_button|Bank_Central|image:interface/large/gui_wrench_bank.rttex;image_size:400,260;width:0.19;||\nadd_custom_button|trade_scan|image:interface/large/gui_wrench_trades.rttex;image_size:400,260;width:0.19;|\nadd_custom_button|wrench_edit|image:interface/large/gui_wrench_customization.rttex;image_size:400,260;width:0.19;|\nadd_custom_button|game_menu|image:interface/large/gui_wrench_gamemenu.rttex;image_size:400,260;width:0.19;||\nadd_custom_button|account_security|image:interface/large/gui_wrench_account.rttex;image_size:400,260;width:0.19;|" + (WinterFest.Active ? "\nadd_custom_button|royal_winter_wonder|image:interface/large/gui_wrench_royal_winter_seals.rttex;image_size:400,260;width:0.19;|" : "") + "" + Ezio + "|\nadd_custom_break|\nadd_spacer|small|\nadd_custom_button|fav_items|image:interface/large/tianvan/gui_button_2.rttex;image_size:495,170;frame:0,4;width:0.2;|" + (pInfo(peer)->tankIDName == "Ocho" ? "\nadd_custom_button|creatortools|image:interface/large/tianvan/gui_button_2.rttex;image_size:495,170;frame:0,3;width:0.2;|" : "") + "\nadd_custom_break|\nadd_spacer|small|\nset_custom_spacing|x:0;y:0||" + form_mods(pInfo(peer), 0) + "|\nadd_spacer|small|\nadd_textbox|`oYou have `w" + to_string(pInfo(peer)->inv.size() - 1) + "`` backpack slots.``|left|\nadd_textbox|`oCurrent world: `w" + pInfo(peer)->world + "`` (`w" + to_string(pInfo(peer)->x / 32) + "``, `w" + to_string(pInfo(peer)->y / 32) + "``) (`w" + to_string(ServerPool::PlayerCountWorld(pInfo(peer)->world)) + "`` person)````|left|" + (not pInfo(peer)->home_world.empty() ? "\nadd_smalltext|`oHome World:" + pInfo(peer)->home_world + "|left|" : "") + "\nadd_textbox|" + (pInfo(peer)->supp == 0 ? "`oYou are not yet a `2Supporter`` or `5Super Supporter``.``" : pInfo(peer)->supp == 1 ? "`oYou are a `5Supporter`` and have the `wRecycler``.``" : pInfo(peer)->supp == 2 ? "`oYou are a `5Super Supporter`` and have the `wRecycler`` and `w/warp``.``" : "") + "|left|\nadd_textbox|`oYou are standing on the note \"A\".``|left|\nadd_spacer|small|\nadd_textbox|`oTotal time played is `w" + rounded + "`` hours.  This account was created `w" + to_string(days_ - pInfo(peer)->account_created) + "`` days ago.``|left|\nadd_spacer|small|\nadd_custom_button|close|textLabel:`wClose;|\nadd_custom_button|Logout_MyAcc|textLabel:`wLogout from this Account;anchor:_button_close;left:1;margin:60,0;middle_colour:2415764;border_colour:2415764;|\nend_dialog|popup|||\nadd_quick_exit|", 500);
		}
	}
}
uint16_t get_epoch_weather(WorldBlock block) {
	if (block.fg == 5958) {
		if (block.epoch_state.first[0] == true) return 38;
		if (block.epoch_state.first[1] == true) return 39;
		if (block.epoch_state.first[2] == true) return 40;
	}
	return 38;
}
string add_small_font_summer(string which) {
	return "\nadd_small_font_button|"+which+"|Claim Reward|noflags|0|0|";
}
string make_trade_offer(Player* p_, bool special_ = false) {
	if (p_->trade_items.size() == 0 and not special_)  return "\nadd_textbox|`4Nothing!``|left|";
	string list_ = "";
	for (int i_ = 0; i_ < p_->trade_items.size(); i_++) {
		map<string, int>::iterator it;
		for (auto it = p_->trade_items[i_].begin(); it != p_->trade_items[i_].end(); it++) {
			if (special_) {
				list_ += "add_slot|" + to_string(it->first) + "|" + to_string(it->second) + "\n";
			}
			else {
				list_ += "\nadd_label_with_icon|small|(`w" + to_string(it->second) + "``) " + items[it->first].ori_name + "|left|" + to_string(it->first) + "|";
			}
		}
	}
	return list_;
}
void send_trade_confirm_dialog(ENetPeer* peer, ENetPeer* cp_, bool self_only = false) {
	pInfo(peer)->block_trade = true;
	pInfo(cp_)->block_trade = true;
	std::string name_ = pInfo(peer)->world;
	std::vector<World>::iterator p = find_if(worlds.begin(), worlds.end(), [name_](const World& a) { return a.name == name_; });
	if (p != worlds.end()) {
		World* world_ = &worlds[p - worlds.begin()];
		bool world_key_p = false, world_key_cp = false;
		bool guild_key_p = false, guild_key_cp = false;
		std::string lock = "";
		for (int i_ = 0; i_ < pInfo(peer)->trade_items.size(); i_++) {
			if (world_key_p  or guild_key_p) break;
			std::map<std::string, int>::iterator it;
			for (auto it = pInfo(peer)->trade_items[i_].begin(); it != pInfo(peer)->trade_items[i_].end(); it++) {
				if (it->first == 1424  or it->first == 5816) {
					if (it->first == 5816) guild_key_p = true;
					else world_key_p = true;
					{
						std::vector<WorldBlock>::iterator p = find_if(world_->blocks.begin(), world_->blocks.end(), [&](const WorldBlock& a) { return items[a.fg].blockType == BlockTypes::LOCK && a.fg != 202 && a.fg != 204 && a.fg != 206 && a.fg != 4994 && a.fg != 10000; });
						if (p != world_->blocks.end()) {
							int i_ = p - world_->blocks.begin();
							WorldBlock* block__ = &world_->blocks[p - world_->blocks.begin()];
							uint32_t id_ = block__->fg;
							lock = items[id_].name;
						}
					}
					break;
				}
			}
		} for (int i_ = 0; i_ < pInfo(cp_)->trade_items.size(); i_++) {
			if (world_key_cp  or guild_key_cp) break;
			std::map<std::string, int>::iterator it;
			for (auto it = pInfo(cp_)->trade_items[i_].begin(); it != pInfo(cp_)->trade_items[i_].end(); it++) {
				if (it->first == 1424  or it->first == 5816) {
					if (it->first == 5816) guild_key_cp = true;
					else world_key_cp = true;
					{
						std::vector<WorldBlock>::iterator p = find_if(world_->blocks.begin(), world_->blocks.end(), [&](const WorldBlock& a) { return items[a.fg].blockType == BlockTypes::LOCK && a.fg != 202 && a.fg != 204 && a.fg != 206 && a.fg != 4994 && a.fg != 10000; });
						if (p != world_->blocks.end()) {
							int i_ = p - world_->blocks.begin();
							WorldBlock* block__ = &world_->blocks[p - world_->blocks.begin()];
							uint32_t id_ = block__->fg;
							lock = items[id_].name;
						}
					}
					break;
				}
			}
		}
		std::string g_name = "";
		if (guild_key_p or guild_key_cp) {
			uint32_t guild_id = world_->guild_id;
			std::vector<Guild>::iterator p = find_if(guilds.begin(), guilds.end(), [guild_id](const Guild& a) { return a.guild_id == guild_id; });
			if (p != guilds.end()) {
				Guild* guild_information = &guilds[p - guilds.begin()];
				g_name = guild_information->guild_name;
			}
		}
		gamepacket_t p;
		p.Insert("OnDialogRequest");
		p.Insert("set_default_color|`o\nadd_label_with_icon|big|`wTrade Confirmation``|left|1366|\nadd_spacer|small|\nadd_textbox|`4You'll give:``|left|\nadd_spacer|small|" + make_trade_offer(pInfo(peer)) + "\nadd_spacer|small|\nadd_textbox|`2You'll get:``|left|\nadd_spacer|small|" + make_trade_offer(pInfo(cp_)) + "\nadd_spacer|small|" + (pInfo(cp_)->trade_items.size() == 0 ? "\nadd_spacer|small|\nadd_textbox|`4SCAM WARNING: ``You are about to do a trade without receiving anything in return. Once you do the trade you cannot get the items back.|left|\nadd_textbox|`4Do you really want to do this?``|left|\nadd_spacer|small|" : "") + (guild_key_cp ? "\nadd_spacer|small|\nadd_textbox|`4SCAM WARNING: ``You are taking leadership of the guild: `#" + g_name + " and the guild world: " + world_->name + "``. Don't buy a world just to get its rare items, because scammers can easily place secret doors allowing someone to jump in and `4steal the items back`` after a trade!|left|\nadd_spacer|small|\nadd_textbox|Also, all ratings will be removed from a world when it is traded. Don't buy a world for its ranking!|left|\nadd_spacer|small|\nadd_textbox|To be safe, only buy a guild world for its name, guild mascot and placed blocks, not loose items or high ratings. Consider yourself warned!|left|\nadd_spacer|small|\nadd_textbox|This world is locked by " + lock + ".|left|\nadd_spacer|small|" : (world_key_cp ? "\nadd_spacer|small|\nadd_textbox|`4SCAM WARNING: ``You are buying this world, `#" + world_->name + "``. Don't buy a world just to get its rare items, because scammers can easily place secret doors allowing someone to jump in and `4steal the items back`` after a trade!|left|\nadd_spacer|small|\nadd_textbox|Also, all ratings will be removed from a world when it is traded. Don't buy a world for its ranking!|left|\nadd_spacer|small|\nadd_textbox|To be safe, only buy a world for its name and placed blocks, not loose items or high ratings. Consider yourself warned!|left|\nadd_spacer|small|\nadd_textbox|This world is locked by " + lock + ".|left|\nadd_spacer|small|" : (guild_key_p ? "\nadd_spacer|small|\nadd_textbox|`4WARNING: ``You are about to transfer guild leadership and your guild world `#" + world_->name + "`` - the guild lock ownership will be transferred over to " + get_player_nick(peer) + ".|left|\nadd_spacer|small|" : (world_key_p ? "\nadd_spacer|small|\nadd_textbox|`4WARNING: ``You are about to sell your world `#" + world_->name + "`` - the world lock ownership will be transferred over to " + get_player_nick(cp_) + ".|left|\nadd_spacer|small|" : "")))) + "\nadd_button|accept|Do The Trade!|noflags|0|0|\nadd_button|back|Cancel|noflags|0|0|\nend_dialog|trade_confirm|||");
		p.CreatePacket(peer);
		if (not self_only) {
			{
				gamepacket_t p;
				p.Insert("OnForceTradeEnd");
				p.CreatePacket(cp_);
			}
			gamepacket_t p;
			p.Insert("OnDialogRequest");
			p.Insert("set_default_color|`o\nadd_label_with_icon|big|`wTrade Confirmation``|left|1366|\nadd_spacer|small|\nadd_textbox|`4You'll give:``|left|\nadd_spacer|small|" + make_trade_offer(pInfo(cp_)) + "\nadd_spacer|small|\nadd_textbox|`2You'll get:``|left|\nadd_spacer|small|" + make_trade_offer(pInfo(peer)) + "\nadd_spacer|small|" + (pInfo(peer)->trade_items.size() == 0 ? "\nadd_spacer|small|\nadd_textbox|`4SCAM WARNING: ``You are about to do a trade without receiving anything in return. Once you do the trade you cannot get the items back.|left|\nadd_textbox|`4Do you really want to do this?``|left|\nadd_spacer|small|" : "") + (guild_key_p ? "\nadd_spacer|small|\nadd_textbox|`4SCAM WARNING: ``You are taking leadership of the guild: `#" + g_name + " and the guild world: " + world_->name + "``. Don't buy a world just to get its rare items, because scammers can easily place secret doors allowing someone to jump in and `4steal the items back`` after a trade!|left|\nadd_spacer|small|\nadd_textbox|Also, all ratings will be removed from a world when it is traded. Don't buy a world for its ranking!|left|\nadd_spacer|small|\nadd_textbox|To be safe, only buy a guild world for its name, guild mascot and placed blocks, not loose items or high ratings. Consider yourself warned!|left|\nadd_spacer|small|\nadd_textbox|This world is locked by " + lock + ".|left|\nadd_spacer|small|" : (world_key_p ? "\nadd_spacer|small|\nadd_textbox|`4SCAM WARNING: ``You are buying this world, `#" + world_->name + "``. Don't buy a world just to get its rare items, because scammers can easily place secret doors allowing someone to jump in and `4steal the items back`` after a trade!|left|\nadd_spacer|small|\nadd_textbox|Also, all ratings will be removed from a world when it is traded. Don't buy a world for its ranking!|left|\nadd_spacer|small|\nadd_textbox|To be safe, only buy a world for its name and placed blocks, not loose items or high ratings. Consider yourself warned!|left|\nadd_spacer|small|\nadd_textbox|This world is locked by " + lock + ".|left|\nadd_spacer|small|" : (guild_key_cp ? "\nadd_spacer|small|\nadd_textbox|`4WARNING: ``You are about to transfer guild leadership and your guild world `#" + world_->name + "`` - the guild lock ownership will be transferred over to " + get_player_nick(peer) + ".|left|\nadd_spacer|small|" : (world_key_cp ? "\nadd_spacer|small|\nadd_textbox|`4WARNING: ``You are about to sell your world `#" + world_->name + "`` - the world lock ownership will be transferred over to " + get_player_nick(peer) + ".|left|\nadd_spacer|small|" : "")))) + "\nadd_button|accept|Do The Trade!|noflags|0|0|\nadd_button|back|Cancel|noflags|0|0|\nend_dialog|trade_confirm|||");
			p.CreatePacket(cp_);
		}
	}
}
void mod_trade(ENetPeer* p_, int item_id, int count, bool remove = false) {
	if (pInfo(p_)->trading_with == -1) return;
	for (ENetPeer* cp_ = server->peers; cp_ < &server->peers[server->peerCount]; ++cp_) {
		if (cp_->state != ENET_PEER_STATE_CONNECTED or cp_->data == NULL) continue;
		if (pInfo(cp_)->world == pInfo(p_)->world) {
			if (pInfo(cp_)->netID == pInfo(p_)->trading_with and pInfo(p_)->netID == pInfo(cp_)->trading_with) {
				std::string name_ = pInfo(p_)->world;
				std::vector<World>::iterator p = find_if(worlds.begin(), worlds.end(), [name_](const World& a) { return a.name == name_; });
				if (p != worlds.end()) {
					World* world_ = &worlds[p - worlds.begin()];
					if (pInfo(p_)->block_trade or pInfo(cp_)->block_trade) {
						cancel_trade(pInfo(p_)->block_trade ? p_ : cp_, false);
						return;
					}
					if (item_id == 5816 and to_lower(pInfo(p_)->tankIDName) != to_lower(world_->owner_name) and not Role::Administrator(p_) or item_id == 1424 and to_lower(pInfo(p_)->tankIDName) != to_lower(world_->owner_name) and not Role::Administrator(p_)) {
						CAction::Positioned(p_, pInfo(p_)->netID, "audio/cant_place_tile.wav", 0);
						gamepacket_t p;
						p.Insert("OnTextOverlay");
						p.Insert("You can only trade World Keys in a world you own!");
						p.CreatePacket(p_);
						break;
					}
					if (item_id == 5816 and pInfo(p_)->guild_id == 0 or item_id == 5816 and pInfo(p_)->guild_id != pInfo(cp_)->guild_id) {
						CAction::Positioned(p_, pInfo(p_)->netID, "audio/cant_place_tile.wav", 0);
						gamepacket_t p;
						p.Insert("OnTextOverlay");
						p.Insert("The person must join your guild first!");
						p.CreatePacket(p_);
						break;
					}
					if (remove) {
						int count_ = 0;
						for (int i_ = 0; i_ < pInfo(p_)->trade_items.size(); i_++) {
							auto i = pInfo(p_)->trade_items[i_].find(item_id);
							if (i != pInfo(p_)->trade_items[i_].end()) {
								map<string, int>::iterator it;
								for (auto it = pInfo(p_)->trade_items[i_].begin(); it != pInfo(p_)->trade_items[i_].end(); it++) {
									if (it->first == item_id)
										count_ = it->second;
								}
								pInfo(p_)->trade_items.erase(pInfo(p_)->trade_items.begin() + i_);
								break;
							}
						}
						gamepacket_t p;
						p.Insert("OnConsoleMessage");
						p.Insert("`1TRADE CHANGE: `` " + get_player_nick(p_) + " removed `w" + to_string(count_) + "`` " + items[item_id].name);
						p.CreatePacket(cp_);
						if (count_ == 0) cancel_trade(p_);
					}
					else {
						if (count == 0)break;
						bool f_ = false;
						for (int i_ = 0; i_ < pInfo(p_)->trade_items.size(); i_++) {
							map<string, int>::iterator it;
							for (auto it = pInfo(p_)->trade_items[i_].begin(); it != pInfo(p_)->trade_items[i_].end(); it++) {
								if (it->first == item_id and it->second == count) {
									swap(pInfo(p_)->trade_items[i_], pInfo(p_)->trade_items.back());
									f_ = true;
									break;
								}
								else if (it->first == item_id and it->second != count) {
									swap(pInfo(p_)->trade_items[i_], pInfo(p_)->trade_items.back());
									f_ = true;
									it->second = count;
									break;
								}
							}
						} if (not f_) {
							if (count == 0)break;
							if (pInfo(p_)->trade_items.size() > 3) return;
							map<int, int> new_;
							new_.insert({ item_id, count });
							pInfo(p_)->trade_items.push_back(new_);
						}
						else {
							gamepacket_t p;
							p.Insert("OnConsoleMessage");
							p.Insert("`1TRADE CHANGE: `` " + get_player_nick(p_) + " removed `w" + to_string(count) + "`` " + items[item_id].name);
							p.CreatePacket(cp_);
							if (count == 0) cancel_trade(cp_);
						}
						if (count == 0)break;
						gamepacket_t p;
						p.Insert("OnConsoleMessage");
						p.Insert("`1TRADE CHANGE: `` " + get_player_nick(p_) + " added `w" + to_string(count) + "`` " + items[item_id].name);
						p.CreatePacket(cp_);
					}
					if (pInfo(p_)->trade_accept == 1) {
						{
							gamepacket_t p;
							p.Insert("OnTradeStatus");
							p.Insert(pInfo(p_)->netID);
							p.Insert("");
							p.Insert("`o" + get_player_nick(p_) + "'s offer.``");
							p.Insert("locked|0\nreset_locks|1\naccepted|0");
							p.CreatePacket(p_);
						}
						gamepacket_t p;
						p.Insert("OnTradeStatus");
						p.Insert(pInfo(p_)->netID);
						p.Insert("");
						p.Insert("`o" + get_player_nick(p_) + "'s offer.``");
						p.Insert("locked|0\naccepted|1");
						p.CreatePacket(p_);
						{
							gamepacket_t p;
							p.Insert("OnTradeStatus");
							p.Insert(pInfo(p_)->netID);
							p.Insert("");
							p.Insert("`o" + get_player_nick(p_) + "'s offer.``");
							p.Insert("locked|0\nreset_locks|1\naccepted|0");
							p.CreatePacket(p_);
						}
					}
					gamepacket_t p;
					p.Insert("OnTradeStatus");
					p.Insert(pInfo(p_)->netID);
					p.Insert("");
					p.Insert("`o" + get_player_nick(p_) + "'s offer.``");
					p.Insert(make_trade_offer(pInfo(p_), true) + "locked|0\naccepted|0");
					p.CreatePacket(p_);
					{
						{
							gamepacket_t p;
							p.Insert("OnTradeStatus");
							p.Insert(pInfo(cp_)->netID);
							p.Insert("");
							p.Insert("`o" + get_player_nick(cp_) + "'s offer.``");
							p.Insert("locked|0\nreset_locks|1\naccepted|0");
							p.CreatePacket(cp_);
						}
						gamepacket_t p;
						p.Insert("OnTradeStatus");
						p.Insert(pInfo(cp_)->netID);
						p.Insert("");
						p.Insert("`o" + get_player_nick(cp_) + "'s offer.``");
						p.Insert("locked|0\naccepted|1");
						p.CreatePacket(cp_);
						{
							gamepacket_t p;
							p.Insert("OnTradeStatus");
							p.Insert(pInfo(cp_)->netID);
							p.Insert("");
							p.Insert("`o" + get_player_nick(cp_) + "'s offer.``");
							p.Insert(make_trade_offer(pInfo(cp_), true) + "locked|0\nreset_locks|1\naccepted|0");
							p.CreatePacket(cp_);
						}
						{
							gamepacket_t p;
							p.Insert("OnTradeStatus");
							p.Insert(pInfo(p_)->netID);
							p.Insert("");
							p.Insert("`o" + get_player_nick(p_) + "'s offer.``");
							p.Insert(make_trade_offer(pInfo(p_), true) + "locked|0\nreset_locks|1\naccepted|0");
							p.CreatePacket(cp_);
						}
						{
							gamepacket_t p;
							p.Insert("OnTradeStatus");
							p.Insert(pInfo(cp_)->netID);
							p.Insert("");
							p.Insert("`o" + get_player_nick(cp_) + "'s offer.``");
							p.Insert(make_trade_offer(pInfo(cp_), true) + "locked|0\nreset_locks|1\naccepted|0");
							p.CreatePacket(p_);
						}
					}
					{
						CAction::Positioned(p_, pInfo(p_)->netID, "audio/tile_removed.wav", 0);
						CAction::Positioned(cp_, pInfo(cp_)->netID, "audio/tile_removed.wav", 0);
						gamepacket_t p;
						p.Insert("OnTextOverlay");
						p.Insert("The deal has changed");
						p.CreatePacket(p_), p.CreatePacket(cp_);
					}
					pInfo(p_)->trade_accept = 0, pInfo(cp_)->trade_accept = 0;
				}
				return;
			}
		}
	}
	if (remove) {
		for (int i_ = 0; i_ < pInfo(p_)->trade_items.size(); i_++) {
			auto i = pInfo(p_)->trade_items[i_].find(item_id);
			if (i != pInfo(p_)->trade_items[i_].end()) {
				pInfo(p_)->trade_items.erase(pInfo(p_)->trade_items.begin() + i_);
				break;
			}
		}
	}
	else {
		if (count == 0)return;
		bool f_ = false;
		for (int i_ = 0; i_ < pInfo(p_)->trade_items.size(); i_++) {
			map<string, int>::iterator it;
			for (auto it = pInfo(p_)->trade_items[i_].begin(); it != pInfo(p_)->trade_items[i_].end(); it++) {
				if (it->first == item_id and it->second == count) {
					swap(pInfo(p_)->trade_items[i_], pInfo(p_)->trade_items.back());
					f_ = true;
					break;
				}
				else if (it->first == item_id and it->second != count) {
					swap(pInfo(p_)->trade_items[i_], pInfo(p_)->trade_items.back());
					f_ = true;
					it->second = count;
					break;
				}
			}
		}
		if (not f_) {
			if (count == 0)return;
			if (pInfo(p_)->trade_items.size() > 3) return;
			std::map<int, int> new_;
			new_.insert({ item_id, count });
			pInfo(p_)->trade_items.push_back(new_);
		}
	}
	std::string name_ = pInfo(p_)->world;
	std::vector<World>::iterator p = find_if(worlds.begin(), worlds.end(), [name_](const World& a) { return a.name == name_; });
	if (p != worlds.end()) {
		World* world_ = &worlds[p - worlds.begin()];
		if (pInfo(p_)->trade_accept == 1) {
			{
				gamepacket_t p;
				p.Insert("OnTradeStatus");
				p.Insert(pInfo(p_)->netID);
				p.Insert("");
				p.Insert("`o" + get_player_nick(p_) + "'s offer.``");
				p.Insert("locked|0\nreset_locks|1\naccepted|0");
				p.CreatePacket(p_);
			}
			gamepacket_t p;
			p.Insert("OnTradeStatus");
			p.Insert(pInfo(p_)->netID);
			p.Insert("");
			p.Insert("`o" + get_player_nick(p_) + "'s offer.``");
			p.Insert("locked|0\naccepted|1");
			p.CreatePacket(p_);
			{
				gamepacket_t p;
				p.Insert("OnTradeStatus");
				p.Insert(pInfo(p_)->netID);
				p.Insert("");
				p.Insert("`o" + get_player_nick(p_) + "'s offer.``");
				p.Insert("locked|0\nreset_locks|1\naccepted|0");
				p.CreatePacket(p_);
			}
		}
		gamepacket_t p;
		p.Insert("OnTradeStatus");
		p.Insert(pInfo(p_)->netID);
		p.Insert("");
		p.Insert("`o" + get_player_nick(p_) + "'s offer.``");
		p.Insert(make_trade_offer(pInfo(p_), true) + "locked|0\naccepted|0");
		p.CreatePacket(p_);
		{
			if (pInfo(p_)->trade_accept == 1) {
				CAction::Positioned(p_, pInfo(p_)->netID, "audio/tile_removed.wav", 0);
				gamepacket_t p;
				p.Insert("OnTextOverlay");
				p.Insert("The deal has changed");
				p.CreatePacket(p_);
				pInfo(p_)->trade_accept = 0;
			}
		}
	}
}
class Punishment {
public:
	static void Muted_Cursed(ENetPeer* peer, long long int seconds, string reason, string muttedby, int playmod_id = 11) {
		if (not Playmods::HasById(pInfo(peer), 139)) {
			for (ENetPeer* cp_ = server->peers; cp_ < &server->peers[server->peerCount]; ++cp_) {
				if (cp_->state != ENET_PEER_STATE_CONNECTED or cp_->data == NULL) continue;
				VarList::OnConsoleMessage(cp_, "`#**`` `$The Gods`` have " + to_lower(info_about_playmods[playmod_id - 1][3]) + (playmod_id != 76 ? "d" : "") + " " + (get_player_nick(peer)) + "`o" + (playmod_id == 11 ? "'s mouth" : "") + " `#**`` (`4/rules`` to see the rules!)");
			}
			if (playmod_id == 139) {
				string w = "HELL";
				Enter_World(peer, w);
			}
			VarList::OnConsoleMessage(peer, "`oWarning from `4System``: You've been `4" + info_about_playmods[playmod_id - 1][3] + (playmod_id != 76 ? "d" : "") + "`` for " + ((seconds / 86400 > 0) ? to_string(seconds / 86400) + " days" : (seconds / 3600 > 0) ? to_string(seconds / 3600) + " hours" : (seconds / 60 > 0) ? to_string(seconds / 60) + " minutes" : to_string(seconds) + " seconds"));
			VarList::OnAddNotification(peer, "`wWarning from `4System``: You've been `4" + info_about_playmods[playmod_id - 1][3] + "`` for " + ((seconds / 86400 > 0) ? to_string(seconds / 86400) + " days" : (seconds / 3600 > 0) ? to_string(seconds / 3600) + " hours" : (seconds / 60 > 0) ? to_string(seconds / 60) + " minutes" : to_string(seconds) + " seconds"), "interface/atomic_button.rttex", "audio/hub_open.wav");
			Playmods::Add(peer, playmod_id, seconds);
			VisualHandle::State(pInfo(peer));
			Clothing_V2::Update(peer, true);
			//Webhook::Punishment((playmod_id == 11 ? "Mute" : "Curse"), get_player_nick(peer), reason, muttedby, seconds);
		}
	}
	static void Banned(ENetPeer* peer, long long int seconds, string reason, string muttedby, int playmod_id, bool autoban = false) {
		if (not Playmods::HasById(pInfo(peer), playmod_id)) {
			for (ENetPeer* cp_ = server->peers; cp_ < &server->peers[server->peerCount]; ++cp_) {
				if (cp_->state != ENET_PEER_STATE_CONNECTED or cp_->data == NULL) continue;
				if (autoban) VarList::OnConsoleMessage(cp_, "`4** `$" + pInfo(peer)->tankIDName + " `4AUTO-BANNED BY SYSTEM **`` (`$/rules ``to view rules)");
				VarList::OnConsoleMessage(cp_, "`#**`` `$The Gods`` have " + to_lower(info_about_playmods[playmod_id - 1][3]) + (playmod_id != 76 ? "d" : "") + " " + (get_player_nick(peer)) + "`o" + (playmod_id == 11 ? "'s mouth" : "") + " `#**`` (`4/rules`` to see the rules!)");
			}
			VarList::OnConsoleMessage(peer, "`oWarning from `4System``: You've been `4" + info_about_playmods[playmod_id - 1][3] + (playmod_id != 76 ? "d" : "") + "`` for " + ((seconds / 86400 > 0) ? to_string(seconds / 86400) + " days" : (seconds / 3600 > 0) ? to_string(seconds / 3600) + " hours" : (seconds / 60 > 0) ? to_string(seconds / 60) + " minutes" : to_string(seconds) + " seconds"));
			VarList::OnAddNotification(peer, "`wWarning from `4System``: You've been `4" + info_about_playmods[playmod_id - 1][3] + "`` for " + ((seconds / 86400 > 0) ? to_string(seconds / 86400) + " days" : (seconds / 3600 > 0) ? to_string(seconds / 3600) + " hours" : (seconds / 60 > 0) ? to_string(seconds / 60) + " minutes" : to_string(seconds) + " seconds"), "interface/atomic_button.rttex", "audio/hub_open.wav");
			pInfo(peer)->bans.push_back("`4Banned `6ON:`` `#" + (not pInfo(peer)->d_name.empty() ? pInfo(peer)->d_name : pInfo(peer)->tankIDName) + "`` `0(" + pInfo(peer)->requestedName + ") #" + to_string(pInfo(peer)->id) + "`` Time: " + ((seconds / 86400 > 0) ? to_string(seconds / 86400) + " days" : (seconds / 3600 > 0) ? to_string(seconds / 3600) + " hours" : (seconds / 60 > 0) ? to_string(seconds / 60) + " minutes" : to_string(seconds) + " seconds") + " IP: " + pInfo(peer)->ip + " (banned by: " + muttedby + ", reason: " + reason + ")");
			pInfo(peer)->b_s = (seconds * 1000);
			pInfo(peer)->b_r = reason;
			pInfo(peer)->b_b = muttedby;
			pInfo(peer)->b_t = (duration_cast<milliseconds>(system_clock::now().time_since_epoch())).count();
			Playmods::Add(peer, playmod_id, seconds);
			VisualHandle::State(pInfo(peer));
			Clothing_V2::Update(peer, true);
			Peer_Disconnect(peer, 0);
			//Webhook::Punishment("Banned", get_player_nick(peer), reason, muttedby, seconds);
		}
	}
};
bool UnsafeEdit(ENetPeer* peer, World* world_, string action, CL_Vec2i center, int radius, int item) {
	auto inside_circle = [&](CL_Vec2i center, CL_Vec2i tile, int radius) -> bool {
		float dx = center.x - tile.x, dy = center.y - tile.y;
		float distance = sqrt(dx * dx + dy * dy);
		return distance <= radius;
		};
	if (action == "add") {
		for (int i = 0; i < world_->blocks.size(); i++) {
			int ySize = world_->blocks.size() / 100, xSize = world_->blocks.size() / ySize;
			int x = i % xSize, y = i / xSize;
			if (!inside_circle(center, { x, y }, radius)) continue;
			if (CL_Vec2i{ x, y } == center) continue;
			else if ((world_->blocks[x + (y * 100)].locked || items[world_->blocks[x + (y * 100)].fg].blockType == BlockTypes::LOCK || items[world_->blocks[x + (y * 100)].fg].blockType == BlockTypes::MAIN_DOOR || items[world_->blocks[x + (y * 100)].fg].blockType == BlockTypes::BEDROCK)) continue;
			if (world_->blocks[x + (y * 100)].fg == 0) {
				if (items[item].blockType == BlockTypes::BACKGROUND) {
					world_->blocks[x + (y * 100)].bg = item;
				}
				else {
					world_->blocks[x + (y * 100)].fg = item;
				}
			}
			PlayerMoving data_{};
			data_.packetType = 5, data_.punchX = x, data_.punchY = y, data_.characterState = 0x8;
			BYTE* raw = packPlayerMoving(&data_, 112 + alloc_(world_, &world_->blocks[i]));
			BYTE* blc = raw + 56;
			form_visual(blc, world_->blocks[x + (y * 100)], *world_, peer, false);
			for (ENetPeer* cp_ = server->peers; cp_ < &server->peers[server->peerCount]; ++cp_) {
				if (cp_->state != ENET_PEER_STATE_CONNECTED or cp_->data == NULL) continue;
				if (pInfo(cp_)->world == pInfo(peer)->world) {
					send_raw(cp_, 4, raw, 112 + alloc_(world_, &world_->blocks[x + (y * 100)]), ENET_PACKET_FLAG_RELIABLE);
				}
			}
			delete[]raw;
		}
		return true;
	}
	else if (action == "erase") {
		for (int i = 0; i < world_->blocks.size(); i++) {
			int ySize = world_->blocks.size() / 100, xSize = world_->blocks.size() / ySize;
			int x = i % xSize, y = i / xSize;
			if (!inside_circle(center, { x, y }, radius)) continue;
			if (CL_Vec2i{ x, y } == center) continue;
			else if ((world_->blocks[x + (y * 100)].locked || items[world_->blocks[x + (y * 100)].fg].blockType == BlockTypes::LOCK || items[world_->blocks[x + (y * 100)].fg].blockType == BlockTypes::MAIN_DOOR || items[world_->blocks[x + (y * 100)].fg].blockType == BlockTypes::BEDROCK)) continue;
			if (world_->blocks[x + (y * 100)].fg == item) {
				if (items[item].blockType == BlockTypes::BACKGROUND) {
					world_->blocks[x + (y * 100)].bg = 0;
				}
				else {
					world_->blocks[x + (y * 100)].fg = 0;
				}
			}
			PlayerMoving data_{};
			data_.packetType = 5, data_.punchX = x, data_.punchY = y, data_.characterState = 0x8;
			BYTE* raw = packPlayerMoving(&data_, 112 + alloc_(world_, &world_->blocks[i]));
			BYTE* blc = raw + 56;
			form_visual(blc, world_->blocks[x + (y * 100)], *world_, peer, false);
			for (ENetPeer* cp_ = server->peers; cp_ < &server->peers[server->peerCount]; ++cp_) {
				if (cp_->state != ENET_PEER_STATE_CONNECTED or cp_->data == NULL) continue;
				if (pInfo(cp_)->world == pInfo(peer)->world) {
					send_raw(cp_, 4, raw, 112 + alloc_(world_, &world_->blocks[x + (y * 100)]), ENET_PACKET_FLAG_RELIABLE);
				}
			}
			delete[]raw;
		}
		return true;
	}
	else if (action == "addobject") {
		for (int i = 0; i < world_->blocks.size(); i++) {
			int ySize = world_->blocks.size() / 100, xSize = world_->blocks.size() / ySize;
			int x = i % xSize, y = i / xSize;
			if (!inside_circle(center, { x, y }, radius)) continue;
			if (CL_Vec2i{ x, y } == center) continue;
			else if ((world_->blocks[x + (y * 100)].locked || items[world_->blocks[x + (y * 100)].fg].blockType == BlockTypes::LOCK || items[world_->blocks[x + (y * 100)].fg].blockType == BlockTypes::MAIN_DOOR || items[world_->blocks[x + (y * 100)].fg].blockType == BlockTypes::BEDROCK)) continue;
			WorldDrop obj{};
			obj.id = item, obj.count = 1, obj.uid = uint16_t(world_->drop_new.size()) + 1, obj.x = (x * 32) + 8, obj.y = (y * 32) + 8;
			VisualHandle::Drop(world_, obj);
		}
		return true;
	}
	else if (action == "clearobject") {
		for (int i = 0; i < world_->blocks.size(); i++) {
			int ySize = world_->blocks.size() / 100, xSize = world_->blocks.size() / ySize;
			int x = i % xSize, y = i / xSize;
			if (!inside_circle(center, { x, y }, radius)) continue;
			if (CL_Vec2i{ x, y } == center) continue;
			else if ((world_->blocks[x + (y * 100)].locked || items[world_->blocks[x + (y * 100)].fg].blockType == BlockTypes::LOCK || items[world_->blocks[x + (y * 100)].fg].blockType == BlockTypes::MAIN_DOOR || items[world_->blocks[x + (y * 100)].fg].blockType == BlockTypes::BEDROCK)) continue;
			for (int j = 0; j < world_->drop_new.size(); j++) {
				if (world_->drop_new[j][3] < ((x * 32) + 20) && world_->drop_new[j][3] >((x * 32) - 12) && world_->drop_new[j][4] < ((y * 32) + 20) && world_->drop_new[j][4] >((y * 32) - 12)) {
					world_->drop_new[j][1] = 0;
					PlayerMoving data_{};
					data_.packetType = 14, data_.netID = -2, data_.plantingTree = world_->drop_new[j][2];
					BYTE* raw = packPlayerMoving(&data_);
					int32_t item = -1;
					Memory_Copy(raw + 8, &item, 4);
					for (ENetPeer* cp_ = server->peers; cp_ < &server->peers[server->peerCount]; ++cp_) {
						if (cp_->state != ENET_PEER_STATE_CONNECTED or cp_->data == NULL) continue;
						if (pInfo(cp_)->world == world_->name) {
							send_raw(cp_, 4, raw, 56, ENET_PACKET_FLAG_RELIABLE);
						}
					}
					world_->drop_new[j][0] = 0, world_->drop_new[j][3] = -1, world_->drop_new[j][4] = -1;
					delete[]raw;
				}
			}
		}
		return true;
	}
	return false;
}
void chat_message(ENetPeer* peer, string message) {
	string::difference_type count_of_symbol = std::count(message.begin(), message.end(), '`');
	if (count_of_symbol > 10) return;
	if (Playmods::HasById(pInfo(peer), 11) || Playmods::HasByName(pInfo(peer), "Iron MMMFF")) {
		string msg2 = "";
		for (int i = 0; i < message.length(); i++) {
			if (isspace(message[i])) msg2 += " ";
			else {
				if (isupper(message[i])) msg2 += i % 2 == 0 ? "M" : "F";
				else msg2 += i % 2 == 0 ? "m" : "f";
			}
		}
		message = msg2;
	}
	std::string check_ = message;
	transform(check_.begin(), check_.end(), check_.begin(), ::tolower);
	{
		std::string name_ = pInfo(peer)->world;
		std::vector<World>::iterator p = find_if(worlds.begin(), worlds.end(), [name_](const World& a) { return a.name == name_; });
		if (p != worlds.end()) {
			World* world_ = &worlds[p - worlds.begin()];
			if (world_->world_settings & SETTINGS::SETTINGS_8 and not Role::Moderator(peer) and to_lower(world_->owner_name) != to_lower(pInfo(peer)->tankIDName) and find(world_->admins.begin(), world_->admins.end(), to_lower(pInfo(peer)->tankIDName)) == world_->admins.end()) {
				VarList::OnTalkBubble(peer, pInfo(peer)->netID, "`1(Peasants must not speak)", 0, 1);
				return;
			}
		}
	}
	bool warned = false;
	pInfo(peer)->not_same++;
	if (pInfo(peer)->last_input_text == message) pInfo(peer)->same_input++;
	pInfo(peer)->last_input_text = message;
	if (pInfo(peer)->last_spam_detection + 5500 < (duration_cast<milliseconds>(system_clock::now().time_since_epoch())).count()) pInfo(peer)->last_spam_detection = (duration_cast<milliseconds>(system_clock::now().time_since_epoch())).count(), pInfo(peer)->same_input = 0, pInfo(peer)->not_same = 0;
	if (pInfo(peer)->same_input >= 3 || pInfo(peer)->not_same >= 5) {
		VarList::OnConsoleMessage(peer, "`6>>`4Spam detected! ``Please wait a bit before typing anything else.  Please note, any form of bot/macro/auto-paste will get all your accounts banned, so don't do it!");
	}
	else {
		std::string chat_color = "`$";
		if (pInfo(peer)->d_name.empty() && pInfo(peer)->tmod == 0) {
			chat_color = Role::Moderator(peer) ? "`5" : "`$";
		}
		if (Playmods::HasById(pInfo(peer), 28) || pInfo(peer)->hair == 5718) {
			chat_color = "`2";
			if (Playmods::HasById(pInfo(peer), 28) && rand() % 5 < 1) chat_color += "Brraaiinnss...";
		}
		if (pInfo(peer)->face == 1170) {
			chat_color = "`4";
			replaceAll(message, "w", "v");
		}
		std::string chat = message;
		for (ENetPeer* cp_ = server->peers; cp_ < &server->peers[server->peerCount]; ++cp_) {
			if (cp_->state != ENET_PEER_STATE_CONNECTED or cp_->data == NULL) continue;
			if (pInfo(cp_)->world == pInfo(peer)->world) {
				if (find(pInfo(cp_)->ignored.begin(), pInfo(cp_)->ignored.end(), to_lower(pInfo(peer)->tankIDName)) == pInfo(cp_)->ignored.end()) {
					VarList::OnTalkBubble(cp_, pInfo(peer)->netID, chat, 0, 0);
					VarList::OnConsoleMessage(cp_, "CP:_PL:0_OID:_CT:[W]_ `6<`w" + (get_player_nick(peer)) + "`6> " + chat_color + message);
				}
			}
		}
	}
}
void SendFakeBan(ENetPeer* peer, std::string pm_user) {
	for (ENetPeer* cp_ = server->peers; cp_ < &server->peers[server->peerCount]; ++cp_) {
		if (cp_->state != ENET_PEER_STATE_CONNECTED or cp_->data == NULL or pInfo(peer)->growid == false) continue;
		if (to_lower(pInfo(cp_)->tankIDName) == to_lower(pm_user)) {
			VarList::OnAddNotification(cp_, "`wWarning from `4System`w: You've been `4BANNED from `wGrowtopia for 730 Day", "interface/atomic_button.rttex", "audio/hub_open.wav");
			break;
		}
	}
}
void SendBanIp(ENetPeer* peer, std::string name) {
	std::ifstream ifs("database/players/" + name + "_.json");
	if (ifs.is_open()) {
		json j;
		ifs >> j;
		if (find(Environment()->Rid_Bans.begin(), Environment()->Rid_Bans.end(), j["ip"].get<string>()) != Environment()->Rid_Bans.end()) {
			Environment()->Rid_Bans.erase(remove(Environment()->Rid_Bans.begin(), Environment()->Rid_Bans.end(), j["ip"].get<string>()), Environment()->Rid_Bans.end());
			VarList::OnConsoleMessage(peer, "`o>> Unbanned IP " + j["name"].get<string>());
			ServerPool::Logs::Add(pInfo(peer)->tankIDName + " has un-banned ip " + j["name"].get<string>() + ".", "BAN IP");
		}
		else {
			Environment()->Rid_Bans.push_back(j["ip"].get<string>());
			VarList::OnConsoleMessage(peer, "`o>> Banned IP " + j["name"].get<string>());
			ServerPool::Logs::Add(pInfo(peer)->tankIDName + " has banned ip " + j["name"].get<string>() + ".", "BAN IP");
			VarList::OnConsoleMessage(peer, "`#**`` `$The Gods `ohave used `5ban`` on " + j["name"].get<string>() + "`o from " + Environment()->server_name + " `#**`` (`4/rules`` to see the rules!)", true);
			for (ENetPeer* cp_ = server->peers; cp_ < &server->peers[server->peerCount]; ++cp_) {
				if (cp_->state != ENET_PEER_STATE_CONNECTED or cp_->data == NULL) continue;
				if (pInfo(cp_)->tankIDName == j["name"].get<string>()) {
					VarList::OnAddNotification(cp_, "`wWarning from `4System`w: You've been `4BANNED IP `wfrom " + Environment()->server_name + "!", "interface/atomic_button.rttex", "audio/hub_open.wav");
					Peer_Disconnect(cp_, 0);
				}
			}
		}
		j.clear();
	}
	else VarList::OnConsoleMessage(peer, " >> User was not found in our database.");
}
void SendBlacklist(ENetPeer* peer, std::string name) {
	std::ifstream ifs("database/players/" + name + "_.json");
	if (ifs.is_open()) {
		json j;
		ifs >> j;
		if (find(Environment()->BlackList.begin(), Environment()->BlackList.end(), j["name"].get<string>()) != Environment()->BlackList.end()) {
			Environment()->BlackList.erase(remove(Environment()->BlackList.begin(), Environment()->BlackList.end(), j["rid"].get<string>()), Environment()->BlackList.end());
			VarList::OnConsoleMessage(peer, "`oSuccesfully un-blacklist >> " + j["name"].get<string>() + " from Server.");
			ServerPool::Logs::Add("player: " + pInfo(peer)->tankIDName + "" + " un-Blacklist (" + " " + j["rid"].get<string>() + " " + ") - " + " " + j["name"].get<string>() + "", "/blacklist");
		}
		else {
			Environment()->BlackList.push_back(j["name"].get<string>());
			VarList::OnConsoleMessage(peer, "`oSuccesfully blacklist >> " + j["name"].get<string>() + " from Server.");
			ServerPool::Logs::Add("player: " + pInfo(peer)->tankIDName + "" + " Blacklist (" + " " + j["rid"].get<string>() + " " + ") - " + " " + j["name"].get<string>() + "", "/blacklist");
			VarList::OnConsoleMessage(peer, "`#**`` `$The Gods `ohave used Blacklist on " + j["name"].get<string>() + "`o from " + Environment()->server_name + " `#**`` (`4/rules`` to see the rules!)", true);
			for (ENetPeer* cp_ = server->peers; cp_ < &server->peers[server->peerCount]; ++cp_) {
				if (cp_->state != ENET_PEER_STATE_CONNECTED or cp_->data == NULL) continue;
				if (pInfo(cp_)->tankIDName == j["name"].get<string>()) {
					VarList::OnConsoleMessage(cp_, "`oWarning from `4System``: You've been `4BLACKLIST `ofrom " + Environment()->server_name + "");
					VarList::OnAddNotification(cp_, "`wWarning from `4System``: You've been `4BLACKLIST `wfrom " + Environment()->server_name + "", "interface/atomic_button.rttex", "audio/hub_open.wav");
					VisualHandle::State(pInfo(cp_));
					Clothing_V2::Update(cp_, true);
					Peer_Disconnect(cp_, 0);
				}
			}
		}
		j.clear();
	}
	else VarList::OnConsoleMessage(peer, " >> User was not found in our database.");
}
void SendMsg(ENetPeer* peer, std::string pm_user, std::string msg_info) {
	std::string name_ = pInfo(peer)->world;
	std::vector<World>::iterator paa = find_if(worlds.begin(), worlds.end(), [name_](const World& a) { return a.name == name_; });
	if (paa != worlds.end()) {
		World* world_ = &worlds[paa - worlds.begin()];
		world_->fresh_world = true;
		if (Playmods::HasById(pInfo(peer), 11)) {
			VarList::OnConsoleMessage(peer, "`6>> That's sort of hard to do while duct-taped.``");
			return;
		}
		if (msg_info.empty() or msg_info.size() < 1) {
			VarList::OnConsoleMessage(peer, "Usage: /msg <`$full or first part of a name``> <`$your message``> - This will send a private message to someone anywhere in the universe.  If you don't include a message, you can just see if he/she is online or not.");
			return;
		}
		std::string pm_message = msg_info; bool found = false;
		for (ENetPeer* cp_ = server->peers; cp_ < &server->peers[server->peerCount]; ++cp_) {
			if (cp_->state != ENET_PEER_STATE_CONNECTED or cp_->data == NULL) continue;
			if (pInfo(cp_)->m_h == 1 or pInfo(cp_)->invis == true) continue;
			if (to_lower(pInfo(cp_)->tankIDName) == to_lower(pm_user)) {
				if (find(pInfo(cp_)->ignored.begin(), pInfo(cp_)->ignored.end(), to_lower(pInfo(peer)->tankIDName)) != pInfo(cp_)->ignored.end()) {
					VarList::OnConsoleMessage(peer, "`6>> `4SYSTEM``: That user is ignoring you.");
					return;
				}
				bool msg = false, sdg = false;
				for (int c_ = 0; c_ < pInfo(peer)->friends.size(); c_++) {
					if (to_lower(pInfo(peer)->friends[c_].name) == to_lower(pInfo(cp_)->tankIDName)) {
						if (pInfo(peer)->friends[c_].mute) sdg = true;
					}
				}
				for (int c_ = 0; c_ < pInfo(cp_)->friends.size(); c_++) {
					if (to_lower(pInfo(cp_)->friends[c_].name) == to_lower(pInfo(peer)->tankIDName)) {
						if (pInfo(cp_)->friends[c_].mute) msg = true;
					}
				}
				if (sdg) {
					VarList::OnConsoleMessage(peer, "(`4Note: `6: That user is muted you)");
					return;
				}
				else if (msg) {
					VarList::OnConsoleMessage(peer, "(`4Note: ```6You can't send messages to people you muted)");
					return;
				}
				else {
					pInfo(cp_)->lastmsg = pInfo(peer)->tankIDName;
					pInfo(cp_)->lastmsgworld = pInfo(peer)->world;
					string p0;
					if (not Role::Moderator(peer) and Role::Moderator(cp_) || not Role::Administrator(peer) and Role::Administrator(cp_) || not Role::Developer(peer) and Role::Developer(cp_) == 1) {
						p0 = "`6>> (Sent to `$" + pInfo(cp_)->tankIDName + "`6) `o(`4Note: ``Message a mod `4ONLY ONCE `oabout an issue. Mods dont fix scams or replace gems, they punish players who break the `5/rules`o. For issues related to account recovery or purchasing, send message to creators on discord.)";
					}
					else {
						p0 = "`6>> (Sent to `$" + pInfo(cp_)->tankIDName + "`6)";
					}
					VarList::OnConsoleMessage(peer, p0);
					found = true;
					gamepacket_t p;
					p.Insert("OnConsoleMessage");
					p.Insert("CP:0_PL:0_OID:_CT:[MSG]_>> `c>> from (``" + get_player_nick(peer) + "`c) in [`$" + (pInfo(peer)->m_h || find(world_->active_jammers.begin(), world_->active_jammers.end(), 226) != world_->active_jammers.end() ? "`4JAMMED!``" : pInfo(peer)->world) + "``] > ```$" + pm_message + "``");
					p.CreatePacket(cp_);
					CAction::Positioned(cp_, pInfo(cp_)->netID, "audio/pay_time.wav", 0);
					break;
				}
			}
		}
		if (found == false) {
			VarList::OnConsoleMessage(peer, "`6>> No one online who has a name starting with " + pm_user + "`8.");
		}
	}
}
void SendBoardcast(ENetPeer* peer, std::string text) {
	std::string name_ = pInfo(peer)->world;
	std::vector<World>::iterator paa = find_if(worlds.begin(), worlds.end(), [name_](const World& a) { return a.name == name_; });
	if (paa != worlds.end()) {
		World* world_ = &worlds[paa - worlds.begin()];
		world_->fresh_world = true;
		if (pInfo(peer)->level < 5) {
			VarList::OnConsoleMessage(peer, " >> You must be level 5 to broadcast!");
			return;
		}
		if (Playmods::HasById(pInfo(peer), 11)) {
			VarList::OnConsoleMessage(peer, "`6>> That's sort of hard to do while duct-taped.``");
			return;
		}
		if (Playmods::HasById(pInfo(peer), 13)) {
			int time_ = 0;
			for (PlayMods peer_playmod : pInfo(peer)->playmods) {
				if (peer_playmod.id == 13) {
					time_ = peer_playmod.time - time(nullptr);
					break;
				}
			}
			VarList::OnConsoleMessage(peer, ">> (" + Time::Playmod(time_) + " before you can broadcast again)");
			return;
		}
		if (pInfo(peer)->usedmegaphone) {
			if (pInfo(peer)->starglitter_sb < 10 && pInfo(peer)->starglitter_sb != -1) DailyEvent_Task::MStarglitter(peer, "sb", 1);
			int removemegaphone = -1, megacount = 0;
			Inventory::Modify(peer, 2480, removemegaphone);
			Inventory::Modify(peer, 2480, megacount);
			if (not Role::Administrator(peer) and not Role::Developer(peer)) { //change
				PlayMods new_playmod{};
				new_playmod.id = 13, new_playmod.time = time(nullptr) + 300;
				pInfo(peer)->playmods.push_back(new_playmod);
				{
					CAction::Positioned(peer, pInfo(peer)->netID, "audio/dialog_confirm.wav", 0);
					VarList::OnConsoleMessage(peer, "Broadcasting to ALL! (`$Megaphone!`` mod added)");
					VarList::OnConsoleMessage(peer, a + "`#Super-Broadcast sent. Used `$1 Megaphone``. (`$" + to_string(megacount) + "`` left)`` (10 mins before you can broadcast again)");
				}
			}
		}
		pInfo(peer)->usedmegaphone = 0;
		if (pInfo(peer)->m_h != 1 and find(world_->active_jammers.begin(), world_->active_jammers.end(), 226) == world_->active_jammers.end()) {
			Environment()->Sb_World = pInfo(peer)->world;
		}
		int sentto = 0;
		for (ENetPeer* cp_ = server->peers; cp_ < &server->peers[server->peerCount]; ++cp_) {
			if (cp_->state != ENET_PEER_STATE_CONNECTED or cp_->data == NULL or pInfo(cp_)->radio) continue;
			VarList::OnConsoleMessage(cp_, "CP:_PL:0_OID:_CT:[SB]_ `5** from (`0" + (not pInfo(peer)->d_name.empty() ? pInfo(peer)->d_name : pInfo(peer)->name_color + pInfo(peer)->tankIDName) + "`````5) in [```$" + (pInfo(peer)->m_h == 1 || find(world_->active_jammers.begin(), world_->active_jammers.end(), 226) != world_->active_jammers.end() ? "`4JAMMED!``" : pInfo(peer)->world) + "```5] ** : ``" + (Role::Moderator(peer) and not Role::Developer(peer) ? "`$" : "`^") + "" + text + "``");
		}
	}
}
bool trade_space_check(ENetPeer* peer, ENetPeer* cp_) {
	int slots_needed = int(pInfo(cp_)->trade_items.size());
	for (int i_ = 0; i_ < pInfo(cp_)->trade_items.size(); i_++) {
		map<string, int>::iterator it;
		for (auto it = pInfo(cp_)->trade_items[i_].begin(); it != pInfo(cp_)->trade_items[i_].end(); it++) {
			int c_ = 0;
			Inventory::Modify(peer, it->first, c_);
			if (c_ != 0) {
				if (c_ + it->second > 200) {
					VarList::OnTextOverlay(cp_, "`4Oops - " + get_player_nick(peer) + " is carrying too many " + items[it->first].name + " and can't fit that many in their backpack.");
					VarList::OnTextOverlay(peer, "`4Oops - " + get_player_nick(peer) + " is carrying too many " + items[it->first].name + " and can't fit that many in their backpack.");
					return false;
				}
				slots_needed--;
			}
		}
	}
	int free_slots = Inventory::Get_Slots(pInfo(peer));
	if (free_slots < slots_needed) {
		VarList::OnTextOverlay(cp_, get_player_nick(peer) + " needs more backpack room first!");
		VarList::OnTextOverlay(peer, get_player_nick(peer) + " needs more backpack room first!");
		return false;
	}
	return true;
}
string get_sucker(ENetPeer* peer, World* world_, WorldBlock* block_, int x_, int y_) {
	if (block_->id == 0) {
		return "set_default_color|`o\nadd_label_with_icon|big|`w" + items[block_->fg].name + "``|left|" + to_string(block_->fg) + "|\nadd_spacer|small|\nembed_data|tilex|" + to_string(x_) + "\nembed_data|tiley|" + to_string(y_) + "\nadd_textbox|`6The machine is empty.``|left|\nadd_item_picker|selectitem|`wChoose Item``|Choose an item to put in the " + items[block_->fg].name + "!|\nend_dialog|itemsucker_block|Close||";
	}
	bool ar_turi = false;
	int c_ = 0;
	if (block_->id != 0) {
		Inventory::Modify(peer, block_->id, c_);
		if (c_ != 0) {
			ar_turi = true;
		}
	}
	bool ar_turi_mag = false;
	{
		if (block_->fg == 5638 || block_->fg == 5930) {
			int c_ = 0;
			if (block_->id != 0) {
				Inventory::Modify(peer, block_->fg == 5638 ? 5640 : 9158, c_);
				if (c_ != 0) {
					if (pInfo(peer)->magnetron_x == x_ and pInfo(peer)->magnetron_y == y_ and pInfo(peer)->magnetron_id == block_->id) {
						ar_turi_mag = true;
					}
				}
			}
		}
		else ar_turi_mag = false;
	}
	bool dont_give = false;
	if (items[block_->id].collisionType != 1 and items[block_->id].blockType != BACKGROUND and items[block_->id].blockType != SEED and not items[block_->id].farmable or items[block_->id].rarity == 999) {
		dont_give = true;
	}
	string alalala = (block_->spin ? "`5ACTIVE" : "`6DISABLED");
	return "set_default_color|`o\nadd_label_with_icon|big|`w" + items[block_->fg].name + "``|left|" + to_string(block_->fg) + "|\nadd_spacer|small|\nembed_data|tilex|" + to_string(x_) + "\nembed_data|tiley|" + to_string(y_) + "\nadd_label_with_icon|small|`2" + items[block_->id].name + "``|left|" + to_string(block_->id) + "|" + (block_->pr == 0 ? "\nadd_textbox|`6The machine is currently empty!``|left|" : "\nadd_textbox|The machine contains " + to_string(block_->pr) + " `2" + items[block_->id].ori_name + "``|left|") + (ar_turi ? (block_->pr >= (block_->fg == 5638 ? 5000 : block_->fg == 5930 ? 1000000 : 1500) ? "\nadd_smalltext|`4The machine is at maximum capacity!``|left|" : "\nadd_button|additem|Add Items to the machine|noflags|0|0|" + a + (Role::Unlimited(peer) ? "\nadd_button|addstocks5000|Add 5000 to the machine|noflags|0|0|" : "") + "") : (block_->pr >= (block_->fg == 5638 ? 5000 : block_->fg == 5930 ? 1000000 : 1500) ? "\nadd_smalltext|`4The machine is at maximum capacity!``|left|" : "")) + (block_->pr != 0 ? (c_ == 200 ? "\nadd_textbox|`6You are already carrying 200 " + items[block_->id].name + "!``|left|" : "\nadd_button|retrieveitem|Retrieve Item|noflags|0|0|") : "\nadd_button|clearitem|Change Item|noflags|0|0|") + (block_->fg == 5638 || block_->fg == 5930 ? "\nadd_textbox|" + a + (items[block_->id].blockType == SEED ? "Planting" : "Building") + " mode: " + alalala + "``|left|" : "") + (block_->fg == 5638 || block_->fg == 5930 ? "\nadd_textbox|Use the " + items[block_->fg].name + " to " + (items[block_->id].blockType == BlockTypes::SEED ? "Plant" : "Build") + " `2" + items[block_->id].name + "`` directly from the " + items[block_->fg].name + "'s storage.|left|" : "") + ((block_->fg == 5638 or block_->fg == 5930) and not ar_turi_mag and not dont_give ? "\nadd_button|getplantationdevice|Get Remote|noflags|0|0|" : "") + "\nadd_checkbox|chk_enablesucking|Enable Collection.|" + (block_->enabled ? "1" : "0") + "\nend_dialog|itemsucker_block|Close|Update|";
}
bool not_mod(WorldBlock block_, int total_, int max_size) {
	if (total_ < 0 || total_ >= max_size || block_.locked or items[block_.fg].blockType == LOCK) {
		return false;
	} if (block_.fg == 0) return true;
	if (items[block_.fg].properties & Property_Mod) {
		return false;
	}
	return true;
}
void lwiz_points(ENetPeer* peer) {
	if (pInfo(peer)->lwiz_quest == 21) return;
	std::string name_ = pInfo(peer)->world;
	std::vector<World>::iterator p = find_if(worlds.begin(), worlds.end(), [name_](const World& a) { return a.name == name_; });
	if (p != worlds.end()) {
		World* world_ = &worlds[p - worlds.begin()];
		WorldBlock* block_ = &world_->blocks[pInfo(peer)->lastwrenchx + (pInfo(peer)->lastwrenchy * 100)];
		if (not Only_Access(peer, world_, block_)) return;
		if (block_->fg == 1790) {
			if (pInfo(peer)->lwiz_quest > 0) {
				gamepacket_t p;
				p.Insert("OnTextOverlay");
				if (pInfo(peer)->legendary_quest[pInfo(peer)->lwiz_step - 1][0] == pInfo(peer)->legendary_quest[pInfo(peer)->lwiz_step - 1][1]) {
					pInfo(peer)->lwiz_notification = 0;
					p.Insert("`9Quest step complete!!``");
					pInfo(peer)->lwiz_step++;
					gamepacket_t p;
					p.Insert("OnParticleEffect"), p.Insert(48), p.Insert((float)pInfo(peer)->x + 16, (float)pInfo(peer)->y + 16);
					for (ENetPeer* cp_ = server->peers; cp_ < &server->peers[server->peerCount]; ++cp_) {
						if (cp_->state != ENET_PEER_STATE_CONNECTED or cp_->data == NULL or pInfo(peer)->world != pInfo(cp_)->world) continue;
						p.CreatePacket(cp_);
					}
					if (pInfo(peer)->lwiz_step > 20) {
						int give_item = 0;
						if (pInfo(peer)->lwiz_quest == 1) {
							pInfo(peer)->Title.OfLegend = true;
							pInfo(peer)->is_legend = true;
							VisualHandle::Nick(peer, NULL);
							give_item = -1;
						}
						else if (pInfo(peer)->lwiz_quest == 2) {
							give_item = 1782;
						}
						else if (pInfo(peer)->lwiz_quest == 3) {
							give_item = 1780;
						}
						else if (pInfo(peer)->lwiz_quest == 4) {
							give_item = 1784;
						}
						else if (pInfo(peer)->lwiz_quest == 5) {
							give_item = 2592;
						}
						else if (pInfo(peer)->lwiz_quest == 6) {
							give_item = 6026;
						}
						else if (pInfo(peer)->lwiz_quest == 7) {
							give_item = 7734;
						}
						else if (pInfo(peer)->lwiz_quest == 9) {
							give_item = 11140;
						}
						else if (pInfo(peer)->lwiz_quest == 8) {
							give_item = 11142;
						}
						else if (pInfo(peer)->lwiz_quest == 10) {
							give_item = 9774;
						}
						if (give_item != -1 && give_item != 0) {
							int give_count = 1;
							if (Inventory::Modify(peer, give_item, give_count) == 0) {
							}
							else {
								gamepacket_t p2;
								p2.Insert("OnTalkBubble"), p2.Insert(pInfo(peer)->netID), p2.Insert("Your inventory is full!"), p2.Insert(0), p2.Insert(0), p2.CreatePacket(peer);
								pInfo(peer)->lwiz_step = 20;
								give_item = 0;
							}
						}
						if (give_item != 0) {
							block_->fg = 0;
							update_tile(peer, pInfo(peer)->lastwrenchx, pInfo(peer)->lastwrenchy, 0, false, true);
							if (give_item != -1) Clothing::Equip(peer, give_item);
							pInfo(peer)->legendary_quest.clear();
							pInfo(peer)->lwiz_quest = 0;
							pInfo(peer)->lwiz_notification = 0;
							pInfo(peer)->lwiz_step = 1;
							VarList::OnAction(peer, pInfo(peer)->netID, "/cheer", 0);
							gamepacket_t p;
							p.Insert("OnParticleEffect"), p.Insert(90), p.Insert((float)pInfo(peer)->x + 16, (float)pInfo(peer)->y + 16);
							for (ENetPeer* cp_ = server->peers; cp_ < &server->peers[server->peerCount]; ++cp_) {
								if (cp_->state != ENET_PEER_STATE_CONNECTED or cp_->data == NULL or pInfo(peer)->world != pInfo(cp_)->world) continue;
								p.CreatePacket(cp_);
							}
						}
					}
				}
				else p.Insert("`9Thanks! Keep it coming!``");
				p.CreatePacket(peer);
			}
		}
	}
}
string get_vending(ENetPeer* peer, World* world_, WorldBlock* block_, int x_, int y_) {
	int c_ = 0;
	string ex_ = "";
	if (block_->id != 0) {
		Inventory::Modify(peer, block_->id, c_);
		if (c_ != 0 && block_->c_ < (block_->fg == 2978 ? 5199 : 9999)) ex_ = "\nadd_smalltext|You have " + to_string(c_) + " " + items[block_->id].ori_name + " in your backpack.|\nadd_button|addstocks|Add them to the machine|noflags|0|0|";
		if (Role::Unlimited(peer)) ex_ = "\nadd_button|addstocks5000|Add 5000 to the machine|noflags|0|0|";
	}
	string a_ = (block_->pr < 0 and (block_->pr * -1 > block_->c_) ? "\nadd_smalltext|`4(You need to add more items or people can't purchase at this price!)``|left|" : "");
	if (block_->id == 0) block_->pr = 0;
	return "set_default_color|`o\nadd_label_with_icon|big|`w" + items[block_->fg].name + "``|left|" + to_string(block_->fg) + "|\nadd_spacer|small|\nembed_data|tilex|" + to_string(x_) + "\nembed_data|tiley|" + to_string(y_) + "" + (block_->id == 0 ? "\nadd_textbox|This machine is empty.|left|\nadd_item_picker|stockitem|`wPut an item in``|Choose an item to put in the machine!|" : "\nadd_label_with_icon|sml|The machine contains a total of " + to_string(block_->c_) + " `2" + items[block_->id].ori_name + +"``. |left|" + to_string(block_->id) + "|") + (block_->pr == 0 ? (block_->id != 0 ? "\nadd_spacer|small|\nadd_textbox|Not currently for sale!|left|" + ex_ + "\nadd_button|pullstocks|Empty the machine|noflags|0|0|" : "") : "\nadd_spacer|small|\nadd_textbox|For a cost of:|left|\nadd_label_with_icon|small|" + (block_->pr < 0 ? "1" : to_string(block_->pr)) + " x `8World `8Lock``|left|242|\nadd_spacer|small|\nadd_textbox|You will get:|left|\nadd_label_with_icon|small|" + (block_->pr < 0 ? to_string(block_->pr * -1) : "1") + " x `2" + items[block_->id].ori_name + "``|left|" + to_string(block_->id) + "|" + (block_->pr > 0 ? "\nadd_spacer|small|\nadd_smalltext|Value Check: Based on current trading, this item is priced" + item_average(items[block_->id].price, block_->pr) + "|left|" : "") + "\nadd_spacer|small|" + ex_ + "\nadd_button|pullstocks|Empty the machine|noflags|0|0|") + (block_->id != 0 ? "" + a_ + "\nadd_smalltext|`5(" + items[block_->fg].name + " will not function when price is set to 0)``|left|\nadd_text_input|setprice|Price|" + (block_->pr < 0 ? to_string(block_->pr * -1) : to_string(block_->pr)) + "|7|\nadd_checkbox|chk_peritem|World Locks per Item|" + (block_->pr >= 0 ? "1" : "0") + "\nadd_checkbox|chk_perlock|Items per World Lock|" + (block_->pr < 0 ? "1" : "0") + "" : "") + (block_->wl != 0 ? "\nadd_smalltext|You have earned " + to_string(block_->wl) + " World Locks.|left|\nadd_button|withdraw|Withdraw World Locks|noflags|0|0|" : "") + "" + (block_->fg == 2978 ? "\nadd_smalltext|Upgrade to a DigiVend Machine for `44,000 Gems``.|left|\nadd_button|upgradedigital|Upgrade to DigiVend|noflags|0|0|" : "") + "\nadd_spacer|small|\nend_dialog|vending|Close|" + (block_->id != 0 ? "Update" : "") + "|";
}
string get_vending_buyer_side(ENetPeer* peer, World* world_, WorldBlock* block_, int x_, int y_) {
	return "set_default_color|`o\nadd_label_with_icon|big|`w" + items[block_->fg].name + "``|left|" + to_string(block_->fg) + "|\nadd_spacer|small|\nembed_data|tilex|" + to_string(x_) + "\nembed_data|tiley|" + to_string(y_) + "" + (block_->id == 0 or block_->pr == 0 ? "\nadd_textbox|This machine is out of order.|left|\nend_dialog|vending|Close||" : "\nadd_label_with_icon|sml|The machine contains a total of " + to_string(block_->c_) + " `2" + items[block_->id].ori_name + "``. |left|" + to_string(block_->id) + "|\nadd_spacer|small|\nadd_textbox|For a cost of:|left|\nadd_label_with_icon|small|" + (block_->pr < 0 ? "1" : to_string(block_->pr)) + " x `8World Lock``|left|242|\nadd_spacer|small|\nadd_textbox|You will get:|left|\nadd_label_with_icon|small|" + (block_->pr < 0 ? to_string(block_->pr * -1) : "1") + " x `2" + items[block_->id].ori_name + "``|left|" + to_string(block_->id) + "|" + (block_->pr > 0 ?  "\nadd_spacer|small|\nadd_smalltext|Value Check: Based on current trading, this item is priced"+item_average(items[block_->id].price, block_->pr) + "|left|" : "") + "\nadd_spacer|small|" + (block_->pr < 0 and (block_->pr * -1 > block_->c_) ? "\nadd_textbox|You'll need to wait for the owner to stock up to at least 1 World Lock's worth before you can buy.|left|\nend_dialog|vending|Close||" : "\nadd_textbox|You have " + to_string(get_wls(peer, true)) + " World Locks.|left|\nadd_text_input|buycount|How many would you like to buy?|0|3|\nembed_data|expectprice|" + to_string(block_->pr) + "\nembed_data|expectitem|" + to_string(block_->id) + "\nend_dialog|vending|Close|Buy|"));
}
vector<vector<int>> lock_tiles(World* w_, int st_x, int st_y, int lock_size) {
	try {
		int layer_ = 0;
		int og_lock_size = lock_size;
		vector<vector<int>> new_tiles{};
		vector<vector<int>> new_lock{};
		if (w_->blocks.at(st_x + (st_y * 100)).locked) {
			return new_lock;
		}
		if (st_x - 1 > 0) {
			new_tiles.push_back({ st_x - 1 + (st_y * 100), 1 });
			if (not_mod(w_->blocks.at(st_x - 1 + (st_y * 100)), st_x - 1 + (st_y * 100), w_->blocks.size())) new_lock.push_back({ st_x - 1, st_y });
		}
		if (st_y - 1 > 0) {
			new_tiles.push_back({ st_x + ((st_y - 1) * 100), 2 });
			if (not_mod(w_->blocks.at(st_x + ((st_y - 1) * 100)), st_x + ((st_y - 1) * 100), w_->blocks.size())) new_lock.push_back({ st_x, st_y - 1 });
		}
		if (st_x + 1 < w_->max_x) {
			new_tiles.push_back({ st_x + 1 + (st_y * 100), 3 });
			if (not_mod(w_->blocks.at(st_x + 1 + (st_y * 100)), st_x + 1 + (st_y * 100), w_->blocks.size())) new_lock.push_back({ st_x + 1, st_y });
		}
		if (st_y + 1 < w_->max_y) {
			new_tiles.push_back({ st_x + ((st_y + 1) * 100), 4 });
			if (not_mod(w_->blocks.at(st_x + ((st_y + 1) * 100)), st_x + ((st_y + 1) * 100), w_->blocks.size())) new_lock.push_back({ st_x, st_y + 1 });
		}
		int ySize = w_->blocks.size() / 100, xSize = w_->blocks.size() / ySize;
		int max_up = 0;
		int max_down = 0;
		int max_right = 0;
		int max_left = 0;
		std::vector<WorldBlock> shadow_copy = w_->blocks;
		for (int i_ = 0; i_ < new_tiles.size(); i_++) {
			if (new_lock.size() >= og_lock_size) {
				break;
			}
			std::vector<int> test__ = new_tiles.at(i_);
			int x_ = test__.at(0) % 100, y_ = test__.at(0) / 100;
			int where_ = test__.at(1);
			if (where_ == 1) {
				if (y_ - 1 < 0) {
				}
				else {
					if (not shadow_copy.at(x_ + ((y_ - 1) * 100)).scanned) {
						if (not_mod(shadow_copy.at(x_ + ((y_ - 1) * 100)), x_ + ((y_ - 1) * 100), w_->blocks.size())) {
							shadow_copy.at(x_ + (y_ * 100)).scanned = true;
							if (max_up != 0 and y_ > max_up + 1 and y_ - 1 > 0) {
								new_tiles.push_back({ x_ + ((y_ - 1) * 100), 1 });
							}
							new_lock.push_back({ x_, y_ - 1 });
							if (new_lock.size() >= og_lock_size) {
								break;
							}
						}
						else {
							shadow_copy.at(x_ + (y_ * 100)).scanned = true;
							if (max_up != 0 and y_ > max_up + 1 and y_ - 1 > 0) {
								new_tiles.push_back({ x_ + ((y_ - 1) * 100), 1 });
								if (new_lock.size() >= og_lock_size) {
									break;
								}
							}
							lock_size++;
						}
					}
				}
			}
			if (where_ == 2) {
				if (x_ + 1 > w_->max_x) {

				}
				else {
					if (not shadow_copy.at(x_ + 1 + (y_ * 100)).scanned) {
						if (not_mod(shadow_copy.at(x_ + 1 + (y_ * 100)), x_ + 1 + (y_ * 100), w_->blocks.size())) {
							shadow_copy.at(x_ + (y_ * 100)).scanned = true;
							if (max_left != 0 and x_ < max_left - 1 and x_ + 1 < w_->max_x) {
								new_tiles.push_back({ x_ + 1 + (y_ * 100), 2 });
							}
							new_lock.push_back({ x_ + 1, y_ });
							if (new_lock.size() >= og_lock_size) {
								break;
							}
						}
						else {
							shadow_copy.at(x_ + (y_ * 100)).scanned = true;
							if (max_left != 0 and x_ < max_left - 1 and x_ + 1 < w_->max_x) {
								new_tiles.push_back({ x_ + 1 + (y_ * 100), 2 });
								if (new_lock.size() >= og_lock_size) {
									break;
								}
							}
							lock_size++;
						}
					}
				}

			}
			if (where_ == 3) {
				if (y_ + 1 > w_->max_y) {

				}
				else {
					if (not shadow_copy.at(x_ + ((y_ + 1) * 100)).scanned) {
						if (not_mod(shadow_copy.at(x_ + ((y_ + 1) * 100)), x_ + ((y_ + 1) * 100), w_->blocks.size())) {
							shadow_copy.at(x_ + (y_ * 100)).scanned = true;
							if (max_down != 0 and y_ < max_down - 1 and y_ + 1 < w_->max_y) {
								new_tiles.push_back({ x_ + ((y_ + 1) * 100), 3 });
							}
							new_lock.push_back({ x_, y_ + 1 });
							if (new_lock.size() >= og_lock_size) {
								break;
							}
						}
						else {
							shadow_copy.at(x_ + (y_ * 100)).scanned = true;
							if (max_down != 0 and y_ < max_down - 1 and y_ + 1 < w_->max_y) {
								new_tiles.push_back({ x_ + ((y_ + 1) * 100), 3 });
								if (new_lock.size() >= og_lock_size) {
									break;
								}
							}
							lock_size++;
						}
					}
				}

			}
			if (where_ == 4) {
				if (x_ - 1 < 0) {
				}
				else {
					if (not shadow_copy.at(x_ - 1 + (y_ * 100)).scanned) {
						if (not_mod(shadow_copy.at(x_ - 1 + (y_ * 100)), x_ - 1 + (y_ * 100), w_->blocks.size())) {
							shadow_copy.at(x_ + (y_ * 100)).scanned = true;
							if (max_right != 0 and x_ > max_right + 1 and x_ - 1 > 0) {
								new_tiles.push_back({ x_ - 1 + (y_ * 100), 4 });
							}
							new_lock.push_back({ x_ - 1, y_ });
							if (new_lock.size() >= og_lock_size) {
								break;
							}
						}
						else {
							shadow_copy.at(x_ + (y_ * 100)).scanned = true;
							if (max_right != 0 and x_ > max_right + 1 and x_ - 1 > 0) {
								new_tiles.push_back({ x_ - 1 + (y_ * 100), 4 });
								if (new_lock.size() >= og_lock_size) {
									break;
								}
							}
							lock_size++;
						}
					}
				}

			}
			if (i_ == new_tiles.size() - 1) {
				layer_++;
				if (og_lock_size <= 10 or lock_size - new_lock.size() <= 5) layer_ = 0;
				int t_ = 1;
				if (st_x - t_ < 0) {
				}
				else {
					while (shadow_copy.at(st_x - t_ + (st_y * 100)).scanned) {
						t_++;
						if (st_x - t_ < 0) {
							break;
						}
						else {
							if (not shadow_copy.at(st_x - t_ + (st_y * 100)).scanned) {
								if (not_mod(shadow_copy.at(st_x - t_ + ((st_y + layer_) * 100)), st_x - t_ + ((st_y + layer_) * 100), w_->blocks.size())) {
									max_right = st_x - t_;
									new_tiles.push_back({ st_x - t_ + ((st_y + layer_) * 100), 1 });
									new_lock.push_back({ st_x - t_, (st_y + layer_) });
									if (new_lock.size() >= og_lock_size) {
										break;
									}
								}
								else {
									max_right = st_x - t_;
									new_tiles.push_back({ st_x - t_ + ((st_y + layer_) * 100), 1 });
									if (new_lock.size() >= og_lock_size) {
										break;
									}
									lock_size++;
								}
								break;
							}
						}
					}
				}
				t_ = 1;
				if (st_y - t_ < 0) {
				}
				else {
					while (shadow_copy.at(st_x + ((st_y - t_) * 100)).scanned) {
						t_++;
						if (st_y - t_ < 0) {
							break;
						}
						else {
							if (not shadow_copy.at(st_x + ((st_y - t_) * 100)).scanned) {
								if (not_mod(shadow_copy.at(st_x - layer_ + ((st_y - t_) * 100)), st_x - layer_ + ((st_y - t_) * 100), w_->blocks.size())) {
									max_up = st_y - t_;
									new_tiles.push_back({ st_x - layer_ + ((st_y - t_) * 100), 2 });
									new_lock.push_back({ st_x - layer_, st_y - t_ });
									if (new_lock.size() >= og_lock_size) {
										break;
									}
								}
								else {
									max_up = st_y - t_;
									new_tiles.push_back({ st_x - layer_ + ((st_y - t_) * 100), 2 });
									if (new_lock.size() >= og_lock_size) {
										break;
									}
									lock_size++;
								}
								break;
							}
						}
					}
				}
				t_ = 1;
				if (st_x + t_ > w_->max_x) {

				}
				else {
					while (shadow_copy.at(st_x + t_ + (st_y * 100)).scanned) {
						t_++;
						if (st_x + t_ > w_->max_x) {
							break;
						}
						else {
							if (st_y - layer_ < 0) layer_ = 0;
							if (not shadow_copy.at(st_x + t_ + (st_y * 100)).scanned) {
								if (not_mod(shadow_copy.at(st_x + t_ + ((st_y - layer_) * 100)), st_x + t_ + ((st_y - layer_) * 100), w_->blocks.size())) {
									max_left = st_x + t_;
									new_tiles.push_back({ st_x + t_ + ((st_y - layer_) * 100), 3 });
									new_lock.push_back({ st_x + t_, st_y - layer_ });
									if (new_lock.size() >= og_lock_size) {
										break;
									}
								}
								else {
									max_left = st_x + t_;
									new_tiles.push_back({ st_x + t_ + ((st_y - layer_) * 100), 3 });
									if (new_lock.size() >= og_lock_size) {
										break;
									}
									lock_size++;
								}
								break;
							}
						}
					}
				}
				t_ = 1;
				if (st_y + t_ > w_->max_y) {

				}
				else {
					while (shadow_copy.at(st_x + ((st_y + t_) * 100)).scanned) {
						t_++;
						if (st_y + t_ > w_->max_y) {
							break;
						}
						else {
							if (not shadow_copy.at(st_x + ((st_y + t_) * 100)).scanned) {
								if (not_mod(shadow_copy.at(st_x + layer_ + ((st_y + t_) * 100)), st_x + layer_ + ((st_y + t_) * 100), w_->blocks.size())) {
									max_down = st_y + t_;
									new_tiles.push_back({ st_x + layer_ + ((st_y + t_) * 100), 4 });
									new_lock.push_back({ st_x + layer_, st_y + t_ });
									if (new_lock.size() >= og_lock_size) {
										break;
									}
								}
								else {
									if (st_x == 0 or st_y == 0) break;
									max_down = st_y + t_;
									new_tiles.push_back({ st_x + layer_ + ((st_y + t_) * 100), 4 });
									if (new_lock.size() >= og_lock_size) {
										break;
									}
									lock_size++;
								}
								break;
							}
						}
					}
				}
			}
		}
		if (new_lock.size() > og_lock_size) {
			int fix_size = (new_lock.size() - og_lock_size);
			for (int i_ = 0; i_ < fix_size; i_++) {
				new_lock.pop_back();
			}
		} vector<int> erase_later{};
		std::vector<WorldBlock> shadow_copy_2 = w_->blocks;
		for (int i_ = 0; i_ < new_lock.size(); i_++) {
			vector<int> asd_ = new_lock.at(i_);
			shadow_copy_2.at(asd_.at(0) + (asd_.at(1) * 100)).locked = true;
			shadow_copy_2.at(asd_.at(0) + (asd_.at(1) * 100)).lock_origin = (st_x + (st_y * 100));
		}
		WorldBlock target_to_reach = shadow_copy_2.at(st_x + (st_y * 100));
		for (int i_ = 0; i_ < new_lock.size(); i_++) {
			std::vector<int> asd_ = new_lock.at(i_);
			std::vector<int> new_tiles{};
			new_tiles.push_back(asd_.at(0) + (asd_.at(1) * 100));
			int ySize = w_->blocks.size() / 100, xSize = w_->blocks.size() / ySize;
			bool reachable = false;
			std::vector<std::vector<int>> after_process{};
			for (int i2 = 0; i2 < new_tiles.size(); i2++) {
				int x_ = new_tiles.at(i2) % 100, y_ = new_tiles.at(i2) / 100;
				if ((x_ + (y_ * 100)) == st_x + (st_y * 100) or (x_ + 1 + (y_ * 100)) == st_x + (st_y * 100) or (x_ - 1 + (y_ * 100)) == st_x + (st_y * 100) or (x_ + ((y_ + 1) * 100)) == st_x + (st_y * 100) or (x_ + ((y_ - 1) * 100)) == st_x + (st_y * 100)) {
					reachable = true;
				} if (x_ < (w_->max_x - 1) and shadow_copy_2.at(x_ + 1 + (y_ * 100)).locked and shadow_copy_2.at(x_ + 1 + (y_ * 100)).lock_origin == (st_x + (st_y * 100))) {
					if (not shadow_copy_2.at(x_ + 1 + (y_ * 100)).scanned) {
						shadow_copy_2.at(x_ + 1 + (y_ * 100)).scanned = true;
						after_process.push_back({ x_ + 1, y_ });
						new_tiles.push_back(x_ + 1 + (y_ * 100));
					}
				} if (x_ > 0 and shadow_copy_2.at(x_ - 1 + (y_ * 100)).locked and shadow_copy_2.at(x_ - 1 + (y_ * 100)).lock_origin == (st_x + (st_y * 100))) {
					if (not shadow_copy_2.at(x_ - 1 + (y_ * 100)).scanned) {
						shadow_copy_2.at(x_ - 1 + (y_ * 100)).scanned = true;
						after_process.push_back({ x_ - 1, y_ });
						new_tiles.push_back(x_ - 1 + (y_ * 100));
					}
				} if (y_ < (w_->max_y - 1) and shadow_copy_2.at(x_ + ((y_ + 1) * 100)).locked and shadow_copy_2.at(x_ + ((y_ + 1) * 100)).lock_origin == (st_x + (st_y * 100))) {
					if (not shadow_copy_2.at(x_ + ((y_ + 1) * 100)).scanned) {
						shadow_copy_2.at(x_ + ((y_ + 1) * 100)).scanned = true;
						after_process.push_back({ x_, y_ + 1 });
						new_tiles.push_back(x_ + ((y_ + 1) * 100));
					}
				} if (y_ > 0 and shadow_copy_2.at(x_ + ((y_ - 1) * 100)).locked and shadow_copy_2.at(x_ + ((y_ - 1) * 100)).lock_origin == (st_x + (st_y * 100))) {
					if (not shadow_copy_2.at(x_ + ((y_ - 1) * 100)).scanned) {
						shadow_copy_2.at(x_ + ((y_ - 1) * 100)).scanned = true;
						after_process.push_back({ x_, y_ - 1 });
						new_tiles.push_back(x_ + ((y_ - 1) * 100));
					}
				}
			}
			for (std::vector<int> cleanup : after_process) {
				shadow_copy_2.at(cleanup.at(0) + ((cleanup.at(1)) * 100)).scanned = false;
			}
			if (not reachable) {
				erase_later.push_back(i_);
			}
		}
		int er_ = 0;
		for (int a_ : erase_later) {
			int aa = a_ - er_;
			new_lock.erase(new_lock.begin() + aa);
			er_++;
		} return new_lock;
	}
	catch (out_of_range) {
		std::vector<std::vector<int>> asd{};
		return asd;
	}
}
void reset_(WorldBlock* block_, int x_, int y_, World* world_) {
	for (int i_ = 0; i_ < world_->machines.size(); i_++) {
		if (world_->machines[i_].x == x_ and world_->machines[i_].y == y_) {
			world_->machines.erase(world_->machines.begin() + i_);
			break;
		}
	}
	if (items[block_->fg].blockType == BlockTypes::OVEN) {
		block_->food.clear();
		block_->starttime = 0;
		block_->spices.clear();
	}
	if (items[block_->fg].blockType == BlockTypes::MANNEQUIN) {
		block_->mannequin.c_hair = 0;
		block_->mannequin.c_shirt = 0;
		block_->mannequin.c_pants = 0;
		block_->mannequin.c_feet = 0;
		block_->mannequin.c_head = 0;
		block_->mannequin.c_hand = 0;
		block_->mannequin.c_back = 0;
		block_->mannequin.c_mask = 0;
		block_->mannequin.c_neck = 0;
	}
	if (items[block_->fg].blockType == BlockTypes::PHONE) {
		block_->phoneb.c_hair = 0;
		block_->phoneb.c_shirt = 0;
		block_->phoneb.c_pants = 0;
		block_->phoneb.c_feet = 0;
		block_->phoneb.c_head = 0;
		block_->phoneb.c_hand = 0;
		block_->phoneb.c_back = 0;
		block_->phoneb.c_mask = 0;
		block_->phoneb.c_neck = 0;
		block_->phoneb.c_ances = 0;
	}
	else if (items[block_->fg].blockType == BlockTypes::BULLETIN_BOARD || items[block_->fg].blockType == BlockTypes::MAILBOX) {
		for (int i_ = 0; i_ < world_->bulletin.size(); i_++) {
			if (world_->bulletin[i_].x == x_ and world_->bulletin[i_].y == y_) {
				world_->bulletin.erase(world_->bulletin.begin() + i_);
				i_--;
			}
		}
	}
	else if (block_->fg == 12598) {
		block_->donates.clear();
		block_->shelf_1 = 0;
	}
	else if (block_->fg == 8246 || block_->fg == 10258 || block_->fg == 1436 || block_->fg == 14548) {
		for (int i_ = 0; i_ < world_->cctv_settings.size(); i_++) {
			if (world_->cctv_settings[i_][0] == x_ and world_->cctv_settings[i_][1] == y_) {
				world_->cctv_settings.erase(world_->cctv_settings.begin() + i_);
				i_--;
			}
		}
		for (int i_ = 0; i_ < world_->cctv.size(); i_++) {
			if (world_->cctv[i_].x == x_ and world_->cctv[i_].y == y_) {
				world_->cctv.erase(world_->cctv.begin() + i_);
				i_--;
			}
		}
	}
	else if (block_->fg == 2646) {
		for (ENetPeer* cp_ = server->peers; cp_ < &server->peers[server->peerCount]; ++cp_) {
			if (cp_->state != ENET_PEER_STATE_CONNECTED or cp_->data == NULL or world_->name != pInfo(cp_)->world or block_->heart_monitor != pInfo(cp_)->tankIDName) continue;
			pInfo(cp_)->spotlight = false;
			VisualHandle::State(pInfo(cp_));
			Clothing_V2::Update(cp_, true);
			gamepacket_t p, p2;
			p.Insert("OnConsoleMessage"), p.Insert("Back to anonymity. (`$In the Spotlight`` mod removed)"), p.CreatePacket(cp_);
			p2.Insert("OnTalkBubble"), p2.Insert(pInfo(cp_)->netID), p2.Insert("Lights out!"), p2.Insert(0), p2.Insert(0), p2.CreatePacket(cp_);
		}
	}
	else if (block_->fg == 2072) {
		for (ENetPeer* cp_ = server->peers; cp_ < &server->peers[server->peerCount]; ++cp_) {
			if (cp_->state != ENET_PEER_STATE_CONNECTED or cp_->data == NULL or world_->name != pInfo(cp_)->world) continue;
			if (pInfo(cp_)->xenonite != 0) {
				pInfo(cp_)->xenonite = 0;
				Clothing_V2::Update(cp_, false);
				Clothing_V2::Update_Value(cp_, false);
			}
		}
		world_->xenonite = 0;
	}
	if (block_->fg == 0) block_->bg = 0;
	else block_->fg = 0;
	block_->block_day = "";
	block_->kranken_pattern = 0;
	block_->shelf_1 = 0;
	block_->shelf_2 = 0;
	block_->shelf_3 = 0;
	block_->shelf_4 = 0;
	block_->id = 0;
	block_->hp = -1, block_->planted = 0, block_->fruit = 1, block_->txt = "";
	block_->wl = 0, block_->pr = 0, block_->c_ = 0;
	block_->door_destination = "", block_->door_id = "", block_->open = true;
	block_->flags = (block_->flags & 0x04000000 || block_->flags & 0x08000000 || block_->flags & 0x10000000 ? block_->flags : 0);
	block_->projectile_speed = 100, block_->rate_of_fire = 10;
	block_->enabled = false;
	block_->invert = false, block_->spin = false, block_->gravity = 50;
	block_->admins.clear();
	block_->owner_name = "";
	block_->build_only = false;
	block_->limit_admins = false;
	block_->crystals.clear();
	block_->r = 255;
	block_->g = 128;
	block_->b = 64;
	block_->portrait.c_expression = 1;
	block_->portrait.c_face = 0;
	block_->portrait.c_hair = 0;
	block_->portrait.c_hair_colour = 0;
	block_->portrait.c_head = 0;
	block_->portrait.c_skin = 0;
	block_->shelf_1 = 0;
	block_->heart_monitor = "";
	block_->lives = 0, block_->times = 0;
}
class SystemPool {
public:
	static void ServerInputPlugin() {
		while (ServerInputPlugin) {
			std::string buffer;
			std::cin >> buffer;
			if (buffer == "help" || buffer == "?") {
				const int width = 50;
				std::cout << std::string(width, '-') << "\n";
				std::cout << "| " << std::setw(width - 3) << std::left << "Available Commands" << "|\n";
				std::cout << std::string(width, '-') << "\n";
				std::cout << "| " << std::setw(15) << std::left << "Command"
					<< "| " << std::setw(width - 20) << std::left << "Description" << "|\n";
				std::cout << std::string(width, '-') << "\n";
				std::cout << "| " << std::setw(15) << std::left << "help"
					<< "| " << std::setw(width - 20) << std::left << "Show all commands" << "|\n";
				std::cout << "| " << std::setw(15) << std::left << "kickall"
					<< "| " << std::setw(width - 20) << std::left << "Disconnect all players" << "|\n";
				std::cout << "| " << std::setw(15) << std::left << "save"
					<< "| " << std::setw(width - 20) << std::left << "Save all database" << "|\n";
				std::cout << "| " << std::setw(15) << std::left << "online"
					<< "| " << std::setw(width - 20) << std::left << "show all players" << "|\n";
				std::cout << "| " << std::setw(15) << std::left << "maintenance"
					<< "| " << std::setw(width - 20) << std::left << "maintenance server" << "|\n";
				std::cout << std::string(width, '-') << "\n";
			}
			else if (buffer == "online") {
				const int width = 60;
				std::cout << std::string(width, '-') << "\n";
				std::cout << "| " << std::setw(width - 3) << std::left << "Online Players" << "|\n";
				std::cout << std::string(width, '-') << "\n";
				if (ServerPool::PlayerCountServer() == 0) {
					std::cout << "| " << std::setw(width - 3) << std::left << "No players online." << "|\n";
				}
				else {
					std::cout << "| " << std::setw(25) << std::left << "Player Name"
						<< "| " << std::setw(width - 30) << std::left << "World" << "|\n";
					std::cout << std::string(width, '-') << "\n";
					for (ENetPeer* cp_ = server->peers; cp_ < &server->peers[server->peerCount]; ++cp_) {
						if (cp_->state != ENET_PEER_STATE_CONNECTED or cp_->data == NULL) continue;
						std::cout << "| " << std::setw(25) << std::left << pInfo(cp_)->tankIDName
							<< "| " << std::setw(width - 30) << std::left << pInfo(cp_)->world << "|\n";
					}
				}
				std::cout << std::string(width, '-') << "\n";
			}
			else if (buffer == "maintenance") {
				if (Environment()->Maintenance or Environment()->Restart_Status) {
					Environment()->Maintenance = false, Environment()->Restart_Status = false;
					for (ENetPeer* cp_ = server->peers; cp_ < &server->peers[server->peerCount]; ++cp_) {
						if (cp_->state != ENET_PEER_STATE_CONNECTED or cp_->data == NULL) continue;
						VarList::OnAddNotification(cp_, "Maintenance Status : False", "interface/science_button.rttex", "audio/hub_open.wav");
					}
					Logger::Info("CONSOLE", "Maintenance Status : False");
				}
				else {
					Environment()->Restart_Status = true;
					for (ENetPeer* cp_ = server->peers; cp_ < &server->peers[server->peerCount]; ++cp_) {
						if (cp_->state != ENET_PEER_STATE_CONNECTED or cp_->data == NULL) continue;
						VarList::OnAddNotification(cp_, "Restarting For Update!", "interface/science_button.rttex", "audio/hub_open.wav");
					}
					Logger::Info("CONSOLE", "Maintenance Status : True");
				}
			}
			else if (buffer == "kickall") {
				for (ENetPeer* cp_ = server->peers; cp_ < &server->peers[server->peerCount]; ++cp_) {
					if (cp_->state != ENET_PEER_STATE_CONNECTED or cp_->data == NULL) continue;
					Peer_Disconnect(cp_, 0);
					Peer_Reset(cp_);
				}
				Logger::Info("CONSOLE", "Kicked everyone out of server!");
			}
			else Logger::Info("CONSOLE", "Unknown command. Enter help or ? for a list of valid commands.");
		}
	}
	static void SaveLogsUnhandle_Packet(std::string text) {
		std::fstream log("database/server_logs/Unhandle_Packet.txt", std::ios::in | std::ios::out | std::ios::ate);
		log << text << endl;
		log.close();
	}
	static void SaveCchLogs(std::string text) {
		std::fstream log("database/server_logs/Cch_Logs.txt", std::ios::in | std::ios::out | std::ios::ate);
		log << text << endl;
		log.close();
	}
	static void FailedLogin(ENetPeer* peer, string message, string label = "") {
		VarList::OnConsoleMessage(peer, "" + message);
		if (label != "") CAction::Log(peer, "action|set_url\nurl|" + Environment()->discord_url + "\nlabel|" + label);
		CAction::Log(peer, "action|logon_fail");
		Peer_Disconnect(peer, 0);
	}
	static int Player_Authentication(ENetPeer* peer) {
		Player* p_ = pInfo(peer);
		if (p_->tankIDName.find_first_not_of("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ01234567890") != std::string::npos) return -1;
		string path_ = "database/players/" + p_->tankIDName + "_.json";
		if (_access_s(path_.c_str(), 0) == 0) {
			json r_;
			std::ifstream f_(path_, ifstream::binary);
			if (f_.fail()) return -4;
			if (f_.peek() == std::ifstream::traits_type::eof()) {
				return -3; // File kosong
			}
			f_ >> r_;
			f_.close();
			try {
				if (p_->tankIDPass != r_["pass"]) return -1;
				pInfo(peer)->auth_ = false;
				for (ENetPeer* cp_ = server->peers; cp_ < &server->peers[server->peerCount]; ++cp_) {
					if (cp_->state != ENET_PEER_STATE_CONNECTED || cp_ == peer || cp_->data == NULL) continue;
					if (to_lower(pInfo(cp_)->tankIDName) == to_lower(p_->tankIDName)) {
						VarList::OnConsoleMessage(peer, "`4ALREADY ON?! `o: This account was already online, kicking it off so you can log on. (if you were just playing before, this is nothing to worry about)");
						Peer_Disconnect(cp_, 0);
					}
				}
				p_->growid = true;
				p_->requestedName = (!(r_.find("requestedName") != r_.end()) ? p_->requestedName : r_["requestedName"].get<std::string>());
				p_->recovery_token = (!(r_.find("recovery_token") != r_.end()) ? p_->recovery_token : r_["recovery_token"].get<std::string>());
				p_->player_token = (!(r_.find("player_token") != r_.end()) ? p_->player_token : r_["player_token"].get<std::string>());
				p_->AccountSecured = (!(r_.find("AccountSecured") != r_.end()) ? p_->AccountSecured : r_["AccountSecured"].get<bool>());
				p_->Has_Verifed = (!(r_.find("Has_Verifed") != r_.end()) ? p_->Has_Verifed : r_["Has_Verifed"].get<bool>());
				p_->has_claim_event_wls = (!(r_.find("has_claim_event_wls") != r_.end()) ? p_->has_claim_event_wls : r_["has_claim_event_wls"].get<bool>());
				p_->border_color = (!(r_.find("border_color") != r_.end()) ? p_->border_color : r_["border_color"].get<std::string>());
				p_->bg_color = (!(r_.find("bg_color") != r_.end()) ? p_->bg_color : r_["bg_color"].get<std::string>());
				p_->id = (!(r_.find("id") != r_.end()) ? p_->id : r_["id"].get<int>());
				p_->tankIDName = (!(r_.find("name") != r_.end()) ? p_->tankIDName : r_["name"].get<std::string>());
				p_->inv = (!(r_.find("inventory") != r_.end()) ? p_->inv : r_["inventory"].get<std::vector<std::pair<int, int>>>());
				p_->friends = (!(r_.find("friends") != r_.end()) ? p_->friends : r_["friends"].get<std::vector<Friends>>());
				p_->worlds_owned = (!(r_.find("worlds_owned") != r_.end()) ? p_->worlds_owned : r_["worlds_owned"].get<std::vector<std::string>>());
				p_->last_visited_worlds = (!(r_.find("la_wo") != r_.end()) ? p_->last_visited_worlds : r_["la_wo"].get<std::vector<std::string>>());
				p_->is_legend = (!(r_.find("legend") != r_.end()) ? p_->is_legend : r_["legend"].get<bool>());
				p_->bb = (!(r_.find("bb") != r_.end()) ? p_->bb : r_["bb"].get<bool>());
				p_->pinata_day = (!(r_.find("p_d1") != r_.end()) ? p_->pinata_day : r_["p_d1"].get<int>());
				p_->pinata_prize = (!(r_.find("p_d2") != r_.end()) ? p_->pinata_prize : r_["p_d2"].get<bool>());
				p_->pinata_claimed = (!(r_.find("p_d3") != r_.end()) ? p_->pinata_claimed : r_["p_d3"].get<bool>());
				p_->stage_pineapple = (!(r_.find("p1_2") != r_.end()) ? 0 : r_["p1_2"].get<uint16_t>());
				p_->g4p = (!(r_.find("g4p") != r_.end()) ? p_->g4p : r_["g4p"].get<uint8_t>());
				p_->pg_bank = (!(r_.find("pg_bank") != r_.end()) ? p_->pg_bank : r_["pg_bank"].get<uint8_t>());
				p_->Banked_Piggy = (!(r_.find("Banked_Piggy") != r_.end()) ? p_->Banked_Piggy : r_["Banked_Piggy"].get<int>());
				p_->trade_history = (!(r_.find("t_h") != r_.end()) ? p_->trade_history : r_["t_h"].get<std::vector<std::string>>());
				p_->total_pineapple = (!(r_.find("p1_1") != r_.end()) ? p_->total_pineapple : r_["p1_1"].get<uint32_t>());
				p_->dd = (!(r_.find("dd") != r_.end()) ? p_->dd : r_["dd"].get<uint8_t>());
				p_->supp = (!(r_.find("supp") != r_.end()) ? p_->supp : r_["supp"].get<uint8_t>());
				p_->hs = (!(r_.find("hs") != r_.end()) ? p_->hs : r_["hs"].get<uint8_t>());
				p_->note = (!(r_.find("note") != r_.end()) ? p_->note : r_["note"].get<std::string>());
				p_->d_name = (!(r_.find("d_name") != r_.end()) ? p_->d_name : r_["d_name"].get<std::string>());
				p_->gtwl = (!(r_.find("gtwl") != r_.end()) ? p_->gtwl : r_["gtwl"].get<int>());
				p_->rb = (!(r_.find("rb") != r_.end()) ? p_->rb : r_["rb"].get<uint8_t>());
				p_->gp = (!(r_.find("gp") != r_.end()) ? p_->gp : r_["gp"].get<uint8_t>());
				p_->glo = (!(r_.find("glo") != r_.end()) ? p_->glo : r_["glo"].get<uint8_t>());
				p_->glo_p = (!(r_.find("glo_p") != r_.end()) ? p_->glo_p : r_["glo_p"].get<std::vector<int>>());
				p_->lvl_p = (!(r_.find("lvl_p") != r_.end()) ? p_->lvl_p : r_["lvl_p"].get<std::vector<int>>());
				p_->tankIDPass = (!(r_.find("pass") != r_.end()) ? p_->tankIDPass : r_["pass"].get<std::string>());
				p_->last_online = (!(r_.find("lo") != r_.end()) ? p_->last_online : r_["lo"].get<std::string>());
				p_->surg_p = (!(r_.find("surg_p") != r_.end()) ? p_->surg_p : r_["surg_p"].get<std::vector<uint8_t>>());
				p_->t_p = (!(r_.find("t_p") != r_.end()) ? p_->t_p : r_["t_p"].get<std::vector<uint8_t>>());
				p_->bb_p = (!(r_.find("bb_p") != r_.end()) ? p_->bb_p : r_["bb_p"].get<std::vector<uint8_t>>());
				p_->ff_p = (!(r_.find("ff_p") != r_.end()) ? p_->ff_p : r_["ff_p"].get<std::vector<uint8_t>>());
				p_->p_p = (!(r_.find("p_p") != r_.end()) ? p_->p_p : r_["p_p"].get<std::vector<uint8_t>>());
				p_->g_p = (!(r_.find("g_p") != r_.end()) ? p_->g_p : r_["g_p"].get<std::vector<uint8_t>>());
				p_->t_xp = (!(r_.find("t_xp") != r_.end()) ? p_->t_xp : r_["t_xp"].get<int>());
				p_->bb_xp = (!(r_.find("bb_xp") != r_.end()) ? p_->bb_xp : r_["bb_xp"].get<int>());
				p_->ff_xp = (!(r_.find("ff_xp") != r_.end()) ? p_->ff_xp : r_["ff_xp"].get<int>());
				p_->s_xp = (!(r_.find("s_xp") != r_.end()) ? p_->s_xp : r_["s_xp"].get<int>());
				p_->g_xp = (!(r_.find("g_xp") != r_.end()) ? p_->g_xp : r_["g_xp"].get<int>());
				p_->p_xp = (!(r_.find("p_xp") != r_.end()) ? p_->p_xp : r_["p_xp"].get<int>());
				p_->t_lvl = (!(r_.find("t_lvl") != r_.end()) ? p_->t_lvl : r_["t_lvl"].get<uint8_t>());
				p_->bb_lvl = (!(r_.find("bb_lvl") != r_.end()) ? p_->bb_lvl : r_["bb_lvl"].get<uint8_t>());
				p_->ff_lvl = (!(r_.find("ff_lvl") != r_.end()) ? p_->ff_lvl : r_["ff_lvl"].get<uint8_t>());
				p_->s_lvl = (!(r_.find("s_lvl") != r_.end()) ? p_->s_lvl : r_["s_lvl"].get<uint8_t>());
				p_->g_lvl = (!(r_.find("g_lvl") != r_.end()) ? p_->g_lvl : r_["g_lvl"].get<uint8_t>());
				p_->p_lvl = (!(r_.find("p_lvl") != r_.end()) ? p_->p_lvl : r_["p_lvl"].get<uint8_t>());
				p_->b_l = (!(r_.find("b_l") != r_.end()) ? p_->b_l : r_["b_l"].get<uint16_t>());
				p_->bp = (!(r_.find("bp") != r_.end()) ? p_->bp : r_["bp"].get<std::vector<std::pair<uint16_t, uint8_t>>>());
				p_->flagmay = (!(r_.find("flagmay") != r_.end()) ? p_->flagmay : r_["flagmay"].get<int>());
				p_->cc = (!(r_.find("cc") != r_.end()) ? p_->cc : r_["cc"].get<int>());
				p_->opc = (!(r_.find("opc") != r_.end()) ? p_->opc : r_["opc"].get<uint16_t>());
				p_->b_i = (!(r_.find("b_i") != r_.end()) ? p_->b_i : r_["b_i"].get<int>());
				p_->b_bill = (!(r_.find("b_bill") != r_.end()) ? p_->b_bill : r_["b_bill"].get<std::string>());
				p_->b_w = (!(r_.find("b_w") != r_.end()) ? p_->b_w : r_["b_w"].get<int>());
				p_->b_p = (!(r_.find("b_p") != r_.end()) ? p_->b_p : r_["b_p"].get<int>());
				p_->surgery_skill = (!(r_.find("skl") != r_.end()) ? p_->surgery_skill : r_["skl"].get<uint8_t>());
				p_->surgery_type = (!(r_.find("sgt") != r_.end()) ? p_->surgery_type : r_["sgt"].get<uint8_t>());
				p_->surgery_done = (!(r_.find("sd") != r_.end()) ? p_->surgery_done : r_["sd"].get<uint16_t>());
				p_->b_ra = (!(r_.find("b_ra") != r_.end()) ? p_->b_ra : r_["b_ra"].get<int>());
				p_->b_lvl = (!(r_.find("b_lvl") != r_.end()) ? p_->b_lvl : r_["b_lvl"].get<int>());
				p_->i_11818_1 = (!(r_.find("i_11818_1") != r_.end()) ? p_->i_11818_1 : r_["i_11818_1"].get<uint8_t>());
				p_->i_11818_2 = (!(r_.find("i_11818_2") != r_.end()) ? p_->i_11818_2 : r_["i_11818_2"].get<uint8_t>());
				p_->roleSkin = (!(r_.find("roleSkin") != r_.end()) ? p_->roleSkin : r_["roleSkin"].get<uint8_t>());
				p_->roleIcon = (!(r_.find("roleIcon") != r_.end()) ? p_->roleIcon : r_["roleIcon"].get<uint8_t>());
				p_->radio = (!(r_.find("rad") != r_.end()) ? p_->radio : r_["rad"].get<uint8_t>());
				p_->w_w = (!(r_.find("w_w") != r_.end()) ? p_->w_w : r_["w_w"].get<uint8_t>());
				p_->lvl125 = (!(r_.find("lvl125") != r_.end()) ? p_->lvl125 : r_["lvl125"].get<uint8_t>());
				p_->donor = (!(r_.find("dnr") != r_.end()) ? p_->donor : r_["dnr"].get<uint8_t>());
				p_->master = (!(r_.find("mst") != r_.end()) ? p_->master : r_["mst"].get<uint8_t>());
				p_->radio2 = (!(r_.find("radio2") != r_.end()) ? p_->radio2 : r_["radio2"].get<bool>());
				p_->received_balloon_warz = (!(r_.find("balloon_prize") != r_.end()) ? p_->received_balloon_warz : r_["balloon_prize"].get<bool>());
				p_->pure_shadow = (!(r_.find("p_7") != r_.end()) ? p_->pure_shadow : r_["p_7"].get<int>());
				p_->p_status = (!(r_.find("on") != r_.end()) ? p_->p_status : r_["on"].get<int>());
				p_->wiped_invalid_worlds = (!(r_.find("wipe") != r_.end()) ? p_->wiped_invalid_worlds : r_["wipe"].get<bool>());
				p_->received_recycle_prize = (!(r_.find("received_recycle_prize") != r_.end()) ? p_->received_recycle_prize : r_["received_recycle_prize"].get<bool>());
				p_->wls_participated = (!(r_.find("wls_participated") != r_.end()) ? p_->wls_participated : r_["wls_participated"].get<bool>());
				p_->summer_surprise = (!(r_.find("sm1") != r_.end()) ? p_->summer_surprise : r_["sm1"].get<int>());
				p_->summer_total = (!(r_.find("sm2") != r_.end()) ? p_->summer_total : r_["sm2"].get<int>());
				p_->summer_milestone = (!(r_.find("sm3") != r_.end()) ? p_->summer_milestone : r_["sm3"].get<std::vector<int>>());
				p_->growpass_points = (!(r_.find("growpass_points") != r_.end()) ? p_->growpass_points : r_["growpass_points"].get<int>());
				p_->growpass_prizes = (!(r_.find("growpass_prizes") != r_.end()) ? p_->growpass_prizes : r_["growpass_prizes"].get<std::vector<std::string>>());
				p_->growpass_quests = (!(r_.find("growpass_quests") != r_.end()) ? p_->growpass_quests : r_["growpass_quests"].get<std::vector<std::string>>());
				p_->Wrench_Style = (!(r_.find("Wrench_Style") != r_.end()) ? p_->Wrench_Style : r_["Wrench_Style"].get<std::vector<int>>());
				p_->Wrench_Decoration = (!(r_.find("Wrench_Decoration") != r_.end()) ? p_->Wrench_Decoration : r_["Wrench_Decoration"].get<std::vector<int>>());
				p_->grow_air_ballon = (!(r_.find("g_a_b") != r_.end()) ? p_->grow_air_ballon : r_["g_a_b"].get<uint8_t>());
				p_->egg_carton = (!(r_.find("egg") != r_.end()) ? p_->egg_carton : r_["egg"].get<int>());
				p_->magic_egg = (!(r_.find("egg2") != r_.end()) ? p_->magic_egg : r_["egg2"].get<int>());
				p_->rubble = (!(r_.find("rubble") != r_.end()) ? p_->rubble : r_["rubble"].get<int>());
				p_->epic_quest_total = (!(r_.find("epic_quest_total") != r_.end()) ? p_->epic_quest_total : r_["epic_quest_total"].get<int>());
				p_->epicq_lvl100 = (!(r_.find("epicq_lvl100") != r_.end()) ? p_->epicq_lvl100 : r_["epicq_lvl100"].get<int>());
				p_->epicq_plant_wiz = (!(r_.find("epicq_plant_wiz") != r_.end()) ? p_->epicq_plant_wiz : r_["epicq_plant_wiz"].get<int>());
				p_->epicq_emeraldlock = (!(r_.find("epicq_emeraldlock") != r_.end()) ? p_->epicq_emeraldlock : r_["epicq_emeraldlock"].get<int>());
				p_->epicq_ghostcharm = (!(r_.find("epicq_ghostcharm") != r_.end()) ? p_->epicq_ghostcharm : r_["epicq_ghostcharm"].get<int>());
				p_->epicq_teddybear = (!(r_.find("epicq_teddybear") != r_.end()) ? p_->epicq_teddybear : r_["epicq_teddybear"].get<int>());
				p_->epicq_splice_wm_comet = (!(r_.find("epicq_splice_wm_comet") != r_.end()) ? p_->epicq_splice_wm_comet : r_["epicq_splice_wm_comet"].get<int>());
				p_->epicq_stonefish = (!(r_.find("epicq_stonefish") != r_.end()) ? p_->epicq_stonefish : r_["epicq_stonefish"].get<int>());
				p_->epicq_woolcraft = (!(r_.find("epicq_woolcraft") != r_.end()) ? p_->epicq_woolcraft : r_["epicq_woolcraft"].get<int>());
				p_->epicq_octopushead = (!(r_.find("epicq_octopushead") != r_.end()) ? p_->epicq_octopushead : r_["epicq_octopushead"].get<int>());
				p_->epicq_goldenaxe = (!(r_.find("epicq_goldenaxe") != r_.end()) ? p_->epicq_goldenaxe : r_["epicq_goldenaxe"].get<int>());
				p_->epicq_ddrag = (!(r_.find("epicq_ddrag") != r_.end()) ? p_->epicq_ddrag : r_["epicq_ddrag"].get<int>());
				p_->epicq_riding = (!(r_.find("epicq_riding") != r_.end()) ? p_->epicq_riding : r_["epicq_riding"].get<int>());
				p_->epicq_compactdress = (!(r_.find("epicq_compactdress") != r_.end()) ? p_->epicq_compactdress : r_["epicq_compactdress"].get<int>());
				p_->epicq_dressup = (!(r_.find("epicq_dressup") != r_.end()) ? p_->epicq_dressup : r_["epicq_dressup"].get<int>());
				p_->Mines_Score = (!(r_.find("Mines_Score") != r_.end()) ? p_->Mines_Score : r_["Mines_Score"].get<int>());
				p_->Number_License = (!(r_.find("Number_License") != r_.end()) ? p_->Number_License : r_["Number_License"].get<int>());
				p_->mines_coin = (!(r_.find("mines_coin") != r_.end()) ? p_->mines_coin : r_["mines_coin"].get<int>());
				p_->Has_Read_ = (!(r_.find("Has_Read_") != r_.end()) ? p_->Has_Read_ : r_["Has_Read_"].get<bool>());
				p_->Slot_Far = (!(r_.find("Slot_Far") != r_.end()) ? p_->Slot_Far : r_["Slot_Far"].get<int>());
				p_->Role.Cheats = (!(r_.find("Role.Cheats") != r_.end()) ? p_->Role.Cheats : r_["Role.Cheats"].get<bool>());
				p_->Role.Vip = (!(r_.find("Role.Vip") != r_.end()) ? p_->Role.Vip : r_["Role.Vip"].get<bool>());
				p_->Role.Moderator = (!(r_.find("Role.Moderator") != r_.end()) ? p_->Role.Moderator : r_["Role.Moderator"].get<bool>());
				p_->Role.Administrator = (!(r_.find("Role.Administrator") != r_.end()) ? p_->Role.Administrator : r_["Role.Administrator"].get<bool>());
				p_->Role.Developer = (!(r_.find("Role.Developer") != r_.end()) ? p_->Role.Developer : r_["Role.Developer"].get<bool>());
				p_->Role.God = (!(r_.find("Role.God") != r_.end()) ? p_->Role.God : r_["Role.God"].get<bool>());
				p_->Role.Unlimited = (!(r_.find("Role.Unlimited") != r_.end()) ? p_->Role.Unlimited : r_["Role.Unlimited"].get<bool>());
				p_->Role.Owner_Server = (!(r_.find("Role.Owner_Server") != r_.end()) ? p_->Role.Owner_Server : r_["Role.Owner_Server"].get<bool>());
				p_->Role.BOOST = (!(r_.find("Role.BOOST") != r_.end()) ? p_->Role.BOOST : r_["Role.BOOST"].get<bool>());
				p_->Role.SUPER_BOOST = (!(r_.find("Role.SUPER_BOOST") != r_.end()) ? p_->Role.SUPER_BOOST : r_["Role.SUPER_BOOST"].get<bool>());
				p_->Role.BOOST_TIME = (!(r_.find("bos_time") != r_.end()) ? p_->Role.BOOST_TIME : r_["bos_time"].get<long long int>());
				p_->Role.SUPER_BOOST_TIME = (!(r_.find("spbos_time") != r_.end()) ? p_->Role.SUPER_BOOST_TIME : r_["spbos_time"].get<long long int>());
				p_->Title.OfLegend = (!(r_.find("Title.OfLegend") != r_.end()) ? p_->Title.OfLegend : r_["Title.OfLegend"].get<bool>());
				p_->Title.Doctor = (!(r_.find("Title.Doctor") != r_.end()) ? p_->Title.Doctor : r_["Title.Doctor"].get<bool>());
				p_->Title.Mentor = (!(r_.find("Title.Mentor") != r_.end()) ? p_->Title.Mentor : r_["Title.Mentor"].get<bool>());
				p_->Title.Grow4Good = (!(r_.find("Title.Grow4Good") != r_.end()) ? p_->Title.Grow4Good : r_["Title.Grow4Good"].get<bool>());
				p_->Title.TiktokBadge = (!(r_.find("Title.TiktokBadge") != r_.end()) ? p_->Title.TiktokBadge : r_["Title.TiktokBadge"].get<bool>());
				p_->Title.ContentCBadge = (!(r_.find("Title.ContentCBadge") != r_.end()) ? p_->Title.ContentCBadge : r_["Title.ContentCBadge"].get<bool>());
				p_->Title.PartyAnimal = (!(r_.find("Title.PartyAnimal") != r_.end()) ? p_->Title.PartyAnimal : r_["Title.PartyAnimal"].get<bool>());
				p_->Title.ThanksGiving = (!(r_.find("Title.ThanksGiving") != r_.end()) ? p_->Title.ThanksGiving : r_["Title.ThanksGiving"].get<bool>());
				p_->Title.OldTimer = (!(r_.find("Title.OldTimer") != r_.end()) ? p_->Title.OldTimer : r_["Title.OldTimer"].get<bool>());
				p_->Title.WinterSanta = (!(r_.find("Title.WinterSanta") != r_.end()) ? p_->Title.WinterSanta : r_["Title.WinterSanta"].get<bool>());
				p_->Title.GrowPass_Gold = (!(r_.find("Title.GrowPass_Gold") != r_.end()) ? p_->Title.GrowPass_Gold : r_["Title.GrowPass_Gold"].get<bool>());
				p_->Title.GrowPass_Silver = (!(r_.find("Title.GrowPass_Silver") != r_.end()) ? p_->Title.GrowPass_Silver : r_["Title.GrowPass_Silver"].get<bool>());
				p_->Title.GrowPass_Bronze = (!(r_.find("Title.GrowPass_Bronze") != r_.end()) ? p_->Title.GrowPass_Bronze : r_["Title.GrowPass_Bronze"].get<bool>());
				p_->Title.Award_Winning = (!(r_.find("Title.Award_Winning") != r_.end()) ? p_->Title.Award_Winning : r_["Title.Award_Winning"].get<bool>());
				p_->StarglitterTask_Prize = (!(r_.find("StarglitterTask_Prize") != r_.end()) ? p_->StarglitterTask_Prize : r_["StarglitterTask_Prize"].get<std::vector<std::string>>());
				p_->starglitter_enter = (!(r_.find("starglitter_enter") != r_.end()) ? p_->starglitter_enter : r_["starglitter_enter"].get<bool>());
				p_->starglitter_seed = (!(r_.find("starglitter_seed") != r_.end()) ? p_->starglitter_seed : r_["starglitter_seed"].get<uint16_t>());
				p_->starglitter_30mins = (!(r_.find("starglitter_30mins") != r_.end()) ? p_->starglitter_30mins : r_["starglitter_30mins"].get<uint8_t>());
				p_->starglitter_seed2 = (!(r_.find("starglitter_seed2") != r_.end()) ? p_->starglitter_seed2 : r_["starglitter_seed2"].get<uint8_t>());
				p_->starglitter_combine = (!(r_.find("starglitter_combine") != r_.end()) ? p_->starglitter_combine : r_["starglitter_combine"].get<uint8_t>());
				p_->starglitter_crystal = (!(r_.find("starglitter_crystal") != r_.end()) ? p_->starglitter_crystal : r_["starglitter_crystal"].get<uint8_t>());
				p_->starglitter_points = (!(r_.find("starglitter_points") != r_.end()) ? p_->starglitter_points : r_["starglitter_points"].get<int>());
				p_->starglitter_email = (!(r_.find("starglitter_email") != r_.end()) ? p_->starglitter_email : r_["starglitter_email"].get<int>());
				p_->starglitter_surgery = (!(r_.find("starglitter_surgery") != r_.end()) ? p_->starglitter_surgery : r_["starglitter_surgery"].get<int>());
				p_->starglitter_fish = (!(r_.find("starglitter_fish") != r_.end()) ? p_->starglitter_fish : r_["starglitter_fish"].get<int>());
				p_->starglitter_break = (!(r_.find("starglitter_break") != r_.end()) ? p_->starglitter_break : r_["starglitter_break"].get<int>());
				p_->starglitter_place = (!(r_.find("starglitter_place") != r_.end()) ? p_->starglitter_place : r_["starglitter_place"].get<int>());
				p_->starglitter_trade = (!(r_.find("starglitter_trade") != r_.end()) ? p_->starglitter_trade : r_["starglitter_trade"].get<int>());
				p_->starglitter_sb = (!(r_.find("starglitter_sb") != r_.end()) ? p_->starglitter_sb : r_["starglitter_sb"].get<int>());
				p_->starglitter_provider = (!(r_.find("starglitter_provider") != r_.end()) ? p_->starglitter_provider : r_["starglitter_provider"].get<int>());
				p_->starglitter_provider2 = (!(r_.find("starglitter_provider2") != r_.end()) ? p_->starglitter_provider2 : r_["starglitter_provider2"].get<int>());
				p_->starglitter_geiger = (!(r_.find("starglitter_geiger") != r_.end()) ? p_->starglitter_geiger : r_["starglitter_geiger"].get<int>());
				p_->starglitter_geiger2 = (!(r_.find("starglitter_geiger2") != r_.end()) ? p_->starglitter_geiger2 : r_["starglitter_geiger2"].get<int>());
				p_->starglitter_reset_day = (!(r_.find("starglitter_reset_day") != r_.end()) ? p_->starglitter_reset_day : r_["starglitter_reset_day"].get<long long int>());
				p_->starglitter_reset_week = (!(r_.find("starglitter_reset_week") != r_.end()) ? p_->starglitter_reset_week : r_["starglitter_reset_week"].get<long long int>());
				p_->starglitter_reset_month = (!(r_.find("starglitter_reset_month") != r_.end()) ? p_->starglitter_reset_month : r_["starglitter_reset_month"].get<long long int>());
				p_->Warning = (!(r_.find("Warning") != r_.end()) ? p_->Warning : r_["Warning"].get<int>());
				p_->Slot_Credits = (!(r_.find("Slot_Credits") != r_.end()) ? p_->Slot_Credits : r_["Slot_Credits"].get<int>());
				p_->Slot_Points = (!(r_.find("Slot_Points") != r_.end()) ? p_->Slot_Points : r_["Slot_Points"].get<int>());
				p_->Warning_Message = (!(r_.find("Warning_Message") != r_.end()) ? p_->Warning_Message : r_["Warning_Message"].get<std::vector<std::string>>());
				p_->Account_Notes = (!(r_.find("Account_Notes") != r_.end()) ? p_->Account_Notes : r_["Account_Notes"].get<std::vector<std::string>>());
				p_->worlds_favorite = (!(r_.find("worlds_favorite") != r_.end()) ? p_->worlds_favorite : r_["worlds_favorite"].get<std::vector<std::string>>());
				p_->tscanc = (!(r_.find("tscanc") != r_.end()) ? p_->tscanc : r_["tscanc"].get<int>());
				p_->last_rank_per = (!(r_.find("last_rank_per") != r_.end()) ? p_->last_rank_per : r_["last_rank_per"].get<int>());
				p_->last_rank_guild = (!(r_.find("last_rank_guild") != r_.end()) ? p_->last_rank_guild : r_["last_rank_guild"].get<int>());
				p_->last_guild_contri = (!(r_.find("last_guild_contri") != r_.end()) ? p_->last_guild_contri : r_["last_guild_contri"].get<int>());
				p_->last_personal_contri = (!(r_.find("last_personal_contri") != r_.end()) ? p_->last_personal_contri : r_["last_personal_contri"].get<int>());
				p_->spring_token = (!(r_.find("spring_token") != r_.end()) ? p_->spring_token : r_["spring_token"].get<int>());
				p_->summer_token = (!(r_.find("summer_token") != r_.end()) ? p_->summer_token : r_["summer_token"].get<int>());
				p_->winter_token = (!(r_.find("winter_token") != r_.end()) ? p_->winter_token : r_["winter_token"].get<int>());
				p_->Legendary_Keys = (!(r_.find("Legendary_Keys") != r_.end()) ? p_->Legendary_Keys : r_["Legendary_Keys"].get<int>());
				p_->raw5_legendary_claim = (!(r_.find("raw5_legendary_claim") != r_.end()) ? p_->raw5_legendary_claim : r_["raw5_legendary_claim"].get<bool>());
				p_->participated_personal = (!(r_.find("participated_personal") != r_.end()) ? p_->participated_personal : r_["participated_personal"].get<bool>());
				p_->next_guild_event = (!(r_.find("next_guild_event") != r_.end()) ? p_->next_guild_event : r_["next_guild_event"].get<bool>());
				p_->row1_items1_claim = (!(r_.find("row1_items1_claim") != r_.end()) ? p_->row1_items1_claim : r_["row1_items1_claim"].get<bool>());
				p_->row1_items2_claim = (!(r_.find("row1_items2_claim") != r_.end()) ? p_->row1_items2_claim : r_["row1_items2_claim"].get<bool>());
				p_->row1_items3_claim = (!(r_.find("row1_items3_claim") != r_.end()) ? p_->row1_items3_claim : r_["row1_items3_claim"].get<bool>());
				p_->row1_items4_claim = (!(r_.find("row1_items4_claim") != r_.end()) ? p_->row1_items4_claim : r_["row1_items4_claim"].get<bool>());
				p_->row1_items5_claim = (!(r_.find("row1_items5_claim") != r_.end()) ? p_->row1_items5_claim : r_["row1_items5_claim"].get<bool>());
				p_->row1_items6_claim = (!(r_.find("row1_items6_claim") != r_.end()) ? p_->row1_items6_claim : r_["row1_items6_claim"].get<bool>());
				p_->row2_items1_claim = (!(r_.find("row2_items1_claim") != r_.end()) ? p_->row2_items1_claim : r_["row2_items1_claim"].get<bool>());
				p_->row2_items2_claim = (!(r_.find("row2_items2_claim") != r_.end()) ? p_->row2_items2_claim : r_["row2_items2_claim"].get<bool>());
				p_->row2_items3_claim = (!(r_.find("row2_items3_claim") != r_.end()) ? p_->row2_items3_claim : r_["row2_items3_claim"].get<bool>());
				p_->row2_items4_claim = (!(r_.find("row2_items4_claim") != r_.end()) ? p_->row2_items4_claim : r_["row2_items4_claim"].get<bool>());
				p_->row2_items5_claim = (!(r_.find("row2_items5_claim") != r_.end()) ? p_->row2_items5_claim : r_["row2_items5_claim"].get<bool>());
				p_->row2_items6_claim = (!(r_.find("row2_items6_claim") != r_.end()) ? p_->row2_items6_claim : r_["row2_items6_claim"].get<bool>());
				p_->row3_items1_claim = (!(r_.find("row3_items1_claim") != r_.end()) ? p_->row3_items1_claim : r_["row3_items1_claim"].get<bool>());
				p_->row3_items2_claim = (!(r_.find("row3_items2_claim") != r_.end()) ? p_->row3_items2_claim : r_["row3_items2_claim"].get<bool>());
				p_->row3_items3_claim = (!(r_.find("row3_items3_claim") != r_.end()) ? p_->row3_items3_claim : r_["row3_items3_claim"].get<bool>());
				p_->row3_items4_claim = (!(r_.find("row3_items4_claim") != r_.end()) ? p_->row3_items4_claim : r_["row3_items4_claim"].get<bool>());
				p_->row3_items5_claim = (!(r_.find("row3_items5_claim") != r_.end()) ? p_->row3_items5_claim : r_["row3_items5_claim"].get<bool>());
				p_->row3_items6_claim = (!(r_.find("row3_items6_claim") != r_.end()) ? p_->row3_items6_claim : r_["row3_items6_claim"].get<bool>());
				p_->row4_items1_claim = (!(r_.find("row4_items1_claim") != r_.end()) ? p_->row4_items1_claim : r_["row4_items1_claim"].get<bool>());
				p_->row4_items2_claim = (!(r_.find("row4_items2_claim") != r_.end()) ? p_->row4_items2_claim : r_["row4_items2_claim"].get<bool>());
				p_->row4_items3_claim = (!(r_.find("row4_items3_claim") != r_.end()) ? p_->row4_items3_claim : r_["row4_items3_claim"].get<bool>());
				p_->row4_items4_claim = (!(r_.find("row4_items4_claim") != r_.end()) ? p_->row4_items4_claim : r_["row4_items4_claim"].get<bool>());
				p_->row4_items5_claim = (!(r_.find("row4_items5_claim") != r_.end()) ? p_->row4_items5_claim : r_["row4_items5_claim"].get<bool>());
				p_->row4_items6_claim = (!(r_.find("row4_items6_claim") != r_.end()) ? p_->row4_items6_claim : r_["row4_items6_claim"].get<bool>());
				p_->claim_top1 = (!(r_.find("claim_top1") != r_.end()) ? p_->claim_top1 : r_["claim_top1"].get<bool>());
				p_->claim_top2 = (!(r_.find("claim_top2") != r_.end()) ? p_->claim_top2 : r_["claim_top2"].get<bool>());
				p_->claim_top3 = (!(r_.find("claim_top3") != r_.end()) ? p_->claim_top3 : r_["claim_top3"].get<bool>());
				p_->claim_top4 = (!(r_.find("claim_top4") != r_.end()) ? p_->claim_top4 : r_["claim_top4"].get<bool>());
				p_->claim_top5 = (!(r_.find("claim_top5") != r_.end()) ? p_->claim_top5 : r_["claim_top5"].get<bool>());
				p_->claim_top6 = (!(r_.find("claim_top6") != r_.end()) ? p_->claim_top6 : r_["claim_top6"].get<bool>());
				p_->claim_top7 = (!(r_.find("claim_top7") != r_.end()) ? p_->claim_top7 : r_["claim_top7"].get<bool>());
				p_->claim_top8 = (!(r_.find("claim_top8") != r_.end()) ? p_->claim_top8 : r_["claim_top8"].get<bool>());
				p_->claim_top9 = (!(r_.find("claim_top9") != r_.end()) ? p_->claim_top9 : r_["claim_top9"].get<bool>());
				p_->claim_top10 = (!(r_.find("claim_top10") != r_.end()) ? p_->claim_top10 : r_["claim_top10"].get<bool>());
				p_->claim_top11 = (!(r_.find("claim_top11") != r_.end()) ? p_->claim_top11 : r_["claim_top11"].get<bool>());
				p_->claim_top12 = (!(r_.find("claim_top12") != r_.end()) ? p_->claim_top12 : r_["claim_top12"].get<bool>());
				p_->claim_top13 = (!(r_.find("claim_top13") != r_.end()) ? p_->claim_top13 : r_["claim_top13"].get<bool>());
				p_->claim_top14 = (!(r_.find("claim_top14") != r_.end()) ? p_->claim_top14 : r_["claim_top14"].get<bool>());
				p_->claim_top15 = (!(r_.find("claim_top15") != r_.end()) ? p_->claim_top15 : r_["claim_top15"].get<bool>());
				p_->claim_top16 = (!(r_.find("claim_top16") != r_.end()) ? p_->claim_top16 : r_["claim_top16"].get<bool>());
				p_->claim_top17 = (!(r_.find("claim_top17") != r_.end()) ? p_->claim_top17 : r_["claim_top17"].get<bool>());
				p_->claim_top18 = (!(r_.find("claim_top18") != r_.end()) ? p_->claim_top18 : r_["claim_top18"].get<bool>());
				p_->claim_top19 = (!(r_.find("claim_top19") != r_.end()) ? p_->claim_top19 : r_["claim_top19"].get<bool>());
				p_->claim_top20 = (!(r_.find("claim_top20") != r_.end()) ? p_->claim_top20 : r_["claim_top20"].get<bool>());
				p_->claim_top1g = (!(r_.find("claim_top1g") != r_.end()) ? p_->claim_top1g : r_["claim_top1g"].get<bool>());
				p_->claim_top2g = (!(r_.find("claim_top2g") != r_.end()) ? p_->claim_top2g : r_["claim_top2g"].get<bool>());
				p_->claim_top3g = (!(r_.find("claim_top3g") != r_.end()) ? p_->claim_top3g : r_["claim_top3g"].get<bool>());
				p_->claim_top4g = (!(r_.find("claim_top4g") != r_.end()) ? p_->claim_top4g : r_["claim_top4g"].get<bool>());
				p_->claim_top5g = (!(r_.find("claim_top5g") != r_.end()) ? p_->claim_top5g : r_["claim_top5g"].get<bool>());
				p_->claim_top6g = (!(r_.find("claim_top6g") != r_.end()) ? p_->claim_top6g : r_["claim_top6g"].get<bool>());
				p_->claim_top7g = (!(r_.find("claim_top7g") != r_.end()) ? p_->claim_top7g : r_["claim_top7g"].get<bool>());
				p_->claim_top8g = (!(r_.find("claim_top8g") != r_.end()) ? p_->claim_top8g : r_["claim_top8g"].get<bool>());
				p_->claim_top9g = (!(r_.find("claim_top9g") != r_.end()) ? p_->claim_top9g : r_["claim_top9g"].get<bool>());
				p_->claim_top10g = (!(r_.find("claim_top10g") != r_.end()) ? p_->claim_top10g : r_["claim_top10g"].get<bool>());
				p_->claim_top11g = (!(r_.find("claim_top11g") != r_.end()) ? p_->claim_top11g : r_["claim_top11g"].get<bool>());
				p_->claim_top12g = (!(r_.find("claim_top12g") != r_.end()) ? p_->claim_top12g : r_["claim_top12g"].get<bool>());
				p_->claim_top13g = (!(r_.find("claim_top13g") != r_.end()) ? p_->claim_top13g : r_["claim_top13g"].get<bool>());
				p_->claim_top14g = (!(r_.find("claim_top14g") != r_.end()) ? p_->claim_top14g : r_["claim_top14g"].get<bool>());
				p_->claim_top15g = (!(r_.find("claim_top15g") != r_.end()) ? p_->claim_top15g : r_["claim_top15g"].get<bool>());
				p_->claim_top16g = (!(r_.find("claim_top16g") != r_.end()) ? p_->claim_top16g : r_["claim_top16g"].get<bool>());
				p_->claim_top17g = (!(r_.find("claim_top17g") != r_.end()) ? p_->claim_top17g : r_["claim_top17g"].get<bool>());
				p_->claim_top18g = (!(r_.find("claim_top18g") != r_.end()) ? p_->claim_top18g : r_["claim_top18g"].get<bool>());
				p_->claim_top19g = (!(r_.find("claim_top19g") != r_.end()) ? p_->claim_top19g : r_["claim_top19g"].get<bool>());
				p_->claim_top20g = (!(r_.find("claim_top20g") != r_.end()) ? p_->claim_top20g : r_["claim_top20g"].get<bool>());
				p_->claim_top21g = (!(r_.find("claim_top21g") != r_.end()) ? p_->claim_top21g : r_["claim_top21g"].get<bool>());
				p_->claim_top22g = (!(r_.find("claim_top22g") != r_.end()) ? p_->claim_top22g : r_["claim_top22g"].get<bool>());
				p_->claim_top23g = (!(r_.find("claim_top23g") != r_.end()) ? p_->claim_top23g : r_["claim_top23g"].get<bool>());
				p_->claim_top24g = (!(r_.find("claim_top24g") != r_.end()) ? p_->claim_top24g : r_["claim_top24g"].get<bool>());
				p_->claim_top25g = (!(r_.find("claim_top25g") != r_.end()) ? p_->claim_top25g : r_["claim_top25g"].get<bool>());
				p_->top_punch_1 = (!(r_.find("top_punch_1") != r_.end()) ? p_->top_punch_1 : r_["top_punch_1"].get<bool>());
				p_->top_punch_2 = (!(r_.find("top_punch_2") != r_.end()) ? p_->top_punch_2 : r_["top_punch_2"].get<bool>());
				p_->top_punch_3 = (!(r_.find("top_punch_3") != r_.end()) ? p_->top_punch_3 : r_["top_punch_3"].get<bool>());
				p_->top_punch_4 = (!(r_.find("top_punch_4") != r_.end()) ? p_->top_punch_4 : r_["top_punch_4"].get<bool>());
				p_->top_punch_5 = (!(r_.find("top_punch_5") != r_.end()) ? p_->top_punch_5 : r_["top_punch_5"].get<bool>());
				p_->HalloweenTask_Prize = (!(r_.find("HalloweenTask_Prize") != r_.end()) ? p_->HalloweenTask_Prize : r_["HalloweenTask_Prize"].get<std::vector<std::string>>());
				p_->DarkKing_Sacrifices = (!(r_.find("DarkKing_Sacrifices") != r_.end()) ? p_->DarkKing_Sacrifices : r_["DarkKing_Sacrifices"].get<int>());
				p_->halloween_q1 = (!(r_.find("halloween_q1") != r_.end()) ? p_->halloween_q1 : r_["halloween_q1"].get<int>());
				p_->halloween_q2 = (!(r_.find("halloween_q2") != r_.end()) ? p_->halloween_q2 : r_["halloween_q2"].get<int>());
				p_->halloween_q3 = (!(r_.find("halloween_q3") != r_.end()) ? p_->halloween_q3 : r_["halloween_q3"].get<int>());
				p_->halloween_q4 = (!(r_.find("halloween_q4") != r_.end()) ? p_->halloween_q4 : r_["halloween_q4"].get<int>());
				p_->halloween_q5 = (!(r_.find("halloween_q5") != r_.end()) ? p_->halloween_q5 : r_["halloween_q5"].get<int>());
				p_->halloween_q6 = (!(r_.find("halloween_q6") != r_.end()) ? p_->halloween_q6 : r_["halloween_q6"].get<int>());
				p_->halloween_q7 = (!(r_.find("halloween_q7") != r_.end()) ? p_->halloween_q7 : r_["halloween_q7"].get<int>());
				p_->halloween_q8 = (!(r_.find("halloween_q8") != r_.end()) ? p_->halloween_q8 : r_["halloween_q8"].get<int>());
				p_->halloween_q9 = (!(r_.find("halloween_q9") != r_.end()) ? p_->halloween_q9 : r_["halloween_q9"].get<int>());
				p_->WinterBingo_Prize = (!(r_.find("WinterBingo_Prize") != r_.end()) ? p_->WinterBingo_Prize : r_["WinterBingo_Prize"].get<std::map<std::string, std::pair<int, int>>>());
				p_->WinterBingo_Task = (!(r_.find("WinterBingo_Task") != r_.end()) ? p_->WinterBingo_Task : r_["WinterBingo_Task"].get<std::map<std::string, int>>());
				p_->Has_BingoTask = (!(r_.find("Has_BingoTask") != r_.end()) ? p_->Has_BingoTask : r_["Has_BingoTask"].get<std::vector<int>>());
				p_->Has_ClaimBingo = (!(r_.find("Has_ClaimBingo") != r_.end()) ? p_->Has_ClaimBingo : r_["Has_ClaimBingo"].get<std::vector<std::string>>());
				p_->Has_BingoPrize = (!(r_.find("Has_BingoPrize") != r_.end()) ? p_->Has_BingoPrize : r_["Has_BingoPrize"].get<std::vector<std::tuple<std::string, int, int>>>());
				p_->Has_WinBingo = (!(r_.find("Has_WinBingo") != r_.end()) ? p_->Has_WinBingo : r_["Has_WinBingo"].get<bool>());
				p_->Present_Goblin = (!(r_.find("Present_Goblin") != r_.end()) ? p_->Present_Goblin : r_["Present_Goblin"].get<long long int>());
				p_->winter_seal = (!(r_.find("winter_seal") != r_.end()) ? p_->winter_seal : r_["winter_seal"].get<int>());
				p_->winter_seal_branch_1 = (!(r_.find("winter_seal_branch_1") != r_.end()) ? p_->winter_seal_branch_1 : r_["winter_seal_branch_1"].get<int>());
				p_->winter_seal_branch_2 = (!(r_.find("winter_seal_branch_2") != r_.end()) ? p_->winter_seal_branch_2 : r_["winter_seal_branch_2"].get<int>());
				p_->winter_seal_branch_3 = (!(r_.find("winter_seal_branch_3") != r_.end()) ? p_->winter_seal_branch_3 : r_["winter_seal_branch_3"].get<int>());
				p_->winter_seal_branch_4 = (!(r_.find("winter_seal_branch_4") != r_.end()) ? p_->winter_seal_branch_4 : r_["winter_seal_branch_4"].get<int>());
				p_->ability_upgrade_ances = (!(r_.find("ability_upgrade_ances") != r_.end()) ? p_->ability_upgrade_ances : r_["ability_upgrade_ances"].get<bool>());
				p_->wrench_foreground_custom = (!(r_.find("wrench_foreground_custom") != r_.end()) ? p_->wrench_foreground_custom : r_["wrench_foreground_custom"].get<int>());
				p_->wrench_custom = (!(r_.find("wrench_custom") != r_.end()) ? p_->wrench_custom : r_["wrench_custom"].get<int>());
				p_->bank_password = (!(r_.find("bank_password") != r_.end()) ? p_->bank_password : r_["bank_password"].get<int>());
				p_->wl_bank_amount = (!(r_.find("wl_bank_amount") != r_.end()) ? p_->wl_bank_amount : r_["wl_bank_amount"].get<int32_t>());
				p_->dl_bank_amount = (!(r_.find("dl_bank_amount") != r_.end()) ? p_->dl_bank_amount : r_["dl_bank_amount"].get<int32_t>());
				p_->pgl_bank_amount = (!(r_.find("pgl_bank_amount") != r_.end()) ? p_->pgl_bank_amount : r_["pgl_bank_amount"].get<int32_t>());
				p_->mgl_bank_amount = (!(r_.find("mgl_bank_amount") != r_.end()) ? p_->mgl_bank_amount : r_["mgl_bank_amount"].get<int32_t>());
				p_->igl_bank_amount = (!(r_.find("igl_bank_amount") != r_.end()) ? p_->igl_bank_amount : r_["igl_bank_amount"].get<int32_t>());
				p_->Bank_History = (!(r_.find("Bank_History") != r_.end()) ? p_->Bank_History : r_["Bank_History"].get<std::vector<std::string>>());
				p_->card_level = (!(r_.find("card_level") != r_.end()) ? p_->card_level : r_["card_level"].get<int>());
				p_->card_xp = (!(r_.find("card_xp") != r_.end()) ? p_->card_xp : r_["card_xp"].get<int>());
				p_->unlock_card_license = (!(r_.find("unlock_card_license") != r_.end()) ? p_->unlock_card_license : r_["unlock_card_license"].get<bool>());
				p_->Gems_Storage = (!(r_.find("Gems_Storage") != r_.end()) ? p_->Gems_Storage : r_["Gems_Storage"].get<long long int>());
				p_->Intertwined_Fate = (!(r_.find("Intertwined_Fate") != r_.end()) ? p_->Intertwined_Fate : r_["Intertwined_Fate"].get<int>());
				p_->Acquaint_Fate = (!(r_.find("Acquaint_Fate") != r_.end()) ? p_->Acquaint_Fate : r_["Acquaint_Fate"].get<int>());
				p_->Pity = (!(r_.find("Pity") != r_.end()) ? p_->Pity : r_["Pity"].get<int>());
				p_->Pity_On = (!(r_.find("Pity_On") != r_.end()) ? p_->Pity_On : r_["Pity_On"].get<bool>());
				p_->Gacha_History = (!(r_.find("Gacha_History") != r_.end()) ? p_->Gacha_History : r_["Gacha_History"].get<std::vector<std::string>>());
				p_->Has_Claim = (!(r_.find("Claim_Code") != r_.end()) ? p_->Has_Claim : r_["Claim_Code"].get<std::vector<std::string>>());
				p_->new_player = (!(r_.find("new_player") != r_.end()) ? p_->new_player : r_["new_player"].get<bool>());
				p_->daily_login = (!(r_.find("daily_login") != r_.end()) ? p_->daily_login : r_["daily_login"].get<std::vector<uint8_t>>());
				p_->claimed_daily_today = (!(r_.find("claimed_daily_today") != r_.end()) ? p_->claimed_daily_today : r_["claimed_daily_today"].get<bool>());
				p_->is_day = (!(r_.find("is_day") != r_.end()) ? p_->is_day : r_["is_day"].get<int>());
				p_->daily_login_day = (!(r_.find("daily_login_day") != r_.end()) ? p_->daily_login_day : r_["daily_login_day"].get<long long int>());
				p_->vip_daily = (!(r_.find("vip_daily") != r_.end()) ? p_->vip_daily : r_["vip_daily"].get<std::vector<uint8_t>>());
				p_->vip_claimed_daily = (!(r_.find("vip_claimed_daily") != r_.end()) ? p_->vip_claimed_daily : r_["claimed_daily_today"].get<bool>());
				p_->vip_day = (!(r_.find("vip_day") != r_.end()) ? p_->vip_day : r_["vip_day"].get<int>());
				p_->vip_daily_day = (!(r_.find("vip_daily_day") != r_.end()) ? p_->vip_daily_day : r_["vip_daily_day"].get<long long int>());
				p_->lvl_rewards = (!(r_.find("lvl_rewards") != r_.end()) ? p_->lvl_rewards : r_["lvl_rewards"].get<std::vector<uint8_t>>());
				p_->pet_netID = (!(r_.find("pet_netID") != r_.end()) ? p_->pet_netID : r_["pet_netID"].get<int>());
				p_->pet_ID = (!(r_.find("pet_ID") != r_.end()) ? p_->pet_ID : r_["pet_ID"].get<int>());
				p_->pet_level = (!(r_.find("pet_level") != r_.end()) ? p_->pet_level : r_["pet_level"].get<int>());
				p_->ability_xgems = (!(r_.find("ability_xgems") != r_.end()) ? p_->ability_xgems : r_["ability_xgems"].get<int>());
				p_->ability_xxp = (!(r_.find("ability_xxp") != r_.end()) ? p_->ability_xxp : r_["ability_xxp"].get<int>());
				p_->pet_type = (!(r_.find("pet_type") != r_.end()) ? p_->pet_type : r_["pet_type"].get<int>());
				p_->Pets_hunger = (!(r_.find("Pets_hunger") != r_.end()) ? p_->Pets_hunger : r_["Pets_hunger"].get<int>());
				p_->Pets_health = (!(r_.find("Pets_health") != r_.end()) ? p_->Pets_health : r_["Pets_health"].get<int>());
				p_->Pets_Death_Times = (!(r_.find("Pets_Death_Times") != r_.end()) ? p_->Pets_Death_Times : r_["Pets_Death_Times"].get<int>());
				p_->Pets_Builder_Lvl = (!(r_.find("Pets_Builder_Lvl") != r_.end()) ? p_->Pets_Builder_Lvl : r_["Pets_Builder_Lvl"].get<int>());
				p_->Pets_Farmer_Lvl = (!(r_.find("Pets_Farmer_Lvl") != r_.end()) ? p_->Pets_Farmer_Lvl : r_["Pets_Farmer_Lvl"].get<int>());
				p_->pet_ClothesUpdated = (!(r_.find("pet_ClothesUpdated") != r_.end()) ? p_->pet_ClothesUpdated : r_["pet_ClothesUpdated"].get<bool>());
				p_->show_pets = (!(r_.find("show_pets") != r_.end()) ? p_->show_pets : r_["show_pets"].get<bool>());
				p_->Pets_Dead = (!(r_.find("Pets_Dead") != r_.end()) ? p_->Pets_Dead : r_["Pets_Dead"].get<bool>());
				p_->LiyueHtouFly = (!(r_.find("LiyueHtouFly") != r_.end()) ? p_->LiyueHtouFly : r_["LiyueHtouFly"].get<bool>());
				p_->AbyssMageFly = (!(r_.find("AbyssMageFly") != r_.end()) ? p_->AbyssMageFly : r_["AbyssMageFly"].get<bool>());
				p_->UuuzzFly = (!(r_.find("UuuzzFly") != r_.end()) ? p_->UuuzzFly : r_["UuuzzFly"].get<bool>());
				p_->master_pet = (!(r_.find("master_pet") != r_.end()) ? p_->master_pet : r_["master_pet"].get<bool>());
				p_->pet_name = (!(r_.find("pet_name") != r_.end()) ? p_->pet_name : r_["pet_name"].get<std::string>());
				p_->active_bluename = (!(r_.find("active_bluename") != r_.end()) ? p_->active_bluename : r_["active_bluename"].get<bool>());
				p_->pet_xp = (!(r_.find("pet_xp") != r_.end()) ? p_->pet_xp : r_["pet_xp"].get<long long int>());
				p_->rolequest_reset_day = (!(r_.find("rolequest_reset_day") != r_.end()) ? p_->rolequest_reset_day : r_["rolequest_reset_day"].get<long long int>());
				p_->biweekly_reset_day = (!(r_.find("biweekly_reset_day") != r_.end()) ? p_->biweekly_reset_day : r_["biweekly_reset_day"].get<long long int>());
				p_->lifegoals_reset_day = (!(r_.find("lifegoals_reset_day") != r_.end()) ? p_->lifegoals_reset_day : r_["lifegoals_reset_day"].get<long long int>());
				p_->need_sumbit_req_id = (!(r_.find("need_sumbit_req_id") != r_.end()) ? p_->need_sumbit_req_id : r_["need_sumbit_req_id"].get<int>());
				p_->need_item_req_id = (!(r_.find("need_item_req_id") != r_.end()) ? p_->need_item_req_id : r_["need_item_req_id"].get<int>());
				p_->need_required = (!(r_.find("need_required") != r_.end()) ? p_->need_required : r_["need_required"].get<int>());
				p_->quest_required = (!(r_.find("quest_required") != r_.end()) ? p_->quest_required : r_["quest_required"].get<int>());
				p_->total_quest_selected = (!(r_.find("total_quest_selected") != r_.end()) ? p_->total_quest_selected : r_["total_quest_selected"].get<int>());
				p_->quest_number = (!(r_.find("quest_number") != r_.end()) ? p_->quest_number : r_["quest_number"].get<int>());
				p_->role_quest = (!(r_.find("role_quest") != r_.end()) ? p_->role_quest : r_["role_quest"].get<bool>());
				p_->complete_rolequest_day = (!(r_.find("complete_rolequest_day") != r_.end()) ? p_->complete_rolequest_day : r_["complete_rolequest_day"].get<bool>());
				p_->role_quest_type = (!(r_.find("role_quest_type") != r_.end()) ? p_->role_quest_type : r_["role_quest_type"].get<std::string>());
				p_->specialization_track = (!(r_.find("specialization_track") != r_.end()) ? p_->specialization_track : r_["specialization_track"].get<std::string>());
				p_->quest_text = (!(r_.find("quest_text") != r_.end()) ? p_->quest_text : r_["quest_text"].get<std::string>());
				p_->awesomeness = (!(r_.find("awesomeness") != r_.end()) ? p_->awesomeness : r_["awesomeness"].get<int>());
				p_->seed_goal = (!(r_.find("seed_goal") != r_.end()) ? p_->seed_goal : r_["seed_goal"].get<int>());
				p_->gem_goal = (!(r_.find("gem_goal") != r_.end()) ? p_->gem_goal : r_["gem_goal"].get<int>());
				p_->exp_goal = (!(r_.find("exp_goal") != r_.end()) ? p_->exp_goal : r_["exp_goal"].get<int>());
				p_->lifegoals1 = (!(r_.find("lifegoals1") != r_.end()) ? p_->lifegoals1 : r_["lifegoals1"].get<bool>());
				p_->lifegoals2 = (!(r_.find("lifegoals2") != r_.end()) ? p_->lifegoals2 : r_["lifegoals2"].get<bool>());
				p_->lifegoals3 = (!(r_.find("lifegoals3") != r_.end()) ? p_->lifegoals3 : r_["lifegoals3"].get<bool>());
				p_->lifegoals_1 = (!(r_.find("lifegoals_1") != r_.end()) ? p_->lifegoals_1 : r_["lifegoals_1"].get<bool>());
				p_->lifegoals_2 = (!(r_.find("lifegoals_2") != r_.end()) ? p_->lifegoals_2 : r_["lifegoals_2"].get<bool>());
				p_->lifegoals_3 = (!(r_.find("lifegoals_3") != r_.end()) ? p_->lifegoals_3 : r_["lifegoals_3"].get<bool>());
				p_->claim_myth_1 = (!(r_.find("claim_myth_1") != r_.end()) ? p_->claim_myth_1 : r_["claim_myth_1"].get<bool>());
				p_->claim_myth_2 = (!(r_.find("claim_myth_2") != r_.end()) ? p_->claim_myth_2 : r_["claim_myth_2"].get<bool>());
				p_->claim_myth_3 = (!(r_.find("claim_myth_3") != r_.end()) ? p_->claim_myth_3 : r_["claim_myth_3"].get<bool>());
				p_->claim_myth_4 = (!(r_.find("claim_myth_4") != r_.end()) ? p_->claim_myth_4 : r_["claim_myth_4"].get<bool>());
				p_->claim_myth_5 = (!(r_.find("claim_myth_5") != r_.end()) ? p_->claim_myth_5 : r_["claim_myth_5"].get<bool>());
				p_->claim_myth_6 = (!(r_.find("claim_myth_6") != r_.end()) ? p_->claim_myth_6 : r_["claim_myth_6"].get<bool>());
				p_->claim_seven_seas_1 = (!(r_.find("claim_seven_seas_1") != r_.end()) ? p_->claim_seven_seas_1 : r_["claim_seven_seas_1"].get<bool>());
				p_->claim_seven_seas_2 = (!(r_.find("claim_seven_seas_2") != r_.end()) ? p_->claim_seven_seas_2 : r_["claim_seven_seas_2"].get<bool>());
				p_->claim_seven_seas_3 = (!(r_.find("claim_seven_seas_3") != r_.end()) ? p_->claim_seven_seas_3 : r_["claim_seven_seas_3"].get<bool>());
				p_->claim_seven_seas_4 = (!(r_.find("claim_seven_seas_4") != r_.end()) ? p_->claim_seven_seas_4 : r_["claim_seven_seas_4"].get<bool>());
				p_->claim_seven_seas_5 = (!(r_.find("claim_seven_seas_5") != r_.end()) ? p_->claim_seven_seas_5 : r_["claim_seven_seas_5"].get<bool>());
				p_->claim_seven_seas_6 = (!(r_.find("claim_seven_seas_6") != r_.end()) ? p_->claim_seven_seas_6 : r_["claim_seven_seas_6"].get<bool>());
				p_->Bronze_Donatur = (!(r_.find("Bronze_Donatur") != r_.end()) ? p_->Bronze_Donatur : r_["Bronze_Donatur"].get<bool>());
				p_->Silver_Donatur = (!(r_.find("Silver_Donatur") != r_.end()) ? p_->Silver_Donatur : r_["Silver_Donatur"].get<bool>());
				p_->Gold_Donatur = (!(r_.find("Gold_Donatur") != r_.end()) ? p_->Gold_Donatur : r_["Gold_Donatur"].get<bool>());
				p_->Diamond_Donatur = (!(r_.find("Diamond_Donatur") != r_.end()) ? p_->Diamond_Donatur : r_["Diamond_Donatur"].get<bool>());
				p_->WinterTask_Prize = (!(r_.find("WinterTask_Prize") != r_.end()) ? p_->WinterTask_Prize : r_["WinterTask_Prize"].get<std::vector<std::string>>());
				p_->Winter_Branch_Rewards = (!(r_.find("Winter_Branch_Rewards") != r_.end()) ? p_->Winter_Branch_Rewards : r_["Winter_Branch_Rewards"].get<std::vector<std::string>>());
				p_->Winter_Daily_Time = (!(r_.find("Winter_Daily_Time") != r_.end()) ? p_->Winter_Daily_Time : r_["Winter_Daily_Time"].get<long long int>());
				p_->winterfest_wishes = (!(r_.find("winterfest_wishes") != r_.end()) ? p_->winterfest_wishes : r_["winterfest_wishes"].get<int>());
				p_->winterfest_quest_1 = (!(r_.find("winterfest_quest_1") != r_.end()) ? p_->winterfest_quest_1 : r_["winterfest_quest_1"].get<int>());
				p_->winterfest_quest_2 = (!(r_.find("winterfest_quest_2") != r_.end()) ? p_->winterfest_quest_2 : r_["winterfest_quest_2"].get<int>());
				p_->winterfest_quest_3 = (!(r_.find("winterfest_quest_3") != r_.end()) ? p_->winterfest_quest_3 : r_["winterfest_quest_3"].get<int>());
				p_->reset_winterfest_quest_1 = (!(r_.find("reset_winterfest_quest_1") != r_.end()) ? p_->reset_winterfest_quest_1 : r_["reset_winterfest_quest_1"].get<int>());
				p_->reset_winterfest_quest_2 = (!(r_.find("reset_winterfest_quest_2") != r_.end()) ? p_->reset_winterfest_quest_2 : r_["reset_winterfest_quest_2"].get<int>());
				p_->reset_winterfest_quest_3 = (!(r_.find("reset_winterfest_quest_3") != r_.end()) ? p_->reset_winterfest_quest_3 : r_["reset_winterfest_quest_3"].get<int>());
				p_->reset_winterfest_quest_4 = (!(r_.find("reset_winterfest_quest_4") != r_.end()) ? p_->reset_winterfest_quest_4 : r_["reset_winterfest_quest_4"].get<int>());
				p_->reset_winterfest_quest_5 = (!(r_.find("reset_winterfest_quest_5") != r_.end()) ? p_->reset_winterfest_quest_5 : r_["reset_winterfest_quest_5"].get<int>());
				p_->reset_winterfest_quest_6 = (!(r_.find("reset_winterfest_quest_6") != r_.end()) ? p_->reset_winterfest_quest_6 : r_["reset_winterfest_quest_6"].get<int>());
				p_->reset_winterfest_quest_7 = (!(r_.find("reset_winterfest_quest_7") != r_.end()) ? p_->reset_winterfest_quest_7 : r_["reset_winterfest_quest_7"].get<int>());
				p_->reset_winterfest_quest_8 = (!(r_.find("reset_winterfest_quest_8") != r_.end()) ? p_->reset_winterfest_quest_8 : r_["reset_winterfest_quest_8"].get<int>());
				p_->reset_winterfest_quest_9 = (!(r_.find("reset_winterfest_quest_9") != r_.end()) ? p_->reset_winterfest_quest_9 : r_["reset_winterfest_quest_9"].get<int>());
				p_->battle_pet = (!(r_.find("btp") != r_.end()) ? p_->battle_pet : r_["btp"].get<std::pair<vector<uint16_t>, vector<uint16_t>>>());
				p_->Used_VipDoor = (!(r_.find("Used_VipDoor") != r_.end()) ? p_->Used_VipDoor : r_["Used_VipDoor"].get<std::vector<std::pair<std::string, long long int>>>());
				p_->staged = (!(r_.find("staged") != r_.end()) ? p_->staged : r_["staged"].get<int>());
				p_->s4tb = (!(r_.find("s4tb") != r_.end()) ? p_->s4tb : r_["s4tb"].get<int>());
				p_->winter_power = (!(r_.find("winter_power") != r_.end()) ? p_->winter_power : r_["winter_power"].get<bool>());
				p_->Already_Tried_Gob = (!(r_.find("Already_Tried_Gob") != r_.end()) ? p_->Already_Tried_Gob : r_["Already_Tried_Gob"].get<bool>());
				p_->DrDes = (!(r_.find("DrDes") != r_.end()) ? p_->DrDes : r_["DrDes"].get<bool>());
				p_->Health_DrDes = (!(r_.find("Health_DrDes") != r_.end()) ? p_->Health_DrDes : r_["Health_DrDes"].get<int>());
				p_->St_Regen_Time = (!(r_.find("St_Regen_Time") != r_.end()) ? p_->St_Regen_Time : r_["St_Regen_Time"].get<long long int>());
				p_->Masterless_Starglitter = (!(r_.find("Masterless_Starglitter") != r_.end()) ? p_->Masterless_Starglitter : r_["Masterless_Starglitter"].get<int>());
				p_->sew1 = (!(r_.find("sew1") != r_.end()) ? "" : r_["sew1"].get<std::string>());
				p_->sew2 = (!(r_.find("sew2") != r_.end()) ? "" : r_["sew2"].get<std::string>());
				p_->sew3 = (!(r_.find("sew3") != r_.end()) ? "" : r_["sew3"].get<std::string>());
				p_->sewtype = (!(r_.find("sewtype") != r_.end()) ? "" : r_["sewtype"].get<std::string>());
				p_->totalsew = (!(r_.find("totalsew") != r_.end()) ? p_->totalsew : r_["totalsew"].get<int>());
				p_->sewunlocked = (!(r_.find("sewunlocked") != r_.end()) ? p_->sewunlocked : r_["sewunlocked"].get<int>());
				p_->startedKit = (!(r_.find("Kit") != r_.end()) ? p_->startedKit : r_["Kit"].get<bool>());
				p_->lvlKit = (!(r_.find("kit_level") != r_.end()) ? p_->lvlKit : r_["kit_level"].get<int>());
				p_->xpKit = (!(r_.find("kit_xp") != r_.end()) ? p_->xpKit : r_["kit_xp"].get<int>());
				p_->lvlKit_S2 = (!(r_.find("lvlKit_S2") != r_.end()) ? p_->lvlKit_S2 : r_["lvlKit_S2"].get<int>());
				p_->xpKit_S2 = (!(r_.find("xpKit_S2") != r_.end()) ? p_->xpKit_S2 : r_["xpKit_S2"].get<int>());
				p_->KitPass_Prize = (!(r_.find("KitPass_Prize") != r_.end()) ? p_->KitPass_Prize : r_["KitPass_Prize"].get<std::vector<std::string>>());
				p_->Banner_Item = (!(r_.find("ba_i") != r_.end()) ? p_->Banner_Item : r_["ba_i"].get<int>());
				p_->Banner_Flag = (!(r_.find("ba_f") != r_.end()) ? p_->Banner_Flag : r_["ba_f"].get<int>());
				p_->Aura_Season = (!(r_.find("a_s") != r_.end()) ? p_->Aura_Season : r_["a_s"].get<int>());
				p_->Trail_Season = (!(r_.find("t_s") != r_.end()) ? p_->Trail_Season : r_["t_s"].get<int>());
				p_->Crown_Time_Change = (!(r_.find("c_t_c") != r_.end()) ? p_->Crown_Time_Change : r_["c_t_c"].get<bool>());
				p_->Crown_Cycle_Time = (!(r_.find("c_c_t") != r_.end()) ? p_->Crown_Cycle_Time : r_["c_c_t"].get<int>());
				p_->Base_R_0 = (!(r_.find("br0") != r_.end()) ? p_->Base_R_0 : r_["br0"].get<int>());
				p_->Base_G_0 = (!(r_.find("bg0") != r_.end()) ? p_->Base_G_0 : r_["bg0"].get<int>());
				p_->Base_B_0 = (!(r_.find("bb0") != r_.end()) ? p_->Base_B_0 : r_["bb0"].get<int>());
				p_->Gem_R_0 = (!(r_.find("gr0") != r_.end()) ? p_->Gem_R_0 : r_["gr0"].get<int>());
				p_->Gem_G_0 = (!(r_.find("gg0") != r_.end()) ? p_->Gem_G_0 : r_["gg0"].get<int>());
				p_->Gem_B_0 = (!(r_.find("gb0") != r_.end()) ? p_->Gem_B_0 : r_["gb0"].get<int>());
				p_->Crystal_R_0 = (!(r_.find("cr0") != r_.end()) ? p_->Crystal_R_0 : r_["cr0"].get<int>());
				p_->Crystal_G_0 = (!(r_.find("cg0") != r_.end()) ? p_->Crystal_G_0 : r_["cg0"].get<int>());
				p_->Crystal_B_0 = (!(r_.find("cb0") != r_.end()) ? p_->Crystal_B_0 : r_["cb0"].get<int>());
				p_->Crown_Floating_Effect_0 = (!(r_.find("cfe0") != r_.end()) ? p_->Crown_Floating_Effect_0 : r_["cfe0"].get<bool>());
				p_->Crown_Laser_Beam_0 = (!(r_.find("clb0") != r_.end()) ? p_->Crown_Laser_Beam_0 : r_["clb0"].get<bool>());
				p_->Crown_Crystals_0 = (!(r_.find("crc0") != r_.end()) ? p_->Crown_Crystals_0 : r_["crc0"].get<bool>());
				p_->Crown_Rays_0 = (!(r_.find("c0rr") != r_.end()) ? p_->Crown_Rays_0 : r_["c0rr"].get<bool>());
				p_->Base_R_1 = (!(r_.find("Base_R_1") != r_.end()) ? p_->Base_R_1 : r_["Base_R_1"].get<int>());
				p_->Base_G_1 = (!(r_.find("Base_G_1") != r_.end()) ? p_->Base_G_1 : r_["Base_G_1"].get<int>());
				p_->Base_B_1 = (!(r_.find("Base_B_1") != r_.end()) ? p_->Base_B_1 : r_["Base_B_1"].get<int>());
				p_->Gem_R_1 = (!(r_.find("Gem_R_1") != r_.end()) ? p_->Gem_R_1 : r_["Gem_R_1"].get<int>());
				p_->Gem_G_1 = (!(r_.find("Gem_G_1") != r_.end()) ? p_->Gem_G_1 : r_["Gem_G_1"].get<int>());
				p_->Gem_B_1 = (!(r_.find("Gem_B_1") != r_.end()) ? p_->Gem_B_1 : r_["Gem_B_1"].get<int>());
				p_->Crystal_R_1 = (!(r_.find("Crystal_R_1") != r_.end()) ? p_->Crystal_R_1 : r_["Crystal_R_1"].get<int>());
				p_->Crystal_G_1 = (!(r_.find("Crystal_G_1") != r_.end()) ? p_->Crystal_G_1 : r_["Crystal_G_1"].get<int>());
				p_->Crystal_B_1 = (!(r_.find("Crystal_B_1") != r_.end()) ? p_->Crystal_B_1 : r_["Crystal_B_1"].get<int>());
				p_->Crown_Floating_Effect_1 = (!(r_.find("Crown_Floating_Effect_1") != r_.end()) ? p_->Crown_Floating_Effect_1 : r_["Crown_Floating_Effect_1"].get<bool>());
				p_->Crown_Laser_Beam_1 = (!(r_.find("Crown_Laser_Beam_1") != r_.end()) ? p_->Crown_Laser_Beam_1 : r_["Crown_Laser_Beam_1"].get<bool>());
				p_->Crown_Crystals_1 = (!(r_.find("Crown_Crystals_1") != r_.end()) ? p_->Crown_Crystals_1 : r_["Crown_Crystals_1"].get<bool>());
				p_->Crown_Rays_1 = (!(r_.find("Crown_Rays_1") != r_.end()) ? p_->Crown_Rays_1 : r_["Crown_Rays_1"].get<bool>());
				p_->Crown_Value = (!(r_.find("Crown_Value") != r_.end()) ? p_->Crown_Value : r_["Crown_Value"].get<int>());
				p_->Crown_Value_0_0 = (!(r_.find("Crown_Value_0_0") != r_.end()) ? p_->Crown_Value_0_0 : r_["Crown_Value_0_0"].get<long long int>());
				p_->Crown_Value_0_1 = (!(r_.find("Crown_Value_0_1") != r_.end()) ? p_->Crown_Value_0_1 : r_["Crown_Value_0_1"].get<long long int>());
				p_->Crown_Value_0_2 = (!(r_.find("Crown_Value_0_2") != r_.end()) ? p_->Crown_Value_0_2 : r_["Crown_Value_0_2"].get<long long int>());
				p_->Crown_Value_1_0 = (!(r_.find("Crown_Value_1_0") != r_.end()) ? p_->Crown_Value_1_0 : r_["Crown_Value_1_0"].get<long long int>());
				p_->Crown_Value_1_1 = (!(r_.find("Crown_Value_1_1") != r_.end()) ? p_->Crown_Value_1_1 : r_["Crown_Value_1_1"].get<long long int>());
				p_->Crown_Value_1_2 = (!(r_.find("Crown_Value_1_2") != r_.end()) ? p_->Crown_Value_1_2 : r_["Crown_Value_1_2"].get<long long int>());
				p_->Magnet_Item = (!(r_.find("mg") != r_.end()) ? p_->Magnet_Item : r_["mg"].get<int>());
				p_->carnival_credit = (!(r_.find("ca_c") != r_.end()) ? p_->carnival_credit : r_["ca_c"].get<int>());
				p_->C_QuestActive = (!(r_.find("CQuest") != r_.end()) ? p_->C_QuestActive : r_["CQuest"].get<bool>());
				p_->C_DeliverID = (!(r_.find("CQItem") != r_.end()) ? p_->C_DeliverID : r_["CQItem"].get<int>());
				p_->C_QuestProgress = (!(r_.find("CQProg") != r_.end()) ? p_->C_QuestProgress : r_["CQProg"].get<int>());
				p_->C_QuestKind = (!(r_.find("CQKind") != r_.end()) ? p_->C_QuestKind : r_["CQKind"].get<int>());
				p_->C_ProgressNeeded = (!(r_.find("CQNeed") != r_.end()) ? p_->C_ProgressNeeded : r_["CQNeed"].get<int>());
				p_->C_QuestStep = (!(r_.find("CQStep") != r_.end()) ? p_->C_QuestStep : r_["CQStep"].get<int>());
				p_->TitleTexture = (!(r_.find("TitleTexture") != r_.end()) ? p_->TitleTexture : r_["TitleTexture"].get<std::string>());
				p_->TitleCoordinate = (!(r_.find("TitleCoordinate") != r_.end()) ? p_->TitleCoordinate : r_["TitleCoordinate"].get<std::string>());
				p_->redeem_code = (!(r_.find("redeem_code") != r_.end()) ? p_->redeem_code : r_["redeem_code"].get<std::vector<RedeemCode_>>());
				p_->EarnFreeGems.Time = (!(r_.find("EarnFreeGems.Time") != r_.end()) ? p_->EarnFreeGems.Time : r_["EarnFreeGems.Time"].get<long long int>());
				p_->EarnFreeGems.Quest_1 = (!(r_.find("EarnFreeGems.Quest_1") != r_.end()) ? p_->EarnFreeGems.Quest_1 : r_["EarnFreeGems.Quest_1"].get<int>());
				p_->EarnFreeGems.Quest_2 = (!(r_.find("EarnFreeGems.Quest_2") != r_.end()) ? p_->EarnFreeGems.Quest_2 : r_["EarnFreeGems.Quest_2"].get<int>());
				p_->EarnFreeGems.Quest_3 = (!(r_.find("EarnFreeGems.Quest_3") != r_.end()) ? p_->EarnFreeGems.Quest_3 : r_["EarnFreeGems.Quest_3"].get<int>());
				p_->EarnFreeGems.Claim = (!(r_.find("EarnFreeGems.Claim") != r_.end()) ? p_->EarnFreeGems.Claim : r_["EarnFreeGems.Claim"].get<std::vector<int>>());
				p_->participated = (!(r_.find("participated") != r_.end()) ? p_->participated : r_["participated"].get<int>());
				p_->black_color = (!(r_.find("bc") != r_.end()) ? p_->black_color : r_["bc"].get<bool>());
				p_->last_rated = (!(r_.find("lr") != r_.end()) ? p_->last_rated : r_["lr"].get<std::vector<std::string>>());
				p_->skin_c = (!(r_.find("sc") != r_.end()) ? p_->skin_c : r_["sc"].get<std::string>());
				p_->autofarm_slot = (!(r_.find("as") != r_.end()) ? p_->autofarm_slot : r_["as"].get<int>());
				p_->is_legend = (!(r_.find("is_legend") != r_.end()) ? p_->is_legend : r_["is_legend"].get<bool>());
				p_->lwiz_quest = (!(r_.find("lw_1") != r_.end()) ? p_->lwiz_quest : r_["lw_1"].get<int>());
				p_->lwiz_step = (!(r_.find("lw_2") != r_.end()) ? p_->lwiz_step : r_["lw_2"].get<int>());
				p_->lwiz_notification = (!(r_.find("lw_3") != r_.end()) ? p_->lwiz_notification : r_["lw_3"].get<int>());
				p_->legendary_quest = (!(r_.find("lw_4") != r_.end()) ? p_->legendary_quest : r_["lw_4"].get<std::vector<std::vector<int>>>());
				p_->ignored = (!(r_.find("ig") != r_.end()) ? p_->ignored : r_["ig"].get<std::vector<std::string>>());
				p_->playtime_items = (!(r_.find("playtime_items") != r_.end()) ? p_->playtime_items : r_["playtime_items"].get<std::vector<int>>());
				p_->tgiv = (!(r_.find("tgiv") != r_.end()) ? p_->tgiv : r_["tgiv"].get<uint8_t>());
				p_->party_animal = (!(r_.find("party_animal") != r_.end()) ? p_->party_animal : r_["party_animal"].get<uint8_t>());
				p_->gp_gold = (!(r_.find("gp_gold") != r_.end()) ? p_->gp_gold : r_["gp_gold"].get<uint8_t >());
				p_->gp_silver = (!(r_.find("gp_silver") != r_.end()) ? p_->gp_silver : r_["gp_silver"].get<uint8_t >());
				p_->gp_bronze = (!(r_.find("gp_bronze") != r_.end()) ? p_->gp_bronze : r_["gp_bronze"].get<uint8_t >());
				p_->aw_winning = (!(r_.find("aw_winning") != r_.end()) ? p_->aw_winning : r_["aw_winning"].get<uint8_t >());
				p_->anni_old = (!(r_.find("anni_old") != r_.end()) ? p_->anni_old : r_["anni_old"].get<uint8_t >());
				p_->santa = (!(r_.find("santa") != r_.end()) ? p_->santa : r_["santa"].get<uint8_t >());
				p_->drtitle = (!(r_.find("drtt") != r_.end()) ? p_->drtitle : r_["drtt"].get<uint8_t>());
				p_->drlegend = (!(r_.find("drll") != r_.end()) ? p_->drlegend : r_["drll"].get<uint8_t>());
				p_->su_8552_1 = (!(r_.find("su1") != r_.end()) ? p_->su_8552_1 : r_["su1"].get<uint16_t>());
				p_->su_8552_2 = (!(r_.find("su2") != r_.end()) ? p_->su_8552_2 : r_["su2"].get<uint16_t>());
				p_->su_8552_3 = (!(r_.find("su3") != r_.end()) ? p_->su_8552_3 : r_["su3"].get<uint16_t>());
				p_->mercy = (!(r_.find("mer") != r_.end()) ? p_->mercy : r_["mer"].get<uint8_t>());
				p_->drt = (!(r_.find("_drt") != r_.end()) ? p_->drt : r_["_drt"].get<uint8_t>());
				p_->growtoken_worlds = (!(r_.find("gr_w") != r_.end()) ? p_->growtoken_worlds : r_["gr_w"].get<std::vector<std::string>>());
				p_->cheater_settings = (!(r_.find("c_s") != r_.end()) ? p_->cheater_settings : r_["c_s"].get<int>());
				p_->voucher = (!(r_.find("vou") != r_.end()) ? p_->voucher : r_["vou"].get<int>());
				p_->cape_t = (!(r_.find("ri_1") != r_.end()) ? p_->cape_t : r_["ri_1"].get<int>());
				p_->cape_c = (!(r_.find("ri_2") != r_.end()) ? p_->cape_c : r_["ri_2"].get<int>());
				p_->cape_t2 = (!(r_.find("ri_3") != r_.end()) ? p_->cape_t2 : r_["ri_3"].get<int>());
				p_->cape_c2 = (!(r_.find("ri_4") != r_.end()) ? p_->cape_c2 : r_["ri_4"].get<int>());
				p_->flags = (!(r_.find("ri_5") != r_.end()) ? p_->flags : r_["ri_5"].get<int>());
				p_->TimeDilation = (!(r_.find("ri_6") != r_.end()) ? p_->TimeDilation : r_["ri_6"].get<int>());
				p_->CapeStyleColor_1 = (!(r_.find("ri_7") != r_.end()) ? p_->CapeStyleColor_1 : r_["ri_7"].get<std::string>());
				p_->CapeStyleColor_2 = (!(r_.find("ri_8") != r_.end()) ? p_->CapeStyleColor_2 : r_["ri_8"].get<std::string>());
				p_->CapeCollarColor_1 = (!(r_.find("ri_9") != r_.end()) ? p_->CapeCollarColor_1 : r_["ri_9"].get<std::string>());
				p_->CapeCollarColor_2 = (!(r_.find("ri_10") != r_.end()) ? p_->CapeCollarColor_2 : r_["ri_10"].get<std::string>());
				p_->wings_t = (!(r_.find("rw_1") != r_.end()) ? p_->wings_t : r_["rw_1"].get<int>());
				p_->wings_c = (!(r_.find("rw_2") != r_.end()) ? p_->wings_c : r_["rw_2"].get<int>());
				p_->wings_t2 = (!(r_.find("rw_3") != r_.end()) ? p_->wings_t2 : r_["rw_3"].get<int>());
				p_->wings_c2 = (!(r_.find("rw_4") != r_.end()) ? p_->wings_c2 : r_["rw_4"].get<int>());
				p_->_flags = (!(r_.find("rw_5") != r_.end()) ? p_->_flags : r_["rw_5"].get<int>());
				p_->_TimeDilation = (!(r_.find("rw_6") != r_.end()) ? p_->_TimeDilation : r_["rw_6"].get<int>());
				p_->_CapeStyleColor_1 = (!(r_.find("rw_7") != r_.end()) ? p_->_CapeStyleColor_1 : r_["rw_7"].get<std::string>());
				p_->_CapeStyleColor_2 = (!(r_.find("rw_8") != r_.end()) ? p_->_CapeStyleColor_2 : r_["rw_8"].get<std::string>());
				p_->_CapeCollarColor_1 = (!(r_.find("rw_9") != r_.end()) ? p_->_CapeCollarColor_1 : r_["rw_9"].get<std::string>());
				p_->_CapeCollarColor_2 = (!(r_.find("rw_10") != r_.end()) ? p_->_CapeCollarColor_2 : r_["rw_10"].get<std::string>());
				p_->balloon_faction = (!(r_.find("bb_1") != r_.end()) ? p_->balloon_faction : r_["bb_1"].get<int>());
				p_->balloon_hit = (!(r_.find("bb_2") != r_.end()) ? p_->balloon_hit : r_["bb_2"].get<int>());
				p_->hit_by = (!(r_.find("bb_3") != r_.end()) ? p_->hit_by : r_["bb_3"].get<int>());
				p_->balloon_donated = (!(r_.find("bb_4") != r_.end()) ? p_->balloon_donated : r_["bb_4"].get<int>());
				p_->balloon_score = (!(r_.find("bb_5") != r_.end()) ? p_->balloon_score : r_["bb_5"].get<int>());
				p_->bans = (!(r_.find("7bans") != r_.end()) ? p_->bans : r_["7bans"].get<std::vector<std::string>>());
				p_->minokawa_wings = (!(r_.find("12640") != r_.end()) ? p_->minokawa_wings : r_["12640"].get<uint8_t>());
				p_->panda_spirit = (!(r_.find("12872") != r_.end()) ? p_->panda_spirit : r_["12872"].get<uint8_t>());
				p_->mask_dragon = (!(r_.find("11506") != r_.end()) ? p_->mask_dragon : r_["11506"].get<uint8_t>());
				p_->growformer = (!(r_.find("7384") != r_.end()) ? p_->growformer : r_["7384"].get<uint8_t>());
				p_->eq_aura = (!(r_.find("12634") != r_.end()) ? p_->eq_aura : r_["12634"].get<uint16_t>());
				p_->fa_ip = (!(r_.find("fa_ip") != r_.end()) ? p_->fa_ip : r_["fa_ip"].get<std::string>());
				p_->fa2 = (!(r_.find("2fa") != r_.end()) ? p_->fa2 : r_["2fa"].get<int>());
				p_->growmoji = (!(r_.find("grm") != r_.end()) ? p_->growmoji : r_["grm"].get<std::string>());
				p_->mini_you = (!(r_.find("myou") != r_.end()) ? p_->mini_you : r_["myou"].get<bool>());
				p_->display_age = (!(r_.find("p_1") != r_.end()) ? p_->display_age : r_["p_1"].get<bool>());
				p_->display_home = (!(r_.find("p_2") != r_.end()) ? p_->display_home : r_["p_2"].get<bool>());
				p_->mentor = (!(r_.find("mentor") != r_.end()) ? p_->mentor : r_["mentor"].get<bool>());
				p_->ttBadge = (!(r_.find("ttBadge") != r_.end()) ? p_->ttBadge : r_["ttBadge"].get<bool>());
				p_->ccBadge = (!(r_.find("ccBadge") != r_.end()) ? p_->ccBadge : r_["ccBadge"].get<bool>());
				p_->fires = (!(r_.find("fire") != r_.end()) ? p_->fires : r_["fire"].get<int>());
				p_->hair_color = (!(r_.find("e_1") != r_.end()) ? p_->hair_color : r_["e_1"].get<uint32_t>());
				p_->eye_drop = (!(r_.find("e_2") != r_.end()) ? p_->eye_drop : r_["e_2"].get<uint32_t>());
				p_->eye_lenses = (!(r_.find("e_3") != r_.end()) ? p_->eye_lenses : r_["e_3"].get<uint32_t>());
				p_->pearl = (!(r_.find("bea_1") != r_.end()) ? p_->pearl : r_["bea_1"].get<int>());
				p_->sprite = (!(r_.find("spr") != r_.end()) ? p_->sprite : r_["spr"].get<uint8_t>());
				p_->wild = (!(r_.find("spr2") != r_.end()) ? p_->wild : r_["spr2"].get<uint8_t>());
				p_->golem = (!(r_.find("spr3") != r_.end()) ? p_->golem : r_["spr3"].get<uint8_t>());
				p_->email = (!(r_.find("email") != r_.end()) ? p_->email : r_["email"].get<std::string>());
				p_->b_r = (!(r_.find("b_r") != r_.end()) ? p_->b_r : r_["b_r"].get<std::string>());
				p_->b_b = (!(r_.find("b_b") != r_.end()) ? p_->b_b : r_["b_b"].get<std::string>());
				p_->b_s = (!(r_.find("b_s") != r_.end()) ? p_->b_s : r_["b_s"].get<long long int>());
				p_->b_t = (!(r_.find("b_t") != r_.end()) ? p_->b_t : r_["b_t"].get<long long int>());
				p_->m_b = (!(r_.find("m_b") != r_.end()) ? p_->m_b : r_["m_b"].get<std::string>());
				p_->punch_count = (!(r_.find("punch") != r_.end()) ? p_->punch_count : r_["punch"].get<long long int>());
				p_->n = (!(r_.find("n") != r_.end()) ? p_->n : r_["n"].get<uint8_t>());
				p_->ghost = (!(r_.find("ghost") != r_.end()) ? p_->ghost : r_["ghost"].get<bool>());
				p_->invis = (!(r_.find("invis") != r_.end()) ? p_->invis : r_["invis"].get<bool>());
				p_->m_h = (!(r_.find("m_h") != r_.end()) ? p_->m_h : r_["m_h"].get<uint8_t>());
				p_->gems = (!(r_.find("gems") != r_.end()) ? p_->gems : r_["gems"].get<int>());
				p_->xp = (!(r_.find("xp") != r_.end()) ? p_->xp : r_["xp"].get<long long int>());
				p_->level = (!(r_.find("level") != r_.end()) ? p_->level : r_["level"].get<int>());
				p_->skin = (!(r_.find("skin") != r_.end()) ? p_->skin : r_["skin"].get<int>());
				p_->show_location_ = (!(r_.find("show_location") != r_.end()) ? p_->show_location_ : r_["show_location"].get<bool>());
				p_->show_friend_notifications_ = (!(r_.find("show_notifications") != r_.end()) ? p_->show_friend_notifications_ : r_["show_notifications"].get<bool>());
				p_->playtime = time(NULL);
				p_->seconds = (!(r_.find("playtime") != r_.end()) ? p_->seconds : r_["playtime"].get<long long int>());
				p_->account_created = (!(r_.find("date") != r_.end()) ? p_->account_created : r_["date"].get<long long int>());
				p_->home_world = (!(r_.find("home_world") != r_.end()) ? p_->home_world : r_["home_world"].get<std::string>());
				p_->hair = (!(r_.find("hair") != r_.end()) ? p_->hair : r_["hair"].get<uint16_t>());
				p_->shirt = (!(r_.find("shirt") != r_.end()) ? p_->shirt : r_["shirt"].get<uint16_t>());
				p_->pants = (!(r_.find("pants") != r_.end()) ? p_->pants : r_["pants"].get<uint16_t>());
				p_->feet = (!(r_.find("feet") != r_.end()) ? p_->feet : r_["feet"].get<uint16_t>());
				p_->face = (!(r_.find("face") != r_.end()) ? p_->face : r_["face"].get<uint16_t>());
				p_->hand = (!(r_.find("hand") != r_.end()) ? p_->hand : r_["hand"].get<uint16_t>());
				p_->back = (!(r_.find("back") != r_.end()) ? p_->back : r_["back"].get<uint16_t>());
				p_->mask = (!(r_.find("mask") != r_.end()) ? p_->mask : r_["mask"].get<uint16_t>());
				p_->necklace = (!(r_.find("necklace") != r_.end()) ? p_->necklace : r_["necklace"].get<uint16_t>());
				p_->ances = (!(r_.find("ances") != r_.end()) ? p_->ances : r_["ances"].get<uint16_t>());
				p_->guild_id = (!(r_.find("guild_id") != r_.end()) ? p_->guild_id : r_["guild_id"].get<int>());
				p_->Fav_Items = (!(r_.find("favitem") != r_.end()) ? p_->Fav_Items : r_["favitem"].get<std::vector<int>>());
				p_->transmute = (!(r_.find("trans") != r_.end()) ? p_->transmute : r_["trans"].get<std::vector<std::pair<int, int>>>());
				p_->geiger_ = (!(r_.find("geiger") != r_.end()) ? p_->geiger_ : r_["geiger"].get<uint8_t>());
				p_->booty_broken = (!(r_.find("booty_broken") != r_.end()) ? p_->booty_broken : r_["booty_broken"].get<int>());
				p_->playmods = (!(r_.find("playmods") != r_.end()) ? p_->playmods : r_["playmods"].get<std::vector<PlayMods>>());
				if (p_->account_created == 0) p_->account_created = time(NULL) / 86400;
				if (p_->flags == 0) p_->flags = 19451;
				for (int i = 0; i < p_->transmute.size(); i++) {
					if (p_->transmute[i].second == 10684 || p_->transmute[i].first == 10684) {
						p_->transmute.erase(p_->transmute.begin() + i);
					}
				}
				if (Playmods::HasById(p_, 125)) p_->Role.Moderator = true;
				if (Playmods::HasById(p_, 126)) p_->Role.Vip = true;
				if (Playmods::HasById(p_, 143)) p_->Role.Cheats = true;
				r_.clear();
			}
			catch (exception) {
				return -2;
			}
			if (find(Environment()->BlackList.begin(), Environment()->BlackList.end(), pInfo(peer)->tankIDName) != Environment()->BlackList.end()) {
				return -5;
			}
			if (Environment()->Maintenance and not Role::Clist(pInfo(peer)->tankIDName)) {
				return -6;
			}
			pInfo(peer)->Role.Role_Level = Role::GetLevel(peer);
			if (pInfo(peer)->t_lvl >= 10) pInfo(peer)->RolesTitle.Farmer = true;
			if (pInfo(peer)->bb_lvl >= 10) pInfo(peer)->RolesTitle.Builder = true;
			if (pInfo(peer)->s_lvl >= 10) pInfo(peer)->RolesTitle.Surgeon = true;
			if (pInfo(peer)->ff_lvl >= 10) pInfo(peer)->RolesTitle.Fisher = true;
			if (pInfo(peer)->p_lvl >= 10) pInfo(peer)->RolesTitle.Chef = true;
			if (pInfo(peer)->g_lvl >= 10) pInfo(peer)->RolesTitle.Startopian = true;
			if (pInfo(peer)->ghost or pInfo(peer)->invis) {
				if (not Role::Moderator(peer) and not Role::Administrator(peer)) {
					pInfo(peer)->invis = false;
				}
				if (not Role::Administrator(peer)) {
					pInfo(peer)->ghost = false;
					if (pInfo(peer)->skin == -2450) pInfo(peer)->skin = 0x8295C3FF;
				}
			}
			pInfo(peer)->recovery_token = generateRandomID(10), pInfo(peer)->player_token = generateRandomID(20);
			if (pInfo(peer)->b_s == 0) {
				string farm_set_skins = a + (pInfo(peer)->t_lvl >= 10 ? "1" : "0") + (pInfo(peer)->bb_lvl >= 10 ? "1" : "0") + (pInfo(peer)->s_lvl >= 10 ? "1" : "0") + (pInfo(peer)->ff_lvl >= 10 ? "1" : "0") + (pInfo(peer)->p_lvl >= 10 ? "1" : "0") + (pInfo(peer)->g_lvl >= 10 ? "1" : "0");
				string farm_set_titles = a + (pInfo(peer)->t_lvl >= 10 ? "2" : "0") + (pInfo(peer)->bb_lvl >= 10 ? "2" : "0") + (pInfo(peer)->s_lvl >= 10 ? "2" : "0") + (pInfo(peer)->ff_lvl >= 10 ? "2" : "0") + (pInfo(peer)->p_lvl >= 10 ? "2" : "0") + (pInfo(peer)->g_lvl >= 10 ? "2" : "0");
				VarList::OnSetRoleSkinsAndTitles(peer, farm_set_skins + "0000", farm_set_titles + "0000");
				VarList::OnBuxGems(peer);
				VarList::SetHasGrowID(peer, 1, pInfo(peer)->tankIDName, pInfo(peer)->tankIDPass);
				VarList::SetHasAccountSecured(peer, 1);
				VarList::UpdateMainMenuTheme(peer, 1, 3124770815, 3124770815, "3124770815|3124770815|3124770815|3124770815|3124770815|3124770815");
				VarList::OnMagicCompassTrackingItemIDChanged(peer, p_->Magnet_Item);
				pInfo(peer)->inv.erase(std::remove_if(pInfo(peer)->inv.begin(), pInfo(peer)->inv.end(), isCorrupt), pInfo(peer)->inv.end());
			}
			return 0;
		}
		return -4;
	}
	static void packet_(ENetPeer* p_, string t_, string l_ = "", string w_ = "google.com") {
		if (l_ != "")
			t_ = "action|log\nmsg|" + t_;
		int y_ = 3;
		BYTE z_ = 0;
		BYTE* const d_ = new BYTE[5 + t_.length()];
		memcpy(d_, &y_, 4);
		memcpy(d_ + 4, t_.c_str(), t_.length());
		memcpy(d_ + 4 + t_.length(), &z_, 1);
		ENetPacket* const p = enet_packet_create(d_, 5 + t_.length(), ENET_PACKET_FLAG_RELIABLE);
		enet_peer_send(p_, 0, p);
		delete[]d_;
		if (l_ != "") {
			l_ = "action|set_url\nurl|" + w_ + "\nlabel|" + l_ + "\n";
			BYTE* const u_ = new BYTE[5 + l_.length()];
			memcpy(u_, &y_, 4);
			memcpy(u_ + 4, l_.c_str(), l_.length());
			memcpy(u_ + 4 + l_.length(), &z_, 1);
			ENetPacket* const p3 = enet_packet_create(u_, 5 + l_.length(), ENET_PACKET_FLAG_RELIABLE);
			enet_peer_send(p_, 0, p3);
			delete[]u_;
		}
	}
	static void PlayerLogin(ENetPeer* peer, string cch) {
		if (cch.find("protocol|") != string::npos && cch.find("ltoken|") != std::string::npos) {
			auto get_value = [&](const std::string& query, const std::string& key) -> std::string {
				std::string key_pattern = key + "=";
				size_t start = query.find(key_pattern);
				if (start == std::string::npos) return "";

				start += key_pattern.length();
				size_t end = query.find('&', start);
				if (end == std::string::npos) end = query.length();

				return query.substr(start, end - start);
				};
			rtvar m_parser = rtvar::parse(cch);
			std::string ltoken = m_parser.get("ltoken");

			if (ltoken.empty()) {
				packet_(peer, "action|log\nmsg|`4Server protection:`` There are some errors in your login information.");
				packet_(peer, "action|logon_fail");
				enet_peer_disconnect_later(peer, 0);
				return;
			}
			std::string encoded_data = base64_decode(ltoken);
			std::cout << "Decoded login token: " << encoded_data << std::endl;
			std::string name = get_value(encoded_data, "growId");
			std::string password = get_value(encoded_data, "password");

			std::cout << "Login info: " << name << ":" << password << std::endl;

			if (!name.empty() && password.empty()) {
				pInfo(peer)->requestedName = "VertionLabsLul";
				packet_(peer, "action|log\nmsg|`4Server protection:`` There must input the password!.");
				packet_(peer, "action|logon_fail");
				VarList::OnSuperMainStartAcceptLogon(peer, Environment()->osm_link, Environment()->osm_path, Environment()->proto);
				return;
			}
			bool correctpass = false;
			bool hashave = std::filesystem::exists("database/players/" + name + "_.json");
			std::string temporarypass;

			if (hashave) {
				std::ifstream pass("database/players/" + name + "_.json");
				if (pass.is_open()) {
					json data;
					pass >> data;
					temporarypass = data["pass"].get<std::string>();
					pass.close();
				}
				correctpass = (password == temporarypass);
			}
			if (!name.empty() && !password.empty() && hashave && correctpass) {
				gamepacket_t pId, p;
				pId.Insert("SetHasGrowID"), pId.Insert(1), pId.Insert(name), pId.Insert(password);
				pId.CreatePacket(peer);

				p.Insert("OnSendToServer"), p.Insert(17091), p.Insert(0), p.Insert(0), p.Insert("127.0.0.1|0|" + password), p.Insert(1), p.Insert(name);
				p.CreatePacket(peer);
			}
			if (!name.empty() && !password.empty() && !correctpass && hashave) {
				packet_(peer, "action|log\nmsg|`4Server Information:`` The Account: " + name + " Wrong Password!.");
				PlayerLogin(peer, "");
				{
					gamepacket_t p;
					p.Insert("SetHasGrowID"), p.Insert(1), p.Insert(""), p.Insert(""), p.CreatePacket(peer);
				}
			}
			if (!name.empty() && !password.empty() && !correctpass && !hashave) {
				packet_(peer, "action|log\nmsg|`4Server Information:`` The Account: " + name + " Has not found, try to register in this server!.");
				PlayerLogin(peer, "");
				{
					gamepacket_t p;
					p.Insert("SetHasGrowID"), p.Insert(1), p.Insert(""), p.Insert(""), p.CreatePacket(peer);
				}
			}
		}
		pInfo(peer)->Has_Login = true;
		rtvar var = rtvar::parse(cch);
		replaceAll(cch, "\n", "|");
		pInfo(peer)->tankIDName = var.get("tankIDName");
		pInfo(peer)->tankIDPass = var.get("tankIDPass");
		pInfo(peer)->protocol = std::atoi(var.get("protocol").c_str());
		if (!var.get("platformID").empty()) pInfo(peer)->player_device = var.get("platformID");
		if (!var.get("mac").empty()) pInfo(peer)->mac = var.get("mac");
		if (!var.get("rid").empty()) pInfo(peer)->rid = var.get("rid");
		if (!var.get("gid").empty()) pInfo(peer)->gid = var.get("gid");
		if (!var.get("country").empty()) pInfo(peer)->country = var.get("country");
		pInfo(peer)->device_name = GetDeviceName(pInfo(peer)->player_device);
		if (pInfo(peer)->player_device == "0,1,1" or pInfo(peer)->player_device == "0") pInfo(peer)->pc_player = true;
		if (pInfo(peer)->player_device == "1" or pInfo(peer)->player_device == "2") pInfo(peer)->ios_player = true;
		if (Environment()->Anti_GL and not pInfo(peer)->mac.empty()) {
			if (pInfo(peer)->player_device == "4") {
				if (pInfo(peer)->mac.find("02:00:00:00:00:00") != string::npos or cch.find("mac|02:00:00:00:00:00") != string::npos) {
				}
				else {
					VarList::OnConsoleMessage(peer, "`oNice try! That didn't work out tho. You are not allowed to have 3rd app running while playing.");
					Punishment::Banned(peer, 6.307e+7, "Usage of Third Party Program", "AUTO-BANNED BY SYSTEM", 76, true);
					return;
				}
			}
			if (!isValidMACAddress(pInfo(peer)->mac) or pInfo(peer)->token == 1360) {
				VarList::OnConsoleMessage(peer, "`oNice try! That didn't work out tho. You are not allowed to have 3rd app running while playing.");
				Punishment::Banned(peer, 6.307e+7, "Usage of Third Party Program", "AUTO-BANNED BY SYSTEM", 76, true);
				return;
			}
			if (pInfo(peer)->tankIDName.size() < 3 || (pInfo(peer)->tankIDPass.size() < 4 && pInfo(peer)->tankIDPass != "")) {
				pInfo(peer)->tankIDName = "", pInfo(peer)->tankIDPass = "";
				VarList::SetHasGrowID(peer, 1, "", "");
				SystemPool::FailedLogin(peer, "`4Unable to log on : `oInvalid login packet. Please press `#CANCEL ``and login again!", "`5Join Discord Server");
				return;
			}
		}
		if (pInfo(peer)->country.empty()) pInfo(peer)->country = "id";
		pInfo(peer)->requestedName = "VertionLabsLul";
		if (not pInfo(peer)->tankIDName.empty() and not pInfo(peer)->tankIDPass.empty()) {
			int logStatus = SystemPool::Player_Authentication(peer);
			if (logStatus == -1) {
				pInfo(peer)->tankIDName = "", pInfo(peer)->tankIDPass = "";
				VarList::SetHasGrowID(peer, 1, "", "");
				SystemPool::FailedLogin(peer, "`4Unable to log on : `oThat GrowID appears to be invalid, or the password may be incorrect. If you don't have an account, visit our website to create one. Then, click Connect.", "`5Reset Password");
				return;
			}
			else if (logStatus == -2) {
				pInfo(peer)->tankIDName = "", pInfo(peer)->tankIDPass = "";
				VarList::SetHasGrowID(peer, 1, "", "");
				SystemPool::FailedLogin(peer, "`4Unable to log on : `oYour account has been corrupted. Visit `5" + Environment()->discord_url + "`` if you have any questions.", "`5Join Discord Server");
				return;
			}
			else if (logStatus == -3) {
				pInfo(peer)->tankIDName = "", pInfo(peer)->tankIDPass = "";
				VarList::SetHasGrowID(peer, 1, "", "");
				SystemPool::FailedLogin(peer, "`4Unable to log on : `oYour account has been corrupted (Empty). Visit `5" + Environment()->discord_url + "`` if you have any questions.", "`5Join Discord Server");
				return;
			}
			else if (logStatus == -4) {
				pInfo(peer)->tankIDName = "", pInfo(peer)->tankIDPass = "";
				VarList::SetHasGrowID(peer, 1, "", "");
				SystemPool::FailedLogin(peer, "`4Unable to log on : `oFailed to read your account file. Visit `5" + Environment()->discord_url + "`` if you have any questions.", "`5Join Discord Server");
				return;
			}
			else if (logStatus == -5) {
				SystemPool::FailedLogin(peer, "`4Unable to log on : `oYou are `bBLACKLISTED`` in " + Environment()->server_name + ". Visit `5" + Environment()->discord_url + "`` if you have any questions.", "`5Join Discord Server");
				return;
			}
			else if (logStatus == -6) {
				SystemPool::FailedLogin(peer, "`5Server might be under Maintenance, fixing some issues We will back soon.");
				return;
			}
			else if (logStatus == 0) {
				if (pInfo(peer)->b_t + pInfo(peer)->b_s < (duration_cast<milliseconds>(system_clock::now().time_since_epoch())).count()) {
					if (not pInfo(peer)->b_r.empty() or not pInfo(peer)->b_b.empty()) {
						CAction::Positioned(peer, pInfo(peer)->netID, "audio/dialog_confirm.wav", 0);
					}
					pInfo(peer)->b_t = 0, pInfo(peer)->b_s = 0, pInfo(peer)->b_b = "", pInfo(peer)->b_r = "";
					VarList::OnBuxGems(peer);
				}
				else {
					pInfo(peer)->name_color = Role::Prefix(peer);
					long long int time = (duration_cast<milliseconds>(system_clock::now().time_since_epoch())).count();
					int actualseconds = (pInfo(peer)->b_t + pInfo(peer)->b_s - time) / 1000, days = 0;
					string time_counted = "";
					if (actualseconds / 86400 >= 1) {
						days = actualseconds / (24 * 3600);
						time_counted += to_string(actualseconds / (24 * 3600)) + " days, ";
						actualseconds = actualseconds % (24 * 3600);
					}
					if (actualseconds / 3600 >= 1) {
						time_counted += to_string(actualseconds / 3600) + " hours, ";
						actualseconds %= 3600;
					}
					if (actualseconds / 60 >= 1) {
						time_counted += to_string(actualseconds / 60) + " mins, ";
						actualseconds %= 60;
					}
					time_counted += to_string(actualseconds) + " secs";
					if (days < 33) {
						VarList::OnConsoleMessage(peer, "`4Sorry, this account, device or location has been temporarily suspended.``");
						VarList::OnConsoleMessage(peer, "If you didn't do anything wrong, it could be because you're playing from the same place or on the same device as someone who did. Contact support at `5" + Environment()->website_url + "`` if you have any questions.");
						VarList::OnConsoleMessage(peer, "This is a temporary ban caused by " + pInfo(peer)->name_color + pInfo(peer)->tankIDName + "`` and will be removed in `0" + time_counted + "``. If that's not your name, try playing from another location or device to fix it.");
					}
					else VarList::OnConsoleMessage(peer, "`4Sorry, this account (```5" + pInfo(peer)->tankIDName + "```4) has been suspended. Visit`` `5" + Environment()->website_url + "`` `4if you have any questions.``");
					CAction::Log(peer, "action|set_url\nurl|" + Environment()->website_url + "\nlabel|`5Join Discord Server");
					CAction::Log(peer, "action|logon_fail");
					Peer_Disconnect(peer, 0);
				}
				VarList::OnSuperMainStartAcceptLogon(peer, Environment()->osm_link, Environment()->osm_path, Environment()->proto);
			}
		}
		else VarList::OnSuperMainStartAcceptLogon(peer, Environment()->osm_link, Environment()->osm_path, Environment()->proto);
	}
private:
	static bool isValidMACAddress(const std::string& mac) {
		const std::regex macRegex("^([0-9A-Fa-f]{2}:){5}[0-9A-Fa-f]{2}$");
		return std::regex_match(mac, macRegex);
	}
};
int choose_random(const int id_) {
	vector<int> ids_;
	int a_ = 0;
	while (items[id_ + a_].properties & Property_RandomGrow) {
		if (items[id_ + a_].blockType != BlockTypes::SEED) ids_.push_back(id_ + a_);
		a_++;
	}
	a_ = 0;
	while (items[id_ - a_].properties & Property_RandomGrow) {
		if (items[id_ - a_].blockType != BlockTypes::SEED) ids_.push_back(id_ - a_);
		a_++;
	}
	return ids_[rand() % ids_.size()];
}
bool use_mag(World* world_, WorldDrop drop_, int x_, int y_) {
	std::vector<WorldMachines>::iterator p = find_if(world_->machines.begin(), world_->machines.end(), [&](const WorldMachines& a) { return (a.id == 6948 or a.id == 5638 or a.id == 6954 or a.id == 6946 or a.id == 5930) && a.enabled && (a.id == 6954 && world_->blocks[a.x + (a.y * 100)].invert ? a.target_item : a.id == 6954 && world_->blocks[a.x + (a.y * 100)].invert == false ? a.target_item -1  : a.target_item) == drop_.id && (a.id == 6954 ? world_->blocks[a.x + (a.y * 100)].c_ : world_->blocks[a.x + (a.y * 100)].pr) < (a.id == 6948 or a.id == 6946 ? 1500 : a.id == 5638 ? 5000 : a.id == 9850 ? 15000 : a.id == 5930 ? 1000000 : 100000); });
	if (p != world_->machines.end()) {
		int x = world_->machines[p - world_->machines.begin()].x, y = world_->machines[p - world_->machines.begin()].y, id = world_->machines[p - world_->machines.begin()].id;
		WorldBlock* itemas = &world_->blocks[x + (y * 100)];
		PlayerMoving data_{};
		data_.packetType = 19, data_.netID = -1, data_.plantingTree = 0;
		data_.x = x * 32 + 16, data_.y = y * 32 + 16;
		data_.XSpeed = x_ * 32 + 16, data_.YSpeed = y_ * 32 + 16;
		data_.punchX = drop_.id;
		BYTE* raw1_ = packPlayerMoving(&data_, 56, 6);
		for (ENetPeer* cp_ = server->peers; cp_ < &server->peers[server->peerCount]; ++cp_) {
			if (cp_->state != ENET_PEER_STATE_CONNECTED or cp_->data == NULL or pInfo(cp_)->world != world_->name) continue;
			send_raw(cp_, 4, raw1_, 56, ENET_PACKET_FLAG_RELIABLE);
		}
		delete[] raw1_;
		if (itemas->fg == 6954) {
			itemas->c_ += drop_.count;
		}
		else itemas->pr += drop_.count;
		if ((itemas->fg == 6954 ? itemas->c_ : itemas->pr) >= (id == 6948 or id == 6946 ? 1500 : id == 5930 ? 1000000 : 5000) or (itemas->fg == 6954 ? itemas->c_ : itemas->pr) == drop_.count) {
			PlayerMoving data_{};
			data_.packetType = 5, data_.punchX = x, data_.punchY = y, data_.characterState = 0x8;
			int alloc = alloc_(world_, itemas);
			BYTE* raw = packPlayerMoving(&data_, 112 + alloc);
			BYTE* blc = raw + 56;
			form_visual(blc, *itemas, *world_, NULL, false);
			for (ENetPeer* cp_ = server->peers; cp_ < &server->peers[server->peerCount]; ++cp_) {
				if (cp_->state != ENET_PEER_STATE_CONNECTED or cp_->data == NULL) continue;
				if (pInfo(cp_)->world == world_->name) {
					send_raw(cp_, 4, raw, 112 + alloc, ENET_PACKET_FLAG_RELIABLE);
				}
			}
			delete[] raw, blc;
			if (itemas->locked) {
				upd_lock(*itemas, *world_, NULL);
			}
		}
		return true;
	}
	return false;
}
void NothingHappened(ENetPeer* peer, int x, int y) {
	PlayerMoving data;
	data.netID = pInfo(peer)->netID;
	data.packetType = 0x8;
	data.plantingTree = 0;
	data.netID = -1;
	data.x = x;
	data.y = y;
	data.punchX = x;
	data.punchY = y;
	SendPacketRaw(4, packPlayerMoving(&data), 56, 0, peer, ENET_PACKET_FLAG_RELIABLE);
}
void drop_rare_item(World* world_, ENetPeer* peer, int i, int x, int y, bool seed) {
	if (i <= 0 or i > items.size() or items[i].max_gems == 0) return;
	if (peer != NULL) {
		int giveitem = 0, count = 1, got = 0, remove = -1;
		if (pInfo(peer)->necklace == 11406 and seed and rand() % 2500 < 1) {
			giveitem = items[11406].randomitem[rand() % items[11406].randomitem.size()];
			if (rand() % 25 < 1) giveitem = 11398; 
			if (rand() % 2 < 1) Inventory::Modify(peer, 11406, remove = -1); 
		} 
		if (seed == false) {
			if (rand() % 350 < 1) giveitem = 2914;
			if (rand() % 170 < 1) giveitem = theitemtoday;
		}
		if (items[i].chi == 0 || items[i].chi == 1 || items[i].chi == 2 || items[i].chi == 3) if (rand() % 250 < 1) giveitem = items[i].chi == 0 ? 5028 : items[i].chi == 1 ? 5024 : items[i].chi == 2 ? 5030 : items[i].chi == 3 ? 5026 : 0;
		if (items[i].chance > 1) {
			if (rand() % items[i].chance < 1) {
				if (items[i].randomitem.size() > 0) giveitem = items[i].randomitem[rand() % items[i].randomitem.size()];
			}
		}
		if (pInfo(peer)->back == 3144 && rand() % 450 < 1) giveitem = 2034;
		int chance = 18000;
		if (pInfo(peer)->hand == 11118 || pInfo(peer)->hand == 9846) chance = 13000;
		else if (pInfo(peer)->hand == 9548 || pInfo(peer)->hair == 9920 || pInfo(peer)->necklace == 10176) chance = 9800;
		else if (pInfo(peer)->hand == 9774) chance = 7000;
		if (items[i].fossil_rock && rand() % 400 < 1) {
			vector<int> zzz{ 4082, 4084, 4086, 4088, 4090, 4092, 4120, 4122 };
			giveitem = zzz[rand() % zzz.size()];
		}
		if (rand() % (pInfo(peer)->face == 10946 ? 450 : 550) < 1) {
			int gotr = rand() % 3 + 1;
			if (rand() % 3 && pInfo(peer)->hand == 10944) {
				gotr += rand() % 10 + 1;
				giveitem = 776;
			}
			pInfo(peer)->rubble += gotr;
			VarList::OnTalkBubble(peer, pInfo(peer)->netID, "You found " + to_string(gotr) + " Rubbles!", 0, 0);
		}
		if (items[i].farmable and items[i].rarity >= 24) {
			vector<int>  leonidas{ 7960, 7960, 7960, 7960, 7954, 5948, 9380, 11038, 3432, 7954, 5948, 9380, 11038, 3432, 7954, 5948, 9380, 11038, 3432, 7954, 5948, 9380, 11038, 3432, 7954, 5948, 9380, 11038, 3432, 7954, 5948, 9380, 11038, 3432, 7954, 5948, 9380, 11038, 3432, 7954, 5948, 9380, 11038, 3432, 7954, 5948, 9380, 11038, 3432 };
			vector<int> the_special{ 9814, 9350, 9902, 7960, 7954, 5948, 9380, 11038, 3432 };
			if (rand() % (chance / 15) < 1) giveitem = 7954;
			else if (rand() % (chance / 15) < 1) giveitem = 7484;
			else if (rand() % (chance / 10) < 1) giveitem = 5948;
			else if (rand() % (chance / 15) < 1) giveitem = 9380;
			else if (rand() % (chance / 10) < 1) giveitem = 11038; 
			else if (rand() % (chance / 7) < 1) giveitem = 3432; 
			if (pInfo(peer)->hand == 9774 and rand() % (chance / 30) < 1) giveitem = leonidas[rand() % leonidas.size()];
			else if (pInfo(peer)->hand == 9846 and rand() % (chance / 5) < 1) giveitem = leonidas[rand() % leonidas.size()];
			else if (pInfo(peer)->hand == 9846 and rand() % (chance / 5) < 1) giveitem = 9902;
			else if (pInfo(peer)->hand == 9604 and rand() % (chance / 10) < 1) giveitem = 9902;
			else if (pInfo(peer)->hand == 9880 and rand() % (chance / 50) < 1) giveitem = 10836;
			else if (pInfo(peer)->hand == 10936 and rand() % (chance / 50) < 1) {
				vector<int> zzz{ 8426, 9600, 10836, 10838 };
				giveitem = zzz[rand() % zzz.size()];
			}
			else if (pInfo(peer)->hand == 10938 and rand() % (chance / 25) < 1) {
				vector<int> zzz{ 2242, 2244, 2246, 2248, 2250 };
				giveitem = zzz[rand() % zzz.size()];
			}
			else if (pInfo(peer)->hand == 9548 and rand() % (chance / 50) < 1) giveitem = 2590; 
			else if (pInfo(peer)->hand == 9604 and rand() % (chance / 50) < 1) giveitem = 6156;
			else if (pInfo(peer)->hand == 10930 and rand() % (chance / 50) < 1) {
				vector<int> zzz{ 262, 828, 826 };
				giveitem = zzz[rand() % zzz.size()];
			}
		}
		if (giveitem == 0) if (rand() % 2000 < 1) giveitem = 5178;
		if (giveitem == 0) if (Playmods::HasById(pInfo(peer), 14) and (rand() % 8500 < 1)) giveitem = 9428;
		if (pInfo(peer)->hand == 8554) {
			if (rand() % 200 < 1) {
				giveitem = 8534;
				count = rand() % 10 + 1;
				if (rand() % 1000 < 1) Inventory::Modify(peer, 8554, remove);
			}
		}
		else if (pInfo(peer)->hand == 9906 or pInfo(peer)->hand == 9908 or pInfo(peer)->hand == 9918 or pInfo(peer)->hand == 10290) if (rand() % 12000 < 1) giveitem = 9902, count = 1;
		if (pInfo(peer)->show_pets) {
			if (pInfo(peer)->pet_level > 29) {
				if (rand() % 150 < 1) {
					int gotr = rand() % 10 + 1;
					pInfo(peer)->rubble += gotr;
					VarList::OnTalkBubble(peer, pInfo(peer)->pet_netID, "You found " + to_string(gotr) + " Rubbles!", 2, 0);
				}
			}
		}
		if (giveitem != 0) {
			WorldDrop drop_block_{};
			drop_block_.id = giveitem, drop_block_.count = count,  drop_block_.x = (x * 32) + rand() % 17, drop_block_.y = (y * 32) + rand() % 17;
			if (not use_mag(world_, drop_block_, x, y)) VisualHandle::Drop(world_, drop_block_);
		}
	}
}
bool harvest_seed(World* world_, WorldBlock* block_, int x_, int y_, int drop_count, int net_id = -1, ENetPeer* p_ = NULL) {
	bool seed_drop = false;
	if (p_ != NULL) {
		if (items[block_->fg - 1].rarity >= 20) {
			if (pInfo(p_)->role_quest and pInfo(p_)->quest_number == 1) {
				if (pInfo(p_)->role_quest_type == "Farmer" and pInfo(p_)->need_required < pInfo(p_)->quest_required) {
					pInfo(p_)->need_required += 1;
					if (pInfo(p_)->need_required >= pInfo(p_)->quest_required) {
						pInfo(p_)->need_required = pInfo(p_)->quest_required;
						VarList::OnConsoleMessage(p_, "`9Farmer Quest! `ocomplete! Go claim your points!");
						VarList::OnTalkBubble(p_, pInfo(p_)->netID, "`9Farmer Quest! ``complete! Go claim your points!", 0, 0);
					}
				}
			}
		}
	}
	if (drop_count != 0) {
		if (items[block_->fg - 1].rarity != 999 and items[block_->fg - 1].blockType != BlockTypes::CLOTHING and rand() % 100 < 21) {
			seed_drop = true;
			WorldDrop drop_seed_{};
			drop_seed_.id = block_->fg;
			drop_seed_.count = 1;
			drop_seed_.x = (x_ * 32) + rand() % 17;
			drop_seed_.y = (y_ * 32) + rand() % 17;
			if (p_ != NULL && pInfo(p_)->back == 8908 && Inventory::Modify(p_, drop_seed_.id, drop_seed_.count) == 0) {
				PlayerMoving data_{};
				data_.packetType = 19, data_.plantingTree = 0, data_.netID = 0;
				data_.punchX = drop_seed_.id, data_.punchY = pInfo(p_)->netID;
				BYTE* raw;
				data_.x = (pInfo(p_)->lastwrenchx * 32) + 10, data_.y = (pInfo(p_)->lastwrenchy * 32) + 16;
				raw = packPlayerMoving(&data_);
				int32_t to_netid = pInfo(p_)->netID;
				raw[3] = 5;
				Memory_Copy(raw + 8, &to_netid, 4);
				for (ENetPeer* cp_ = server->peers; cp_ < &server->peers[server->peerCount]; ++cp_) {
					if (cp_->state != ENET_PEER_STATE_CONNECTED or cp_->data == NULL or pInfo(cp_)->world != pInfo(p_)->world) continue;
					send_raw(cp_, 4, raw, 56, ENET_PACKET_FLAG_RELIABLE);
				}
				delete[] raw;
				int got = 0;
				if (rand() % 250 < 1) {
					Inventory::Modify(p_, 8908, got = -1);
					Inventory::Modify(p_, 8940, got = 1);
				}
			}
			else {
				if (not use_mag(world_, drop_seed_, x_, y_)) VisualHandle::Drop(world_, drop_seed_);
			}
		}
		WorldDrop drop_block_{}; WorldDrop drop_{}; WorldDrop drop_s{};
		if (items[block_->fg].properties & Property_RandomGrow) {
			drop_block_.id = choose_random(block_->fg);
		}
		else
			drop_block_.id = block_->fg - 1;
		drop_block_.count = drop_count;
		drop_block_.x = (x_ * 32) + rand() % 17;
		drop_block_.y = (y_ * 32) + rand() % 17;
		if (p_ != NULL) {
			if (pInfo(p_)->hand == 1068 and rand() % 100 < 21) {// Hand Scyte
				vector<int> list{ 5090, 3088, 5198 };
				if (rand() % 5 < 1) list = { 3086, 3074, 5200, 8910, 7034, 11248, 10132 };
				int item = list[rand() % list.size()], got = 0;
				VarList::OnTalkBubble(p_, pInfo(p_)->netID, items[item].hand_scythe_text, 0, 0);
				drop_.id = item, drop_.count = item == 5198 ? 2 : 1, drop_.x = (x_ * 32) + rand() % 17, drop_.y = (y_ * 32) + rand() % 17;
				drop_count = 0;
				PlayerMoving data_{};
				data_.packetType = 17, data_.netID = 50, data_.YSpeed = 50, data_.x = x_ * 32, data_.y = y_ * 32;
				BYTE* raw = packPlayerMoving(&data_);
				for (ENetPeer* cp_ = server->peers; cp_ < &server->peers[server->peerCount]; ++cp_) {
					if (cp_->state != ENET_PEER_STATE_CONNECTED or cp_->data == NULL or pInfo(p_)->world != pInfo(cp_)->world) continue;
					send_raw(cp_, 4, raw, 56, ENET_PACKET_FLAG_RELIABLE);
				}
				delete[] raw;
				int chance = 0, gots = 0;
				if (Playmods::HasById(pInfo(p_), 35)) chance = 5;
				if (rand() % 100 < (80 - chance)) Inventory::Modify(p_, 1068, gots = -1);
			}
			if (Event()->Harvest_Festival) {
				if (rand() % 100 < 21) {
					vector<int> moon_cake_list = Environment()->random_mooncake;
					int chance = 5000 - items[block_->fg].rarity;
					bool drop_rare = true;
					if (!items[block_->fg - 1].farmable) chance = 3000 - items[block_->fg].rarity, drop_rare = false;
					moon_cake_list.erase(remove(moon_cake_list.begin(), moon_cake_list.end(), 1828), moon_cake_list.end()), moon_cake_list.erase(remove(moon_cake_list.begin(), moon_cake_list.end(), 10140), moon_cake_list.end());
					int chance_ = rand() % chance;
					if (drop_rare && chance_ <= ((pInfo(p_)->necklace == 10158 || pInfo(p_)->necklace == 8924) ? 1 : 3)) { moon_cake_list = { 1828, 10140 }; }
					if (chance_ <= 20) {
						int item = moon_cake_list[rand() % moon_cake_list.size()];
						VarList::OnTalkBubble(p_, pInfo(p_)->netID, "A `w" + items[item].name + "`` falls out!", 0, 0);
						drop_s.id = item, drop_s.count = 1, drop_s.uid = uint16_t(world_->drop_new.size()) + 1, drop_s.x = x_ * 32 + rand() % 17, drop_block_.y = y_ * 32 + rand() % 17;
					}
				}
			}
		}
		if (p_ != NULL && pInfo(p_)->back == 8908 && Inventory::Modify(p_, drop_block_.id, drop_block_.count) == 0) {		
			PlayerMoving data_{};
			data_.packetType = 19, data_.plantingTree = 0, data_.netID = 0;
			data_.punchX = drop_block_.id, data_.punchY = pInfo(p_)->netID;
			BYTE* raw;
			data_.x = (pInfo(p_)->lastwrenchx * 32) + 10, data_.y = (pInfo(p_)->lastwrenchy * 32) + 16;
			raw = packPlayerMoving(&data_);
			int32_t to_netid = pInfo(p_)->netID;
			raw[3] = 5;
			Memory_Copy(raw + 8, &to_netid, 4);
			for (ENetPeer* cp_ = server->peers; cp_ < &server->peers[server->peerCount]; ++cp_) {
				if (cp_->state != ENET_PEER_STATE_CONNECTED or cp_->data == NULL or pInfo(cp_)->world != pInfo(p_)->world) continue;
				send_raw(cp_, 4, raw, 56, ENET_PACKET_FLAG_RELIABLE);
			}
			delete[] raw;
			int got = 0;
			if (rand() % 250 < 1) {
				Inventory::Modify(p_, 8908, got = -1);
				Inventory::Modify(p_, 8940, got = 1);
			}
		}
		else {
			if (not use_mag(world_, drop_block_, x_, y_)) VisualHandle::Drop(world_, drop_block_);
		}
	}
	if (items[block_->fg - 1].max_gems != 0) {
		int c_ = rand() % (items[block_->fg - 1].max_gems + 1);
		if (p_ != NULL) {
			add_peer_xp(p_, (items[block_->fg].rarity / 5 > 0 ? items[block_->fg].rarity / 5 : 1));
			Pet_Ai::Add_Xp(p_, (items[block_->fg].rarity / 5 > 0 ? items[block_->fg].rarity / 5 : 1));
			if (pInfo(p_)->lwiz_step == 15) {
				add_lwiz_points(p_, items[block_->fg - 1].rarity);
			}
			if (pInfo(p_)->show_pets) {
				if (pInfo(p_)->Pets_Farmer_Lvl == 1 and rand() % 100 < 0.5) c_ += 0.5;
				if (pInfo(p_)->Pets_Farmer_Lvl == 2 and rand() % 100 < 2.5) c_ += 0.5;
				if (pInfo(p_)->Pets_Farmer_Lvl == 3 and rand() % 100 < 3.0) c_ += 0.5;
				if (pInfo(p_)->Pets_Farmer_Lvl == 4 and rand() % 100 < 4.5) c_ += 0.5;
				if (pInfo(p_)->Pets_Farmer_Lvl == 5 and rand() % 100 < 5.0) c_ += 0.5;
			}
			if (Playmods::HasById(pInfo(p_), 14) and ((rand() % 100) + 1) <= 30) {
				PlayerMoving data_{};
				data_.packetType = 17;
				data_.netID = 125;
				data_.YSpeed = 125;
				data_.x = x_ * 32 + 16;
				data_.y = y_ * 32 + 16;
				BYTE* raw = packPlayerMoving(&data_);
				for (ENetPeer* cp_ = server->peers; cp_ < &server->peers[server->peerCount]; ++cp_) {
					if (cp_->state != ENET_PEER_STATE_CONNECTED or cp_->data == NULL) continue;
					if (pInfo(cp_)->world == world_->name) {
						send_raw(cp_, 4, raw, 56, ENET_PACKET_FLAG_RELIABLE);
					}
				}
				delete[] raw;
				c_ += (rand() % 5) + 1;
			}
		}
		if (c_ != 0) {
			gems_(p_, world_, c_, x_ * 32, y_ * 32, block_->fg);
		}
	}
	PlayerMoving data_{};
	data_.packetType = 12, data_.netID = net_id, data_.plantingTree = block_->fg;
	data_.punchX = x_, data_.punchY = y_;
	int32_t item = -1;
	BYTE* raw = packPlayerMoving(&data_);
	Memory_Copy(raw + 8, &item, 4);
	for (ENetPeer* cp_ = server->peers; cp_ < &server->peers[server->peerCount]; ++cp_) {
		if (cp_->state != ENET_PEER_STATE_CONNECTED or cp_->data == NULL) continue;
		if (pInfo(cp_)->world == world_->name) {
			send_raw(cp_, 4, raw, 56, ENET_PACKET_FLAG_RELIABLE);
		}
	}
	delete[]raw;
	reset_(block_, x_, y_, world_);
	return seed_drop;
}
bool LockMove(ENetPeer* peer, int wx1, int wy1) {
	std::string name_ = pInfo(peer)->world;
	std::vector<World>::iterator p = find_if(worlds.begin(), worlds.end(), [name_](const World& a) { return a.name == name_; });
	if (p != worlds.end()) {
		World* world_ = &worlds[p - worlds.begin()];
		int lock = -1;
		for (int i_ = 0; i_ < world_->blocks.size(); i_++) {
			if (world_->blocks[i_].fg == 202 || world_->blocks[i_].fg == 204 || world_->blocks[i_].fg == 206 || world_->blocks[i_].fg == 4994 || world_->blocks[i_].fg == 10000) continue;
			if (items[world_->blocks[i_].fg].blockType == BlockTypes::LOCK) {
				lock = world_->blocks[i_].fg, world_->blocks[i_].fg = 0, update_tile(peer, i_ % 100, i_ / 100, 0, false, true);
				break;
			}
		}
		if (lock != -1) {
			world_->blocks[wx1 + (wy1) * 100].fg = lock;
			update_tile(peer, wx1, wy1, lock, false, true);
			return true;
		}
	}
	return false;
}
void plant_(World* world_, ENetPeer* peer, WorldBlock* block_, int x_, int y_, int p_, bool upd_visual = true, bool mag_place = false) {
	if (pInfo(peer)->lvlKit < 100) Kit_Server::Add_Xp(peer, rand() % 28, "kit");
	if (items[block_->fg].rarity >= 20) {
		if (pInfo(peer)->role_quest and pInfo(peer)->quest_number == 2) {
			if (pInfo(peer)->role_quest_type == "Farmer" and pInfo(peer)->need_required < pInfo(peer)->quest_required) {
				pInfo(peer)->need_required += 1;
				if (pInfo(peer)->need_required >= pInfo(peer)->quest_required) {
					pInfo(peer)->need_required = pInfo(peer)->quest_required;
					VarList::OnConsoleMessage(peer, "`9Farmer Quest! `ocomplete! Go claim your points!");
					VarList::OnTalkBubble(peer, pInfo(peer)->netID, "`9Farmer Quest! ``complete! Go claim your points!", 0, 0);
				}
			}
		}
	}
	if (pInfo(peer)->role_quest and pInfo(peer)->quest_number == 4) {
		if (pInfo(peer)->role_quest_type == "Farmer" and pInfo(peer)->need_required < pInfo(peer)->quest_required) {
			pInfo(peer)->need_required += items[block_->fg].rarity;
			if (pInfo(peer)->need_required >= pInfo(peer)->quest_required) {
				pInfo(peer)->need_required = pInfo(peer)->quest_required;
				VarList::OnConsoleMessage(peer, "`9Farmer Quest! `ocomplete! Go claim your points!");
				VarList::OnTalkBubble(peer, pInfo(peer)->netID, "`9Farmer Quest! ``complete! Go claim your points!", 0, 0);
			}
		}
	}
	if (pInfo(peer)->need_item_req_id == block_->fg) {
		if (pInfo(peer)->role_quest and pInfo(peer)->quest_number == 7) {
			if (pInfo(peer)->role_quest_type == "Farmer" and pInfo(peer)->need_required < pInfo(peer)->quest_required) {
				pInfo(peer)->need_required += 1;
				if (pInfo(peer)->need_required >= pInfo(peer)->quest_required) {
					pInfo(peer)->need_required = pInfo(peer)->quest_required;
					VarList::OnConsoleMessage(peer, "`9Farmer Quest! `ocomplete! Go claim your points!");
					VarList::OnTalkBubble(peer, pInfo(peer)->netID, "`9Farmer Quest! ``complete! Go claim your points!", 0, 0);
				}
			}
		}
	}
	if (pInfo(peer)->C_QuestActive && pInfo(peer)->C_QuestKind == 3 && pInfo(peer)->C_QuestProgress < pInfo(peer)->C_ProgressNeeded) {
		pInfo(peer)->C_QuestProgress += items[block_->fg].rarity;
		if (pInfo(peer)->C_QuestProgress >= pInfo(peer)->C_ProgressNeeded) {
			VarList::OnTalkBubble(peer, pInfo(peer)->netID, "`9Ring Quest task complete! Go tell the Ringmaster!", 0, 0);
		}
	}
	if (pInfo(peer)->starglitter_seed2 < 100 && pInfo(peer)->starglitter_seed == p_) DailyEvent_Task::MStarglitter(peer, "seed", 1);
	block_->fruit = items[block_->fg].rarity == 999 ? 1 : items[block_->fg].farmable ? (rand() % 6) + 1 : (rand() % 4) + 1;
	if (upd_visual) punch_tile(peer, x_, y_, 0x3, p_, mag_place ? -1 : pInfo(peer)->netID, 0x0, 1, block_->fruit);
	int timed = 0;
	if (Playmods::HasByName(pInfo(peer), "Reduced Growtime..."))timed = items[block_->fg].growTime * items[pInfo(peer)->ances].chance * 0.001;
	else if (Playmods::HasById(pInfo(peer), 118)) timed = items[p_].growTime * 0.05;
	if (pInfo(peer)->gp)  timed *= 0.05;
	for (int i_ = 0; i_ < world_->machines.size(); i_++) {
		WorldMachines* machine = &world_->machines[i_];
		if (world_->blocks[machine->x + (machine->y * 100)].fg == 9844) {
			if (world_->blocks[machine->x + (machine->y * 100)].pr > 0 && world_->blocks[machine->x + (machine->y * 100)].enabled && machine->target_item && p_) {
				world_->blocks[machine->x + (machine->y * 100)].pr--;
				timed = items[p_].growTime * 0.25;
				if (world_->blocks[machine->x + (machine->y * 100)].pr <= 0) {
					world_->blocks[machine->x + (machine->y * 100)].enabled = false;
					PlayerMoving data_{};
					data_.packetType = 5, data_.punchX = machine->x, data_.punchY = machine->y, data_.characterState = 0x8;
					BYTE* raw = packPlayerMoving(&data_, 112 + alloc_(world_, &world_->blocks[machine->x + (machine->y * 100)]));
					BYTE* blc = raw + 56;
					form_visual(blc, *&world_->blocks[machine->x + (machine->y * 100)], *world_, NULL, false);
					for (ENetPeer* cp_ = server->peers; cp_ < &server->peers[server->peerCount]; ++cp_) {
						if (cp_->state != ENET_PEER_STATE_CONNECTED or cp_->data == NULL) continue;
						if (pInfo(cp_)->world == world_->name) {
							send_raw(cp_, 4, raw, 112 + alloc_(world_, &world_->blocks[machine->x + (machine->y * 100)]), ENET_PACKET_FLAG_RELIABLE);
						}
					}
					delete[] raw, blc;
				}
			}
		}
	}
	block_->planted = time(nullptr) - (timed);
	PlayerMoving data_{};
	data_.packetType = 5, data_.punchX = x_, data_.punchY = y_, data_.characterState = 0x8;
	int alloc = alloc_(world_, block_);
	BYTE* raw = packPlayerMoving(&data_, 112 + alloc);
	BYTE* blc = raw + 56;
	WorldBlock* block_s = &world_->blocks[x_ + (y_ * 100)];
	form_visual(blc, *block_s, *world_, peer, false);
	for (ENetPeer* cp_ = server->peers; cp_ < &server->peers[server->peerCount]; ++cp_) {
		if (cp_->state != ENET_PEER_STATE_CONNECTED or cp_->data == NULL) continue;
		if (pInfo(cp_)->world == world_->name) {
			send_raw(cp_, 4, raw, 112 +alloc, ENET_PACKET_FLAG_RELIABLE);
		}
	}
	delete[] raw, blc;
	if (block_->locked) {
		upd_lock(*block_, *world_, peer);
	}
}
inline int get_givingtree_prize(World* world, WorldBlock* block_, ENetPeer* peer) {
	int prize_ = 0;
#ifdef _WIN32
#elif defined(__linux__)
	auto GetTickCount = []() {
		struct timespec now;
		clock_gettime(CLOCK_MONOTONIC, &now);
		return now.tv_sec * 1000 + now.tv_nsec / 1000000;
		};
#endif
	srand(time(0));
	vector<int> list_ = { 1360, 3228, 5356, 3234, 10516, 3218, 5366, 3240, 3232, 11518, 7456, 11538, 11516, 11490, 11512, 10512, 10508, 10518, 440, 11520 };
	if ((rand() % 500) < 351) {
		if ((block_->shelf_1 > 50 and block_->shelf_1 < 99) or block_->shelf_1 >= 100) {
			list_.insert(list_.end(), { 11460, 11458, 11498, 11496, 11486, 11540, 11484 });
			if ((rand() % 200) < 26) {
				list_.insert(list_.end(), { 11494, 11482, 11502, 11492, 11454 });
			}
		}
		if (block_->shelf_1 >= 100) {
			int rand_ = (rand() % 200);
			list_.insert(list_.end(), { 242, 3236, 3230, 3252, 9192, 3216 });
			if (rand_ < 51) {
				for (int i = 0; i < 13; i++) {
					list_.erase(list_.begin() + 1);
				}
			}
			if (rand_ > 50 and rand_ < 60) list_.push_back(11456);
			else if (rand_ > 30 and rand_ < 40) list_.push_back(11488);
			else if (rand_ > 10 and rand_ < 20) list_.push_back(11466);
			else if (rand_ > 2 and rand_ < 10) list_.push_back(10454);
			else if (rand_ < 2) list_.push_back(11462);
		}
	}
	prize_ = list_[rand() % list_.size()];
	return prize_;
}
Position2D track_steam(World* world_, WorldBlock* start_from, int x, int y) {
	Position2D new_pos{ -1, -1 };
	std::vector<int> new_tiles{};
	new_tiles.push_back((int)x + ((int)y * 100));
	int ySize = world_->blocks.size() / 100, xSize = world_->blocks.size() / ySize;
	std::vector<WorldBlock> shadow_copy = world_->blocks;
	for (int i2 = 0; i2 < new_tiles.size(); i2++) {
		int x_ = new_tiles[i2] % 100, y_ = new_tiles[i2] / 100;
		if ((x_ + (y_ * 100) >=0 && x_ + (y_ * 100) <= world_->blocks.size()) && (world_->blocks[x_ + (y_ * 100)].fg == 3724 or world_->blocks[x_ + (y_ * 100)].fg == 3286)) {
			new_pos.x = x_, new_pos.y = y_;
			if (x_ < 0 || y < 0) break;
			return new_pos;
		}
		else if ((x_ + 1 + (y_ * 100) >= 0 && x_ + 1 + (y_ * 100) <= world_->blocks.size()) && (world_->blocks[x_ + 1 + (y_ * 100)].fg == 3724 or world_->blocks[x_ + 1 + (y_ * 100)].fg == 3286)) {
			new_pos.x = x_ + 1, new_pos.y = y_;
			if (x_ < 0 || y < 0) break;
			return new_pos;
		}
		else if ((x_ - 1 + (y_ * 100) >= 0 && x_ - 1 + (y_ * 100) <= world_->blocks.size()) && (world_->blocks[x_ - 1 + (y_ * 100)].fg == 3724 or world_->blocks[x_ - 1 + (y_ * 100)].fg == 3286)) {
			new_pos.x = x_ - 1, new_pos.y = y_;
			if (x_ < 0 || y < 0) break;
			return new_pos;
		}
		else if ((x_ + ((y_ + 1) * 100) >= 0 && x_ + ((y_ + 1) * 100) <= world_->blocks.size()) && (world_->blocks[x_ + ((y_ + 1) * 100)].fg == 3724 or world_->blocks[x_ + ((y_ + 1) * 100)].fg == 3286)) {
			new_pos.x = x_, new_pos.y = y_ + 1;
			if (x_ < 0 || y < 0) break;
			return new_pos;
		}
		else if ((x_ + ((y_ - 1) * 100) >= 0 && x_ + ((y_ - 1) * 100) <= world_->blocks.size()) && (world_->blocks[x_ + ((y_ - 1) * 100)].fg == 3724 or world_->blocks[x_ + ((y_ - 1) * 100)].fg == 3286)) {
			new_pos.x = x_, new_pos.y = y_ - 1;
			if (x_ < 0 || y < 0) break;
			return new_pos;
		}
		if ((x_ + 1 + (y_ * 100) >= 0 && x_ + 1 + (y_ * 100) <= world_->blocks.size()) && (x_ < ( world_->max_x -1 ) and shadow_copy[x_ + 1 + (y_ * 100)].fg == 3260)) {
			if (not shadow_copy[x_ + 1 + (y_ * 100)].scanned) {
				shadow_copy[x_ + 1 + (y_ * 100)].scanned = true;
				new_tiles.push_back(x_ + 1 + (y_ * 100));
			}
		} 
		if ((x_ - 1 + (y_ * 100) >= 0 && x_ - 1 + (y_ * 100) <= world_->blocks.size()) && (x_ > 0 and shadow_copy[x_ - 1 + (y_ * 100)].fg == 3260)) {
			if (not shadow_copy[x_ - 1 + (y_ * 100)].scanned) {
				shadow_copy[x_ - 1 + (y_ * 100)].scanned = true;
				new_tiles.push_back(x_ - 1 + (y_ * 100));
		}
		} 
		if ((x_ + ((y_ + 1) * 100) >= 0 && x_ + ((y_ + 1) * 100) <= world_->blocks.size()) && (y_ < (world_->max_y -1 ) and shadow_copy[x_ + ((y_ + 1) * 100)].fg == 3260)) {
			if (not shadow_copy[x_ + ((y_ + 1) * 100)].scanned) {
				shadow_copy[x_ + ((y_ + 1) * 100)].scanned = true;
				new_tiles.push_back(x_ + ((y_ + 1) * 100));
			}
		}
		if ((x_ + ((y_ - 1) * 100) >= 0 && x_ + ((y_ - 1) * 100) <= world_->blocks.size()) && (y_ > 0 and shadow_copy[x_ + ((y_ - 1) * 100)].fg == 3260)) {
			if (not shadow_copy[x_ + ((y_ - 1) * 100)].scanned) {
				shadow_copy[x_ + ((y_ - 1) * 100)].scanned = true;
				new_tiles.push_back(x_ + ((y_ - 1) * 100));
			}
		}
	}
	return new_pos;
}
CL_Vec2i GetTilePos(const uint16_t& id, World* world) {
	for (int i = 0; i < world->blocks.size(); i++) {
		if (world->blocks[i].fg != id)
			continue;
		return { i % world->max_x, i / world->max_x };
	}
	return { 0, 0 };
}
CL_Vec2i GetTilePos(const BlockTypes& type, World* world) {
	for (int i = 0; i < world->blocks.size(); i++) {
		if (items[world->blocks[i].fg].blockType != type)
			continue;
		return { i % world->max_x, i / world->max_x };
	}
	return { 0, 0 };
}
WorldBlock* GetTile(int x, int y, World* world) {
	if (x < 0 || y < 0 || x > world->max_x || y > world->max_y)
		return nullptr;
	return &world->blocks[x + y * world->max_x];
}
WorldBlock* GetTile(CL_Vec2i pos, World* world) {
	return GetTile(pos.x, pos.y, world);
}
WorldBlock* GetTile(const uint16_t& id, World* world) {
	auto pos = GetTilePos(id, world);
	if (pos.x < 0 || pos.y < 0 || pos.x > world->max_x || pos.y > world->max_y)
		return nullptr;
	return GetTile(pos.x, pos.y, world);
}
WorldBlock* GetTile(int index, World* world) {
	return &world->blocks[index];
}
WorldBlock* GetParentTile(WorldBlock* neighbour, World* world) {
	if (neighbour->lock_origin < 0)
		return nullptr;
	CL_Vec2i parent = {
		(int)(neighbour->lock_origin % world->max_x), (int)(neighbour->lock_origin / world->max_x)
	};
	return GetTile(parent.x, parent.y, world);
}
bool HasFlag(WorldBlock* block, int fl) {
	return block->flags & fl;
}
bool IsObstacle(World* world, Player* player, CL_Vec2i position) {
	if (position.x >= world->max_x || position.y >= world->max_y) return true;
	if (position.x < 0 || position.y < 0) return true;
	if (player->ghost) return false;
	bool public_world = world->world_settings & SETTINGS::SETTINGS_4;
	WorldBlock* tile = GetTile(position.x, position.y, world);
	if (!tile) return true;
	auto def = items[tile->fg ? tile->fg : tile->bg];
	if (tile->fg == 0 || def.collisionType != 1 || def.blockType == PLATFORM) return false;
	if (def.blockType == BlockTypes::VIP_ENTRANCE) {
		if (player->Role.Developer == false) return false;
		if (tile->locked) {
			WorldBlock* parent = GetParentTile(tile, world);
			if (!parent) return true;
			if (Vip_Bfg(parent, player->tankIDName) or find(parent->admins.begin(), parent->admins.end(), player->tankIDName) != parent->admins.end() || HasFlag(parent, TILEFLAG_PUBLIC) || HasFlag(tile, TILEFLAG_PUBLIC) || parent->owner_name == player->tankIDName) return false;
		}
		else {
			if (world->owner_name.empty() || world->owner_name == player->tankIDName) return false;
			auto access_list = world->admins;
			WorldBlock* parent = GetParentTile(tile, world);
			if (!parent) return true;
			if (Vip_Bfg(parent, player->tankIDName) or find(access_list.begin(), access_list.end(), player->tankIDName) != access_list.end() || public_world || HasFlag(tile, TILEFLAG_PUBLIC)) return false;
		}
		return true;
	}
	else if (def.toggleable) {
		if (player->Role.Developer == false) return false;
		if (HasFlag(tile, TILEFLAG_OPEN)) return false;
		return true;
	}
	else if (def.blockType == BlockTypes::VIP_ENTRANCE) {
		if (player->Role.Developer == false) return false;
		if (world->owner_name.empty() || world->owner_name == player->tankIDName) return false;
		auto access_list = tile->admins;
		WorldBlock* parent = GetParentTile(tile, world);
		if (!parent) return true;
		if (Vip_Bfg(parent, player->tankIDName) or find(access_list.begin(), access_list.end(), player->tankIDName) != access_list.end() || HasFlag(tile, TILEFLAG_PUBLIC) || tile->owner_name == player->tankIDName || tile->limit_admins) return false;
		return true;
	}
	return true;
}
bool patchNoClip(World* world_, int x, int y, WorldBlock* target_, ENetPeer* p_) {
	try {
		if (world_ == nullptr) return false;
		if (target_ == nullptr) return false;
		bool public_world = world_->world_settings & SETTINGS::SETTINGS_4;
		std::vector<WorldBlock> shadow_copy = world_->blocks;
		if (p_->state != ENET_PEER_STATE_CONNECTED) return false;
		std::vector<int> new_tiles{};
		WorldBlock* block_ = &world_->blocks[(int)x / 32 + ((int)y / 32 * 100)];
		if (items[world_->blocks[(int)x / 32 + ((int)y / 32 * 100)].fg].collisionType != 1 or items[world_->blocks[(int)x / 32 + ((int)y / 32 * 100)].fg].blockType == BlockTypes::GATEWAY or items[world_->blocks[(int)x / 32 + ((int)y / 32 * 100)].fg].toggleable or items[world_->blocks[(int)x / 32 + ((int)y / 32 * 100)].fg].blockType == BlockTypes::VIP_ENTRANCE) {
			if (items[world_->blocks[(int)x / 32 + ((int)y / 32 * 100)].fg].blockType == BlockTypes::VIP_ENTRANCE and not world_->blocks[(int)x / 32 + ((int)y / 32 * 100)].limit_admins and world_->owner_name != pInfo(p_)->tankIDName and not world_->owner_name.empty() and find(world_->blocks[(int)x / 32 + ((int)y / 32 * 100)].admins.begin(), world_->blocks[(int)x / 32 + ((int)y / 32 * 100)].admins.end(), pInfo(p_)->tankIDName) == world_->blocks[(int)x / 32 + ((int)y / 32 * 100)].admins.end()) {
			}
			else if (items[world_->blocks[(int)x / 32 + ((int)y / 32 * 100)].fg].blockType == BlockTypes::VIP_ENTRANCE and Vip_Bfg(block_, pInfo(p_)->tankIDName)) {
			}
			else if (items[world_->blocks[(int)x / 32 + ((int)y / 32 * 100)].fg].blockType == BlockTypes::GATEWAY and is_false_state(world_->blocks[(int)x / 32 + ((int)y / 32 * 100)], 0x00800000) and world_->owner_name != pInfo(p_)->tankIDName and not public_world and not world_->owner_name.empty() and !guild_access(p_, world_->guild_id) and find(world_->admins.begin(), world_->admins.end(), pInfo(p_)->tankIDName) == world_->admins.end()) {
			}
			else if (items[world_->blocks[(int)x / 32 + ((int)y / 32 * 100)].fg].toggleable and is_false_state(world_->blocks[(int)x / 32 + ((int)y / 32 * 100)], 0x00400000)) {
			}
			else {
				new_tiles.push_back((int)x / 32 + ((int)y / 32 * 100));
			}
		}
		int ySize = world_->blocks.size() / 100, xSize = world_->blocks.size() / ySize;
		if (world_->blocks.size() - 1 < xSize + ySize * 100) return false;
		for (int i2 = 0; i2 < new_tiles.size(); i2++) {
			int x_ = new_tiles[i2] % 100, y_ = new_tiles[i2] / 100;
			WorldBlock* block_1 = &world_->blocks[x_ + (y_ * 100)];
			if (&world_->blocks[x_ + (y_ * 100)] == target_ and items[shadow_copy[x_ + (y_ * 100)].fg].collisionType != 1) {
				return false;
			}
			if (x_ < 99 and items[shadow_copy[x_ + 1 + (y_ * 100)].fg].collisionType != 1 or x_ < 99 and items[shadow_copy[x_ + 1 + (y_ * 100)].fg].blockType == BlockTypes::GATEWAY or x_ < 99 and items[shadow_copy[x_ + 1 + (y_ * 100)].fg].toggleable) {
				if (items[shadow_copy[x_ + 1 + (y_ * 100)].fg].blockType == BlockTypes::VIP_ENTRANCE and not shadow_copy[x_ + 1 + (y_ * 100)].limit_admins and world_->owner_name != pInfo(p_)->tankIDName and not world_->owner_name.empty() and find(shadow_copy[x_ + 1 + (y_ * 100)].admins.begin(), shadow_copy[x_ + 1 + (y_ * 100)].admins.end(), pInfo(p_)->tankIDName) == shadow_copy[x_ + 1 + (y_ * 100)].admins.end()) {
				}
				else if (items[shadow_copy[x_ + 1 + (y_ * 100)].fg].blockType == BlockTypes::VIP_ENTRANCE and Vip_Bfg(block_1, pInfo(p_)->tankIDName)) {
				}
				else if (items[shadow_copy[x_ + 1 + (y_ * 100)].fg].blockType == BlockTypes::GATEWAY and is_false_state(shadow_copy[x_ + 1 + (y_ * 100)], 0x00800000) and world_->owner_name != pInfo(p_)->tankIDName and not public_world and not world_->owner_name.empty() and !guild_access(p_, world_->guild_id) and find(world_->admins.begin(), world_->admins.end(), pInfo(p_)->tankIDName) == world_->admins.end()) {
				}
				else if (items[shadow_copy[x_ + 1 + (y_ * 100)].fg].toggleable and is_false_state(shadow_copy[x_ + 1 + (y_ * 100)], 0x00400000)) {
				}
				else {
					if (not shadow_copy[x_ + 1 + (y_ * 100)].scanned) {
						shadow_copy[x_ + 1 + (y_ * 100)].scanned = true;
						new_tiles.push_back(x_ + 1 + (y_ * 100));
					}
				}
			}
			WorldBlock* block_2 = &world_->blocks[x_ - 1 + (y_ * 100)];
			if (x_ > 0 and items[shadow_copy[x_ - 1 + (y_ * 100)].fg].collisionType != 1 or x_ > 0 and items[shadow_copy[x_ - 1 + (y_ * 100)].fg].blockType == BlockTypes::GATEWAY or x_ > 0 and items[shadow_copy[x_ - 1 + (y_ * 100)].fg].toggleable) {
				if (items[shadow_copy[x_ - 1 + (y_ * 100)].fg].blockType == BlockTypes::VIP_ENTRANCE and not shadow_copy[x_ - 1 + (y_ * 100)].limit_admins and world_->owner_name != pInfo(p_)->tankIDName and not world_->owner_name.empty() and find(shadow_copy[x_ - 1 + (y_ * 100)].admins.begin(), shadow_copy[x_ - 1 + (y_ * 100)].admins.end(), pInfo(p_)->tankIDName) == shadow_copy[x_ - 1 + (y_ * 100)].admins.end()) {
				}
				else if (items[shadow_copy[x_ - 1 + (y_ * 100)].fg].blockType == BlockTypes::VIP_ENTRANCE and Vip_Bfg(block_2, pInfo(p_)->tankIDName)) {
				}
				else if (items[shadow_copy[x_ - 1 + (y_ * 100)].fg].blockType == BlockTypes::GATEWAY and is_false_state(shadow_copy[x_ - 1 + (y_ * 100)], 0x00800000) and world_->owner_name != pInfo(p_)->tankIDName and not public_world and not world_->owner_name.empty() and !guild_access(p_, world_->guild_id) and find(world_->admins.begin(), world_->admins.end(), pInfo(p_)->tankIDName) == world_->admins.end()) {
				}
				else if (items[shadow_copy[x_ - 1 + (y_ * 100)].fg].toggleable and is_false_state(shadow_copy[x_ - 1 + (y_ * 100)], 0x00400000)) {
				}
				else {
					if (not shadow_copy[x_ - 1 + (y_ * 100)].scanned) {
						shadow_copy[x_ - 1 + (y_ * 100)].scanned = true;
						new_tiles.push_back(x_ - 1 + (y_ * 100));
					}
				}
			}
			WorldBlock* block_3 = &world_->blocks[x_ + ((y_ + 1) * 100)];
			if (y_ < 59 and items[shadow_copy[x_ + ((y_ + 1) * 100)].fg].collisionType != 1 or y_ < 59 and items[shadow_copy[x_ + ((y_ + 1) * 100)].fg].blockType == BlockTypes::GATEWAY or y_ < 59 and items[shadow_copy[x_ + ((y_ + 1) * 100)].fg].toggleable) {
				if (items[shadow_copy[x_ + ((y_ + 1) * 100)].fg].blockType == BlockTypes::VIP_ENTRANCE and not shadow_copy[x_ + ((y_ + 1) * 100)].limit_admins and world_->owner_name != pInfo(p_)->tankIDName and not world_->owner_name.empty() and find(shadow_copy[x_ + ((y_ + 1) * 100)].admins.begin(), shadow_copy[x_ + ((y_ + 1) * 100)].admins.end(), pInfo(p_)->tankIDName) == shadow_copy[x_ + ((y_ + 1) * 100)].admins.end()) {
				}
				else if (items[shadow_copy[x_ + ((y_ + 1) * 100)].fg].blockType == BlockTypes::VIP_ENTRANCE and Vip_Bfg(block_3, pInfo(p_)->tankIDName)) {
				}
				else if (items[shadow_copy[x_ + ((y_ + 1) * 100)].fg].blockType == BlockTypes::GATEWAY and is_false_state(shadow_copy[x_ + ((y_ + 1) * 100)], 0x00800000) and world_->owner_name != pInfo(p_)->tankIDName and not public_world and not world_->owner_name.empty() and !guild_access(p_, world_->guild_id) and find(world_->admins.begin(), world_->admins.end(), pInfo(p_)->tankIDName) == world_->admins.end()) {
				}
				else if (items[shadow_copy[x_ + ((y_ + 1) * 100)].fg].toggleable and is_false_state(shadow_copy[x_ + ((y_ + 1) * 100)], 0x00400000)) {
				}
				else {
					if (not shadow_copy[x_ + ((y_ + 1) * 100)].scanned) {
						shadow_copy[x_ + ((y_ + 1) * 100)].scanned = true;
						new_tiles.push_back(x_ + ((y_ + 1) * 100));
					}
				}
			}
			WorldBlock* block_4 = &world_->blocks[x_ + ((y_ - 1) * 100)];
			if (y_ > 0 and items[shadow_copy[x_ + ((y_ - 1) * 100)].fg].collisionType != 1 or y_ > 0 and items[shadow_copy[x_ + 1 + ((y_ - 1) * 100)].fg].blockType == BlockTypes::GATEWAY or y_ > 0 and items[shadow_copy[x_ + 1 + ((y_ - 1) * 100)].fg].toggleable) {
				if (items[shadow_copy[x_ + ((y_ - 1) * 100)].fg].blockType == BlockTypes::VIP_ENTRANCE and not shadow_copy[x_ + ((y_ - 1) * 100)].limit_admins and world_->owner_name != pInfo(p_)->tankIDName and not world_->owner_name.empty() and find(shadow_copy[x_ + ((y_ - 1) * 100)].admins.begin(), shadow_copy[x_ + ((y_ - 1) * 100)].admins.end(), pInfo(p_)->tankIDName) == shadow_copy[x_ + ((y_ - 1) * 100)].admins.end()) {
				}
				else if (items[shadow_copy[x_ + ((y_ - 1) * 100)].fg].blockType == BlockTypes::VIP_ENTRANCE and Vip_Bfg(block_4, pInfo(p_)->tankIDName)) {
				}
				else if (items[shadow_copy[x_ + ((y_ - 1) * 100)].fg].blockType == BlockTypes::GATEWAY and is_false_state(shadow_copy[x_ + ((y_ - 1) * 100)], 0x00800000) and world_->owner_name != pInfo(p_)->tankIDName and not public_world and not world_->owner_name.empty() and !guild_access(p_, world_->guild_id) and find(world_->admins.begin(), world_->admins.end(), pInfo(p_)->tankIDName) == world_->admins.end()) {
				}
				else if (items[shadow_copy[x_ + ((y_ - 1) * 100)].fg].toggleable and is_false_state(shadow_copy[x_ + ((y_ - 1) * 100)], 0x00400000)) {
				}
				else {
					if (not shadow_copy[x_ + ((y_ - 1) * 100)].scanned) {
						shadow_copy[x_ + ((y_ - 1) * 100)].scanned = true;
						new_tiles.push_back(x_ + ((y_ - 1) * 100));
					}
				}
			}
		}
		return true;
	}
	catch (...) {
		return false;
	}
}
struct Cell {
	int x, y;
	int f, g, h;
	Cell* parent;
};
struct Compare {
	bool operator()(Cell* a, Cell* b) {
		return a->f > b->f;
	}
};
int heuristic(int startRow, int startCol, int endRow, int endCol) {
	return abs(endRow - startRow) + abs(endCol - startCol);
}
bool canWalk(int x, int y, ENetPeer* peer) {
	if (x < 0 || x > 100 || y < 0 || y > 60) {
		return false;
	}
	std::string name_ = pInfo(peer)->world;
	std::vector<World>::iterator p = find_if(worlds.begin(), worlds.end(), [name_](const World& a) { return a.name == name_; });
	if (p != worlds.end()) {
		World* world_ = &worlds[p - worlds.begin()];
		WorldBlock* block_ = &world_->blocks[(int)x + ((int)y * 100)];
		bool public_world = world_->world_settings & SETTINGS::SETTINGS_4;
		if (items[world_->blocks[x + (y * 100)].fg].blockType == BlockTypes::VIP_ENTRANCE or items[world_->blocks[x + (y * 100)].fg].collisionType != 1 or items[world_->blocks[x + (y * 100)].fg].toggleable or items[world_->blocks[x + (y * 100)].fg].blockType == BlockTypes::VIP_ENTRANCE) {
			if (items[world_->blocks[(int)x + ((int)y * 100)].fg].blockType == BlockTypes::VIP_ENTRANCE and ~world_->blocks[(int)x + ((int)y * 100)].flags & 0x00800000 and (world_->owner_name != pInfo(peer)->tankIDName and (not public_world) and (not world_->owner_name.empty()) and (!guild_access(peer, world_->guild_id) and find(world_->admins.begin(), world_->admins.end(), pInfo(peer)->tankIDName) == world_->admins.end())) and Vip_Bfg(block_, pInfo(peer)->tankIDName)) {
				return false;
			}
			else if (items[world_->blocks[(int)x + ((int)y * 100)].fg].toggleable and ~world_->blocks[(int)x + ((int)y * 100)].flags & 0x00400000) {
				return false;
			}
			return true;
		}
	}
	return false;
}
void apply_dye(ENetPeer* peer, World* world_, WorldBlock* block_, int p_, int x_, int y_, uint32_t color, int r, int g, int b, bool shampoo) {
	if (x_ != pInfo(peer)->x / 32 or y_ != pInfo(peer)->y / 32) {
		VarList::OnTalkBubble(peer, pInfo(peer)->netID, "(Must be used on yourself)", 0, 1);
		return;
	}
	string based_on = (p_ == 3822 || p_ == 3824 || p_ == 3826 || p_ == 3828 || p_ == 3830 ? "hair" : (p_ == 5458 || p_ == 5460 || p_ == 5462 || p_ == 5464 || p_ == 5466 ? "drops" : "lenses"));
	if (based_on == "lenses" && shampoo == false) {
		if (pInfo(peer)->eye_lenses == 0xFFFFFFFF) r *= 9, g *= 9, b *= 9;
	}
	if (((block_->fg != 230 && block_->fg != 6158) && based_on == "hair") or ((block_->fg != 5468 && block_->fg != 7740) && based_on == "drops") or ((block_->fg != 5468 && block_->fg != 7740) && based_on == "lenses")) {
		gamepacket_t p;
		p.Insert("OnTalkBubble");
		p.Insert(pInfo(peer)->netID);
		if (based_on == "hair") VarList::OnTalkBubble(peer, pInfo(peer)->netID, "You'll make a huge mess if you do that outside the Bathtub!", 0, 1);
		else VarList::OnTalkBubble(peer, pInfo(peer)->netID, "You'd better do that in front of a bathroom mirror or you'll poke your eye out!", 0, 1);
		return;
	}
	if ((based_on == "hair" && pInfo(peer)->hair_color == color) or (based_on == "drops" && pInfo(peer)->eye_drop == color) or (based_on == "lenses" && pInfo(peer)->eye_lenses == color)) {
		if (based_on == "hair") {
			if (shampoo) VarList::OnTalkBubble(peer, pInfo(peer)->netID, "Your hair is already clean!", 0, 1);
			else VarList::OnTalkBubble(peer, pInfo(peer)->netID, "Your hair is already that color!", 0, 1);
		}
		else if (based_on == "drops") {
			if (shampoo) VarList::OnTalkBubble(peer, pInfo(peer)->netID, "Your eyes are already clean!", 0, 1);
			else VarList::OnTalkBubble(peer, pInfo(peer)->netID, "Your eyes are already that color!", 0, 1);
		}
		else if (based_on == "lenses") {
			if (shampoo) VarList::OnTalkBubble(peer, pInfo(peer)->netID, "Your lenses are already clean!", 0, 1);
			else VarList::OnTalkBubble(peer, pInfo(peer)->netID, "Your pupils are already that color!", 0, 1);
		}
		return;
	}
	uint8_t* cancer = (uint8_t*)(&(based_on == "hair" ? pInfo(peer)->hair_color : (based_on == "drops" ? pInfo(peer)->eye_drop : pInfo(peer)->eye_lenses)));
	cancer[1] = std::clamp(cancer[1] + r, 0, 255);
	cancer[2] = std::clamp(cancer[2] + g, 0, 255);
	cancer[3] = std::clamp(cancer[3] + b, 0, 255);
	if (rand() % 100 < (items[p_].newdropchance + 5)) {
		WorldDrop drop_seed_{};
		drop_seed_.id = p_ + 1, drop_seed_.count = 1,drop_seed_.x = (x_ * 32) + rand() % 17, drop_seed_.y = (y_ * 32) + rand() % 17;
		if (not use_mag(world_, drop_seed_, x_, y_)) VisualHandle::Drop(world_, drop_seed_);
	}
	else if (rand() % 10 < 4) {
		gems_(peer, world_, rand() % (items[p_].max_gems + 1), x_ * 32, y_ * 32, p_);
	}
	gamepacket_t p;
	p.Insert("OnTalkBubble");
	p.Insert(pInfo(peer)->netID);
	if (based_on == "hair") {
		if (shampoo) {
			if (rand() % 250 < 1) {
				WorldDrop drop_seed_{};
				drop_seed_.id = 12510, drop_seed_.count = 1,  drop_seed_.x = (x_ * 32) + rand() % 17, drop_seed_.y = (y_ * 32) + rand() % 17;
				if (not use_mag(world_, drop_seed_, x_, y_)) VisualHandle::Drop(world_, drop_seed_);
			}
			p.Insert("Your hair got cleaner!");
		}
		else p.Insert("You dyed your hair!");
	}
	else if (based_on == "drops") {
		if (shampoo) p.Insert("Your eyes got cleaner!");
		else p.Insert("You used eye drops!");
	}
	else {
		if (shampoo) p.Insert("Your lenses got cleaner!");
		else p.Insert("You put in some contact lenses!");
	}
	if (based_on == "hair") {
		gamepacket_t p2(0, pInfo(peer)->netID);
		p2.Insert("OnAction");
		p2.Insert("/shower");
		p.Insert(0), p.Insert(0);
		p.CreatePacket(peer);
		for (ENetPeer* cp_ = server->peers; cp_ < &server->peers[server->peerCount]; ++cp_) {
			if (cp_->state != ENET_PEER_STATE_CONNECTED or cp_->data == NULL) continue;
			if (pInfo(cp_)->world == pInfo(peer)->world) p2.CreatePacket(cp_);
		}
	}
	int got = 0;
	Inventory::Modify(peer, p_, got = -1);
	Clothing_V2::Update(peer, true);
}
string get_balloon_type(int balloon) {
	if (balloon >= 250000) return "\nadd_textbox|`8Melt Down Imminent!``|left|\n";
	else if (balloon >= 120000) return "\nadd_textbox|`6Overheating! High chance of Melt Down!``|left|\n";
	else if (balloon >= 65600) return "\nadd_textbox|`9Overheating!``|left|\n";
	else return "\n";
}
void apply_tile_visual(World* world_, WorldBlock* block_, int x, int y, int add_state, bool remove = false) {
	if (x < 0 || x >= world_->max_x || y < 0 || y >= world_->max_y) return;
	bool block = false;
	if (remove) {
		if (block_->flags & add_state) {
			if (add_state == 0x10000000) world_->total_fires -= 1, block_->applied_fire = false;
			block_->flags ^= add_state;
		}
	}
	else {
		if (block_->flags & add_state) {
		}
		else {
			if (add_state == 0x04000000 && block_->flags & 0x10000000) block_->flags ^= 0x10000000, world_->total_fires -= 1, block_->applied_fire = false;
			if (add_state == 0x10000000) {
				if (block_->flags & 0x04000000) block_->flags ^= 0x04000000;
				if (world_->total_fires >= 150 || block_->fg == 0 || block_->fg == 6 || block_->fg == 12258 || block_->flags & 0x10000000 || block_->fg == 6 || block_->fg == 8) block = true;
				else world_->total_fires++, block_->applied_fire = false;
			}
			if (block == false) block_->flags |= add_state;
		}
	}
	if (block == false) {
		PlayerMoving data_{};
		data_.packetType = 5, data_.punchX = x, data_.punchY = y, data_.characterState = 0x8;
		int alloc = alloc_(world_, block_);
		BYTE* raw = packPlayerMoving(&data_, 112 + alloc);
		BYTE* blc = raw + 56;
		form_visual(blc, *block_, *world_, NULL, false);
		for (ENetPeer* cp_ = server->peers; cp_ < &server->peers[server->peerCount]; ++cp_) {
			if (cp_->state != ENET_PEER_STATE_CONNECTED or cp_->data == NULL) continue;
			if (pInfo(cp_)->world == world_->name) {
				send_raw(cp_, 4, raw, 112 + alloc, ENET_PACKET_FLAG_RELIABLE);
			}
		}
		delete[] raw, blc;
		if (block_->locked) upd_lock(*block_, *world_, NULL);
	}
}
void drop_valentine_box(ENetPeer* peer, World* world_, WorldBlock* block_, int x_, int y_, bool extra_chance = false, int add_ = 1) {
	WorldDrop drop_block_{};
	if (block_->fg == 3402 || block_->fg == 10656) {
		if (Event()->Valentine) {
			if (add_ > 0) {
				pInfo(peer)->booty_broken += add_;
			}
		}
	}
	vector<int> list{ 13122,13146,13150,13152,13144,13132,13130, 11702, 11696,11692,11690,11688,11686,11684,11682,11680,11678, 11694, 5652, 3398, 386, 4422, 364, 9342, 9340, 9334, 9332, 9336, 9338, 4400, 7808, 7810, 4416, 7818, 7820, 7822, 7824, 5644, 390, 7826, 7830, 9324, 5658, 3396, 2384, 5660, 10654, 3400, 4418, 388, 3408, 1470, 3404, 3406, 10662, 2390, 5656, 5648, 2396, 384, 5664, 4424, 366 };
	if (block_->fg != 9976) {
		if (block_->fg == 9350)  list.insert(list.end(), { 13124,13116,13126,13128,13114,1458 });
		if ((block_->fg == 9350 || extra_chance || pInfo(peer)->valentine ? rand() % 350 : (Playmods::HasById(pInfo(peer), 9) || pInfo(peer)->hand == 9874 ? rand() % 450 : rand() % 800)) < 1) list = { 13120, 13142, 13154, 11668, 11670, 11672, 11664, 362, 362, 362,362,362, 2388, 10652, 4412, 10632, 10626, 13140, 1458 };
		if ((block_->fg == 9350 ? rand() % 5000 : (Playmods::HasById(pInfo(peer), 9) || pInfo(peer)->hand == 9874 ? rand() % 4500 : rand() % 5000)) < 1) list = { 11702,362 };
		if (add_ == 0 && extra_chance && rand() % 1400 < 1)  list = { 1458, 11672, 13140, 362 };
	}
	int item = list[rand() % list.size()];
	if (extra_chance && item != 1458 && add_ == 0) item = 10660;
	if (item == 1458) {
		string texts = "`4The Power of Love! `2" + get_player_nick(peer) + "`o found a `5Golden Heart Crystal `oin a `5" + items[block_->fg].name + "`o!";
		gamepacket_t p;
		p.Insert("OnConsoleMessage"), p.Insert("CP:_PL:0_OID:_CT:[S]_ `o**`` " + texts + "``");
		for (ENetPeer* cp_ = server->peers; cp_ < &server->peers[server->peerCount]; ++cp_) {
			if (cp_->state != ENET_PEER_STATE_CONNECTED or cp_->data == NULL) continue;
			if (pInfo(cp_)->world == pInfo(peer)->world) {
				p.CreatePacket(cp_);
			}
		}
	}
	drop_block_.id = item, drop_block_.count = (item == 11694 || item == 11696 || item == 7810 || item == 7808 || item == 4400 || item == 390 || item == 3408 || item == 4422 || item == 3404 ? 5 : (item == 4418 || item == 5660 ? 2 : 1)), drop_block_.x = (x_ * 32) + rand() % 17, drop_block_.y = (y_ * 32) + rand() % 17;
	VisualHandle::Drop(world_, drop_block_);
}
void remove_lock_broken(World* world_, WorldBlock* block_, int x_, int y_) {
	block_->admins.clear();
	block_->owner_name = "";
	for (ENetPeer* cp_ = server->peers; cp_ < &server->peers[server->peerCount]; ++cp_) {
		if (cp_->state != ENET_PEER_STATE_CONNECTED or cp_->data == NULL) continue;
		if (pInfo(cp_)->world == world_->name) pInfo(cp_)->access_offers.clear();
	}
	std::vector<int> new_tiles{};
	std::vector<WorldBlock> shadow_copy_2 = world_->blocks;
	new_tiles.push_back(x_ + (y_ * 100));
	int ySize = world_->blocks.size() / 100, xSize = world_->blocks.size() / ySize;
	for (int i2 = 0; i2 < new_tiles.size(); i2++) {
		int s_x_ = new_tiles[i2] % 100, s_y_ = new_tiles[i2] / 100;
		if (s_x_ < (world_->max_x -1 ) and shadow_copy_2[s_x_ + 1 + (s_y_ * 100)].locked and shadow_copy_2[s_x_ + 1 + (s_y_ * 100)].lock_origin == (x_ + (y_ * 100))) {
			if (not shadow_copy_2[s_x_ + 1 + (s_y_ * 100)].scanned) {
				shadow_copy_2[s_x_ + 1 + (s_y_ * 100)].scanned = true;
				new_tiles.push_back(s_x_ + 1 + (s_y_ * 100));
				world_->blocks[s_x_ + 1 + (s_y_ * 100)].locked = false;
				world_->blocks[s_x_ + 1 + (s_y_ * 100)].lock_origin = -1;
			}
		} if (s_x_ > 0 and shadow_copy_2[s_x_ - 1 + (s_y_ * 100)].locked and shadow_copy_2[s_x_ - 1 + (s_y_ * 100)].lock_origin == (x_ + (y_ * 100))) {
			if (not shadow_copy_2[s_x_ - 1 + (s_y_ * 100)].scanned) {
				shadow_copy_2[s_x_ - 1 + (s_y_ * 100)].scanned = true;
				new_tiles.push_back(s_x_ - 1 + (s_y_ * 100));
				world_->blocks[s_x_ - 1 + (s_y_ * 100)].locked = false;
				world_->blocks[s_x_ - 1 + (s_y_ * 100)].lock_origin = -1;
			}
		} if (s_y_ < (world_->max_y -1 ) and shadow_copy_2[s_x_ + ((s_y_ + 1) * 100)].locked and shadow_copy_2[s_x_ + ((s_y_ + 1) * 100)].lock_origin == (x_ + (y_ * 100))) {
			if (not shadow_copy_2[s_x_ + ((s_y_ + 1) * 100)].scanned) {
				shadow_copy_2[s_x_ + ((s_y_ + 1) * 100)].scanned = true;
				new_tiles.push_back(s_x_ + ((s_y_ + 1) * 100));
				world_->blocks[s_x_ + ((s_y_ + 1) * 100)].locked = false;
				world_->blocks[s_x_ + ((s_y_ + 1) * 100)].lock_origin = -1;
			}
		} if (s_y_ > 0 and shadow_copy_2[s_x_ + ((s_y_ - 1) * 100)].locked and shadow_copy_2[s_x_ + ((s_y_ - 1) * 100)].lock_origin == (x_ + (y_ * 100))) {
			if (not shadow_copy_2[s_x_ + ((s_y_ - 1) * 100)].scanned) {
				shadow_copy_2[s_x_ + ((s_y_ - 1) * 100)].scanned = true;
				new_tiles.push_back(s_x_ + ((s_y_ - 1) * 100));
				world_->blocks[s_x_ + ((s_y_ - 1) * 100)].locked = false;
				world_->blocks[s_x_ + ((s_y_ - 1) * 100)].lock_origin = -1;
			}
		}
	}
}
bool edit_tile(ENetPeer* peer, int x_, int y_, int p_, bool mag_place = false, bool place_punch = false, int have = 0) {
 	if (x_ < 0 or y_ < 0 or p_ < 0 or p_ >= items.size() || items[p_].blocked_place) return false;
	std::string name_ = pInfo(peer)->world;
	std::vector<World>::iterator p = find_if(worlds.begin(), worlds.end(), [name_](const World& a) { return a.name == name_; });
	if (p != worlds.end()) {
		World* world_ = &worlds[p - worlds.begin()];
		if (x_ >= world_->max_x || y_ >= world_->max_y) return false;
		if (pInfo(peer)->lastwrenchx != x_ || pInfo(peer)->lastwrenchy != y_) pInfo(peer)->random_fossil = rand() % 3 + 4;
		pInfo(peer)->lastwrenchx = x_, pInfo(peer)->lastwrenchy = y_;
		bool iscontainsss = false;
		world_->fresh_world = true;
		WorldBlock* block_ = &world_->blocks[x_ + (y_ * 100)];
		uint16_t t_ = (block_->fg ? block_->fg : block_->bg);
		bool magplant_access = false;
		string owner_name = world_->owner_name;
		if (world_->owner_named.substr(0, 2) == "`o") owner_name = "`w" + world_->owner_name;
		if (not world_->owner_named.empty()) owner_name = world_->owner_named;
		if (t_ == 6950 || t_ == 6952 || t_ == 5638 || t_ == 5930 || t_ == 9850 || t_ == 6948 || t_ == 6946 || t_ == 6954 || t_ == 9844) {
			if (to_lower(world_->owner_name) == to_lower(pInfo(peer)->tankIDName)) magplant_access = true;
			if (items[t_].blockType == BlockTypes::AUTO_BLOCK or items[t_].blockType == BlockTypes::SUCKER or t_ == 6954) {
				if (world_->world_settings & SETTINGS::SETTINGS_10) {
					if (find(world_->admins.begin(), world_->admins.end(), to_lower(pInfo(peer)->tankIDName)) != world_->admins.end()) magplant_access = true;
				}
			}
		}
		if (pInfo(peer)->cheater_settings & SETTINGS::SETTINGS_0 && pInfo(peer)->last_used_block != 0 && items[p_].blockType != BlockTypes::CONSUMABLE) {
			if (pInfo(peer)->disable_cheater) autofarm_status(peer);
			if (place_punch) p_ = 18;
			if (pInfo(peer)->autofarm_x != -1 && pInfo(peer)->autofarm_y != 0) {
				if (mag_place == false) {
					if ((p_ != 0 && p_ != pInfo(peer)->last_used_block) or (p_ == 0 && p_ != pInfo(peer)->last_used_block)) {
						autofarm_status(peer);
						return false;
					}
				}
				if (pInfo(peer)->last_used_block != 32 && pInfo(peer)->last_used_block != 18 && t_ != 0) p_ = 18;
			}
			else {
				gamepacket_t p;
				p.Insert("OnParticleEffect"), p.Insert(88), p.Insert((float)x_ * 32 + 16, (float)y_ * 32 + 16), p.CreatePacket(peer);
			}
			if (pInfo(peer)->autofarm_x == -1) {
				pInfo(peer)->autofarm = true;
				if (pInfo(peer)->last_used_block != 0) VarList::OnConsoleMessage(peer, "`oCheat Enabled: Autofarm (`$Cheat Active: Autofarm (cool) -> " + items[pInfo(peer)->last_used_block].ori_name + " ``mod added)");
				pInfo(peer)->autofarm_x = x_, pInfo(peer)->autofarm_y = y_;
				if (pInfo(peer)->state == 16)  pInfo(peer)->backwards = true;
				else pInfo(peer)->backwards = false;
			}
		}
		else if (place_punch) return false;
		switch (p_) {
		case 18: {
			if (pInfo(peer)->hand == 3066 || pInfo(peer)->hand == 6086) {
				if (block_->flags & 0x10000000 && pInfo(peer)->hand == 3066) {
					pInfo(peer)->fires++;
					if (pInfo(peer)->fires >= 100) {
						pInfo(peer)->fires = 0;
						VarList::OnTalkBubble(peer, pInfo(peer)->netID, "I'm so good at fighting fires, I rescued this `2Highly Combustible Box``!", 0, 1);
						PlayerMoving data_{};
						data_.x = pInfo(peer)->lastwrenchx * 32 + 16, data_.y = pInfo(peer)->lastwrenchy * 32 + 16;
						data_.packetType = 19, data_.plantingTree = 500;
						data_.punchX = 3090, data_.punchY = pInfo(peer)->netID;
						int32_t to_netid = pInfo(peer)->netID;
						BYTE* raw = packPlayerMoving(&data_);
						raw[3] = 5;
						Memory_Copy(raw + 8, &to_netid, 4);
						for (ENetPeer* cp_ = server->peers; cp_ < &server->peers[server->peerCount]; ++cp_) {
							if (cp_->state != ENET_PEER_STATE_CONNECTED or cp_->data == NULL) continue;
							if (pInfo(cp_)->world == pInfo(peer)->world) send_raw(cp_, 4, raw, 56, ENET_PACKET_FLAG_RELIABLE);
						}
						delete[] raw;
						int give_ = 1;
						if (Inventory::Modify(peer, 3090, give_) == 0) {
						}
						else {
							WorldDrop drop_block_{};
							drop_block_.x = pInfo(peer)->x + rand() % 17, drop_block_.y = pInfo(peer)->y + rand() % 17, drop_block_.id = 3090, drop_block_.count = 1;
							VisualHandle::Drop(world_, drop_block_);
						}
					}
					apply_tile_visual(world_, block_, x_, y_, 0x10000000, true);
				}
				if (t_ != 0) {
					NothingHappened(peer, x_, y_);
					break;
				}
			}
			if (t_ == 0) break;
			if (items[t_].blockType == BlockTypes::PET_TRAINER) {
				VarList::OnDialogRequest(peer, SetColor(peer) + "set_default_color|`o\nadd_label_with_icon|big|`wLifeCake the Pet Trainer|left|3554|\nadd_spacer|small|\nadd_textbox|You think you're tought? Come Back here with a Battle Leash and my pets will eat your pet alive!|left|\nadd_button|Trade_In_Medal|I just wanna trade in medals|noflags|0|0|\nadd_button|HowdoPetBattleWork|How do Pet Battles work?|noflags|0|0|\nend_dialog|Pet_Trainer|Whatever||");
				if (not Role::Developer(peer)) return false;
			}
			if (items[t_].blockType == BlockTypes::CRIME_VILLAIN) {
				int crime_1 = Inventory::Contains(peer, 2292), crime_2 = Inventory::Contains(peer, 2294), crime_3 = Inventory::Contains(peer, 2296), crime_4 = Inventory::Contains(peer, 2298), crime_5 = Inventory::Contains(peer, 2300), crime2_1 = Inventory::Contains(peer, 2308), crime2_2 = Inventory::Contains(peer, 2310), crime2_3 = Inventory::Contains(peer, 2312), crime2_4 = Inventory::Contains(peer, 2314), crime2_5 = Inventory::Contains(peer, 2316), crime3_1 = Inventory::Contains(peer, 2320), crime3_2 = Inventory::Contains(peer, 2322), crime3_3 = Inventory::Contains(peer, 2324), crime3_4 = Inventory::Contains(peer, 2326), crime3_5 = Inventory::Contains(peer, 2328), crime4_1 = Inventory::Contains(peer, 2332), crime4_2 = Inventory::Contains(peer, 2334), crime4_3 = Inventory::Contains(peer, 2336), crime4_4 = Inventory::Contains(peer, 2338), crime4_5 = Inventory::Contains(peer, 2340);
				VarList::OnDialogRequest(peer, SetColor(peer) + "set_default_color|`o\nadd_label_with_icon|big|`wCrime in Progress|left|" + to_string(block_->id) + "|\nadd_textbox|" + block_->txt + " ``" + block_->heart_monitor + "|left|\nadd_smalltext|Threat level: " + Get_Crime_Level(block_->id) + "|left|\nadd_textbox|Select 5 Superpowers you will use to defeat this villain!<CR>Whether you win or lose, you will lose all 5 cards.|left|\nembed_data|tilex|" + to_string(x_) + "\nembed_data|tiley|" + to_string(y_) + "\nmax_checks|5|\ntext_scaling_string|`wDirttttttttttttttttttttttttttttttttt|"
					+ (crime_1 > 0 ? "\nadd_checkicon|HeatVision|Heat Vision|noflags|2292|" + to_string(crime_1) + "|0|" : "") +
					a + (crime_2 > 0 ? "\nadd_checkicon|Incinerate|Incinerate|noflags|2294|" + to_string(crime_2) + "|0|" : "") +
					a + (crime_3 > 0 ? "\nadd_checkicon|FlameOn|Flame On!|noflags|2296|" + to_string(crime_3) + "|0|" : "") +
					a + (crime_4 > 0 ? "\nadd_checkicon|Liquify|Liquify|noflags|2298|" + to_string(crime_4) + "|0|" : "") +
					a + (crime_5 > 0 ? "\nadd_checkicon|Oveerheat|Oveerheat|noflags|2300|" + to_string(crime_5) + "|0|" : "") +

					a + (crime2_1 > 0 ? "\nadd_checkicon|IceShards|Ice Shards|noflags|2308|" + to_string(crime2_1) + "|0|" : "") +
					a + (crime2_2 > 0 ? "\nadd_checkicon|FrostBreath|Frost Breath|noflags|2310|" + to_string(crime2_2) + "|0|" : "") +
					a + (crime2_3 > 0 ? "\nadd_checkicon|IceBarrier|Ice Barrier|noflags|2312|" + to_string(crime2_3) + "|0|" : "") +
					a + (crime2_4 > 0 ? "\nadd_checkicon|Puddle|Puddle|noflags|2314|" + to_string(crime2_4) + "|0|" : "") +
					a + (crime2_5 > 0 ? "\nadd_checkicon|FrozenMirror|Frozen Mirror|noflags|2316|" + to_string(crime2_5) + "|0|" : "") +

					a + (crime3_1 > 0 ? "\nadd_checkicon|SuperStrength|Super Strength|noflags|2320|" + to_string(crime3_1) + "|0|" : "") +
					a + (crime3_2 > 0 ? "\nadd_checkicon|SuperSpeed|Super Speed|noflags|2322|" + to_string(crime3_2) + "|0|" : "") +
					a + (crime3_3 > 0 ? "\nadd_checkicon|Enrage|Enrage|noflags|2324|" + to_string(crime3_3) + "|0|" : "") +
					a + (crime3_4 > 0 ? "\nadd_checkicon|Crush|Crush|noflags|2326|" + to_string(crime3_4) + "|0|" : "") +
					a + (crime3_5 > 0 ? "\nadd_checkicon|Regeneration|Regeneration|noflags|2328|" + to_string(crime3_5) + "|0|" : "") +

					a + (crime4_1 > 0 ? "\nadd_checkicon|ShockingFist|Shocking Fist|noflags|2332|" + to_string(crime4_1) + "|0|" : "") +
					a + (crime4_2 > 0 ? "\nadd_checkicon|Thunderstorm|Thunderstorm|noflags|2334|" + to_string(crime4_2) + "|0|" : "") +
					a + (crime4_3 > 0 ? "\nadd_checkicon|Overcharge|Overcharge|noflags|2336|" + to_string(crime4_3) + "|0|" : "") +
					a + (crime4_4 > 0 ? "\nadd_checkicon|Megawatt Pulse|Megawatt Pulse|noflags|2338|" + to_string(crime4_4) + "|0|" : "") +
					a + (crime4_5 > 0 ? "\nadd_checkicon|Resuscitate|Resuscitate|noflags|2340|" + to_string(crime4_5) + "|0|" : "") +

					+(crime_1 == 0 and crime_2 == 0 and crime_3 == 0 and crime_4 == 0 and crime_5 == 0 and crime2_1 == 0 and crime2_2 == 0 and crime2_3 == 0 and crime2_4 == 0 and crime2_5 == 0 and crime3_1 == 0 and crime3_2 == 0 and crime3_3 == 0 and crime3_4 == 0 and crime3_5 == 0 and crime4_1 == 0 and crime4_2 == 0 and crime4_3 == 0 and crime4_4 == 0 and crime4_5 == 0 ? "\nadd_textbox|You don't have any cards to battle!|left|\nadd_button|Game_Rules|`8Game Rules|noflags|0|0|\nend_dialog|Crime_in_Progress|Run away!||" : "\nadd_button_with_icon||END_LIST|noflags|0||\nadd_button|Game_Rules|`8Game Rules|noflags|0|0|\nend_dialog|Crime_in_Progress|Run away!|Battle!|") + "");
				if (not Role::Developer(peer)) return false;
			}
			if (items[t_].blockType == BlockTypes::PHONE and not (t_ == 9170 || t_ == 9946)) {
				if (Only_Access(peer, world_, block_)) {
					if (abs(x_ * 32 - pInfo(peer)->x) > 15 || abs(y_ * 32 - pInfo(peer)->y) > 15) {
					}
					else {
						string ex = "";
						if (block_->phoneb.c_neck != 0 || block_->phoneb.c_hair != 0 || block_->phoneb.c_mask != 0 || block_->phoneb.c_hand != 0 || block_->phoneb.c_back != 0 || block_->phoneb.c_feet != 0 || block_->phoneb.c_head != 0 || block_->phoneb.c_shirt != 0 || block_->phoneb.c_pants != 0) {
							if (block_->phoneb.c_head != 0) ex += "[`2" + items[block_->phoneb.c_head].name + "`o] ";
							if (block_->phoneb.c_shirt != 0) ex += "[`2" + items[block_->phoneb.c_shirt].name + "`o] ";
							if (block_->phoneb.c_pants != 0) ex += "[`2" + items[block_->phoneb.c_pants].name + "`o] ";
							if (block_->phoneb.c_feet != 0) ex += "[`2" + items[block_->phoneb.c_feet].name + "`o] ";
							if (block_->phoneb.c_mask != 0) ex += "[`2" + items[block_->phoneb.c_mask].name + "`o] ";
							if (block_->phoneb.c_hand != 0) ex += "[`2" + items[block_->phoneb.c_hand].name + "`o] ";
							if (block_->phoneb.c_back != 0) ex += "[`2" + items[block_->phoneb.c_back].name + "`o] ";
							if (block_->phoneb.c_hair != 0) ex += "[`2" + items[block_->phoneb.c_hair].name + "`o] ";
							if (block_->phoneb.c_neck != 0) ex += "[`2" + items[block_->phoneb.c_neck].name + "`o] ";
							if (block_->phoneb.c_ances != 0) ex += "[`2" + items[block_->phoneb.c_ances].name + "`o] ";
							VarList::OnDialogRequest(peer, SetColor(peer) + "set_default_color|`o\nadd_label_with_icon|big|`wEdit " + items[t_].name + "``|left|" + to_string(t_) + "|\nadd_textbox|`oDo you want to `4take off `oall your clothes and put on: " + ex + "?|\nembed_data|tilex|" + to_string(x_) + "\nembed_data|tiley|" + to_string(y_) + "\nend_dialog|PhoneBooth_Punch|No|Yes|");
						}
						else VarList::OnDialogRequest(peer, SetColor(peer) + "set_default_color|`o\nadd_label_with_icon|big|`wEdit " + items[t_].name + "``|left|" + to_string(t_) + "|\nadd_textbox|`oDo you want to `4take off `oall your clothes and leave them inside this Phone Booth?|\nembed_data|tilex|" + to_string(x_) + "\nembed_data|tiley|" + to_string(y_) + "\nend_dialog|PhoneBooth_Punch|No|Yes|");
					}
				}
			}
			else if (t_ == 12826) {
				if (pInfo(peer)->world == "GROWGANOTH") {
					if (Event()->Halloween) {
						long long current_time = time(nullptr);
						if (block_->hp == -1 or (items[t_].dropChance) < (current_time - block_->lp)) {
							if (block_->flags & 0x00200000 and pInfo(peer)->state == 16) block_->flags = block_->flags ^ 0x00200000;
							else if (block_->flags ^ 0x00200000 and pInfo(peer)->state != 16) block_->flags |= 0x00200000;
							tile_update(peer, world_, block_, x_, y_);
							VarList::OnDialogRequest(peer, SetColor(peer) + "set_default_color|`o\nadd_label_with_icon|big|`wShady Salesman``|left|12826|\nadd_smalltext|Welcome Stranger! Complete your Trick or Treat Tasks to earn some sweet candy. You can get your tasks by scaring my good old pal Crazy Jim while wearing `5" + items[7112].name + "`` item today and doing his tasks. In case you forgot, dial 12345 on a phone to call him. In return for candy I can trade you these spooky boxes!|left|\nadd_spacer|small|\ntext_scaling_string|10,000BZ|\nadd_button_with_icon|halloween_store_item_open_purchase_0|20|noflags|12830||\nadd_button_with_icon|halloween_store_item_open_purchase_1|100|noflags|12832||\nadd_button_with_icon||END_LIST|noflags|0||\nend_dialog|halloween_tasks_popup_handle|OK|\nadd_quick_exit|");
						}
					}
					else VarList::OnTalkBubble(peer, pInfo(peer)->netID, "`9Growganoth is on a break! Check later..``", 0, 1);
				}
				else VarList::OnTalkBubble(peer, pInfo(peer)->netID, "I only deal with you in world GROWGANOTH", 0, 1);
			}
			else if (t_ == 4264) {
				if (pInfo(peer)->world == "GROWCH") {
					if (WinterFest.Active) {
						long long current_time = time(nullptr);
						if (block_->hp == -1 or (items[t_].dropChance) < (current_time - block_->lp)) {
							pInfo(peer)->lastwrenchb = t_;
							VarList::OnDialogRequest(peer, SetColor(peer) + "set_default_color|`o\nadd_label_with_icon|big|`wStuff-4-Toys Box``|left|4264|\nadd_textbox|Welcome to the `9Stuff-4-Toys Program``! You can drop off any unwanted items here (as long as they have rarity), and for every 250,000 rarity donated, our specially trained `2Present Goblins`` will give away a holiday toy to a needy Growtopian. 'Tis the season for giving!|left|\nadd_smalltext|To donate an item, select it in your inventory, then use it on the Stuff-4-Toys Box. Don't use the Drop button!|left|\nadd_spacer|small|\nadd_smalltext|Total rarity donated: " + Set_Count(world_->s4tb.second) + "|left|\nadd_smalltext|Total toys given away: " + Set_Count(world_->s4tb.first) + "|left|\nadd_spacer|small|\nadd_smalltext|" + (pInfo(peer)->Diamond_Donatur ? "You are a `1Diamond Level Donator``, with " + Set_Count(pInfo(peer)->s4tb) + " rarity donated!" : pInfo(peer)->Gold_Donatur ? "You are a `9Gold Level Donator``, with " + Set_Count(pInfo(peer)->s4tb) + " rarity donated!" : pInfo(peer)->Silver_Donatur ? "You are a Silver Level Donator, with " + Set_Count(pInfo(peer)->s4tb) + " rarity donated!" : pInfo(peer)->Bronze_Donatur ? "You are a `8Bronze Level Donator``, with " + Set_Count(pInfo(peer)->s4tb) + " rarity donated!" : "You personally donated " + Set_Count(pInfo(peer)->s4tb) + " rarity") + "|left|\nadd_quick_exit|\nend_dialog|s4tb|Exit||\n");
						}
					}
					else VarList::OnTalkBubble(peer, pInfo(peer)->netID, "`9Winterfest is on a break! Check later..``", 0, 1);
				}
				else VarList::OnTalkBubble(peer, pInfo(peer)->netID, "I only deal with you in world GROWCH", 0, 1);	
			}
			else if (t_ == 1900) {
				if (pInfo(peer)->world == "CARNIVAL") {
					if (Event()->Carnival) {
						long long current_time = time(nullptr);
						if (block_->hp == -1 or (items[t_].dropChance) < (current_time - block_->lp)) {
							if (block_->flags & 0x00200000 and pInfo(peer)->state == 16) block_->flags = block_->flags ^ 0x00200000;
							else if (block_->flags ^ 0x00200000 and pInfo(peer)->state != 16) block_->flags |= 0x00200000;
							tile_update(peer, world_, block_, x_, y_);
							pInfo(peer)->lastwrenchb = t_;
							if (pInfo(peer)->C_QuestActive) SendCarnivalQuest(peer, 0);
							else {
								if (pInfo(peer)->level < 20) VarList::OnDialogRequest(peer, SetColor(peer) + "set_default_color|`o\n\nadd_label_with_icon|big|`9The Ringmaster|left|1900|\nadd_smalltext|`oCome one, come all, to the most extraordinary show in Growtopia! I am the Ringmaster. That means I know a lor about Rings! For 10 Golden Tickets. I might tell you how you Can get a Ring of your own...|left|\nadd_spacer|small|\nadd_smalltext|`oOh wait, sorry... looks like you aren't yet legendary enought to earn a Ring. You must be at least level 20 higher to begin your journey!|left|\nend_dialog|godbye|Darn It!|");
								else {
									int ticket = 0;
									Inventory::Modify(peer, 1898, ticket);
									if (ticket < 10) VarList::OnDialogRequest(peer, SetColor(peer) + "set_default_color|`o\n\nadd_label_with_icon|big|`9The Ringmaster|left|1900|\nadd_smalltext|`oCome one, come all, to the most extraordinary show in Growtopia! I am the Ringmaster. That means I know a lor about Rings! For 10 Golden Tickets. I might tell you how you Can get a Ring of your own...|left|\nadd_spacer|small|\nadd_smalltext|`oOh wait, sorry... looks like you don't have 10 Golden Tickets! Come back and see me when you do!|left|\nadd_spacer|small|\nadd_smalltext|`oIf you had 10 rings of the same Type maybe we could have made a deal....|left|\nadd_spacer|small|\nend_dialog|carnival|Goodbye!||");
									else VarList::OnDialogRequest(peer, SetColor(peer) + "set_default_color|`o\n\nadd_label_with_icon|big|`9The Ringmaster|left|1900|\nadd_smalltext|`oCome one, come all, to the most extraordinary show in Growtopia! I am the Ringmaster. That means I know a lor about Rings! For 10 Golden Tickets. I might tell you how you Can get a Ring of your own...|left|\nadd_spacer|small|\nadd_button|c_quest|`9Give 10 Golden Tickets|0|0|\nadd_spacer|small|\nadd_smalltext|`oIf you had 10 rings of the same Type maybe we could have made a deal....|left|\nadd_spacer|small|\nend_dialog|carnival|Goodbye!||");
								}
							}
						}
					}
					else VarList::OnTalkBubble(peer, pInfo(peer)->netID, "`9Carnival is on a break! Check later..``", 0, 1);
				}
				else VarList::OnTalkBubble(peer, pInfo(peer)->netID, "I only deal with you in world CARNIVAL", 0, 1);
			}
			else if (t_ == 1790) {
				if (Only_Access(peer, world_, block_)) {
					long long current_time = time(nullptr);
					if (block_->hp == -1 or (items[t_].dropChance) < (current_time - block_->lp)) {
						if (block_->flags & 0x00200000 and pInfo(peer)->state == 16) block_->flags = block_->flags ^ 0x00200000;
						else if (block_->flags ^ 0x00200000 and pInfo(peer)->state != 16) block_->flags |= 0x00200000;
						tile_update(peer, world_, block_, x_, y_);
						lwiz_quest(peer, "open");
					}
				}
			}
			else if (items[t_].properties & Property_Mod) {
				if (t_ != 12826) {
					if (not Role::Moderator(peer) and to_lower(world_->owner_name) == to_lower(pInfo(peer)->tankIDName) or not Role::Moderator(peer) and find(world_->admins.begin(), world_->admins.end(), to_lower(pInfo(peer)->tankIDName)) != world_->admins.end() or not Role::Moderator(peer) and world_->owner_name.empty() or not Role::Moderator(peer) and world_->world_settings & SETTINGS::SETTINGS_4) {
						CAction::Positioned(peer, pInfo(peer)->netID, "audio/cant_place_tile.wav", 0);
						CAction::Effect_V2(peer, 368, (float)(x_ * 32) + 16, (float)(y_ * 32) + 16);
						VarList::OnTalkBubble(peer, pInfo(peer)->netID, items[t_].blockType == BlockTypes::MAIN_DOOR ? "(stand over and punch to use)" : "It's too strong to break.", 0, 0);
						break;
					}
				}
			}
			else if (t_ == 20210 or t_ == 20212 or t_ == 20214 or t_ == 20216 or t_ == 20218 or t_ == 20186 or t_ == 20188 or t_ == 20190 or items[t_].blockType == BlockTypes::BACKGROUND or t_ == 20142 or t_ == 20144 or t_ == 20146 or t_ == 20148 or t_ == 20194 or t_ == 20196 or t_ == 20198 or t_ == 20200 or t_ == 20202 or t_ == 20204 or t_ == 20206 or t_ == 20208 or t_ == 6 or t_ == 8) {
				if (pInfo(peer)->world.find("GROWMINES") != string::npos) {
					CAction::Positioned(peer, pInfo(peer)->netID, "audio/cant_place_tile.wav", 0);
					CAction::Effect_V2(peer, 368, (float)(x_ * 32) + 16, (float)(y_ * 32) + 16);
					break;
				}
			}
			else if (t_ == MINING::NAVAL_BOMB or t_ == MINING::MINE_CRYSTAL or t_ == MINING::GOLDEN_MINE_CHEST or t_ == MINING::LEGENDARY_MINE_CHEST or t_ == MINING::CELESTINE_ORE or t_ == MINING::TIN_ORE or t_ == MINING::COPPER_ORE or t_ == MINING::VANADIUM_ORE or t_ == MINING::TITANIUM_ORE or t_ == MINING::SILVER_ORE or t_ == MINING::GOLDEN_ORE or t_ == MINING::PLATINUM_ORE or t_ == MINING::DIAMOND_ORE) {
				if ((t_ == MINING::CELESTINE_ORE or t_ == MINING::TIN_ORE) and Miner::PickaxeLvl(peer) < 1) {
					CAction::Positioned(peer, pInfo(peer)->netID, "audio/cant_place_tile.wav", 0);
					CAction::Effect_V2(peer, 368, (float)(x_ * 32) + 16, (float)(y_ * 32) + 16);
					VarList::OnTalkBubble(peer, pInfo(peer)->netID, "I don't have enough pickaxe levels to break.", 0, true);
					break;
				}
				else if ((t_ == MINING::COPPER_ORE or t_ == MINING::VANADIUM_ORE) and Miner::PickaxeLvl(peer) < 2) {
					CAction::Positioned(peer, pInfo(peer)->netID, "audio/cant_place_tile.wav", 0);
					CAction::Effect_V2(peer, 368, (float)(x_ * 32) + 16, (float)(y_ * 32) + 16);
					VarList::OnTalkBubble(peer, pInfo(peer)->netID, "I don't have enough pickaxe levels to break.", 0, true);
					break;
				}
				else if ((t_ == MINING::TITANIUM_ORE or t_ == MINING::SILVER_ORE or t_ == MINING::MINE_CRYSTAL) and Miner::PickaxeLvl(peer) < 3) {
					CAction::Positioned(peer, pInfo(peer)->netID, "audio/cant_place_tile.wav", 0);
					CAction::Effect_V2(peer, 368, (float)(x_ * 32) + 16, (float)(y_ * 32) + 16);
					VarList::OnTalkBubble(peer, pInfo(peer)->netID, "I don't have enough pickaxe levels to break.", 0, true);
					break;
				}
				else if ((t_ == MINING::GOLDEN_ORE or t_ == MINING::PLATINUM_ORE or t_ == MINING::GOLDEN_MINE_CHEST) and Miner::PickaxeLvl(peer) < 4) {
					CAction::Positioned(peer, pInfo(peer)->netID, "audio/cant_place_tile.wav", 0);
					CAction::Effect_V2(peer, 368, (float)(x_ * 32) + 16, (float)(y_ * 32) + 16);
					VarList::OnTalkBubble(peer, pInfo(peer)->netID, "I don't have enough pickaxe levels to break.", 0, true);
					break;
				}
				else if ((t_ == MINING::DIAMOND_ORE or t_ == MINING::LEGENDARY_MINE_CHEST or t_ == MINING::NAVAL_BOMB) and Miner::PickaxeLvl(peer) < 5) {
					CAction::Positioned(peer, pInfo(peer)->netID, "audio/cant_place_tile.wav", 0);
					CAction::Effect_V2(peer, 368, (float)(x_ * 32) + 16, (float)(y_ * 32) + 16);
					VarList::OnTalkBubble(peer, pInfo(peer)->netID, (t_ == MINING::NAVAL_BOMB ? "You need a level 5 pickaxe to destroy the bomb." : "I don't have enough pickaxe levels to break."), 0, true);
					break;
				}
			}
			else if (t_ == 3470) {
				if (pInfo(peer)->hand == 3466 || pInfo(peer)->hand == 4506) {
					WorldDrop drop_block_{};
					drop_block_.x = (x_ * 32) + rand() % 17, drop_block_.y = (y_ * 32) + rand() % 17;
					for (int i_ = 0; i_ < world_->drop_new.size(); i_++) {
						if (world_->drop_new[i_][0] == 0) continue;
						if (x_ == world_->drop_new[i_][3] / 32 && y_ == world_->drop_new[i_][4] / 32) {
							if (items[world_->drop_new[i_][0]].blockType == BlockTypes::FISH || world_->drop_new[i_][0] == 866 || world_->drop_new[i_][0] == 872 || world_->drop_new[i_][0] == 7050) {
								if (world_->drop_new[i_][0] == 3032 && world_->drop_new[i_][1] == 90 && rand() % 100 < 5) {
									drop_block_.id = 5486, drop_block_.count = 1;
									VisualHandle::Drop(world_, drop_block_);
								}
								else if (world_->drop_new[i_][0] == 5450 && world_->drop_new[i_][1] == 50 && rand() % 100 < 10) {
									drop_block_.id = 6806, drop_block_.count = 1;
									VisualHandle::Drop(world_, drop_block_);
								}
								else if (world_->drop_new[i_][0] == 872 && world_->drop_new[i_][1] >= 1) {
									drop_block_.id = 4588, drop_block_.count = world_->drop_new[i_][1], drop_block_.uid = uint16_t(world_->drop_new.size()) + 1;
									VisualHandle::Drop(world_, drop_block_);
								}
								else if (world_->drop_new[i_][0] == 866 && world_->drop_new[i_][1] >= 1) {
									drop_block_.id = 4578, drop_block_.count = world_->drop_new[i_][1], drop_block_.uid = uint16_t(world_->drop_new.size()) + 1;
									VisualHandle::Drop(world_, drop_block_);
								}
								PlayerMoving data_{};
								data_.packetType = 14, data_.netID = 0, data_.plantingTree = world_->drop_new[i_][2];
								BYTE* raw = packPlayerMoving(&data_);
								for (ENetPeer* cp_ = server->peers; cp_ < &server->peers[server->peerCount]; ++cp_) {
									if (cp_->state != ENET_PEER_STATE_CONNECTED or cp_->data == NULL or pInfo(cp_)->world != pInfo(peer)->world) continue;
									send_raw(cp_, 4, raw, 56, ENET_PACKET_FLAG_RELIABLE);
								}
								delete[]raw;
								if (items[world_->drop_new[i_][0]].blockType == BlockTypes::FISH && world_->drop_new[i_][1] <= 9 && rand() % 100 < 40) {
									PlayerMoving data_{};
									data_.packetType = 17, data_.netID = 45, data_.YSpeed = 45, data_.x = (x_ * 32) + 16, data_.y = (y_ * 32) + 16;
									BYTE* raw = packPlayerMoving(&data_);
									for (ENetPeer* cp_ = server->peers; cp_ < &server->peers[server->peerCount]; ++cp_) {
										if (cp_->state != ENET_PEER_STATE_CONNECTED or cp_->data == NULL or pInfo(peer)->world != pInfo(cp_)->world) continue;
										send_raw(cp_, 4, raw, 56, ENET_PACKET_FLAG_RELIABLE);
									}
									delete[] raw;
									world_->drop_new.erase(world_->drop_new.begin() + i_);
									break;
								}
								int drop_count = 1;
								if (items[world_->drop_new[i_][0]].blockType == BlockTypes::FISH && world_->drop_new[i_][1] > 9) drop_count = world_->drop_new[i_][1] / 10;
								if (world_->drop_new[i_][0] == 866 || world_->drop_new[i_][0] == 872 || world_->drop_new[i_][0] == 7050) drop_count = world_->drop_new[i_][1];
								drop_block_.id = world_->drop_new[i_][0] == 866 ? 4578 : world_->drop_new[i_][0] == 872 ? 4588 : world_->drop_new[i_][0] == 7050 ? 7052 : 3468, drop_block_.count = drop_count;
								VisualHandle::Drop(world_, drop_block_);
								world_->drop_new.erase(world_->drop_new.begin() + i_);
							}
						}
					}
				}
			}
			else if (t_ == 758 || t_ == 756) {
				if (pInfo(peer)->i758 + 1000 < (duration_cast<milliseconds>(system_clock::now().time_since_epoch())).count()) {
					pInfo(peer)->i758 = (duration_cast<milliseconds>(system_clock::now().time_since_epoch())).count();
					int get37 = 0;
					string wheel = "";
					gamepacket_t p(pInfo(peer)->proxy.fastspin ? 250 : 2000), p2(pInfo(peer)->proxy.fastspin ? 250 : 2000), p3(pInfo(peer)->proxy.fastspin ? 250 : 2000);
					p.Insert("OnTalkBubble"), p.Insert(pInfo(peer)->netID);
					p2.Insert("OnConsoleMessage");
					PlayerMoving data_{};
					BYTE* raw = packPlayerMoving(&data_);
					if (t_ == 758) {
						get37 = rand() % 37;
						if (pInfo(peer)->csn != -1 && pInfo(peer)->csn < 37) get37 = pInfo(peer)->csn;
						string color = "";
						if (get37 == 36 || get37 == 34 || get37 == 32 || get37 == 30 || get37 == 27 || get37 == 25 || get37 == 23 || get37 == 21 || get37 == 19 || get37 == 18 || get37 == 16 || get37 == 12 || get37 == 9 || get37 == 7 || get37 == 5 || get37 == 3 || get37 == 1) color = "`4";
						else if (get37 == 0) color = "`2";
						else color = "`b";
						if (pInfo(peer)->cheat_qq) wheel = "`7[``" + get_player_nick(peer) + " spun the wheel and got `20!`7]``";
						else wheel = "`7[``" + get_player_nick(peer) +" spun the wheel and got " + color + to_string(get37) + "!`7]``";
					}
					else {
						get37 = rand() % 10;
						if (get37 == 1) data_.packetType = 17, data_.netID = 29, data_.YSpeed = 29, data_.x = (x_ * 32) + 16, data_.y = (y_ * 32) + 16;
						if (pInfo(peer)->cheat_reme) wheel = "`7[``" + get_player_nick(peer) + " `2wins at slots!`7]";
						else wheel = "`7[``" + get_player_nick(peer) + " " + (get37 == 1 ? "`2wins at slots!`" : "`4loses at slots.`") + "``7]``";
						p3.Insert("OnPlayPositioned");
						p3.Insert(get37 == 1 ? "audio/slot_win.wav" : "audio/slot_lose.wav");
					}
					p.Insert(wheel);
					p.Insert(0), p.Insert(0);
					p2.Insert(wheel);
					for (ENetPeer* cp_ = server->peers; cp_ < &server->peers[server->peerCount]; ++cp_) {
						if (cp_->state != ENET_PEER_STATE_CONNECTED or cp_->data == NULL) continue;
						if (pInfo(cp_)->world == pInfo(peer)->world) {
							p.CreatePacket(cp_);
							p2.CreatePacket(cp_);
							if (t_ == 756) {
								p3.CreatePacket(cp_);
								if (get37 == 1) send_raw(cp_, 4, raw, 56, ENET_PACKET_FLAG_RELIABLE);
							}
						}
					}
					if (get37 == 1)delete[] raw;
					punch_tile(peer, x_, y_, 0x8, 0, pInfo(peer)->netID, 0x0);
				}
			}
			else if (t_ == 1482 || t_ == 2252 || t_ == 7864 || t_ == 11434) {
				struct tm newtime;
				time_t now = time(0);
#ifdef _WIN32
				localtime_s(&newtime, &now);
#elif defined(__linux__)
				localtime_r(&now, &newtime);
#endif
				VarList::OnTalkBubble(peer, pInfo(peer)->netID, "It's " + to_string(newtime.tm_hour) + ":" + (newtime.tm_min < 10 ? "0" + to_string(newtime.tm_min) + "" : "" + to_string(newtime.tm_min) + "") + " " + (newtime.tm_hour >= 12 ? "PM" : "AM") + " on " + to_string(newtime.tm_mon + 1) + "/" + to_string(newtime.tm_mday) + "", 0, 1);
			}
			else if (items[t_].name.find("Adventure Item -") != string::npos) {
				bool valid = true;
				int uid = pInfo(peer)->adventure_item.size();
				for (auto check : pInfo(peer)->adventure_item) {
					if (check.pos == x_ + (y_ * 100)) valid = false;
					if (check.id == 0 and check.pos == -1) {
						uid = check.uid;
					}
				}
				if (valid) {
					if (pInfo(peer)->adventure_item.size() > 4 && uid == pInfo(peer)->adventure_item.size()) {
						VarList::OnTalkBubble(peer, pInfo(peer)->netID, "You can't carry any more Adventure Items!", 0, 1);
					}
					else {
						PlayerMoving data_;
						data_.packetType = 35;
						data_.netID = uid;
						data_.punchX = x_;
						data_.punchY = y_;
						data_.plantingTree = t_;
						if (uid == pInfo(peer)->adventure_item.size()) {
							AdventureItem res{ t_, x_ + (y_ * 100), (int)pInfo(peer)->adventure_item.size() };
							pInfo(peer)->adventure_item.push_back(res);
						}
						else {
							pInfo(peer)->adventure_item[uid].pos = x_ + (y_ * 100);
							pInfo(peer)->adventure_item[uid].id = t_;
						}
						BYTE* raw = packPlayerMoving(&data_);
						send_raw(peer, 4, raw, 56, ENET_PACKET_FLAG_RELIABLE);
					}
				}
				punch_tile(peer, x_, y_, 0x8, 0, pInfo(peer)->netID, 0x0);
			}
			if (t_ == 4712) {
				auto del_adventure = [&](const int& id) {
					bool done = false;
					for (int i = 0; i < pInfo(peer)->adventure_item.size(); i++) {
						if (!done) {
							if (pInfo(peer)->adventure_item[i].id == id) {
								pInfo(peer)->adventure_item[i].id = 0;
								pInfo(peer)->adventure_item[i].pos = -1;
								PlayerMoving data_;
								data_.packetType = 35;
								data_.netID = i;
								data_.plantingTree = 0;
								BYTE* raw = packPlayerMoving(&data_);
								send_raw(peer, 4, raw, 56, ENET_PACKET_FLAG_RELIABLE);
								done = true;
							}
						}
					}
					};
				bool has_banana = false;
				for (auto check : pInfo(peer)->adventure_item) {
					if (check.id == 1700) has_banana = true;
				}
				if (has_banana) {
					del_adventure(1700);
					int flags = block_->flags;
					if (flags >= 0x00400000) flags -= 0x00400000;
					else flags += 0x00400000;
					PlayerMoving data_{};
					data_.packetType = 5, data_.punchX = x_, data_.punchY = y_, data_.characterState = 0x8;
					BYTE* raw = packPlayerMoving(&data_, 112 + alloc_(world_, block_));
					BYTE* blc = raw + 56;
					memcpy(blc, &block_->fg, 2);
					memcpy(blc + 2, &block_->bg, 2);
					memcpy(blc + 4, &flags, 4);
					PlayerMoving data_effect_{};
					data_effect_.packetType = 19;
					data_effect_.punchX = 1700;
					data_effect_.punchY = pInfo(peer)->netID;
					data_effect_.x = static_cast<float>(x_) * 32 + 16, data_effect_.y = static_cast<float>(y_) * 32 + 16;
					BYTE* raw_effect = packPlayerMoving(&data_effect_, 56);
					raw_effect[8] = pInfo(peer)->netID, raw_effect[3] = 4;
					send_raw(peer, 4, raw, 112 + alloc_(world_, block_), ENET_PACKET_FLAG_RELIABLE);
					send_raw(peer, 4, raw_effect, 56, ENET_PACKET_FLAG_RELIABLE);
					delete[] raw, blc, raw_effect;
					if (block_->locked) {
						upd_lock(*block_, *world_, peer);
					}
				}
			}
			if (items[t_].toggleable) {
				if (block_->flags & 0x00800000 and not world_->owner_name.empty() and to_lower(block_->owner_name) != to_lower(pInfo(peer)->tankIDName) and !guild_access(peer, world_->guild_id) and find(world_->admins.begin(), world_->admins.end(), pInfo(peer)->tankIDName) == world_->admins.end() and not Role::Developer(peer)) {
					if (not pInfo(peer)->invis) {
						for (ENetPeer* cp_ = server->peers; cp_ < &server->peers[server->peerCount]; ++cp_) {
							if (cp_->state != ENET_PEER_STATE_CONNECTED or cp_->data == NULL) continue;
							if (pInfo(cp_)->world == pInfo(peer)->world) {
								CAction::Positioned(cp_, pInfo(peer)->netID, "audio/punch_locked.wav", 0);
							}
						}
					}
					else CAction::Positioned(peer, pInfo(peer)->netID, "audio/punch_locked.wav", 0);
					punch_tile(peer, x_, y_, 0x8, 0, pInfo(peer)->netID, 16);
					return true;
				}
			}
			if (items[t_].properties & Property_Public) {  }
			else {
				if (block_->fg == 202 or block_->fg == 204 or block_->fg == 206 or block_->fg == 4994 or block_->fg == 10000) {
					if (to_lower(block_->owner_name) != to_lower(pInfo(peer)->tankIDName)) {
						if (items[t_].blockType == BlockTypes::LOCK) {
							string lock_ago = "";
							bool delete_lock = false;
							string owner_name = block_->owner_name;
							if (block_->owner_named != "") {
								if (block_->owner_named.substr(0, 2) == "`o") owner_name = "`w" + block_->owner_name;
								else owner_name = block_->owner_named;
							}
							if (owner_name.empty()) owner_name = "`w" + world_->owner_name;
							int expiry = 0, days2_ = 0;
							lock_ago = (block_->block_day.empty() ? return_last_online(block_->owner_name) : block_->block_day);
							block_->block_day = lock_ago;
							if (lock_ago == "today") days2_ = 1;
							else days2_ = atoi(lock_ago.c_str());
							if (block_->fg == 202 or block_->fg == 204 or block_->fg == 206 or block_->fg == 4994 or block_->fg == 10000) expiry = 45;
							else expiry = 60;
							if (world_->owner_name.empty()) {
								if (expiry - days2_ <= 0) {
									VarList::OnConsoleMessage(peer, "`5INACTIVELOCK:`` " + owner_name + "'s```` lock `4disintegrates`` due to last playing `5" + lock_ago + "`` days ago!");
									lock_ago = " `5INACTIVELOCK:`` " + owner_name + "'s```` lock `4disintegrates`` due to last playing `5" + lock_ago + "`` days ago!";
									if (block_->fg == 202 or block_->fg == 204 or block_->fg == 206 or block_->fg == 4994 or block_->fg == 10000) remove_lock_broken(world_, block_, x_, y_);
									else world_->owner_name = "", world_->owner_named = "", world_->entry_level = 1, world_->admins.clear(), block_->fg = 0;
									block_->fg = 0;
									block_->block_day = "today";
									delete_lock = true;
									update_tile(peer, x_, y_, 0, false, true);
								}
								else lock_ago = " (Last played `w" + (lock_ago == "today" ? lock_ago : lock_ago + " days ago") + "``)";
							}
							if (delete_lock == false) {
								if (block_->spin) VarList::OnTalkBubble(peer, pInfo(peer)->netID, "" + owner_name + "``'s `$" + items[t_].name + "``. (`wOpen to public``)" + (world_->owner_name.empty() ? lock_ago : ""), 0, 1);
								else if (find(block_->admins.begin(), block_->admins.end(), to_lower(pInfo(peer)->tankIDName)) != block_->admins.end()) VarList::OnTalkBubble(peer, pInfo(peer)->netID, "" + owner_name + "``'s `$" + items[t_].name + "``. (`wAccess granted``)" + (world_->owner_name.empty() ? lock_ago : ""), 0, 1);
								else VarList::OnTalkBubble(peer, pInfo(peer)->netID, "" + owner_name + "``'s `$" + items[t_].name + "``. (`4No access``)" + (world_->owner_name.empty() ? lock_ago : ""), 0, 1);
							}
							else VarList::OnTalkBubble(peer, pInfo(peer)->netID, lock_ago, 0, 1);
							if (not Role::Clist(pInfo(peer)->tankIDName)) {
								CAction::Positioned(peer, pInfo(peer)->netID, "audio/punch_locked.wav", 0);
								return true;
							}
						}
					}
				}
				else if (block_->locked) {
					if (world_->blocks[block_->lock_origin].fg == 242 || items[world_->blocks[block_->lock_origin].fg].blockType != BlockTypes::LOCK) {
						int xa_ = block_->lock_origin % 100, ya_ = block_->lock_origin / 100;
						remove_lock_broken(world_, &world_->blocks[block_->lock_origin], xa_, ya_);
					}
					else {
						WorldBlock* block2_ = &world_->blocks[block_->lock_origin];
						string owner_name = to_lower(block2_->owner_name), user_name = to_lower(pInfo(peer)->tankIDName);
						if (owner_name != user_name and not Role::Clist(pInfo(peer)->tankIDName)) {
							if (block2_->fg == 4994 or not block2_->spin and find(block2_->admins.begin(), block2_->admins.end(), to_lower(pInfo(peer)->tankIDName)) == block2_->admins.end()) {
								if (block2_->fg == 4994) {
									if (not block2_->spin) {
										CAction::Positioned(peer, pInfo(peer)->netID, "audio/punch_locked.wav", 0);
										return true;
									}
									if (block2_->build_only and block2_->spin) {
										if (not Role::Clist(pInfo(peer)->tankIDName)) {
											CAction::Positioned(peer, pInfo(peer)->netID, "audio/punch_locked.wav", 0);
											VarList::OnTalkBubble(peer, pInfo(peer)->netID, "This lock allows building only!", 0, 0);
											return true;
										}
									}
								}
								else {
									if (not Role::Clist(pInfo(peer)->tankIDName)) {
										CAction::Positioned(peer, pInfo(peer)->netID, "audio/punch_locked.wav", 0);
										return true;
									}
								}
							}
						}
					}
				}
				else if (not world_->owner_name.empty()) {
					string owner_name = to_lower(world_->owner_name), user_name = to_lower(pInfo(peer)->tankIDName);
					if (owner_name != user_name) {
						if (items[t_].blockType == BlockTypes::LOCK) {
							bool delete_lock = false;
							string owner_name = "";
							if (world_->owner_named.substr(0, 2) == "`o") owner_name = "`w" + world_->owner_name;
							else owner_name = world_->owner_named;
							if (owner_name.empty()) owner_name = "`w" + world_->owner_name;
							string lock_ago = "";
							int expiry = 0, days2_ = 0;
							lock_ago = (block_->block_day.empty() ? return_last_online(world_->owner_name) : block_->block_day);
							block_->block_day = lock_ago;
							if (lock_ago == "today") days2_ = 1;
							else days2_ = atoi(lock_ago.c_str());
							if (block_->fg == 202 or block_->fg == 204 or block_->fg == 206 or block_->fg == 4994 or block_->fg == 10000) 	expiry = 45;
							else expiry = 60;
							if (world_->owner_name.empty()) {
								if (expiry - days2_ <= 0) {
									VarList::OnConsoleMessage(peer, "`5INACTIVELOCK:`` " + owner_name + "'s```` lock `4disintegrates`` due to last playing `5" + lock_ago + "`` days ago!");
									lock_ago = " `5INACTIVELOCK:`` " + owner_name + "'s```` lock `4disintegrates`` due to last playing `5" + lock_ago + "`` days ago!";
									if (block_->fg == 202 or block_->fg == 204 or block_->fg == 206 or block_->fg == 4994 or block_->fg == 10000) remove_lock_broken(world_, block_, x_, y_);
									else world_->owner_name = "", world_->owner_named = "", world_->entry_level = 1, world_->admins.clear(), block_->fg = 0;
									block_->fg = 0;
									block_->block_day = "today";
									delete_lock = true;
									update_tile(peer, x_, y_, 0, false, true);
								}
								else lock_ago = " (Last played `w" + (lock_ago == "today" ? lock_ago : lock_ago + " days ago") + "``)";
							}
							if (delete_lock == false) {
								if (world_->world_settings & SETTINGS::SETTINGS_4) VarList::OnTalkBubble(peer, pInfo(peer)->netID, "" + owner_name + "``'s `$" + items[t_].name + "``. (`wOpen to public``)" + (world_->owner_name.empty() ? lock_ago : ""), 0, 1);
								else if (guild_access(peer, world_->guild_id) or find(world_->admins.begin(), world_->admins.end(), user_name) != world_->admins.end()) VarList::OnTalkBubble(peer, pInfo(peer)->netID, "" + owner_name + "``'s `$" + items[t_].name + "``. (`wAccess Granted``)" + (world_->owner_name.empty() ? lock_ago : ""), 0, 1);
								else VarList::OnTalkBubble(peer, pInfo(peer)->netID, "" + owner_name + "``'s `$" + items[t_].name + "``. (`4No access``)" + (world_->owner_name.empty() ? lock_ago : ""), 0, 1);
							}
							else VarList::OnTalkBubble(peer, pInfo(peer)->netID, lock_ago, 0, 1);
							if (not Role::Clist(pInfo(peer)->tankIDName)) {
								CAction::Positioned(peer, pInfo(peer)->netID, "audio/punch_locked.wav", 0);
								return true;
							}
						}
						if (Only_Access(peer, world_, block_) == false) {
							if (not Role::Clist(pInfo(peer)->tankIDName)) {
								CAction::Positioned(peer, pInfo(peer)->netID, "audio/punch_locked.wav", 0);
								return true;
							}
						}
					}
				}
			}
			if (t_ == 3918 || t_ == 3922 || t_ == 3926 || t_ == 3928 || t_ == 3924 || t_ == 3920) {
				if (pInfo(peer)->hand == 3932) {
					pInfo(peer)->random_fossil -= 1;
					gamepacket_t p;
					p.Insert("OnTalkBubble"), p.Insert(pInfo(peer)->netID);
					if (pInfo(peer)->random_fossil < 0 or block_->fg & items[block_->fg].block_flag) {
						pInfo(peer)->random_fossil = rand() % 3 + 4;
						p.Insert("`4I smashed a Fossil!``");
						apply_tile_visual(world_, block_, x_, y_, items[block_->fg].block_flag, true);
						update_tile(peer, x_, y_, block_->fg = items[block_->fg].fossil_rock2, true);
					}
					else {
						if (pInfo(peer)->random_fossil == 0) {
							p.Insert("`2I unearthed a Fossil!`` I better be careful getting it out...");
							apply_tile_visual(world_, block_, x_, y_, items[block_->fg].block_flag);
						}
					}
					p.Insert(0), p.Insert(1), p.CreatePacket(peer);
				}
			}
			if (items[t_].toggleable or items[t_].blockType == BlockTypes::CHEMICAL_COMBINER) {
				block_->flags = (block_->flags & 0x00400000 ? block_->flags ^ 0x00400000 : block_->flags | 0x00400000);
				if (t_ == 6282) tile_update(peer, world_, block_, x_, y_);
				if (t_ == 226) {
					if (block_->flags & 0x00400000) VarList::OnConsoleMessage(peer, "Signal jammer enabled. This world is now `4hidden`` from the universe.");
					else VarList::OnConsoleMessage(peer, "Signal jammer disabled. This world is `2visible`` to the universe.");
				}
				if (t_ == 226 or t_ == 3616 or t_ == 1276 or t_ == 1278 or t_ == 4758 or t_ == 3750 or t_ == 4992 or t_ == 3072 or t_ == 4884) {
					if (block_->flags & 0x00400000) world_->active_jammers.push_back(t_);
					else world_->active_jammers.erase(remove(world_->active_jammers.begin(), world_->active_jammers.end(), t_), world_->active_jammers.end());
				}
				else if (items[t_].blockType == BlockTypes::CHEMICAL_COMBINER) {
					if (block_->flags & 0x00400000) {

					}
					else {
						vector<vector<int>> comb;
						bool combined = false;
						for (int i_ = 0; i_ < world_->drop_new.size(); i_++) {
							if (world_->drop_new[i_][0] == 0) continue;
							if (x_ == (world_->drop_new[i_][3] / 32) && y_ == (world_->drop_new[i_][4] / 32)) {
								comb.push_back({ world_->drop_new[i_][0], world_->drop_new[i_][1] });
							}
						}
						if (comb.size() < 3) {
							combined = true;
							VarList::OnTalkBubble(peer, pInfo(peer)->netID, "I need 3 ingredients!");
						}
						if (comb.size() > 3) {
							combined = true;
							VarList::OnTalkBubble(peer, pInfo(peer)->netID, "It won't mix more than 3 items at once!");
						}
						if (comb.size() == 3) {
							for (vector<vector<int>>recipe : receptai) {
								uint32_t result_item_id = recipe[3][0];
								uint32_t result_gives_per_recipe = recipe[3][1];
								vector<int> compare1, compare2;
								vector<vector<vector<int>>> info{ {}, {} };
								for (int i_ = 0; i_ < 3; i_++) {
									compare1.push_back(recipe[i_][0]);
									info[0].push_back({ recipe[i_][0], recipe[i_][1] });
								} 
								for (vector<int>item_id : comb) {
									compare2.push_back(item_id[0]);
									info[1].push_back({ item_id[0], item_id[1] });
								} 
								sort(compare1.begin(), compare1.end()), sort(compare2.begin(), compare2.end());
								if (compare1 == compare2) {
									sort(info[0].begin(), info[0].end()), sort(info[1].begin(), info[1].end());
									bool no = false;
									for (int i_ = 0; i_ < info[0].size(); i_++) {
										if (info[0][i_][1] > info[1][i_][1]) {
											no = true;
											break;
										}
									} if (no) break;
									uint32_t result_item_count = 0;
									uint32_t times_ = 0;
									for (int i_ = 0; i_ < world_->drop_new.size(); i_++) {
										if (no) break;
										if (world_->drop_new[i_][0] == 0) continue;
										if (x_ == (world_->drop_new[i_][3] / 32) && y_ == (world_->drop_new[i_][4] / 32)) {
											for (int i_2 = 0; i_2 < info[0].size(); i_2++) {
												if (info[0][i_2][0] == world_->drop_new[i_][0]) {
													if (info[0][i_2][1] > info[1][i_2][1]) {
														break;
													}
													world_->drop_new[i_][1] -= info[0][i_2][1];
													info[1][i_2][1] = world_->drop_new[i_][1];
													times_++;
													if (world_->drop_new[i_][1] <= 0) {
														PlayerMoving data_{};
														data_.packetType = 14, data_.netID = -2, data_.plantingTree = world_->drop_new[i_][2];
														BYTE* raw = packPlayerMoving(&data_);
														int32_t item = -1;
														Memory_Copy(raw + 8, &item, 4);
														for (ENetPeer* cp_ = server->peers; cp_ < &server->peers[server->peerCount]; ++cp_) {
															if (cp_->state != ENET_PEER_STATE_CONNECTED or cp_->data == NULL) continue;
															if (pInfo(cp_)->world == name_) {
																send_raw(cp_, 4, raw, 56, ENET_PACKET_FLAG_RELIABLE);
															}
														}
														world_->drop_new.erase(world_->drop_new.begin() + i_);
														i_--;
														delete[] raw;
													}
													else {
														PlayerMoving data_{};
														data_.packetType = 14, data_.netID = -2, data_.plantingTree = world_->drop_new[i_][2];
														BYTE* raw = packPlayerMoving(&data_);
														int32_t item = -1;
														Memory_Copy(raw + 8, &item, 4);
														for (ENetPeer* cp_ = server->peers; cp_ < &server->peers[server->peerCount]; ++cp_) {
															if (cp_->state != ENET_PEER_STATE_CONNECTED or cp_->data == NULL) continue;
															if (pInfo(cp_)->world == name_) {
																send_raw(cp_, 4, raw, 56, ENET_PACKET_FLAG_RELIABLE);
															}
														}
														delete[] raw;
														WorldDrop drop_{};
														drop_.id = world_->drop_new[i_][0];
														drop_.count = world_->drop_new[i_][1];
														drop_.x = world_->drop_new[i_][3];
														drop_.y = world_->drop_new[i_][4];
														world_->drop_new.erase(world_->drop_new.begin() + i_);
														i_--;
														VisualHandle::Drop(world_, drop_);
													}
													if (times_ == 3) {
														times_ = 0;
														result_item_count += result_gives_per_recipe;
														if (result_item_count + result_gives_per_recipe > 200) no = true;
														for (int i_ = 0; i_ < info[0].size(); i_++) {
															if (info[0][i_][1] > info[1][i_][1]) {
																no = true;
																break;
															}
														}
													}
													break;
												}
											}
										}
									}
									if (result_item_count != 0) {
										combined = true;
										WorldDrop drop_block_{};
										drop_block_.id = result_item_id, drop_block_.count = result_item_count, drop_block_.x = (x_ * 32) + rand() % 17, drop_block_.y = (y_ * 32) + rand() % 17;
										VisualHandle::Drop(world_, drop_block_);
										PlayerMoving data_{};
										data_.packetType = 17, data_.netID = 44, data_.YSpeed = 44, data_.x = x_ * 32 + 16, data_.y = y_ * 32 + 16;
										BYTE* raw = packPlayerMoving(&data_);
										string t_ = "action|play_sfx\nfile|audio/terraform.wav\ndelayMS|0";
										BYTE* const d_ = new BYTE[5 + t_.length()];
										*(__int8*)(d_) = 3;
										Memory_Copy(d_ + 4, t_.c_str(), t_.length());
										*(__int8*)(d_ + 4 + t_.length()) = 0;
										ENetPacket* const p_m = enet_packet_create(d_, 5 + t_.length(), ENET_PACKET_FLAG_RELIABLE);
										for (ENetPeer* cp_ = server->peers; cp_ < &server->peers[server->peerCount]; ++cp_) {
											if (cp_->state != ENET_PEER_STATE_CONNECTED or cp_->data == NULL) continue;
											if (pInfo(cp_)->world == world_->name) {
												enet_peer_send(cp_, 0, p_m);
												send_raw(cp_, 4, raw, 56, ENET_PACKET_FLAG_RELIABLE);
											}
										}
										delete[]d_;
										delete[]raw;
										VarList::OnTalkBubble(peer, pInfo(peer)->netID, "SCIENCE!");
										if (pInfo(peer)->starglitter_combine < 6) DailyEvent_Task::MStarglitter(peer, "combine", 1);
									}
									break;
								}
							}
						}
						if (not combined) VarList::OnTalkBubble(peer, pInfo(peer)->netID, "Those items don't seem to combine!");
					}
				}
			}
			else if (items[t_].blockType == BlockTypes::AUTO_BLOCK or t_ == 6954) {
				bool w_public = world_->world_settings & SETTINGS::SETTINGS_4;
				if (magplant_access == false && w_public == false) {
					gamepacket_t p;
					p.Insert("OnTalkBubble");
					p.Insert(pInfo(peer)->netID);
					p.Insert("Only the `9World Owner`` can activate this!");
					p.Insert(0), p.Insert(0);
					p.CreatePacket(peer);
					return true;
				}
				else {
					if (items[t_].blockType == BlockTypes::AUTO_BLOCK or t_ == 6954) {
						if (block_->id != 0) {
							block_->enabled = (block_->enabled ? false : true);
							bool found_ = false;
							for (int i_ = 0; i_ < world_->machines.size(); i_++) {
								WorldMachines* machine_ = &world_->machines[i_];
								if (machine_->x == x_ and machine_->y == y_) {
									machine_->enabled = block_->enabled;
									machine_->target_item = block_->id;
									found_ = true;
									break;
								}
							}
							if (not found_) {
								WorldMachines new_machine;
								new_machine.enabled = block_->enabled;
								new_machine.x = x_, new_machine.y = y_;
								new_machine.id = block_->fg;
								new_machine.target_item = block_->id;
								world_->machines.push_back(new_machine);
								if (find(Environment()->Another_Worlds.begin(), Environment()->Another_Worlds.end(), world_->name) == Environment()->Another_Worlds.end()) {
									Environment()->Another_Worlds.push_back(world_->name);
								}
							}
							tile_update(peer, world_, block_, x_, y_);
						}
					}
				}
			}
			else if (items[t_].blockType == BlockTypes::WEATHER || t_ == 6280 || t_ == 10058) {
				int weather_id_ = (t_ == 5958 ? get_epoch_weather(*block_) : t_ == 14550 ? 77 : items[t_].base_weather);
				long long current_time = time(nullptr);
				if (block_->planted - current_time <= 0) {
					world_->weather = (weather_id_ != world_->weather ? weather_id_ : 0);
					block_->enabled = (world_->weather != 0 ? true : false);
					block_->planted = current_time + 1.5;
					if (t_ == 5958) {
						if (block_->flags & 0x00400000) {
							block_->flags ^= 0x00400000;
							world_->weather = 0;
						}
						else {
							block_->flags |= 0x00400000;
							block_->epoch_cycle = time(nullptr) + (block_->epoch_state.second * 60);
						}
					}
					if (t_ == 6280) {
						if (block_->flags & 0x00400000) {
							block_->flags ^= 0x00400000;
						}
						else {
							block_->flags |= 0x00400000;
						}
					}
					if (t_ == 10058) {
						if (block_->flags & 0x00400000) {
							block_->flags ^= 0x00400000;
						}
						else {
							block_->flags |= 0x00400000;
							block_->epoch_cycle = time(nullptr) + (block_->infinity_cycle * 60);
						}
					}
					if (world_->weather == 0) {
						if (pInfo(peer)->lock == 11550)world_->weather = 54;
						if (pInfo(peer)->lock == 11586)world_->weather = 55;
						if (pInfo(peer)->lock == 10410)world_->weather = 53;
						if (pInfo(peer)->lock == 11902)world_->weather = 58;
						if (pInfo(peer)->lock == 12654)world_->weather = 63;
						if (pInfo(peer)->lock == 13200)world_->weather = 67;
						world_->weather = world_->d_weather;
					}
					for (ENetPeer* cp_ = server->peers; cp_ < &server->peers[server->peerCount]; ++cp_) {
						if (cp_->state != ENET_PEER_STATE_CONNECTED or cp_->data == NULL) continue;
						if (pInfo(cp_)->world == pInfo(peer)->world) {
							VarList::OnSetCurrentWeather(cp_, (Event()->Comet_Dust ? 16 : world_->weather == 0 ? 80 : world_->weather));
						}
					}
				}
				if (t_ != 5958) {
					for (int i = 0; i < world_->blocks.size(); i++) {
						if (world_->blocks[i].fg == 5958 && world_->blocks[i].flags & 0x00400000) {
							world_->blocks[i].flags ^= 0x00400000;
							int ySize = world_->blocks.size() / 100, xSize = world_->blocks.size() / ySize;
							int x = i % xSize, y = i / xSize;
							PlayerMoving data_{};
							data_.packetType = 5, data_.punchX = x, data_.punchY = y, data_.characterState = 0x8;
							BYTE* raw = packPlayerMoving(&data_, 112 + alloc_(world_, &world_->blocks[i]));
							BYTE* blc = raw + 56;
							form_visual(blc, world_->blocks[i], *world_, peer, false);
							for (ENetPeer* cp_ = server->peers; cp_ < &server->peers[server->peerCount]; ++cp_) {
								if (cp_->state != ENET_PEER_STATE_CONNECTED or cp_->data == NULL) continue;
								if (pInfo(cp_)->world == pInfo(peer)->world) {
									send_raw(cp_, 4, raw, 112 + alloc_(world_, &world_->blocks[i]), ENET_PACKET_FLAG_RELIABLE);
								}
							}
							delete[] raw, blc;
							if (world_->blocks[i].locked) {
								upd_lock(world_->blocks[i], *world_, peer);
							}
							i = world_->blocks.size();
						}
					}
				}
				if (t_ != 6280) {
					for (int i = 0; i < world_->blocks.size(); i++) {
						if (world_->blocks[i].fg == 6280 && world_->blocks[i].flags & 0x00400000) {
							world_->blocks[i].flags ^= 0x00400000;
							int ySize = world_->blocks.size() / 100, xSize = world_->blocks.size() / ySize;
							int x = i % xSize, y = i / xSize;
							PlayerMoving data_{};
							data_.packetType = 5, data_.punchX = x, data_.punchY = y, data_.characterState = 0x8;
							BYTE* raw = packPlayerMoving(&data_, 112 + alloc_(world_, &world_->blocks[i]));
							BYTE* blc = raw + 56;
							form_visual(blc, world_->blocks[i], *world_, peer, false);
							for (ENetPeer* cp_ = server->peers; cp_ < &server->peers[server->peerCount]; ++cp_) {
								if (cp_->state != ENET_PEER_STATE_CONNECTED or cp_->data == NULL) continue;
								if (pInfo(cp_)->world == pInfo(peer)->world) {
									send_raw(cp_, 4, raw, 112 + alloc_(world_, &world_->blocks[i]), ENET_PACKET_FLAG_RELIABLE);
								}
							}
							delete[] raw, blc;
							if (world_->blocks[i].locked) {
								upd_lock(world_->blocks[i], *world_, peer);
							}
							i = world_->blocks.size();
						}
					}
				}
				if (t_ != 10058) {
					for (int i = 0; i < world_->blocks.size(); i++) {
						if (world_->blocks[i].fg == 10058 && world_->blocks[i].flags & 0x00400000) {
							world_->blocks[i].flags ^= 0x00400000;
							int ySize = world_->blocks.size() / 100, xSize = world_->blocks.size() / ySize;
							int x = i % xSize, y = i / xSize;
							PlayerMoving data_{};
							data_.packetType = 5, data_.punchX = x, data_.punchY = y, data_.characterState = 0x8;
							BYTE* raw = packPlayerMoving(&data_, 112 + alloc_(world_, &world_->blocks[i]));
							BYTE* blc = raw + 56;
							form_visual(blc, world_->blocks[i], *world_, peer, false);
							for (ENetPeer* cp_ = server->peers; cp_ < &server->peers[server->peerCount]; ++cp_) {
								if (cp_->state != ENET_PEER_STATE_CONNECTED or cp_->data == NULL) continue;
								if (pInfo(cp_)->world == pInfo(peer)->world) {
									send_raw(cp_, 4, raw, 112 + alloc_(world_, &world_->blocks[i]), ENET_PACKET_FLAG_RELIABLE);
								}
							}
							delete[] raw, blc;
							if (world_->blocks[i].locked) {
								upd_lock(world_->blocks[i], *world_, peer);
							}
							i = world_->blocks.size();
						}
					}
				}
				PlayerMoving data_{};
				data_.packetType = 5, data_.punchX = x_, data_.punchY = y_, data_.characterState = 0x8;
				BYTE* raw = packPlayerMoving(&data_, 112 + alloc_(world_, block_));
				BYTE* blc = raw + 56;
				form_visual(blc, *block_, *world_, peer, false);
				for (ENetPeer* cp_ = server->peers; cp_ < &server->peers[server->peerCount]; ++cp_) {
					if (cp_->state != ENET_PEER_STATE_CONNECTED or cp_->data == NULL) continue;
					if (pInfo(cp_)->world == pInfo(peer)->world) {
						send_raw(cp_, 4, raw, 112 + alloc_(world_, block_), ENET_PACKET_FLAG_RELIABLE);
					}
				}
				delete[] raw, blc;
				if (block_->locked) {
					upd_lock(*block_, *world_, peer);
				}
			}
			else if (block_->fg == 5638 || block_->fg == 5930) {
				if (magplant_access or Role::Administrator(peer)) {
					long long current_time = time(nullptr);
					if (block_->pr > 0 or (items[t_].dropChance) < (current_time - block_->lp)) {
						if (block_->id == 0) {
							VarList::OnTalkBubble(peer, pInfo(peer)->netID, "Cannot activate the " + items[block_->fg].name + ", you need to set the item first.", 0, 0);
							VarList::OnConsoleMessage(peer, "Cannot activate the " + items[block_->fg].name + ", you need to set the item first.");
						}
						else {
							if (items[block_->id].collisionType != 1 and items[block_->id].blockType != BACKGROUND and items[block_->id].blockType != SEED and not items[block_->id].farmable and items[t_].blockType == BlockTypes::LOCK) {
								VarList::OnTalkBubble(peer, pInfo(peer)->netID, "Cannot activate the " + items[block_->fg].name + ", the current item cannot be placed.", 0, 0);
								VarList::OnConsoleMessage(peer, "Cannot activate the " + items[block_->fg].name + ", the current item cannot be placed.");
							}
							else {
								block_->spin = (block_->spin ? false : true);
								bool found_ = false;
								for (int i_ = 0; i_ < world_->machines.size(); i_++) {
									WorldMachines* machine_ = &world_->machines[i_];
									if (machine_->x == x_ and machine_->y == y_) {
										machine_->enabled = block_->enabled;
										machine_->buildmode = block_->spin;
										machine_->target_item = block_->id;
										found_ = true;
										break;
									}
								}
								if (not found_) {
									WorldMachines new_machine;
									new_machine.enabled = block_->enabled;
									new_machine.buildmode = block_->spin;
									new_machine.x = x_, new_machine.y = y_;
									new_machine.id = block_->fg;
									new_machine.target_item = block_->id;
									world_->machines.push_back(new_machine);
									if (find(Environment()->Another_Worlds.begin(), Environment()->Another_Worlds.end(), world_->name) == Environment()->Another_Worlds.end()) {
										Environment()->Another_Worlds.push_back(world_->name);
									}
								}
								int c_ = 0;
								Inventory::Modify(peer, block_->fg == 5638 ? 5640 : 9158, c_);
								if (c_ != 0) Inventory::Modify(peer, block_->fg == 5638 ? 5640 : 9158, c_ *= -1);
								c_ = 1;
								if (Inventory::Modify(peer, block_->fg == 5638 ? 5640 : 9158, c_) == 0) {
									VarList::OnTalkBubble(peer, pInfo(peer)->netID, "You received a " + items[block_->fg == 5638 ? 5640 : 9158].name + ".", 0, 0);
									VarList::OnConsoleMessage(peer, "You received a " + items[block_->fg == 5638 ? 5640 : 9158].name + ".");
								}
								VarList::OnPlanterActivated(peer, block_->id, x_, y_);
								pInfo(peer)->magnetron_id = block_->id;
								pInfo(peer)->magnetron_x = x_;
								pInfo(peer)->magnetron_y = y_;
								tile_update(peer, world_, block_, x_, y_);
							}
						}
					}
				}
			}
			else if (items[block_->fg].blockType == BlockTypes::MAILBOX) {
				int letters = 0;
				for (int i_ = 0; i_ < world_->bulletin.size(); i_++) {
					if (world_->bulletin[i_].x == x_ and world_->bulletin[i_].y == y_) {
						letters++;
						VarList::OnTalkBubble(peer, pInfo(peer)->netID, "`wThere are `5" + to_string(letters) + " `wletter(s) in the " + items[block_->fg].name + ".", 0, 1);
					}
				}
			}
			else if (items[block_->fg].blockType == BlockTypes::MANNEQUIN) {
				bool s = false;
				int c_ = 1;
				if (block_->mannequin.c_head != 0) {
					if (Inventory::Modify(peer, block_->mannequin.c_head, c_) == 0) {
						block_->mannequin.c_head = 0;
					}
					else VarList::OnTalkBubble(peer, pInfo(peer)->netID, "`wYou don't have room for the item!", 0, 0);
					s = true;
				}
				else if (block_->mannequin.c_shirt != 0) {
					if (Inventory::Modify(peer, block_->mannequin.c_shirt, c_) == 0) {
						block_->mannequin.c_shirt = 0;
					}
					else VarList::OnTalkBubble(peer, pInfo(peer)->netID, "`wYou don't have room for the item!", 0, 0);
					s = true;
				}
				else if (block_->mannequin.c_pants != 0) {
					if (Inventory::Modify(peer, block_->mannequin.c_pants, c_) == 0) {
						block_->mannequin.c_pants = 0;
					}
					else VarList::OnTalkBubble(peer, pInfo(peer)->netID, "`wYou don't have room for the item!", 0, 0);
					s = true;
				}
				else if (block_->mannequin.c_feet != 0) {
					if (Inventory::Modify(peer, block_->mannequin.c_feet, c_) == 0) {
						block_->mannequin.c_feet = 0;
					}
					else VarList::OnTalkBubble(peer, pInfo(peer)->netID, "`wYou don't have room for the item!", 0, 0);
					s = true;
				}
				else if (block_->mannequin.c_mask != 0) {
					if (Inventory::Modify(peer, block_->mannequin.c_mask, c_) == 0) {
						block_->mannequin.c_mask = 0;
					}
					else VarList::OnTalkBubble(peer, pInfo(peer)->netID, "`wYou don't have room for the item!", 0, 0);
					s = true;
				}
				else if (block_->mannequin.c_hand != 0) {
					if (Inventory::Modify(peer, block_->mannequin.c_hand, c_) == 0) {
						block_->mannequin.c_hand = 0;
					}
					else VarList::OnTalkBubble(peer, pInfo(peer)->netID, "`wYou don't have room for the item!", 0, 0);
					s = true;
				}
				else if (block_->mannequin.c_back != 0) {
					if (Inventory::Modify(peer, block_->mannequin.c_back, c_) == 0) {
						block_->mannequin.c_back = 0;
					}
					else VarList::OnTalkBubble(peer, pInfo(peer)->netID, "`wYou don't have room for the item!", 0, 0);
					s = true;
				}
				else if (block_->mannequin.c_hair != 0) {
					if (Inventory::Modify(peer, block_->mannequin.c_hair, c_) == 0) {
						block_->mannequin.c_hair = 0;
					}
					else VarList::OnTalkBubble(peer, pInfo(peer)->netID, "`wYou don't have room for the item!", 0, 0);
					s = true;
				}
				else if (block_->mannequin.c_neck != 0) {
					if (Inventory::Modify(peer, block_->mannequin.c_neck, c_) == 0) {
						block_->mannequin.c_neck = 0;
					}
					else VarList::OnTalkBubble(peer, pInfo(peer)->netID, "`wYou don't have room for the item!", 0, 0);
					s = true;
				}
				if (s) {
					tile_update(peer, world_, block_, x_, y_);
					return true;
				}
			}
			if (items[block_->fg].blockType == BlockTypes::OVEN && not block_->food.empty()) {
				int now = std::chrono::duration_cast<std::chrono::seconds>(std::chrono::system_clock::now().time_since_epoch()).count();
				vector<int> totalrate{}, recipe{};
				for (int i = 0; i < block_->food.size(); i++) {
					int id = block_->food[i].id;
					double timep = (double)now - (double)block_->food[i].time;
					timep = (block_->pr / 3) * timep;
					double open = ingredients[id].open;
					double perfect = ingredients[id].perfect;
					int spiceid = 0;
					int rate = 5;
					if ((timep - perfect >= 0 && timep - perfect <= open / 1.1) or (timep - perfect <= 0 && timep - perfect >= -open / 1.1)) {
						rate = 100;
					}
					else if ((timep - perfect >= 0 && timep - perfect <= open / 0.7) or (timep - perfect <= 0 && timep - perfect >= -open / 0.7)) {
						rate = randombetween(85, 95);
					}
					else if ((timep - perfect >= 0 && timep - perfect <= open / 0.5) or (timep - perfect <= 0 && timep - perfect >= -open / 0.6)) {
						rate = randombetween(80, 85);
					}
					else if ((timep - perfect >= 0 && timep - perfect <= open) or (timep - perfect <= 0 && timep - perfect >= -open)) {
						rate = randombetween(70, 80);
					}
					else if ((timep - perfect >= 0 && timep - perfect <= open * 2.2) or (timep - perfect <= 0 && timep - perfect >= -open)) {
						rate = randombetween(60, 70);
					}
					else if ((timep - perfect >= 0 && timep - perfect <= open * 3.3) or (timep - perfect <= 0 && timep - perfect >= -open)) {
						rate = randombetween(40, 55);
					}
					else rate = randombetween(0, 40);
					totalrate.push_back(rate);
					recipe.push_back(id);
				}
				double prate = 0.0;
				for (int i = 0; i < totalrate.size(); i++) {
					prate += totalrate[i];
				}
				prate /= totalrate.size();
				string name = "";
				FoodR food{};
				for (int i = 0; i < foodrecipes.size(); i++) {
					if (foodrecipes[i].recipe == recipe) {
						name = items[foodrecipes[i].reward].name;
						food = foodrecipes[i];
					}
				}
				if (name != "") {
					if (not food.spices.empty()) {
						if (block_->spices.empty()) {
							prate -= 7;
						}
						else {
							if (block_->spices == food.spices) {
								prate += food.spicepoint * food.spices.size();
							}
							else {
								prate -= food.spicepoint * food.spices.size();
							}
						}
					}
					if (prate > 100) prate = 100;
					if (prate >= food.percentage) {
						block_->food.clear();
						block_->spices.clear();
						block_->starttime = 0;
						block_->pr = 0;
						int fr = 0;
						if (Inventory::Modify(peer, food.reward, fr = 1) != 0) {
							WorldDrop drop_block_{};
							drop_block_.id = food.reward, drop_block_.count = 1;
							drop_block_.uid = uint16_t(world_->drop_new.size()) + 1, drop_block_.x = (x_ * 32) + rand() % 17, drop_block_.y = (y_ * 32) + rand() % 17;
							VisualHandle::Drop(world_, drop_block_);
						}
						if (block_->fg == 6412 && rand() % 100 < 5) {
							int nm = 0;
							if (Inventory::Modify(peer, food.reward, nm = 1) != 0) {
								WorldDrop drop_block_{};
								drop_block_.id = food.reward, drop_block_.count = 1;
								drop_block_.uid = uint16_t(world_->drop_new.size()) + 1, drop_block_.x = (x_ * 32) + rand() % 17, drop_block_.y = (y_ * 32) + rand() % 17;
								VisualHandle::Drop(world_, drop_block_);
							}
							VarList::OnTalkBubble(peer, pInfo(peer)->netID, "Seems like replicator replicated something!");
						}
						PlayerMoving data_{};
						data_.x = (x_ * 32) + 10, data_.y = (y_ * 32) + 16, data_.packetType = 19, data_.plantingTree = 100, data_.punchX = food.reward, data_.punchY = pInfo(peer)->netID;
						int32_t to_netid = pInfo(peer)->netID;
						BYTE* raw = packPlayerMoving(&data_);
						raw[3] = 5;
						Memory_Copy(raw + 8, &to_netid, 4);
						for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
							if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL) continue;
							if (pInfo(peer)->world != pInfo(currentPeer)->world) continue;
							send_raw(currentPeer, 4, raw, 56, ENET_PACKET_FLAG_RELIABLE);
						}
						delete[] raw;
						VarList::OnTalkBubble(peer, pInfo(peer)->netID, "You have succesfully cooked " + name + " with a success rate of `2(" + to_string((int)prate) + "%)``");
						VarList::OnConsoleMessage(peer, "You have succesfully cooked " + name + " with a success rate of `2(" + to_string((int)prate) + "%)``");
					}
					else {
						block_->food.clear();
						block_->spices.clear();
						block_->starttime = 0;
						block_->pr = 0;
						int fr = 0;
						VarList::OnTalkBubble(peer, pInfo(peer)->netID, "You tried to cook a " + name + ", but you nailed it with a rate of `4(" + to_string((int)prate) + "%)``");
						VarList::OnConsoleMessage(peer, "You tried to cook a " + name + ", but you nailed it with a rate of `4(" + to_string((int)prate) + "%)``");
					}
				}
				else {
					block_->food.clear();
					block_->spices.clear();
					block_->starttime = 0;
					block_->pr = 0;
					PlayerMoving data_{};
					data_.x = (x_ * 32) + 10, data_.y = (y_ * 32) + 16, data_.packetType = 19, data_.plantingTree = 100, data_.punchX = 4576, data_.punchY = pInfo(peer)->netID;
					int32_t to_netid = pInfo(peer)->netID;
					BYTE* raw = packPlayerMoving(&data_);
					raw[3] = 5;
					Memory_Copy(raw + 8, &to_netid, 4);
					for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
						if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL) continue;
						if (pInfo(peer)->world != pInfo(currentPeer)->world) continue;
						send_raw(currentPeer, 4, raw, 56, ENET_PACKET_FLAG_RELIABLE);
					}
					delete[] raw;
					int fr = 0;
					if (Inventory::Modify(peer, 4576, fr = 1) != 0) {
						WorldDrop drop_block_{};
						drop_block_.id = 4576, drop_block_.count = 1;
						drop_block_.uid = uint16_t(world_->drop_new.size()) + 1, drop_block_.x = (x_ * 32) + rand() % 17, drop_block_.y = (y_ * 32) + rand() % 17;
						VisualHandle::Drop(world_, drop_block_);
					}
					if (block_->fg == 6412 && rand() % 100 < 5) {
						int nm = 0;
						if (Inventory::Modify(peer, 4576, nm = 1) != 0) {
							WorldDrop drop_block_{};
							drop_block_.id = 4576, drop_block_.count = 1;
							drop_block_.uid = uint16_t(world_->drop_new.size()) + 1, drop_block_.x = (x_ * 32) + rand() % 17, drop_block_.y = (y_ * 32) + rand() % 17;
							VisualHandle::Drop(world_, drop_block_);
						}
						VarList::OnTalkBubble(peer, pInfo(peer)->netID, "Seems like replicator replicated something!");
					}
					VarList::OnTalkBubble(peer, pInfo(peer)->netID, "Ugh, all you've done is thrown together a inedible `2Bland Mush``.");
					VarList::OnConsoleMessage(peer, "Ugh, all you've done is thrown together a inedible `2Bland Mush``.");
				}
				PlayerMoving data_{};
				data_.packetType = 5, data_.punchX = x_, data_.punchY = y_, data_.characterState = 0x8;
				BYTE* raw = packPlayerMoving(&data_, 112 + alloc_(world_, block_));
				BYTE* blc = raw + 56;
				form_visual(blc, *block_, *world_, peer, false);
				for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
					if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL) continue;
					if (pInfo(currentPeer)->world == pInfo(peer)->world) {
						send_raw(currentPeer, 4, raw, 112 + alloc_(world_, block_), ENET_PACKET_FLAG_RELIABLE);
						SendParticleEffect(currentPeer, x_, y_, 4, 17, 0);
					}
				}
				delete[] raw, blc;
				if (block_->locked) {
					upd_lock(*block_, *world_, peer);
				}
			}
			else if (items[block_->fg].blockType == BlockTypes::GEIGER_CHARGER) {
				if (block_->id != 0) {
					long long current_time = time(nullptr);
					if (block_->planted - current_time > 0) {
						if (block_->hp == -1 or (items[t_].dropChance) < (current_time - block_->lp)) {
							VarList::OnTalkBubble(peer, pInfo(peer)->netID, "That's not done charging!", 0, 0);
						}
					}
					else {
						int give_back_item = 2204;
						int c_ = 1;
						if (Inventory::Modify(peer, give_back_item, c_) == 0) {
							PlayerMoving data_effect_{};
							data_effect_.packetType = 19;
							data_effect_.punchX = give_back_item;
							data_effect_.punchY = pInfo(peer)->netID;
							data_effect_.x = x_ * 32 + 16, data_effect_.y = y_ * 32 + 16;
							BYTE* raw_effect = packPlayerMoving(&data_effect_, 56);
							raw_effect[8] = pInfo(peer)->netID, raw_effect[3] = 5;
							PlayerMoving data_{};
							data_.packetType = 5, data_.punchX = pInfo(peer)->lastwrenchx, data_.punchY = pInfo(peer)->lastwrenchy, data_.characterState = 0x8;
							BYTE* raw = packPlayerMoving(&data_, 112 + alloc_(world_, block_));
							BYTE* blc = raw + 56;
							block_->flags = (block_->flags & 0x00400000 ? block_->flags ^ 0x00400000 : block_->flags);
							form_visual(blc, *block_, *world_, peer, false, true);
							for (ENetPeer* cp_ = server->peers; cp_ < &server->peers[server->peerCount]; ++cp_) {
								if (cp_->state != ENET_PEER_STATE_CONNECTED or cp_->data == NULL) continue;
								if (pInfo(peer)->world != pInfo(cp_)->world) continue;
								send_raw(cp_, 4, raw, 112 + alloc_(world_, block_), ENET_PACKET_FLAG_RELIABLE);
								send_raw(cp_, 4, raw_effect, 56, ENET_PACKET_FLAG_RELIABLE);
							}
							delete[] raw, blc;
							if (block_->locked) upd_lock(*block_, *world_, peer);
							block_->id = 0, block_->planted = 0;
						}
						else {
							if (block_->hp == -1 or (items[t_].dropChance) < (current_time - block_->lp)) {
								VarList::OnTalkBubble(peer, pInfo(peer)->netID, "No room to pick it up!", 0, 0);
							}
						}
					}
				}
			}
			else if (t_ == 8246 || t_ == 10258 || t_ == 1436 || t_ == 14548) {
				if (to_lower(world_->owner_name) != to_lower(pInfo(peer)->tankIDName) and not world_->owner_name.empty()) {
					VarList::OnTalkBubble(peer, pInfo(peer)->netID, "Only the block's owner can break it!", 0, 0);
					return false;
				}
			}
			else if (t_ == 5814) {
				if (world_->guild_id != pInfo(peer)->guild_id && to_lower(pInfo(peer)->tankIDName) == to_lower(world_->owner_name)) {
				}
				else {
					if (to_lower(pInfo(peer)->tankIDName) != to_lower(world_->owner_name) and Role::Owner(peer)) return true;
					if (to_lower(pInfo(peer)->tankIDName) == to_lower(world_->owner_name)) {
						VarList::OnTalkBubble(peer, pInfo(peer)->netID, "You can't smash a " + items[t_].name + ", the only way to destroy it is to abandon the guild!", 0, 0);
						return false;
					}
				}
			}
			else if (items[t_].blockType == BlockTypes::VIP_ENTRANCE) {
				if (to_lower(world_->owner_name) != to_lower(pInfo(peer)->tankIDName) && not Role::Developer(peer)) {
					if (not Role::Developer(peer)) {
						VarList::OnTalkBubble(peer, pInfo(peer)->netID, "Only the block's owner can break it!", 0, 0);
						return true;
					}
				}
			}
			else if (items[t_].blockType == BlockTypes::DISPLAY) {
				if (to_lower(world_->owner_name) != to_lower(pInfo(peer)->tankIDName) and not world_->owner_name.empty() and not Role::Administrator(peer)) {
					if (block_->id != 0) {
						if (not Role::Administrator(peer)) {
							VarList::OnTalkBubble(peer, pInfo(peer)->netID, "Only the block's owner can break it!", 0, 0);
							return true;
						}
					}
				}
			}	
			else if (items[t_].blockType == BlockTypes::SEED and uint32_t((time(nullptr) - block_->planted <= items[block_->fg].growTime ? time(nullptr) - block_->planted : items[block_->fg].growTime)) == items[block_->fg].growTime) {
				if (t_ == 1791) {
					PlayerMoving data_{};
					data_.packetType = 17, data_.netID = 48, data_.YSpeed = 48, data_.x = (x_ * 32) + 16, data_.y = (y_ * 32) + 16;
					BYTE* raw = packPlayerMoving(&data_);
					for (ENetPeer* cp_ = server->peers; cp_ < &server->peers[server->peerCount]; ++cp_) {
						if (cp_->state != ENET_PEER_STATE_CONNECTED or cp_->data == NULL) continue;
						if (pInfo(peer)->world != pInfo(cp_)->world) continue;
						send_raw(cp_, 4, raw, 56, ENET_PACKET_FLAG_RELIABLE);
					}
					delete[] raw;
					world_->blocks[x_ + (y_) * 100].fg = 1790;
					update_tile(peer, x_, y_, 1790, false, true);
					return false;
				}
				if (t_ == 13317 || t_ == 13319) {
					int random = rand() % items[t_].noob_item.size(), itemid = items[t_].noob_item[random].first, got = items[t_].noob_item[random].second, set = 13316;
					if (items[t_].newdropchance != 0 && (rand() % items[t_].newdropchance) < 1 && items[t_].rare_item.size() != 0)  random = (rand() % items[t_].rare_item.size()), itemid = items[t_].rare_item[random].first, got = items[t_].rare_item[random].second;
					WorldDrop drop_seed_{};
					drop_seed_.id = itemid, drop_seed_.count = got, drop_seed_.x = (x_ * 32) + rand() % 17, drop_seed_.y = (y_ * 32) + rand() % 17;
					VisualHandle::Drop(world_, drop_seed_);
					if (t_ == 13319) set = 13318;
					world_->blocks[x_ + (y_) * 100].fg = set;
					update_tile(peer, x_, y_, set, false, true);
					return false;
				}
				if (pInfo(peer)->lvlKit < 100) Kit_Server::Add_Xp(peer, rand() % 28, "kit");
				if (pInfo(peer)->C_QuestActive && pInfo(peer)->C_QuestKind == 2 && pInfo(peer)->C_QuestProgress < pInfo(peer)->C_ProgressNeeded) {
					pInfo(peer)->C_QuestProgress += items[block_->fg].rarity;
					if (pInfo(peer)->C_QuestProgress >= pInfo(peer)->C_ProgressNeeded) {
						pInfo(peer)->C_QuestProgress = pInfo(peer)->C_ProgressNeeded;
						gamepacket_t p;
						p.Insert("OnTalkBubble");
						p.Insert(pInfo(peer)->netID);
						p.Insert("`9Ring Quest task complete! Go tell the Ringmaster!");
						p.Insert(0), p.Insert(0);
						p.CreatePacket(peer);
					}
				}
				if (pInfo(peer)->lifegoals3 && not pInfo(peer)->lifegoals_3 and pInfo(peer)->exp_goal < 800) {
					pInfo(peer)->exp_goal += items[block_->fg].rarity;
					if (pInfo(peer)->exp_goal >= 800) {
						pInfo(peer)->exp_goal = 800;
						VarList::OnConsoleMessage(peer, "`9Life Goal ''`2Harvest 800 rarity from trees``'' is complete! Go call Crazy Jim!");
						VarList::OnTalkBubble(peer, pInfo(peer)->netID, "`9Life Goal ''`2Harvest 800 rarity from trees``'' is complete! Go call Crazy Jim!", 0, 0);
					}
				}
				if (pInfo(peer)->role_quest and pInfo(peer)->quest_number == 3) {
					if (pInfo(peer)->role_quest_type == "Farmer" and pInfo(peer)->need_required < pInfo(peer)->quest_required) {
						pInfo(peer)->need_required += items[block_->fg].rarity;
						if (pInfo(peer)->need_required >= pInfo(peer)->quest_required) {
							pInfo(peer)->need_required = pInfo(peer)->quest_required;
							VarList::OnConsoleMessage(peer, "`9Farmer Quest! `ocomplete! Go claim your points!");
							VarList::OnTalkBubble(peer, pInfo(peer)->netID, "`9Farmer Quest! ``complete! Go claim your points!", 0, 0);
						}
					}
				}
				if (event_item == 6244) EventPool::Guilds::Point::Add(peer, pInfo(peer)->hand);
				int drop_count = items[block_->fg - 1].rarity == 1 ? (items[block_->fg - 1].farmable ? (rand() % 6) + 5 : (rand() % block_->fruit) + 1) : items[block_->fg - 1].farmable ? (rand() % 6) + 4 : (rand() % block_->fruit) + 1;
				if (rand() % 50 < 1) drop_count++;
				if (pInfo(peer)->back == 1746 && (pInfo(peer)->feet == 1830 or pInfo(peer)->feet == 1966)) {//fuel + sorrow/harvester
					if (items[block_->fg - 1].rarity < 500) {
						int c1746 = 1746, countofitem = 0, removepack = -1;
						Inventory::Modify(peer, c1746, countofitem);
						if (countofitem >= 1) {
							if (rand() % 100 < 8) {
								Inventory::Modify(peer, c1746, removepack);
								drop_count *= 2;
								if (pInfo(peer)->feet == 1966) {
									PlayerMoving data_{};
									data_.packetType = 17, data_.netID = 106, data_.YSpeed = 106, data_.x = pInfo(peer)->x + 16, data_.y = pInfo(peer)->y + 16;
									BYTE* raw = packPlayerMoving(&data_);
									for (ENetPeer* cp_ = server->peers; cp_ < &server->peers[server->peerCount]; ++cp_) {
										if (cp_->state != ENET_PEER_STATE_CONNECTED or cp_->data == NULL or pInfo(peer)->world != pInfo(cp_)->world) continue;
										send_raw(cp_, 4, raw, 56, ENET_PACKET_FLAG_RELIABLE);
									}
									delete[] raw;
								}
								else {
									PlayerMoving data_{};
									data_.packetType = 17, data_.netID = 50, data_.YSpeed = 50, data_.x = pInfo(peer)->x + 16, data_.y = pInfo(peer)->y + 16;
									BYTE* raw = packPlayerMoving(&data_);
									for (ENetPeer* cp_ = server->peers; cp_ < &server->peers[server->peerCount]; ++cp_) {
										if (cp_->state != ENET_PEER_STATE_CONNECTED or cp_->data == NULL or pInfo(peer)->world != pInfo(cp_)->world) continue;
										send_raw(cp_, 4, raw, 56, ENET_PACKET_FLAG_RELIABLE);
									}
									delete[] raw;
								}
							}
						}
					}
				}
				if (pInfo(peer)->hand == 6840) {// Dreamcatcher Staff
					if (rand() % 100 < 2) {
						PlayerMoving data_{};
						data_.packetType = 17, data_.netID = 24, data_.YSpeed = 24, data_.x = pInfo(peer)->x + 16, data_.y = pInfo(peer)->y + 16;
						BYTE* raw = packPlayerMoving(&data_);
						for (ENetPeer* cp_ = server->peers; cp_ < &server->peers[server->peerCount]; ++cp_) {
							if (cp_->state != ENET_PEER_STATE_CONNECTED or cp_->data == NULL) continue;
							if (pInfo(peer)->world != pInfo(cp_)->world) continue;
							send_raw(cp_, 4, raw, 56, ENET_PACKET_FLAG_RELIABLE);
						}
						delete[] raw;
						drop_count++;
					}
				}
				if (harvest_seed(world_, block_, x_, y_, drop_count, pInfo(peer)->netID, peer)) {
					if (drop_count != 0) {
						VarList::OnTalkBubble(peer, pInfo(peer)->netID, "A `w" + items[t_].name + "`` falls out!", 0, 0);
					}
				}
				else if (world_->weather == 8 and rand() % 300 < 2) {
					WorldDrop drop_block_{};
					drop_block_.id = 3722, drop_block_.count = 1, drop_block_.x = x_ * 32 + rand() % 17, drop_block_.y = y_ * 32 + rand() % 17;
					VisualHandle::Drop(world_, drop_block_);
					PlayerMoving data_2{};
					data_2.packetType = 0x11, data_2.x = drop_block_.x, data_2.y = drop_block_.y, data_2.YSpeed = 108;
					BYTE* raw2 = packPlayerMoving(&data_2);
					for (ENetPeer* cp_ = server->peers; cp_ < &server->peers[server->peerCount]; ++cp_) {
						if (cp_->state != ENET_PEER_STATE_CONNECTED or cp_->data == NULL or pInfo(cp_)->world != world_->name) continue;
						send_raw(cp_, 4, raw2, 56, ENET_PACKET_FLAG_RELIABLE);
					}
					delete[] raw2;
				}
				if (drop_count != 0) drop_rare_item(world_, peer, t_ - 1, x_, y_, true);
				return true;
			}
			if (block_->hp == -1 or (items[t_].dropChance) < (time(nullptr) - block_->lp)) {
				int punch_ = items[t_].breakHits / 6;
				bool brokenz = false;
				if (items[t_].blockType != BlockTypes::LOCK && items[t_].blockType != BlockTypes::AUTO_BLOCK && items[t_].blockType != BlockTypes::SUCKER) {
					if ((block_->fg == 3200 and WinterFest.Active and pInfo(peer)->world == "GROWCH" and pInfo(peer)->hand == 3206) or ((pInfo(peer)->hand == 9522 or pInfo(peer)->hand == 9520) && items[t_].rarity <= 11) or (pInfo(peer)->necklace == 9376 && (t_ == 3556 or t_ == 9380 or t_ == 9382 or t_ == 3564 or t_ == 9380 or t_ == 9382)) or (pInfo(peer)->hand == 2952 && (t_ == 2 or t_ == 14)) or (pInfo(peer)->hand == 7434 && (t_ == 1536 or t_ == 850 or t_ == 442)) or pInfo(peer)->hit1 || pInfo(peer)->hand == 9914 || pInfo(peer)->hand == 10384 || pInfo(peer)->hand == 10126 || pInfo(peer)->hand == 9846 || pInfo(peer)->hair == 9920 || pInfo(peer)->hair == 10122 || pInfo(peer)->necklace == 10176 || pInfo(peer)->hand == 9974 || pInfo(peer)->hand == 10020 || pInfo(peer)->hand == 9770 || pInfo(peer)->hand == 9772 || pInfo(peer)->hand == 9906 || pInfo(peer)->hand == 9908 || pInfo(peer)->hand == 9916 || pInfo(peer)->hand == 9918 || pInfo(peer)->hand == 10290 || pInfo(peer)->hand == 13702 || pInfo(peer)->hand == 13700 || pInfo(peer)->hand == 13704 || pInfo(peer)->hand == 9908 || pInfo(peer)->hand == 9906) brokenz = true;
				}
				if (brokenz) {
					if (not pInfo(peer)->autofarm) {
						PlayerMoving data_{};
						data_.packetType = 17, data_.netID = 97, data_.YSpeed = 97, data_.x = x_ * 32 + 16, data_.plantingTree = 300, data_.y = y_ * 32 + 16, data_.XSpeed = t_;
						BYTE* raw = packPlayerMoving(&data_);
						for (ENetPeer* cp_ = server->peers; cp_ < &server->peers[server->peerCount]; ++cp_) {
							if (cp_->state != ENET_PEER_STATE_CONNECTED or cp_->data == NULL or pInfo(peer)->world != pInfo(cp_)->world or pInfo(cp_)->cheater_settings & SETTINGS::SETTINGS_14) continue;
							send_raw(cp_, 4, raw, 56, ENET_PACKET_FLAG_RELIABLE);
						}
						delete[] raw;
					}
					block_->hp = 1;
				}
				else {
					if (pInfo(peer)->punch_decrease) block_->hp *= 1.2;
					if (pInfo(peer)->xenonite & SETTINGS::XENONITE_FORCE_STRONG_PUNCH or (pInfo(peer)->cheater_settings & SETTINGS::SETTINGS_9 && pInfo(peer)->disable_cheater == 0)) block_->hp = punch_ + 2;
					else if (pInfo(peer)->xenonite & SETTINGS::XENONITE_BLOCK_STRONG_PUNCH) block_->hp = punch_;
					else {
						if (t_ == MINING::NAVAL_BOMB or t_ == MINING::CELESTINE_ORE or t_ == MINING::TIN_ORE or t_ == MINING::COPPER_ORE or t_ == MINING::VANADIUM_ORE or t_ == MINING::TITANIUM_ORE or t_ == MINING::SILVER_ORE or t_ == MINING::GOLDEN_ORE or t_ == MINING::PLATINUM_ORE or t_ == MINING::DIAMOND_ORE) block_->hp = 10;
						else if (t_ == 14534) block_->hp = 5;
						else if (t_ == 1000) block_->hp = 1;
						else block_->hp = punch_;
					}
				}
				if (pInfo(peer)->hand == 9522) {
					int got = 0;
					if (rand() % 100 < (30)) Inventory::Modify(peer, 9522, got = -1);
				}
				for (int i_2 = 0; i_2 < EditItem.size(); i_2++) {
					if (EditItem[i_2].ID == pInfo(peer)->hand or EditItem[i_2].ID == pInfo(peer)->necklace or EditItem[i_2].ID == pInfo(peer)->pants or EditItem[i_2].ID == pInfo(peer)->shirt or EditItem[i_2].ID == pInfo(peer)->face or EditItem[i_2].ID == pInfo(peer)->mask or EditItem[i_2].ID == pInfo(peer)->hair or EditItem[i_2].ID == pInfo(peer)->feet or EditItem[i_2].ID == pInfo(peer)->back) {
						if (EditItem[i_2].Punch_Hit != 0) block_->hp = EditItem[i_2].Punch_Hit;
					}
				}
				block_->lp = time(nullptr);
			}
			block_->hp -= 1;
			if (block_->hp == 0) { 
				bool ignore_reset = false;
				for (int i_2 = 0; i_2 < EditItem.size(); i_2++) {
					int giveitem = 0;
					if (EditItem[i_2].ID == t_ and EditItem[i_2].property_gacha == true) {
						std::srand(static_cast<unsigned int>(std::time(0)));
						if (!EditItem[i_2].Extra_Drops.empty()) {
							int randomIndex = std::rand() % EditItem[i_2].Extra_Drops.size();
							int randomIdFirst = EditItem[i_2].Extra_Drops[randomIndex].first;
							int fixedIdSecond = EditItem[i_2].Extra_Drops[0].second;
							WorldDrop drop_block_{};
							drop_block_.x = (x_ * 32) + rand() % 17, drop_block_.y = (y_ * 32) + rand() % 17, drop_block_.id = randomIdFirst, drop_block_.count = fixedIdSecond;
							if (not use_mag(world_, drop_block_, x_, y_)) VisualHandle::Drop(world_, drop_block_);
						}
					}
				}
				if (items[t_].blockType == BlockTypes::MAGIC_EGG) drop_from_magic_egg(peer, world_, block_, x_, y_);
				else if ((items[t_].blockType == BlockTypes::VENDING && block_->c_ + block_->wl != 0) or (t_ == 6954 && block_->c_ != 0) or (t_ == 10358 && block_->wl != 0) or (items[t_].blockType == BlockTypes::SUCKER && block_->pr > 0) or (items[t_].blockType == BlockTypes::DONATION && block_->donates.size() != 0) or (items[t_].blockType == BlockTypes::Display_Shelf && (block_->shelf_1 + block_->shelf_2 + block_->shelf_3 + block_->shelf_4 != 0))) {
					VarList::OnTalkBubble(peer, pInfo(peer)->netID, "Empty the " + items[t_].name + " before breaking it!", 0, 0);
					return true;
				}
				else if (t_ == 392 || t_ == 3402 || t_ == 9350 || t_ == 9976) drop_valentine_box(peer, world_, block_, x_, y_);
				else if (t_ == 9572) {
				tnt:
					vector<int> random_xy{ 2, 1, 0, -1, -2 };
					update_tile(peer, x_, y_, 0, false, true);
					for (int i = 0; i < 8; i++) {
						int randomx = random_xy[rand() % random_xy.size()] + x_, randomy = random_xy[rand() % random_xy.size()] + y_;
						if (randomx >= 0 && randomx < world_->max_x && randomy > 0 && randomy < world_->max_y) {
							WorldBlock* dropx = &world_->blocks[randomx + (randomy * 100)];
							if (dropx->fg == 9560 || dropx->fg == 9562 || dropx->fg == 9564 || dropx->fg == 9580 || dropx->fg == 9558) {
								for (ENetPeer* cp_ = server->peers; cp_ < &server->peers[server->peerCount]; ++cp_) {
									if (cp_->state != ENET_PEER_STATE_CONNECTED or cp_->data == NULL or pInfo(cp_)->world != name_) continue;
									CAction::Effect_V2(cp_, 8, (float)(randomx * 32) + 16, (float)(randomy * 32) + 16);
									update_tile(cp_, x_, y_, 0, false, false);
									update_tile(cp_, randomx, randomy, 0, false, false);
									if (abs((pInfo(cp_)->x / 32) - randomx) <= 1 && abs((pInfo(cp_)->y / 32) - randomy) <= 1) Player_Respawn(cp_, true, 0, 1);
								}
								dropx->fg = 0;
							}
							else if (dropx->fg == 9572) {
								update_tile(peer, randomx, randomy, 0, false, true);
								dropx->fg = 0;
								x_ = randomx;
								y_ = randomy;
								goto tnt;
							}
						}
					}
				}
				if (block_->fg == 3200 and pInfo(peer)->world == "GROWCH" and pInfo(peer)->hand == 3206) {
					if (WinterFest.Active) {
						int got = 0, axe = rand() % 4 + 1;
						if (Inventory::Modify(peer, 3208, got = axe) != 0) {
							WorldDrop drop_block_{};
							drop_block_.id = 3208, drop_block_.count = axe, drop_block_.x = (x_ * 32) + rand() % 17, drop_block_.y = (y_ * 32) + rand() % 17;
							VisualHandle::Drop(world_, drop_block_);
						}
						if (WinterFest.Active) DailyEvent_Task::WinterFest(peer, "11", 1);
						VarList::OnTalkBubble(peer, pInfo(peer)->netID, "You shattered your " + items[3206].name + " into pleces, but you got a `2Giving Tree ``and recovered " + to_string(axe) + " Axe Fragments!", 0, 1);
						Inventory::Modify(peer, 3206, got = -1);
						if (Inventory::Modify(peer, 3200, got = 1) == 0) {
							PlayerMoving data_{};
							data_.x = x_ * 32 + 16, data_.y = y_ * 32 + 16, data_.packetType = 19, data_.plantingTree = 500, data_.punchX = 3200, data_.punchY = pInfo(peer)->netID;
							int32_t to_netid = pInfo(peer)->netID;
							BYTE* raw = packPlayerMoving(&data_);
							raw[3] = 5;
							Memory_Copy(raw + 8, &to_netid, 4);
							for (ENetPeer* cp_ = server->peers; cp_ < &server->peers[server->peerCount]; ++cp_) {
								if (cp_->state != ENET_PEER_STATE_CONNECTED || cp_->data == NULL) break;
								if (pInfo(peer)->world == pInfo(cp_)->world) {
									send_raw(cp_, 4, raw, 56, ENET_PACKET_FLAG_RELIABLE);
								}
							}
							delete[] raw;
						}
						else {
							WorldDrop drop_block_{};
							drop_block_.id = 3200, drop_block_.count = 1, drop_block_.x = (x_ * 32) + rand() % 17, drop_block_.y = (y_ * 32) + rand() % 17;
							VisualHandle::Drop(world_, drop_block_);
						}
						block_->planted = time(nullptr) + 300;
						update_tile(peer, x_, y_, block_->fg = 3202, false, true);
						ignore_reset = true;
					}
				}
				else if (items[block_->fg].fossil_rock2) {
					if (pInfo(peer)->hand == 3934 && block_->flags & items[t_].block_flag) {
						WorldDrop drop_block_{};
						drop_block_.id = 3936, drop_block_.count = 1, drop_block_.x = (x_ * 32) + rand() % 17, drop_block_.y = (y_ * 32) + rand() % 17;
						VisualHandle::Drop(world_, drop_block_);
					}
				}
				else if (t_ == 720) {// PINATA
					vector<pair<int, int>> receivingitems;
					vector<int> random_xy{ 2, 1, 0, -1, -2 };
					for (int i_ = 0; i_ < world_->drop_new.size(); i_++) {
						if (x_ == (world_->drop_new[i_][3] / 32) && y_ == (world_->drop_new[i_][4] / 32)) {
							receivingitems.push_back(make_pair(world_->drop_new[i_][0], world_->drop_new[i_][1]));
							PlayerMoving data_{};
							data_.packetType = 14, data_.netID = 0;
							data_.plantingTree = world_->drop_new[i_][2];
							BYTE* raw = packPlayerMoving(&data_);
							for (ENetPeer* cp_ = server->peers; cp_ < &server->peers[server->peerCount]; ++cp_) {
								if (cp_->state != ENET_PEER_STATE_CONNECTED or cp_->data == NULL or pInfo(cp_)->world != name_) continue;
								send_raw(cp_, 4, raw, 56, ENET_PACKET_FLAG_RELIABLE);
							}
							delete[]raw;
							world_->drop_new.erase(world_->drop_new.begin() + i_);
						}
					}
					for (int i = 0; i < receivingitems.size(); i++) {
						int randomx = random_xy[rand() % random_xy.size()], randomy = random_xy[rand() % random_xy.size()];
						WorldDrop drop_block_{};
						WorldBlock* dropx = &world_->blocks[(x_ + randomx) + ((y_ + randomy) * 100)];
						if (dropx->fg != 0) drop_block_.id = receivingitems[i].first, drop_block_.count = receivingitems[i].second, drop_block_.x = (x_ * 32) + rand() % 17, drop_block_.y = (y_ * 32) + rand() % 17;
						else drop_block_.id = receivingitems[i].first, drop_block_.count = receivingitems[i].second, drop_block_.x = ((x_ + randomx) * 32) + rand() % 17, drop_block_.y = ((y_ + randomy) * 32) + rand() % 17;
						VisualHandle::Drop(world_, drop_block_);
					}
				}
				else if (t_ == 836) {// SUMMER SUPRISE
					if (Event()->Summerfest) {
						pInfo(peer)->summer_total++;
						if (pInfo(peer)->summer_surprise < 20) {
							pInfo(peer)->summer_surprise++;
						}
					}
					vector<int> list{ 12202, 6308, 846, 3702, 8602, 8600, 11068, 832, 2860, 6328, 6324, 6330, 834, 2862, 8612, 4810, 6326, 9744, 3700, 9756, 842, 9748, 11066, 11062, 11064, 840, 850, 3704, 8592, 8594, 3698, 3740, 442, 846, 4804, 3742, 8610, 2856, 844, 11058, 2858, 11040, 822, 838, 4812 }, rare_list{ 1680, 11040, 12192, 12194, 12196, 12198, 12200, 12202, 13626, 13614, 13620, 13618 }, random_xy{ 1, 0, -1 };
					for (int i = 0; i < 3; i++) {
						int item = list[rand() % list.size()];
						WorldDrop drop_block_{};
						if (rand() % 700 < 1) item = rare_list[rand() % rare_list.size()];
						drop_block_.id = item, drop_block_.count = (item == 850 || item == 442 || item == 822 || item == 832 || item == 846 ? 10 : (item == 834 ? 5 : 1));
						int randomx = random_xy[rand() % random_xy.size()], randomy = random_xy[rand() % random_xy.size()];
						if (randomx + x_ > 0 && randomx + x_ < world_->max_x && randomy + y_ > 0 && randomy + y_ < world_->max_y) {
							if (world_->blocks[(x_ + randomx) + ((y_ + randomy) * 100)].fg != 0) drop_block_.x = (x_ * 32) + rand() % 17, drop_block_.y = (y_ * 32) + rand() % 17;
							else drop_block_.x = ((x_ + randomx) * 32) + rand() % 17, drop_block_.y = ((y_ + randomy) * 32) + rand() % 17;
						}
						else drop_block_.x = (x_ * 32) + rand() % 17, drop_block_.y = (y_ * 32) + rand() % 17;
						VisualHandle::Drop(world_, drop_block_);
					}
				}
				else if (t_ == 10294) {// ORGANIC TURKEY
					vector<int> list{ 10254, 10280, 9128,9134, 7348, 9132, 10292,10250,11360, 11364, 11362, 12900, 12896 }, rare_list{ 12842, 11352,7350,  10286, 10260, 10252, 11356,  10284, 10274,  10320 , 10258 , 7358 , 10256 , 10282 , }, random_xy{ 1, 0, -1 };
					for (int i = 0; i < 2; i++) {
						int item = list[rand() % list.size()];
						WorldDrop drop_block_{};
						if (rand() % 100 < 1) item = rare_list[rand() % rare_list.size()];
						drop_block_.id = item, drop_block_.count = 1;
						int randomx = random_xy[rand() % random_xy.size()], randomy = random_xy[rand() % random_xy.size()];
						if (randomx + x_ > 0 && randomx + x_ < world_->max_x && randomy + y_ > 0 && randomy + y_ < world_->max_y) {
							if (world_->blocks[(x_ + randomx) + ((y_ + randomy) * 100)].fg != 0) drop_block_.x = (x_ * 32) + rand() % 17, drop_block_.y = (y_ * 32) + rand() % 17;
							else drop_block_.x = ((x_ + randomx) * 32) + rand() % 17, drop_block_.y = ((y_ + randomy) * 32) + rand() % 17;
						}
						else drop_block_.x = (x_ * 32) + rand() % 17, drop_block_.y = (y_ * 32) + rand() % 17;
						VisualHandle::Drop(world_, drop_block_);
					}
				}
				else if (t_ == 8522 || t_ == 10836 || t_ == 10838 || t_ == 10840 || t_ == 10834 || t_ == 10842 || t_ == 12678) { // Surgery Supply Crate, Fishing Supply Crate, Cooking Supply Crate, Startopia Supply Crate, Superhero Supply Crate
					WorldDrop drop_block_{};
					for (int i = 0; i < items[t_].noob_item.size(); i++) {
						drop_block_.id = items[t_].noob_item[i].first, drop_block_.count = items[t_].noob_item[i].second, drop_block_.x = (x_ * 32) + rand() % 17, drop_block_.y = (y_ * 32) + rand() % 17;
						VisualHandle::Drop(world_, drop_block_);
					}
				}
				else if (t_ == 14596) { // MYTHICAL INFINITY GACHA BOX
					std::uint32_t reward = items[t_].randomitem[rand() % items[t_].randomitem.size()];
					for (ENetPeer* cp_ = server->peers; cp_ < &server->peers[server->peerCount]; ++cp_) {
						if (cp_->state != ENET_PEER_STATE_CONNECTED or cp_->data == NULL) continue;
						if (pInfo(cp_)->world == world_->name) {
							VarList::OnConsoleMessage(cp_, (!pInfo(peer)->d_name.empty() ? pInfo(peer)->d_name : pInfo(peer)->name_color + pInfo(peer)->tankIDName) + "`o: The power of " + items[t_].name + " has been unleashed! And dropped `5" + items[reward].name + "``!");
							VarList::OnTalkBubble(cp_, pInfo(peer)->netID, "The power of " + items[t_].name + " dropped `5" + items[reward].name + "``!", 2, true);
							CAction::Effect_V2(cp_, 99, (float)x_ * 32 + 16, (float)y_ * 32 + 16);
						}
					}
					WorldDrop drop_block_{};
					drop_block_.id = reward, drop_block_.count = 1, drop_block_.x = (x_ * 32) + rand() % 17, drop_block_.y = (y_ * 32) + rand() % 17;
					VisualHandle::Drop(world_, drop_block_);
				}
				else if (t_ == 10716) { // EASTER MISSION ITEM
					std::vector<int> clothes_;
					std::string color = "`2";
					bool legendary = false, untradeable = false;
					for (int i = 0; i < items.size(); i++) {
						if (items[i].blockType != CLOTHING or items[i].unobtainable) continue;
						clothes_.push_back(i);
					}
					std::uint32_t reward = clothes_[rand() % clothes_.size()];
					if (items[reward].untradeable) untradeable = true;
					if (reward == 1780 or reward == 1782 or reward == 1784 or reward == 2592 or reward == 6026 or reward == 7734 or reward == 8306 or reward == 11140 or reward == 11142) legendary = true;
					if (untradeable) color = "`#";
					if (legendary) color = "`9";
					for (ENetPeer* cp_ = server->peers; cp_ < &server->peers[server->peerCount]; ++cp_) {
						if (cp_->state != ENET_PEER_STATE_CONNECTED or cp_->data == NULL) continue;
						if (pInfo(cp_)->world == world_->name) {
							VarList::OnConsoleMessage(cp_, (!pInfo(peer)->d_name.empty() ? pInfo(peer)->d_name : pInfo(peer)->name_color + pInfo(peer)->tankIDName) + "`o: The power of Easter Mission dropped " + color + items[reward].name + "``!");
							VarList::OnTalkBubble(cp_, pInfo(peer)->netID, "The power of Easter Mission dropped " + color + items[reward].name + "``!", 2, true);
							if (legendary) CAction::Effect(cp_, 90, (float)x_ * 32 + 16, (float)y_ * 32 + 16);
							else CAction::Effect_V2(cp_, 89, (float)x_ * 32 + 16, (float)y_ * 32 + 16);
						}
					}
					WorldDrop drop_block_{};
					drop_block_.id = reward, drop_block_.count = 1, drop_block_.x = (x_ * 32) + rand() % 17, drop_block_.y = (y_ * 32) + rand() % 17;
					VisualHandle::Drop(world_, drop_block_);
				}
				else if (t_ == 7628 || t_ == 11156 || t_ == 9600 || t_ == 13160) {// HIDDEN TRASURE, GROWMOJI CHEST, CONSUMABLE CHEST, UBICREATE  
					WorldDrop drop_block_{};
					drop_block_.id = items[t_].randomitem[rand() % items[t_].randomitem.size()], drop_block_.count = 1, drop_block_.x = (x_ * 32) + rand() % 17, drop_block_.y = (y_ * 32) + rand() % 17;
					VisualHandle::Drop(world_, drop_block_);
				}
				else if (t_ == MINING::CELESTINE_ORE or t_ == MINING::TIN_ORE or t_ == MINING::COPPER_ORE or t_ == MINING::VANADIUM_ORE or t_ == MINING::TITANIUM_ORE or t_ == MINING::SILVER_ORE or t_ == MINING::GOLDEN_ORE or t_ == MINING::PLATINUM_ORE or t_ == MINING::DIAMOND_ORE) {// ORE MINING
					bool has_ = false;
					if (t_ == MINING::CELESTINE_ORE) {
						WorldDrop drop_block_{};
						drop_block_.id = MINING::CELESTINE, drop_block_.count = 1, drop_block_.x = (x_ * 32) + rand() % 17, drop_block_.y = (y_ * 32) + rand() % 17;
						VisualHandle::Drop(world_, drop_block_);
						if (rand() % 100 < 5) {
							pInfo(peer)->Mines_Score += 1;
							pInfo(peer)->mines_coin += 1;
							has_ = true;
						}
					}
					else if (t_ == MINING::TIN_ORE) {
						WorldDrop drop_block_{};
						drop_block_.id = MINING::TIN, drop_block_.count = 1, drop_block_.x = (x_ * 32) + rand() % 17, drop_block_.y = (y_ * 32) + rand() % 17;
						VisualHandle::Drop(world_, drop_block_);
						if (rand() % 100 < 12) {
							pInfo(peer)->Mines_Score += rand() % 2;
							pInfo(peer)->mines_coin += rand() % 2;
							has_ = true;
						}
					}
					else if (t_ == MINING::COPPER_ORE) {
						WorldDrop drop_block_{};
						drop_block_.id = MINING::COPPER, drop_block_.count = 1, drop_block_.x = (x_ * 32) + rand() % 17, drop_block_.y = (y_ * 32) + rand() % 17;
						VisualHandle::Drop(world_, drop_block_);
						if (rand() % 100 < 16) {
							pInfo(peer)->Mines_Score += rand() % 3;
							pInfo(peer)->mines_coin += rand() % 3;
							has_ = true;
						}
					}
					else if (t_ == MINING::VANADIUM_ORE) {
						WorldDrop drop_block_{};
						drop_block_.id = MINING::VANADIUM, drop_block_.count = 1, drop_block_.x = (x_ * 32) + rand() % 17, drop_block_.y = (y_ * 32) + rand() % 17;
						VisualHandle::Drop(world_, drop_block_);
						if (rand() % 100 < 25) {
							pInfo(peer)->Mines_Score += rand() % 4;
							pInfo(peer)->mines_coin += rand() % 4;
							has_ = true;
						}
					}
					else if (t_ == MINING::TITANIUM_ORE) {
						WorldDrop drop_block_{};
						drop_block_.id = MINING::TITANIUM, drop_block_.count = 1, drop_block_.x = (x_ * 32) + rand() % 17, drop_block_.y = (y_ * 32) + rand() % 17;
						VisualHandle::Drop(world_, drop_block_);
						if (rand() % 100 < 38) {
							pInfo(peer)->Mines_Score += rand() % 5;
							pInfo(peer)->mines_coin += rand() % 5;
							has_ = true;
						}
					}
					else if (t_ == MINING::SILVER_ORE) {
						WorldDrop drop_block_{};
						drop_block_.id = MINING::SILVER, drop_block_.count = 1, drop_block_.x = (x_ * 32) + rand() % 17, drop_block_.y = (y_ * 32) + rand() % 17;
						VisualHandle::Drop(world_, drop_block_);
						if (rand() % 100 < 43) {
							pInfo(peer)->Mines_Score += rand() % 6;
							pInfo(peer)->mines_coin += rand() % 6;
							has_ = true;
						}
					}
					else if (t_ == MINING::GOLDEN_ORE) {
						WorldDrop drop_block_{};
						drop_block_.id = MINING::GOLDEN, drop_block_.count = 1, drop_block_.x = (x_ * 32) + rand() % 17, drop_block_.y = (y_ * 32) + rand() % 17;
						VisualHandle::Drop(world_, drop_block_);
						if (rand() % 100 < 65) {
							pInfo(peer)->Mines_Score += rand() % 7;
							pInfo(peer)->mines_coin += rand() % 7;
							has_ = true;
						}
					}
					else if (t_ == MINING::PLATINUM_ORE) {
						WorldDrop drop_block_{};
						drop_block_.id = MINING::PLATINUM, drop_block_.count = 1, drop_block_.x = (x_ * 32) + rand() % 17, drop_block_.y = (y_ * 32) + rand() % 17;
						VisualHandle::Drop(world_, drop_block_);
						if (rand() % 100 < 77) {
							pInfo(peer)->Mines_Score += rand() % 8;
							pInfo(peer)->mines_coin += rand() % 8;
							has_ = true;
						}
					}
					else if (t_ == MINING::DIAMOND_ORE) {
						WorldDrop drop_block_{};
						drop_block_.id = MINING::DIAMOND, drop_block_.count = 1, drop_block_.x = (x_ * 32) + rand() % 17, drop_block_.y = (y_ * 32) + rand() % 17;
						VisualHandle::Drop(world_, drop_block_);
						if (rand() % 100 < 80) {
							pInfo(peer)->Mines_Score += rand() % 10;
							pInfo(peer)->mines_coin += rand() % 10;
							has_ = true;
						}
					}
					if (has_) {
						if (Event()->dailyc_name == "Mining") Daily_Challenge::Add_Points(peer, rand() % 24 + 1);
						PlayerMoving data_{};
						data_.x = x_ * 32 + 16, data_.y = y_ * 32 + 16;
						data_.packetType = 19, data_.plantingTree = 100;
						data_.punchX = 20192, data_.punchY = pInfo(peer)->netID;
						int32_t to_netid = pInfo(peer)->netID;
						BYTE* raw = packPlayerMoving(&data_);
						raw[3] = 5;
						Memory_Copy(raw + 8, &to_netid, 4);
						for (ENetPeer* cp_ = server->peers; cp_ < &server->peers[server->peerCount]; ++cp_) {
							if (cp_->state != ENET_PEER_STATE_CONNECTED or cp_->data == NULL) continue;
							if (pInfo(cp_)->world == world_->name) {
								send_raw(cp_, 4, raw, 56, ENET_PACKET_FLAG_RELIABLE);
								CAction::Effect(cp_, 130, (float)pInfo(peer)->x + 10, (float)pInfo(peer)->y + 16);
							}
						}
						delete[] raw;
					}
				}
				else if (t_ == MINING::NAVAL_BOMB) {// BOMB
					for (ENetPeer* cp_ = server->peers; cp_ < &server->peers[server->peerCount]; ++cp_) {
						if (cp_->state != ENET_PEER_STATE_CONNECTED or cp_->data == NULL) continue;
						if (pInfo(cp_)->world == world_->name) {
							CAction::Effect(cp_, 186, (float)x_ * 32 + 16, (float)y_ * 32 + 16);
						}
					}
				}
				else if (t_ == MINING::MINE_CRYSTAL) {// MINE CRYSTAL
					if (rand() % 100 < 35) {
						WorldDrop drop_block_{};
						drop_block_.id = 14536, drop_block_.count = 1, drop_block_.x = (x_ * 32) + rand() % 17, drop_block_.y = (y_ * 32) + rand() % 17;
						VisualHandle::Drop(world_, drop_block_);
					}
				}
				else if (t_ == 1000) {// PUBLIC LAVA
					WorldDrop drop_block_{};
					drop_block_.id = 112, drop_block_.count = 1, drop_block_.x = (x_ * 32) + rand() % 17, drop_block_.y = (y_ * 32) + rand() % 17;
					VisualHandle::Drop(world_, drop_block_);
				}
				else if (t_ == 5136 || t_ == 14084 || t_ == 14528 || t_ == 14530) {// GACHA
					WorldDrop drop_block_{};
					drop_block_.id = items[t_].randomitem[rand() % items[t_].randomitem.size()], drop_block_.count = 1, drop_block_.x = (x_ * 32) + rand() % 17, drop_block_.y = (y_ * 32) + rand() % 17;
					VisualHandle::Drop(world_, drop_block_);
					if (t_ == 5136) {
						for (ENetPeer* cp_ = server->peers; cp_ < &server->peers[server->peerCount]; ++cp_) {
							if (cp_->state != ENET_PEER_STATE_CONNECTED or cp_->data == NULL) continue;
							if (pInfo(cp_)->world == world_->name) {
								CAction::Effect(cp_, 182, (float)x_ * 32 + 16, (float)y_ * 32 + 16);
								VarList::OnConsoleMessage(cp_, "CP:_PL:0_OID:_CT:[S]_ `o** The Power of `9" + items[t_].name + "``! " + get_player_nick(peer) + " found a `5" + items[drop_block_.id].name + "``!``");
							}
						}
					}
				}
				else if (t_ == 8426) {// EASTER CREATE
					vector<int> list{ 2544, 2548, 2550, 2552, 2546,2544, 2548, 2550, 2552, 2546, 9460, 5960 };
					WorldDrop drop_block_{};
					drop_block_.id = 611, drop_block_.count = rand() % 20 + 20, drop_block_.x = (x_ * 32) + rand() % 17, drop_block_.y = (y_ * 32) + rand() % 17;
					VisualHandle::Drop(world_, drop_block_);
					if (rand() % 100 < 40) {
						drop_block_.id = list[rand() % list.size()], drop_block_.count = 1, drop_block_.x = (x_ * 32) + rand() % 17, drop_block_.y = (y_ * 32) + rand() % 17;
						VisualHandle::Drop(world_, drop_block_);
					}
					if (rand() % 100 < 80) {
						if (rand() % 500 < 1) list = { 2554 };
						drop_block_.id = list[rand() % list.size()], drop_block_.count = 1, drop_block_.x = (x_ * 32) + rand() % 17, drop_block_.y = (y_ * 32) + rand() % 17;
						VisualHandle::Drop(world_, drop_block_);
					}
				}
				else if (t_ == 13550) { 
					WorldDrop drop_block_{};
					drop_block_.id = 2734, drop_block_.count = rand() % 40 + 15, drop_block_.x = (x_ * 32) + rand() % 17, drop_block_.y = (y_ * 32) + rand() % 17;
					VisualHandle::Drop(world_, drop_block_);
					drop_block_.id = 13542, drop_block_.count = rand() % 11 + 1, drop_block_.x = (x_ * 32) + rand() % 17, drop_block_.y = (y_ * 32) + rand() % 17;
					VisualHandle::Drop(world_, drop_block_);
					drop_block_.id = 13540, drop_block_.count = rand() % 11 + 1, drop_block_.x = (x_ * 32) + rand() % 17, drop_block_.y = (y_ * 32) + rand() % 17;
					VisualHandle::Drop(world_, drop_block_);
					drop_block_.id = 13538, drop_block_.count = rand() % 11 + 1, drop_block_.x = (x_ * 32) + rand() % 17, drop_block_.y = (y_ * 32) + rand() % 17;
					VisualHandle::Drop(world_, drop_block_);
					drop_block_.id = 13544, drop_block_.count = 1, drop_block_.x = (x_ * 32) + rand() % 17, drop_block_.y = (y_ * 32) + rand() % 17;
					VisualHandle::Drop(world_, drop_block_);
				}
				else if (t_ == 542) {
					if (rand() % 200 < 1) {
						WorldDrop drop_block_{};
						drop_block_.id = 2574, drop_block_.count = 1, drop_block_.x = (x_ * 32) + rand() % 17, drop_block_.y = (y_ * 32) + rand() % 17;
						VisualHandle::Drop(world_, drop_block_);
					}
					else {
						gems_(peer, world_, rand() % (100 + 1), x_ * 32, y_ * 32, t_);
					}
				}
				else if (t_ == 12260) { 
					if (rand() % 50 < 1) {
						WorldDrop drop_block_{};
						drop_block_.count = 1, drop_block_.x = (x_ * 32) + rand() % 17, drop_block_.y = (y_ * 32) + rand() % 17;
						drop_block_.id = 12262;
						VisualHandle::Drop(world_, drop_block_);
					}
					//else add_pearl(peer, rand() % 10 + 1);
				}
				else if (t_ == 12252) { 
					if (rand() % 10 < 1) {
						update_tile(peer, x_, y_, block_->fg = 12254, false, true);
						ignore_reset = true;
					}
					//if (rand() % 15 < 1 && ignore_reset == false)add_pearl(peer, rand() % 10 + 1);
					if (rand() % 16 < 1 && ignore_reset == false) {
						update_tile(peer, x_, y_, block_->fg = 12260, false, false);
						ignore_reset = true;
					}
				}
				else if (t_ == 9566 || t_ == 9568) { 
					if (rand() % 650 < 1) {
						vector<int> list{};
						if (t_ == 9566) list = { 9912, 9558, 9560, 9562,9564, 9572,9578, 9582,9580, 9584, 9586, 9588, 128, 260,604,1822,1978,2262,2722,3402,9350,9578 };
						else list = { 9912, 2002,  9558, 9560, 9562,9564, 9572,9578, 9582,9580, 9584, 9586, 9588, 128, 260,604,1822,1978,2262,2722,3402,9350,9578 ,9558, 9560, 9562,9564, 9572,9578, 9582,9580, 9584, 9586, 9588, 9576, 9578,9536,318,1466,1796,1836,1938,1940,1944,2450,2714,3424,4746 };
						WorldDrop drop_block_{};
						drop_block_.id = list[rand() % list.size()], drop_block_.count = 1, drop_block_.x = (x_ * 32) + rand() % 17, drop_block_.y = (y_ * 32) + rand() % 17;
						VisualHandle::Drop(world_, drop_block_);
					}
					else {
						gems_(peer, world_, rand() % ((9566 ? 250 : 750) + 1), x_ * 32, y_ * 32, t_);
					}
				}
				else if (t_ == 3604) {
					vector<int> list{ 112, 3582, 262, 826, 828, 2812, 3606, 3574, 10102, 11228 ,3604 };
					vector<int> rare{ 12280, 12284, 12290, 112, 3582, 262, 826, 828, 2812, 3606, 3574, 10102, 11228, 3604, 2002, 12308 };
					if (rand() % 500 < 1) list = { 12280, 12284, 12290, 112, 3582, 262, 826, 828, 2812, 3606, 3574, 10102, 11228, 3604, 2002 };
					int item = list[rand() % list.size()];
					if (item == 112) {
						gems_(peer, world_, rand() % (300 + 100), x_ * 32, y_ * 32, t_);
					}
					else {
						WorldDrop drop_block_{};
						drop_block_.id = item, drop_block_.count = 1, drop_block_.x = (x_ * 32) + rand() % 17, drop_block_.y = (y_ * 32) + rand() % 17;
						VisualHandle::Drop(world_, drop_block_);
					}
				}
				else if (t_ == 10004) { 
					vector<int> list{ 12352, 3704, 3698, 9754, 842, 3700, 9750, 3702, 3702, 9750, 9746, 3700, 842, 9754, 3698, 1670, 1680, 3704, 3764, 4822, 2874, 8614, 12192, 12194, 12196, 12198, 12200, 12202 };
					int item = list[rand() % list.size()];
					if (rand() % 850 < 1) {
						list = { 9758, 3764, 11012, 9730, 1670, 1680, 4822, 12188, 12186, 13572, 13610, 13608, 13566 };
						item = list[rand() % list.size()];
						string texts = "A `4" + items[t_].ori_name + "`` rewards `2" + get_player_nick(peer) + "`` with a `5Rare " + items[item].ori_name + "``.";
						for (ENetPeer* cp_ = server->peers; cp_ < &server->peers[server->peerCount]; ++cp_) {
							if (cp_->state != ENET_PEER_STATE_CONNECTED or cp_->data == NULL) continue;
							VarList::OnConsoleMessage(cp_, "CP:_PL:0_OID:_CT:[S]_ `o**`` " + texts + "``");
						}
					}
					WorldDrop drop_block_{};
					drop_block_.id = item, drop_block_.count = 1, drop_block_.x = (x_ * 32) + rand() % 17, drop_block_.y = (y_ * 32) + rand() % 17;
					VisualHandle::Drop(world_, drop_block_);
				}
				else if (t_ == 11038) { 
					vector<int> list{ 12352, 3764, 3702, 9746, 9750, 3700, 842, 9754, 2874, 8614, 3698, 1670, 11040, 11042, 8616, 8618, 1676, 8590, 9732, 9732, 2868, 4822, 1668, 11046, 1678, 1664, 844, 2864, 3764, 6308, 6310, 6306, 6322, 1670, 4816, 4818, 2870, 2872, 2874, 2802, 1666, 4814 };
					WorldDrop drop_block_{};
					if (Environment()->phoenix_items_all.size() != 0) {
						if (rand() % 50 < 1) {
							drop_block_.id = Environment()->phoenix_items_all[rand() % Environment()->phoenix_items_all.size()];
							Environment()->phoenix_items_all.erase(remove(Environment()->phoenix_items_all.begin(), Environment()->phoenix_items_all.end(), drop_block_.id), Environment()->phoenix_items_all.end());
							string texts = "A `4" + items[t_].ori_name + "`` rewards `2" + pInfo(peer)->name_color + pInfo(peer)->tankIDName + "`` with a `5Rare " + items[drop_block_.id].ori_name + "``.";
							for (ENetPeer* cp_ = server->peers; cp_ < &server->peers[server->peerCount]; ++cp_) {
								if (cp_->state != ENET_PEER_STATE_CONNECTED or cp_->data == NULL) continue;
								VarList::OnConsoleMessage(cp_, "CP:_PL:0_OID:_CT:[S]_ `o**`` " + texts + "``");
							}
						}
					}
					if (rand() % 50 < 1) {
						list = { 10004 , 1680 };
						drop_block_.id = list[rand() % list.size()];
					}
					drop_block_.count = 1, drop_block_.id = (drop_block_.id == 0 ? list[rand() % list.size()] : drop_block_.id), drop_block_.x = (x_ * 32) + rand() % 17, drop_block_.y = (y_ * 32) + rand() % 17;
					VisualHandle::Drop(world_, drop_block_);
				}
				else if (t_ == 9530) {
					vector<int> list{ 412, 414, 416, 418, 420, 422, 424, 426, 4192, 4634, 4636, 4638, 4640, 4642, 5370, 5726, 5728, 5730, 6030, 6032, 6034, 6808, 6810, 6812, 7218, 7220, 7222, 7224, 10528, 10530, 10532, 10828, 10830, 10832 };
					WorldDrop drop_block_{};
					drop_block_.id = list[rand() % list.size()];
					if (rand() % 3000 < 1) {
						list = { 412, 414, };
					}
					drop_block_.count = 50, drop_block_.id = list[rand() % list.size()], drop_block_.x = (x_ * 32) + rand() % 17, drop_block_.y = (y_ * 32) + rand() % 17;
					VisualHandle::Drop(world_, drop_block_);
				}
				else if (t_ == 10826) { 
					vector<int> list{ 6042, 10818, 2640, 9610, 2638, 9634, 9632, 10800, 10804, 1570, 9608, 11876 };
					if (rand() % 35 < 1) {
						list = { 10168 , 11288, 13454, 13456 , 13422, 13440, 13426, 13420, 13444 , 13450 , 13448 }; // chance of receiving rare item
					}
					WorldDrop drop_block_{};
					drop_block_.id = list[rand() % list.size()], drop_block_.count = (drop_block_.id == 10818 ? 20 : 1), drop_block_.x = (x_ * 32) + rand() % 17, drop_block_.y = (y_ * 32) + rand() % 17;
					VisualHandle::Drop(world_, drop_block_);
					if (drop_block_.id == 13434 || drop_block_.id == 13432 || drop_block_.id == 13430 ||drop_block_.id == 10168 || drop_block_.id == 11288 || drop_block_.id == 10806 || drop_block_.id == 11870) {
						for (ENetPeer* cp_ = server->peers; cp_ < &server->peers[server->peerCount]; ++cp_) {
							if (cp_->state != ENET_PEER_STATE_CONNECTED or cp_->data == NULL) continue;
							VarList::OnConsoleMessage(cp_, "The `4Lava Pinata`` rewards " + pInfo(peer)->name_color + pInfo(peer)->tankIDName + "`` with a `5Rare " + items[drop_block_.id].ori_name + ".``");
						}
					}
				}
				else if (t_ == 718) { 		
					vector<int> list{ 11900,13442, 13438, 4672, 9614 , 10812 , 9634 , 9632 , 9608 , 704 , 6058 , 3598 , 9624 , 9626 , 706 , 10818 , 6052 , 712 , 708 ,4736, 1568, 4724, 4728, 4726, 2634, 714, 10816, 720, 2632, 702, 8316, 8320, 8322, 8318, 10828, 700, 700, 2630, 11892, 11898, 11896 };
					if (pInfo(peer)->hair == 1568) list.insert(list.end(), { 1580, 8324, 6042, 2638,9622,9630, 8326, 10808, 10802, 2640, 10882 });
					if (rand() % 25 < 1) {
						list = { 10826,  8314 };
						if (pInfo(peer)->hair == 1568)  list.insert(list.end(), { 13424, 8310,4664,3594, 1570, 9610,10814, 1584, 11874 });
					}
					WorldDrop drop_block_{};
					drop_block_.id = list[rand() % list.size()];
					if (drop_block_.id == 3598) drop_block_.count = rand() % 2 + 3;
					else if (drop_block_.id == 9624) drop_block_.count = rand() % 3 + 1;
					else if (drop_block_.id == 2632 || drop_block_.id == 8322) drop_block_.count = rand() % 3 + 2;
					else if (drop_block_.id == 8316) drop_block_.count = rand() % 2 + 2;
					else if (drop_block_.id == 8320) drop_block_.count = 2;
					else if (drop_block_.id == 13438 || drop_block_.id == 13436) drop_block_.count = 5;
					else if (drop_block_.id == 8318) drop_block_.count = rand() % 4 + 1;
					else if (drop_block_.id == 10828) drop_block_.count = 10;
					else if (drop_block_.id == 2630) drop_block_.count = rand() % 2 + 1;
					else if (drop_block_.id == 11892) drop_block_.count = 4;
					else if (drop_block_.id == 11896) drop_block_.count = 3;
					else drop_block_.count = 1;
					drop_block_.x = (x_ * 32) + rand() % 17, drop_block_.y = (y_ * 32) + rand() % 17;
					VisualHandle::Drop(world_, drop_block_);
				}
				else if (t_ == 9616) { 
					vector<int> list{ 11900, 13452, 11900, 716, 11890,9628,6054, 10804, 716, 11890,9628,6054, 10804,  704, 6058, 1568, 1572 , 1580, 10822 };
					if (rand() % 1000 < 1) list = { 9618,  8314, 9612 };
					WorldDrop drop_block_{};
					drop_block_.id = list[rand() % list.size()];
					if (drop_block_.id == 716 || drop_block_.id == 1572) drop_block_.count = 6;
					else if (drop_block_.id == 11890) drop_block_.count = 3;
					else drop_block_.count = 1;
					drop_block_.x = (x_ * 32) + rand() % 17, drop_block_.y = (y_ * 32) + rand() % 17;
					VisualHandle::Drop(world_, drop_block_);
				}
				else if (t_ == 1584) { 
					vector<pair<int, int>> receivingitems;
					vector<int> random_xy{ 2, 1, 0, -1, -2 };
					for (int i_ = 0; i_ < world_->drop_new.size(); i_++) {
						if (world_->drop_new[i_][0] == 0) continue;
						if (x_ == (world_->drop_new[i_][3] / 32) && y_ == (world_->drop_new[i_][4] / 32)) {
							receivingitems.push_back(make_pair(world_->drop_new[i_][0], world_->drop_new[i_][1]));
							PlayerMoving data_{};
							data_.packetType = 14, data_.netID = 0, data_.plantingTree = world_->drop_new[i_][2];
							BYTE* raw = packPlayerMoving(&data_);
							for (ENetPeer* cp_ = server->peers; cp_ < &server->peers[server->peerCount]; ++cp_) {
								if (cp_->state != ENET_PEER_STATE_CONNECTED or cp_->data == NULL or pInfo(cp_)->world != name_) continue;
								send_raw(cp_, 4, raw, 56, ENET_PACKET_FLAG_RELIABLE);
							}
							delete[]raw;
							world_->drop_new.erase(world_->drop_new.begin() + i_);
						}
					}
					for (int i = 0; i < receivingitems.size(); i++) {
						int randomx = random_xy[rand() % random_xy.size()], randomy = random_xy[rand() % random_xy.size()], item = receivingitems[i].first;
						if (item == 1584) item = 3596;
						if (item == 2634) item = 3602;
						if (item == 1580) item = 1586;
						if (item == 3274) item = 4660;
						if (item == 1568) item = 710;
						if (item == 678) item = 1574;
						if (item == 330) item = 1578;
						if (item == 604 || item == 802 || item == 804 || item == 806 || item == 808 || item == 810 || item == 812) item = 2636;
						if (item == 900 || item == 1378) item = 1576;
						if (item == 2160 || item == 2164 || item == 2162 || item == 2158 || item == 2168 || item == 2166) item = 2642;
						if (item == 2614 || item == 2616 || item == 2618) item = 2620;
						if (item == 2606 || item == 2608 || item == 2610) item = 2612;
						if (item == 2598 || item == 2600 || item == 2602) item = 2604;
						if (item == 1570) item = 6044;
						if (item == 414) item = 6030;
						if (item == 2624) item = 6056;
						if (item == 8310) item = 8312;
						WorldDrop drop_block_{};
						WorldBlock* dropx = &world_->blocks[(x_ + randomx) + ((y_ + randomy) * 100)];
						if (dropx->fg != 0) drop_block_.id = item, drop_block_.count = receivingitems[i].second, drop_block_.x = (x_ * 32) + rand() % 17, drop_block_.y = (y_ * 32) + rand() % 17;
						else drop_block_.id = item, drop_block_.count = receivingitems[i].second, drop_block_.x = ((x_ + randomx) * 32) + rand() % 17, drop_block_.y = ((y_ + randomy) * 32) + rand() % 17;
						VisualHandle::Drop(world_, drop_block_);
					}
				}
				else if (block_->fg == 7960) { 
					uint32_t reward = Environment()->dstone[rand() % Environment()->dstone.size()];
					for (ENetPeer* cp_ = server->peers; cp_ < &server->peers[server->peerCount]; ++cp_) {
						if (cp_->state != ENET_PEER_STATE_CONNECTED or cp_->data == NULL) continue;
						if (pInfo(cp_)->world == world_->name) {
							CAction::Effect(cp_, 182, (float)x_ * 32 + 16, (float)y_ * 32 + 16);
							VarList::OnTalkBubble(cp_, pInfo(peer)->netID, "The power of The Dark Stone dropped " + items[reward].name + "!", 0, 1);
						}
					}
					WorldDrop drop_block_{};
					drop_block_.id = reward, drop_block_.count = 1;
					drop_block_.x = (x_ * 32) + rand() % 17, drop_block_.y = (y_ * 32) + rand() % 17;
					VisualHandle::Drop(world_, drop_block_);
				}
				else if (t_ == 2478) { 
					vector<int> list{ 2472,2470,2474,2466,2468,10116,3758,11222, 12496 };
					vector<int> clothes{ 370, 372, 374, 42, 68, 40, 130, 270, 234, 142, 694, 10034, 140, 76, 48, 44, 34, 36, 122, 238, 66, 38, 90, 208, 272, 144, 2938, 354, 138, 214, 11202, 342, 1846, 210, 234, 250, 1716, 82, 78, 94, 662, 754, 146, 356, 72, 46, 124, 1720, 92, 1122, 212, 84, 1722, 1844, 2718, 70, 4966, 288, 232, 788, 148, 96, 3932, 448, 98, 134, 50, 74, 1504, 494, 266, 852, 132, 2954, 3934, 3060, 3056, 1800, 88, 2960, 1022, 2578, 3164, 86, 302, 1332, 304, 1116, 6788, 894, 492, 1690, 316, 1850, 1718, 1838, 1032, 1860, 1026, 3048, 352, 724, 1590, 798, 488, 1342, 794, 268, 1502, 8884, 1858, 594, 3466, 1314, 1688, 1312, 3590, 446, 1856, 1854, 1516, 1316, 2700, 4968, 4964, 6796, 1862, 310, 290, 296, 6674, 1864, 4954, 1476, 896, 1848, 496, 136, 158, 2958, 2576, 1954, 152, 1126, 796, 1524, 2928, 80, 2934, 150, 1120, 1142, 1478, 154, 9356, 452, 258, 2882, 156, 1140, 3530, 312, 1124, 890, 1330, 3052, 294, 1650, 1652, 348, 1736, 576, 5016, 1708, 292, 1146, 1028, 1762, 600, 11204 };
					vector<int> block{ 231,487,483,2019,427,1757,2009,281,781,329,459,1041,421,2787,2789,1043,2797,181,613,65,4983,283,553,425,4635,987,627,2017,989,61,4639,973,3523,331,265,859,433,253,339,1105,439,4567,333,677,5673,1427,5603,183,10533,5731,7223,10833,6035,6813,1113,1047,653,2811,4703,1429,847,665,485,1613,833,2025,1775,3931,429,3831,423,437,1773,4767,1299,361,667,2815,3473,301,4637,5683,2709,415,955,461,861,9389,5467,2791,2815,1803,419,2027,685,555,741,10531,5729,7221,10831,6033,6811,621,6401,1107,359,3471,855,309,1685,1449,1309,441,1111,221,1431,3065,9307,1257,1501,1109,4641,3587,1103,417,743,431,3823,2949,1131,3825,727,5379,729,187,787,5459,4785,3261,3521,2293,2309,2321,2333,5461,3721,327,247,63,3479,445,4783,299,863,8935,1451,261,1871,1499,455,9391,683,1159,551,1745,411,3005,557,687,4799,559,4643,3899,1605,9309,567,565,1155,3827,1327,1767,993,1157,563,4721,115,1423,10515,1329,6545,287,669,777,5463,1655,1599,561,4585,3413,4745,1771,2011,1161,1729,3757,3753,321,3265,3263,623,775,6397,129,4667,759,3767,1529,6543,4707,3835,1435,651,8929,569,527,3287,1595,6063,2795,1003,1731,4943,4963,597,4669,1531,1523,625,4297,599,657,571,873,3755,2969,1725,4603,1447,3267,5375,1683,3567, 13, 57, 17, 381, 1139, 21, 101, 379, 117, 27, 23, 581, 195, 105, 191, 377, 1307, 697, 881, 167, 185, 1323, 165, 3783, 369, 25, 171, 53, 103, 179, 29, 249, 177, 1325, 337, 189, 169, 55, 223, 175, 885, 119, 3573, 199, 549, 681, 655, 107, 163, 31, 671, 889, 887, 193, 127, 1433, 173, 7631, 413, 3571, 3569, 2809, 9393, 225, 111, 109, 201, 59, 607, 285, 2029, 2013, 2015, 1611, 995, 997, 963, 1481, 219, 197, 2023, 2021, 9331, 1305, 823, 1039, 231, 487, 483, 2019, 427, 1757, 2009, 281, 781, 329, 459, 1041, 421, 2787, 2789, 1043, 2797, 181, 613, 65, 4983, 283, 553, 425, 4635, 987, 627, 2017, 989, 61, 4639, 973, 3523, 331, 265, 859, 433, 253, 339, 1105, 439, 4567, 333, 677, 5673, 1427, 5603, 183, 10533, 5731, 7223, 10833, 6035, 6813, 1113, 1047, 653, 2811, 4703, 1429, 847, 665 };
					int item = block[rand() % block.size()];
					if ((rand() % 2) + 1 == 2) item = clothes[rand() % clothes.size()];
					else {
						if ((rand() % 2) + 1 == 2) item = block[rand() % block.size()] - 1;
						else item = block[rand() % block.size()];
					}
					if (rand() % 25 < 1) item = list[rand() % list.size()];
					WorldDrop drop_block_{};
					drop_block_.id = item, drop_block_.count = 1, drop_block_.x = (x_ * 32) + rand() % 17, drop_block_.y = (y_ * 32) + rand() % 17;
					VisualHandle::Drop(world_, drop_block_);
				}
				else if (items[t_].name.find("Adventure Item -") != string::npos) {
					for (ENetPeer* cp_ = server->peers; cp_ < &server->peers[server->peerCount]; ++cp_) {
						if (cp_->state != ENET_PEER_STATE_CONNECTED or cp_->data == NULL) continue;
						if (pInfo(cp_)->world == pInfo(peer)->world) {
							for (int i = 0; i < pInfo(cp_)->adventure_item.size(); i++) {
								if (pInfo(cp_)->adventure_item[i].pos == (x_ + (y_ * 100))) {
									pInfo(cp_)->adventure_item[i].pos = -1;
									pInfo(cp_)->adventure_item[i].id = 0;
								}
							}
						}
					}
				}
				else if (items[t_].properties & Property_AutoPickup) {
					if (t_ == 9948) t_ = 9946;
					if (t_ == 5814) t_ = 242;
					int c_ = 1;
					if (items[t_].blockType == BlockTypes::LOCK and t_ != 202 && t_ != 204 && t_ != 206 && t_ != 4994 && t_ != 10000) {
						if (to_lower(world_->owner_name) != to_lower(pInfo(peer)->tankIDName) && not Role::Administrator(peer)) return true;
						int id = 4516;
						std::vector<WorldBlock>::iterator p = find_if(world_->blocks.begin(), world_->blocks.end(), [id](const WorldBlock& a) { return a.fg == id; });
						if (p != world_->blocks.end()) {
							VarList::OnTalkBubble(peer, pInfo(peer)->netID, "`4Remove Untrade-a-Box before removing lock!``", 0, 0);
							return true;
						}
					}
					else if (t_ == 14594) {
						if (block_->wl != 0 or block_->Admin_Bfg.size() != 0) {
							VarList::OnTalkBubble(peer, pInfo(peer)->netID, (block_->wl != 0 ? "Empty World Locks in " + items[t_].name + " before breaking it!" : "Remove all access in " + items[t_].name + " before breaking it!"), 0, 0);
							return true;
						}
					}
					else if (t_ == 10058) {
						if (world_->infinity.size() != 0) {
							VarList::OnTalkBubble(peer, pInfo(peer)->netID, "Empty this " + items[t_].name + " before breaking!", 0, 0);
							return true;
						}
					}
					else if (t_ == 3002) {
						if (block_->txt != "") {
							VarList::OnTalkBubble(peer, pInfo(peer)->netID, "Empty this " + items[t_].name + " before breaking!", 0, 0);
							return true;
						}
					}
					else if (t_ == 2208) {
						if (block_->phoneb.c_neck != 0 || block_->phoneb.c_hair != 0 || block_->phoneb.c_mask != 0 || block_->phoneb.c_hand != 0 || block_->phoneb.c_back != 0 || block_->phoneb.c_feet != 0 || block_->phoneb.c_head != 0 || block_->phoneb.c_shirt != 0 || block_->phoneb.c_pants != 0) {
							VarList::OnTalkBubble(peer, pInfo(peer)->netID, "Empty this " + items[t_].name + " before breaking!", 0, 0);
							return true;
						}
					}
					else if (items[t_].blockType == BlockTypes::STORAGE) {
						std::vector<WorldSBOX1>::iterator p = find_if(world_->sbox1.begin(), world_->sbox1.end(), [&](const WorldSBOX1& a) { return a.x == pInfo(peer)->lastwrenchx && a.y == pInfo(peer)->lastwrenchy; });
						if (p != world_->sbox1.end()) {
							VarList::OnTalkBubble(peer, pInfo(peer)->netID, "Empty the " + items[t_].name + " before breaking it!", 0, 0);
							return true;
						}
					}
					else if (items[t_].blockType == BlockTypes::SUCKER) {
						if (block_->pr > 0) {
							VarList::OnTalkBubble(peer, pInfo(peer)->netID, "Empty this " + items[t_].name + " before breaking!", 0, 0);
							return true;
						}
					}
					else if (items[t_].blockType == BlockTypes::WEATHER) {
						if (world_->weather != 0) {
							world_->weather = 0;
							if (pInfo(peer)->lock == 11550) world_->weather = 54;
							else if (pInfo(peer)->lock == 11586) world_->weather = 55;
							else if (pInfo(peer)->lock == 10410) world_->weather = 53;
							else if (pInfo(peer)->lock == 11902) world_->weather = 58;
							else if (pInfo(peer)->lock == 12654) world_->weather = 63;
							else if (pInfo(peer)->lock == 13200) world_->weather = 67;
							if (world_->d_weather != 0) world_->weather = world_->d_weather;
							for (ENetPeer* cp_ = server->peers; cp_ < &server->peers[server->peerCount]; ++cp_) {
								if (cp_->state != ENET_PEER_STATE_CONNECTED or cp_->data == NULL) continue;
								if (pInfo(cp_)->world == name_) {
									VarList::OnSetCurrentWeather(cp_, (Event()->Comet_Dust ? 16 : world_->weather == 0 ? 80 : world_->weather));
								}
							}
						}
					}
					else if ((items[t_].blockType == BlockTypes::AUTO_BLOCK or t_ == 6954) && block_->pr > 0) {
						VarList::OnConsoleMessage(peer, "`4Be careful``, if you return this to your backpack you will `4lose ALL`` Gems stored within! Use them up first!");
						VarList::OnTalkBubble(peer, pInfo(peer)->netID, "`4Be careful``, if you return this to your backpack you will `4lose ALL`` Gems stored within! Use them up first!", 0, 0);
						return true;
					}
					if (Inventory::Modify(peer, t_, c_, false) == 0) {
						if (items[t_].blockType == BlockTypes::LOCK) {
							if (t_ == 202 or t_ == 204 or t_ == 206 or t_ == 4994 or t_ == 10000) remove_lock_broken(world_, block_, x_, y_);
							else {
								if (to_lower(pInfo(peer)->tankIDName) == to_lower(world_->owner_name)) {
									pInfo(peer)->worlds_owned.erase(remove(pInfo(peer)->worlds_owned.begin(), pInfo(peer)->worlds_owned.end(), world_->name), pInfo(peer)->worlds_owned.end());
								}
								else {
									bool on_ = false;
									for (ENetPeer* cp_ = server->peers; cp_ < &server->peers[server->peerCount]; ++cp_) {
										if (cp_->state != ENET_PEER_STATE_CONNECTED or cp_->data == NULL) continue;
										if (to_lower(pInfo(cp_)->tankIDName) == to_lower(world_->owner_name)) {
											pInfo(cp_)->worlds_owned.erase(remove(pInfo(cp_)->worlds_owned.begin(), pInfo(cp_)->worlds_owned.end(), world_->name), pInfo(cp_)->worlds_owned.end());
											on_ = true;
											break;
										}
									}
								}
								if (t_ == 11902 || t_ == 11550 || t_ == 13200 || t_ == 11586 || t_ == 10410 || t_ == 12654) {
									world_->weather = 0;
									if (world_->d_weather != 0) world_->weather = world_->d_weather;
								}
								if (t_ == 2950) {
									if (not world_->nuked_by.empty()) {
										world_->last_lock = 0;
										world_->nuked_by = "";
										VarList::OnConsoleMessage(peer, "This world is once again available to everyone!");
										VarList::OnTextOverlay(peer, "You unnuked the world " + pInfo(peer)->world + "..");
										CAction::Positioned(peer, pInfo(peer)->netID, "audio/secret.wav", 0);
										ServerPool::ModLogs::Add(peer, pInfo(peer)->name_color + pInfo(peer)->tankIDName, "UNNUKED WORLD: `#" + pInfo(peer)->world, "");
									}
								}
								int got = 0, got2 = 0;
								Inventory::Modify(peer, 1424, got);
								Inventory::Modify(peer, 1424, got *= -1);
								Inventory::Modify(peer, 5816, got2);
								Inventory::Modify(peer, 5816, got2 *= -1);
								if (to_lower(world_->owner_name) != to_lower(pInfo(peer)->tankIDName)) {
									ServerPool::Logs::Add(pInfo(peer)->tankIDName + " Break " + items[t_].name + " in World: [" + pInfo(peer)->world + "] Owner Name: [" + world_->owner_name + "]", "Break Owner Locks");
								}
								world_->owner_name = "", world_->owner_named = "", world_->entry_level = 1, world_->music_bpm = 100;
								world_->world_settings = 0;
								pInfo(peer)->name_color = Role::Prefix2(peer, *world_);
								VisualHandle::Nick(peer, NULL);
								for (ENetPeer* cp_ = server->peers; cp_ < &server->peers[server->peerCount]; ++cp_) {
									if (cp_->state != ENET_PEER_STATE_CONNECTED or cp_->data == NULL) continue;
									if (pInfo(cp_)->world == name_) {
										pInfo(cp_)->World_Timed = 0; pInfo(cp_)->WorldTimed = false;
										pInfo(cp_)->disable_cheater = world_->world_settings & SETTINGS::SETTINGS_12;
										if (t_ == 11902 || t_ == 11550 || t_ == 13200 || t_ == 11586 || t_ == 10410 || t_ == 12654) {
											if (Event()->Comet_Dust) VarList::OnSetCurrentWeather(cp_, 16);
											else VarList::OnSetCurrentWeather(cp_, world_->weather == 0 ? 80 : world_->weather);
										}
										pInfo(cp_)->world_owner.clear();
										pInfo(cp_)->access_offers.clear();
										VarList::OnConsoleMessage(cp_, "`5[```w" + world_->name + "`` has had its `$World Lock`` removed!`5]``");
										pInfo(cp_)->name_color = Role::Prefix2(cp_, *world_);
										if (find(world_->admins.begin(), world_->admins.end(), to_lower(pInfo(cp_)->tankIDName)) != world_->admins.end()) {
											VisualHandle::Nick(cp_, NULL);
										}
									}
								}
								world_->admins.clear();
								world_->World_Time = 0;
							}
						}
						world_->active_jammers.erase(remove(world_->active_jammers.begin(), world_->active_jammers.end(), t_), world_->active_jammers.end());
						int give_back = t_;
						if (t_ == 9640) give_back = 9640;
						PlayerMoving data_{};
						data_.packetType = 14, data_.netID = -1, data_.plantingTree = give_back;
						data_.x = float(x_) * 32, data_.y = float(y_) * 32;
						int32_t item = -1;
						float val = 1.00;
						BYTE* raw = packPlayerMoving(&data_);
						Memory_Copy(raw + 8, &item, 4);
						Memory_Copy(raw + 16, &val, 4);
						data_.netID = pInfo(peer)->netID;
						world_->total_drop_uid += 1;
						data_.plantingTree = world_->total_drop_uid;
						data_.x = 0, data_.y = 0;
						BYTE* raw2 = packPlayerMoving(&data_);
						for (ENetPeer* cp_ = server->peers; cp_ < &server->peers[server->peerCount]; ++cp_) {
							if (cp_->state != ENET_PEER_STATE_CONNECTED or cp_->data == NULL) continue;
							if (pInfo(cp_)->world == name_) {
								send_raw(cp_, 4, raw, 56, ENET_PACKET_FLAG_RELIABLE);
								send_raw(cp_, 4, raw2, 56, ENET_PACKET_FLAG_RELIABLE);
							}
						}
						delete[] raw, raw2;
						VarList::OnConsoleMessage(peer, "Collected `w1 " + items[give_back].name + "``.``", 0, 1);
					}
					else {
						VarList::OnTalkBubble(peer, pInfo(peer)->netID, "`wI better not break that, i have no room to pick it up!", 0, 1);
						return true;
					}
				}
				else if (items[t_].max_gems != 0) {
					if (t_ == 2946) {
						if (block_->id != 0) {
							int give_count = 1;
							if (Inventory::Modify(peer, block_->id, give_count) == 0) {
								VarList::OnTalkBubble(peer, pInfo(peer)->netID, "You picked up 1 " + items[block_->id].ori_name + ".", 0, 0);
								VarList::OnConsoleMessage(peer, "You picked up 1 " + items[block_->id].ori_name + ".");
								PlayerMoving data_effect_{};
								data_effect_.packetType = 19;
								data_effect_.punchX = block_->id;
								data_effect_.punchY = pInfo(peer)->netID;
								data_effect_.x = x_ * 32 + 16, data_effect_.y = y_ * 32 + 16;
								BYTE* raw_effect = packPlayerMoving(&data_effect_, 56);
								raw_effect[8] = pInfo(peer)->netID, raw_effect[3] = 5;
								for (ENetPeer* cp_ = server->peers; cp_ < &server->peers[server->peerCount]; ++cp_) {
									if (cp_->state != ENET_PEER_STATE_CONNECTED or cp_->data == NULL) continue;
									if (pInfo(cp_)->world == name_) {
										send_raw(cp_, 4, raw_effect, 56, ENET_PACKET_FLAG_RELIABLE);
									}
								}
								delete[]raw_effect;
							}
							else {
								WorldDrop drop_block_{};
								drop_block_.x = (x_ * 32) + rand() % 17, drop_block_.y = (y_ * 32) + rand() % 17, drop_block_.id = block_->id, drop_block_.count = 1;
								VisualHandle::Drop(world_, drop_block_);
							}
							if (to_lower(world_->owner_name) != to_lower(pInfo(peer)->tankIDName) and Role::Developer(peer)) ServerPool::Logs::Add(pInfo(peer)->tankIDName + " stole " + items[block_->id].ori_name + " in World [" + pInfo(peer)->world + "] from Display Block", "Display Block");
						}
					}
					if (pInfo(peer)->lwiz_step == 3) add_lwiz_points(peer, 1);
					else if (pInfo(peer)->lwiz_step == 11) add_lwiz_points(peer, items[t_].rarity);
					if (pInfo(peer)->C_QuestActive && pInfo(peer)->C_QuestKind == 4 && pInfo(peer)->C_QuestProgress < pInfo(peer)->C_ProgressNeeded) {
						pInfo(peer)->C_QuestProgress++;
						if (pInfo(peer)->C_QuestProgress >= pInfo(peer)->C_ProgressNeeded) {
							pInfo(peer)->C_QuestProgress = pInfo(peer)->C_ProgressNeeded;
							VarList::OnTalkBubble(peer, pInfo(peer)->netID, "`9Ring Quest task complete! Go tell the Ringmaster!", 0, 0);
						}
					}
					if (pInfo(peer)->C_QuestActive && pInfo(peer)->C_QuestKind == 5 && pInfo(peer)->C_QuestProgress < pInfo(peer)->C_ProgressNeeded) {
						pInfo(peer)->C_QuestProgress += items[t_].rarity;
						if (pInfo(peer)->C_QuestProgress >= pInfo(peer)->C_ProgressNeeded) {
							pInfo(peer)->C_QuestProgress = pInfo(peer)->C_ProgressNeeded;
							VarList::OnTalkBubble(peer, pInfo(peer)->netID, "`9Ring Quest task complete! Go tell the Ringmaster!", 0, 0);
						}
					}
					if (pInfo(peer)->lifegoals2 && not pInfo(peer)->lifegoals_2 and pInfo(peer)->gem_goal < 1000) {
						pInfo(peer)->gem_goal += items[block_->fg].rarity;
						if (pInfo(peer)->gem_goal >= 1000) {
							pInfo(peer)->gem_goal = 1000;
							VarList::OnConsoleMessage(peer, "`9Life Goal ''`2Smash 1000 rarity of blocks``'' is complete! Go call Crazy Jim!");
							VarList::OnTalkBubble(peer, pInfo(peer)->netID, "`9Life Goal ''`2Smash 1000 rarity of blocks``'' is complete! Go call Crazy Jim!", 0, 0);
						}
					}
					if (pInfo(peer)->BiweeklyQ_1 < 10000) {
						pInfo(peer)->BiweeklyQ_1 += items[block_->fg].rarity;
						if (pInfo(peer)->BiweeklyQ_1 >= 10000) {
							pInfo(peer)->BiweeklyQ_1 = 10000;
							VarList::OnConsoleMessage(peer, "`9Biweekly Goal ''`2Smash 10000 rarity of blocks``'' is complete! Go call Crazy Jim!");
							VarList::OnTalkBubble(peer, pInfo(peer)->netID, "`9Biweekly Goal ''`2Smash 10000 rarity of blocks``'' is complete! Go call Crazy Jim!", 0, 0);
						}
					}
					if (pInfo(peer)->role_quest and pInfo(peer)->quest_number == 2) {
						if (pInfo(peer)->role_quest_type == "Builder" and pInfo(peer)->need_required < pInfo(peer)->quest_required) {
							pInfo(peer)->need_required += 1;
							if (pInfo(peer)->need_required >= pInfo(peer)->quest_required) {
								pInfo(peer)->need_required = pInfo(peer)->quest_required;
								VarList::OnConsoleMessage(peer, "`9Builder Quest! `ocomplete! Go claim your points!");
								VarList::OnTalkBubble(peer, pInfo(peer)->netID, "`9Builder Quest! ``complete! Go claim your points!", 0, 0);
							}
						}
					}
					if (pInfo(peer)->role_quest and pInfo(peer)->quest_number == 4) {
						if (pInfo(peer)->role_quest_type == "Builder" and pInfo(peer)->need_required < pInfo(peer)->quest_required) {
							pInfo(peer)->need_required += items[block_->fg].rarity;
							if (pInfo(peer)->need_required >= pInfo(peer)->quest_required) {
								pInfo(peer)->need_required = pInfo(peer)->quest_required;
								VarList::OnConsoleMessage(peer, "`9Builder Quest! `ocomplete! Go claim your points!");
								VarList::OnTalkBubble(peer, pInfo(peer)->netID, "`9Builder Quest! ``complete! Go claim your points!", 0, 0);
							}
						}
					}
					if (pInfo(peer)->role_quest and pInfo(peer)->quest_number == 5) {
						if (pInfo(peer)->need_item_req_id == block_->fg) {
							if (pInfo(peer)->role_quest_type == "Builder" and pInfo(peer)->need_required < pInfo(peer)->quest_required) {
								pInfo(peer)->need_required += 1;
								if (pInfo(peer)->need_required >= pInfo(peer)->quest_required) {
									pInfo(peer)->need_required = pInfo(peer)->quest_required;
									VarList::OnConsoleMessage(peer, "`9Builder Quest! `ocomplete! Go claim your points!");
									VarList::OnTalkBubble(peer, pInfo(peer)->netID, "`9Builder Quest! ``complete! Go claim your points!", 0, 0);
								}
							}
						}
					}
					if (pInfo(peer)->starglitter_break < 1000 && pInfo(peer)->starglitter_break != -1) DailyEvent_Task::MStarglitter(peer, "break", 1);
					if (event_item == 6238) EventPool::Guilds::Point::Add(peer, pInfo(peer)->hand);
					add_peer_xp(peer, (items[t_].rarity / 5 > 0 ? items[t_].rarity / 5 : 1), false, block_->fg);
					Pet_Ai::Add_Xp(peer, (items[t_].rarity / 5 > 0 ? items[t_].rarity / 5 : 1));
					int maxgems = items[t_].max_gems;
					if (t_ == 120) maxgems = 50;
					int c_ = rand() % (maxgems + 1);
					if (c_ != 0) {
						if ((items[t_].properties & Property_Dropless or items[t_].rarity == 999) && (items[t_].max_gems == 0)) {
						}
						else {
							bool no_seed = false, no_gems = false, no_block = false;
							if (t_ == 12254 or t_ == 12252 or t_ == 2242 or t_ == 2244 or t_ == 2246 or t_ == 2248 or t_ == 2250 or t_ == 542 or items[t_].unobtainable or t_ == 5136 || t_ == 9386 || t_ == 9400 || t_ == 9902 || t_ == 9600) no_seed = true, no_block = true, no_gems = true;
							else {
								for (int i_ = 0; i_ < world_->drop_new.size(); i_++) {
									if (abs(world_->drop_new[i_][4] - y_ * 32) <= 16 and abs(world_->drop_new[i_][3] - x_ * 32) <= 16) {
										if (world_->drop_new[i_][0] == 112 and items[t_].rarity < 8) {
											no_gems = true;
										}
										else {
											no_seed = true, no_block = true;
										}
									}
								}
							}
							if (items[t_].blockType == BlockTypes::MAGIC_EGG || t_ == 8 || t_ == 6 || t_ == 7372) no_seed = true, no_block = true, no_gems = true;
							int chanced = 0;
							if (t_ != 610 && t_ != 611) {
								//VarList::OnTalkBubble(peer, pInfo(peer)->netID, items[t_].name + " Change Drops Seeds " + to_string(items[t_].newdropchance) + "%");
								// kontol
								for (int i_2 = 0; i_2 < EditItem.size(); i_2++) {
									int giveitem = 0;
									if (EditItem[i_2].ID == t_ and EditItem[i_2].Bonus != 0 and not EditItem[i_2].property_gacha) {
										if (rand() % 100 <= EditItem[i_2].Bonus) {
											std::srand(static_cast<unsigned int>(std::time(0)));
											if (!EditItem[i_2].Extra_Drops.empty()) {
												int randomIndex = std::rand() % EditItem[i_2].Extra_Drops.size();
												int randomIdFirst = EditItem[i_2].Extra_Drops[randomIndex].first;
												int fixedIdSecond = EditItem[i_2].Extra_Drops[0].second;
												WorldDrop drop_block_{};
												drop_block_.x = (x_ * 32) + rand() % 17, drop_block_.y = (y_ * 32) + rand() % 17, drop_block_.id = randomIdFirst, drop_block_.count = fixedIdSecond;
												if (not use_mag(world_, drop_block_, x_, y_) and not no_block) VisualHandle::Drop(world_, drop_block_);
											}
										}
									}
									if ((EditItem[i_2].ID == pInfo(peer)->hand or EditItem[i_2].ID == pInfo(peer)->necklace or EditItem[i_2].ID == pInfo(peer)->pants or EditItem[i_2].ID == pInfo(peer)->shirt or EditItem[i_2].ID == pInfo(peer)->face or EditItem[i_2].ID == pInfo(peer)->mask or EditItem[i_2].ID == pInfo(peer)->hair or EditItem[i_2].ID == pInfo(peer)->feet or EditItem[i_2].ID == pInfo(peer)->back) and EditItem[i_2].Bonus != 0 and not EditItem[i_2].property_gacha) {
										if (rand() % 100 <= EditItem[i_2].Bonus) {
											std::srand(static_cast<unsigned int>(std::time(0)));
											if (!EditItem[i_2].Extra_Drops.empty()) {
												int randomIndex = std::rand() % EditItem[i_2].Extra_Drops.size();
												int randomIdFirst = EditItem[i_2].Extra_Drops[randomIndex].first;
												int fixedIdSecond = EditItem[i_2].Extra_Drops[0].second;
												WorldDrop drop_block_{};
												drop_block_.x = (x_ * 32) + rand() % 17, drop_block_.y = (y_ * 32) + rand() % 17, drop_block_.id = randomIdFirst, drop_block_.count = fixedIdSecond;
												if (not use_mag(world_, drop_block_, x_, y_) and not no_block) VisualHandle::Drop(world_, drop_block_);
											}
										}
									}
								}
								if (pInfo(peer)->show_pets and rand() % 100 < 5.0) {
									std::random_device rd;
									std::mt19937 gen(rd());
									std::uniform_int_distribution<> dist(1.0, 100.0);
									double draw = dist(gen),target1 = 0.5,target2 = 2.5,target3 = 3.0,target4 = 4.5,target5 = 5.0,epsilon = 0.01;
									if (pInfo(peer)->Pets_Builder_Lvl == 1 and std::abs(draw - target1) < epsilon) {
										WorldDrop drop_block_{};
										drop_block_.x = (x_ * 32) + rand() % 17, drop_block_.y = (y_ * 32) + rand() % 17, drop_block_.id = t_, drop_block_.count = 1;
										if (not use_mag(world_, drop_block_, x_, y_) and not no_block) VisualHandle::Drop(world_, drop_block_);
									}
									else if (pInfo(peer)->Pets_Builder_Lvl == 2 and std::abs(draw - target2) < epsilon) {
										WorldDrop drop_block_{};
										drop_block_.x = (x_ * 32) + rand() % 17, drop_block_.y = (y_ * 32) + rand() % 17, drop_block_.id = t_, drop_block_.count = 1;
										if (not use_mag(world_, drop_block_, x_, y_) and not no_block) VisualHandle::Drop(world_, drop_block_);
									}
									else if (pInfo(peer)->Pets_Builder_Lvl == 3 and std::abs(draw - target3) < epsilon) {
										WorldDrop drop_block_{};
										drop_block_.x = (x_ * 32) + rand() % 17, drop_block_.y = (y_ * 32) + rand() % 17, drop_block_.id = t_, drop_block_.count = 1;
										if (not use_mag(world_, drop_block_, x_, y_) and not no_block) VisualHandle::Drop(world_, drop_block_);
									}
									else if (pInfo(peer)->Pets_Builder_Lvl == 4 and std::abs(draw - target4) < epsilon) {
										WorldDrop drop_block_{};
										drop_block_.x = (x_ * 32) + rand() % 17, drop_block_.y = (y_ * 32) + rand() % 17, drop_block_.id = t_, drop_block_.count = 1;
										if (not use_mag(world_, drop_block_, x_, y_) and not no_block) VisualHandle::Drop(world_, drop_block_);
									}
									else if (pInfo(peer)->Pets_Builder_Lvl == 5 and std::abs(draw - target5) < epsilon) {
										WorldDrop drop_block_{};
										drop_block_.x = (x_ * 32) + rand() % 17, drop_block_.y = (y_ * 32) + rand() % 17, drop_block_.id = t_, drop_block_.count = 1;
										if (not use_mag(world_, drop_block_, x_, y_) and not no_block) VisualHandle::Drop(world_, drop_block_);
									}
									WorldDrop drop_block_{};
									drop_block_.id = t_, drop_block_.count = 1, drop_block_.x = (x_ * 32) + rand() % 17, drop_block_.y = (y_ * 32) + rand() % 17;
									if (not use_mag(world_, drop_block_, x_, y_) and not no_block) VisualHandle::Drop(world_, drop_block_);
								}
								if (rand() % 100 < 8) {
									if (pInfo(peer)->hand == 9604 || pInfo(peer)->mask == 8192 || pInfo(peer)->ances == 5144 || pInfo(peer)->ances == 5146 || pInfo(peer)->ances == 5148 || pInfo(peer)->ances == 5150 || pInfo(peer)->ances == 5152 || pInfo(peer)->ances == 5080 && rand() % 250 - (items[pInfo(peer)->ances].chance * items[pInfo(peer)->ances].chance) < 1) {
										WorldDrop drop_block_{};
										drop_block_.x = (x_ * 32) + rand() % 17, drop_block_.y = (y_ * 32) + rand() % 17, drop_block_.id = t_, drop_block_.count = 1;
										if (not use_mag(world_, drop_block_, x_, y_) and not no_block) VisualHandle::Drop(world_, drop_block_);
									}
									WorldDrop drop_block_{};
									drop_block_.id = t_, drop_block_.count = 1, drop_block_.x = (x_ * 32) + rand() % 17, drop_block_.y = (y_ * 32) + rand() % 17;
									if (not use_mag(world_, drop_block_, x_, y_) and not no_block) VisualHandle::Drop(world_, drop_block_);
								}
								else if (rand() % 100 < items[t_].newdropchance) {
									WorldDrop drop_seed_{};
									drop_seed_.id = t_ + 1, drop_seed_.count = 1, drop_seed_.x = (x_ * 32) + rand() % 17, drop_seed_.y = (y_ * 32) + rand() % 17;
									if (not use_mag(world_, drop_seed_, x_, y_) and not no_seed) VisualHandle::Drop(world_, drop_seed_);
								}
								else if (not no_gems) {
									if (t_ == 8 || t_ == 6 || t_ == 7372) break;
									if (Playmods::HasById(pInfo(peer), 14) and ((rand() % 100) + 1) <= 30) {
										PlayerMoving data_{};
										data_.packetType = 17, data_.netID = 125, data_.YSpeed = 125, data_.x = x_ * 32 + 16, data_.y = y_ * 32 + 16;
										BYTE* raw = packPlayerMoving(&data_);
										for (ENetPeer* cp_ = server->peers; cp_ < &server->peers[server->peerCount]; ++cp_) {
											if (cp_->state != ENET_PEER_STATE_CONNECTED or cp_->data == NULL) continue;
											if (pInfo(cp_)->world == world_->name) {
												send_raw(cp_, 4, raw, 56, ENET_PACKET_FLAG_RELIABLE);
											}
										}
										delete[] raw;
										c_ += (rand() % 5) + 1;
									}
									drop_rare_item(world_, peer, t_, x_, y_, false);
									gems_(peer, world_, c_, x_ * 32, y_ * 32, t_);
								}
								if (t_ == 776) { // toxic waste
									vector<int> random_xy{ 1, 0, -1 };
									for (int i = 0; i < 3; i++) {
										int randomx = random_xy[rand() % random_xy.size()] + x_, randomy = random_xy[rand() % random_xy.size()] + y_;
										if (randomx > 0 && randomx < world_->max_x && randomy > 0 && randomy < world_->max_y) {
											WorldBlock* dropx = &world_->blocks[randomx + (randomy * 100)];
											if (dropx->fg == 0) dropx->fg = 778, update_tile(peer, randomx, randomy, 778, false, true);
										}
									}
									int gotr = rand() % 3 + 1;
									if (rand() % 3 && pInfo(peer)->hand == 10944) {
										gotr += rand() % 3 + 1;
										pInfo(peer)->rubble += gotr;
										VarList::OnTalkBubble(peer, pInfo(peer)->netID, "You found " + to_string(gotr) + " Rubbles!", 0, 0);
									}
								}
								else if (t_ == 726) {
									if (rand() % 100 < 40) {
										int gotr = rand() % 3 + 1;
										if (rand() % 3 && pInfo(peer)->hand == 10944) {
											gotr += rand() % 3 + 1;
											pInfo(peer)->rubble += gotr;
											VarList::OnTalkBubble(peer, pInfo(peer)->netID, "You found " + to_string(gotr) + " Rubbles!", 0, 0);
										}
									}
								}
							}
						}
					}
				}
				else if (items[t_].blockType == BlockTypes::SEED && block_->invert == 0) {
					if (items[t_ - 1].properties & Property_Dropless or items[t_ - 1].rarity == 999 and not (t_ == 14534)) {
					}
					else {
						if (rand() % 2 < 1) {
							WorldDrop drop_seed_{};
							drop_seed_.id = t_, drop_seed_.count = 1, drop_seed_.x = (x_ * 32) + rand() % 17, drop_seed_.y = (y_ * 32) + rand() % 17;
							if (not use_mag(world_, drop_seed_, x_, y_)) VisualHandle::Drop(world_, drop_seed_);
						}
					}
				}
				else if ((block_->fg == 5638 || block_->fg == 5930) and (pInfo(peer)->magnetron_id != 0 and pInfo(peer)->magnetron_x == x_ and pInfo(peer)->magnetron_y == y_)) {
					int c_ = 0;
					Inventory::Modify(peer, block_->fg == 5638 ? 5640 : 9158, c_);
					if (c_ != 0) {
						c_ *= -1;
						Inventory::Modify(peer, block_->fg == 5638 ? 5640 : 9158, c_);
						pInfo(peer)->magnetron_id = 0;
						pInfo(peer)->magnetron_x = 0;
						pInfo(peer)->magnetron_y = 0;
					}
				}
				else if (items[block_->fg].blockType == BlockTypes::GEIGER_CHARGER and block_->id != 0) {
					WorldDrop drop_block_{};
					drop_block_.id = 2286, drop_block_.count = 1;
					if (block_->planted - time(nullptr) <= 0) {
						drop_block_.id = 2204;
					}
					drop_block_.x = (x_ * 32) + rand() % 17, drop_block_.y = (y_ * 32) + rand() % 17;
					VisualHandle::Drop(world_, drop_block_);
				}
				if (ignore_reset == false) {
					punch_tile(peer, x_, y_, 0x3, p_, pInfo(peer)->netID, 0x0);
					reset_(block_, x_, y_, world_);
				}
			}
			else { /*-1 hp*/
				block_->lp = time(nullptr);
				if (items[block_->fg].blockType == BlockTypes::PROVIDER) {
					uint32_t laikas = uint32_t((time(nullptr) - block_->planted <= items[block_->fg].growTime ? time(nullptr) - block_->planted : items[block_->fg].growTime));
					if (laikas == items[block_->fg].growTime) {
						if (pInfo(peer)->lvlKit < 100) Kit_Server::Add_Xp(peer, rand() % 28, "kit");
						if (pInfo(peer)->role_quest and pInfo(peer)->quest_number == 1) {
							if (pInfo(peer)->need_item_req_id == block_->fg) {
								if (pInfo(peer)->role_quest_type == "Provider" and pInfo(peer)->need_required < pInfo(peer)->quest_required) {
									pInfo(peer)->need_required += 1;
									if (pInfo(peer)->need_required >= pInfo(peer)->quest_required) {
										pInfo(peer)->need_required = pInfo(peer)->quest_required;
										VarList::OnConsoleMessage(peer, "`9Provider Quest! `ocomplete! Go claim your points!");
										VarList::OnTalkBubble(peer, pInfo(peer)->netID, "`9Provider Qu  est! ``complete! Go claim your points!", 0, 0);
									}
								}
							}
						}
						vector<double> ids; 
						int extra_count = 0;
						if (block_->fg == 866) ids = { 868.2 };
						else if (block_->fg == 872) ids = { 874.2 };
						else if (block_->fg == 1044) ids = { 868.2 };
						else if (block_->fg == 3888) ids = { 3890.3 };
						else if (block_->fg == 1632) ids = { 1634 };
						else if (block_->fg == 5116) ids = { 5114 };
						else if (block_->fg == 2798) ids = { 822.2 };
						else if (block_->fg == 8172) ids = { 8174, 8176, 8178, 8180, 8182 };
						else if (block_->fg == 8160) ids = { 8162, 8164, 8166, 8168, 8170 };
						else if (block_->fg == 8148) ids = { 8150, 8152, 8154, 8156, 8158 };
						else if (block_->fg == 8136) ids = { 8138, 8140, 8142, 8144, 8146 };
						else if (block_->fg == 8124) ids = { 8126, 8128, 8130, 8132, 8134 };
						else if (block_->fg == 8112) ids = { 8114, 8116, 8118, 8120, 8122 };
						else if (block_->fg == 8100) ids = { 8102, 8104, 8106, 8108, 8110 };
						else if (block_->fg == 8088) ids = { 8090, 8092, 8094, 8096, 8098 };
						else if (block_->fg == 8076) ids = { 8078, 8080, 8082, 8084, 8086 };
						else if (block_->fg == 4858) ids = { 4844, 4844, 4844, 4844,4844, 4846, 4846, 4848 };
						else if (block_->fg == 928) ids = { 914,914,914,914,914,924,916,916,916,916,924, 918,918,918, 920,920, 924 };
						else if (block_->fg == 6212) ids = { 1258, 1260, 1262, 1264, 1266, 1268, 1270, 4308, 4310, 4312, 4314, 4316, 4318 };
						else if (block_->fg == 6414) ids = { 6520, 6538, 6522, 6528, 6540, 6518, 6530, 6524, 6536, 6534, 6532, 6526, 6416 };
						else if (block_->fg == 1636) ids = { 728, 360, 308, 306, 2966, 1646, 3170, 1644, 1642, 3524, 1640, 1638, 2582, 3198, 8838, 6794, 10110, 12286 };
						else if (block_->fg == 7770) ids = { 7750, 7752, 7748, 7754, 7758, 7760, 7752, 7748, 7754, 7758, 7760, 7752, 7748, 7754, 7758, 7760, 7752, 7748, 7754, 7758, 7760 };
						else if (block_->fg == 7774) ids = { 7756, 7752, 7748, 7754, 7758, 7760, 7752, 7748, 7754, 7758, 7760, 7752, 7748, 7754, 7758, 7760, 7752, 7748, 7754, 7758, 7760 };
						else if (block_->fg == 7778) ids = { 7762, 7752, 7748, 7754, 7758, 7760, 7752, 7748, 7754, 7758, 7760, 7752, 7748, 7754, 7758, 7760, 7752, 7748, 7754, 7758, 7760 };
						else if (block_->fg == 9302) ids = { 9254, 7752, 7748, 7754, 7758, 7760, 7752, 7748, 7754, 7758, 7760, 7752, 7748, 7754, 7758, 7760, 7752, 7748, 7754, 7758, 7760 };
						else if (block_->fg == 8050) ids = { 8046, 11788,  7752, 7748, 7754, 7758, 7760, 7752, 7748, 7754, 7758, 7760, 7752, 7748, 7754, 7758, 7760, 7752, 7748, 7754, 7758, 7760 };
						else if (block_->fg == 3044) ids = { 2914, 3012,2914, 3012,2914, 3012, 3014,3014, 3016, 3016, 3018,2914, 3012,2914, 3012,2914, 3012, 3014,3014, 3016, 3016, 3018, 5528, 5526, 3020,3432,3098,4248,4246,3218 };
						else if (block_->fg == 7766) ids = { 7780 , 7780 , 7780 , 7780 , 7780 , 7780 , 7780 , 7780 , 7780,7780 , 7780 , 7780 , 7780 , 7780 , 7780 , 7780 , 7780 , 7780 , 7780 , 7752, 7748, 7754, 7758, 7760, 12296 };
						else if (block_->fg == 11472) ids = { 8802.5, 8800.5, 5428.1, 5430.1, 5432.1, 5434.1, 6956.5, 5446.1, 3584.5, 6414.1, 8480.1, 8554.1, 8210.5, 8534.5, 8664.5, 8262.5, 8976.1, 8278.1, 8280.1, 262.1, 263.1, 8728.1, 8556.1, 1368.10, 8246.1, 5382.2, 9202.1, 6986.1, 1360.5, 1384.1, 7006.1, 2564.5, 8980.1, 6970.1, 3676.1, 8254.5, 5376.1, 5792.1, 8546.1, 8712.5, 7864.1, 8984.1, 7490.1, 7496.1, 7498.1, 10486.1, 10488.1, 10444.1, 10220.1, 10258.1, 7758.1, 9356.10, 7080.1, 7082.1, 7084.1, 7086.1, 7088.1, 7090.1, 7092.1, 7094.1, 7096.1, 10032.1, 5780.1, 8722.1, 9692.1, 7760.1, 7418.1, 7420.1, 7422.1, 8948.1, 8960.1, 10036.1, 10038.1, 10040.1, 10042.1, 10440.1, 9184.1, 7718.1, 6384.1, 11514.1, 11520.1, 11202.1, 11192.1 };
						else if (block_->fg == 8196) ids = { 13628.2, 13602.2,  578.1, 1174.1, 3006.1, 5494.1, 8004.1, 10010.1, 10022.1, 10572.1, 11590.1, 6390.1, 6544.5, 6394.1, 6396.1, 6400.1, 6402.1, 6404.1, 6392.1, 6406.1, 6408.1, 390.1, 392.1, 1514.1, 5384.1, 5386.1, 5388.1, 5390.1, 5392.1,1196.1, 716.1, 1356.1, 7452.1, 1358.1,1362.1, 10056.1, 7942.1, 5470.1, 5472.1, 5474.1, 5476.1, 5478.1,4376.1, 5520.1, 7658.1, 9240.1, 10544.1, 11564.1, 12998.1, 9740.1, 12006.1, 13350.1, 11738.1, 8984.1, 8986.1, 8222.1, 11056.1, 11278.1, 5476.1, 5472.1, 5478.1, 5470.1, 5474.1, 3146.1, 4206.1,  8824.1, 8826.1, 8828.1, 10376.5, 10018.1, 9994.5, 9992.5, 9990.5, 9988.10, 13384.1, 12532.5, 12530.5, 12534.5, 11732, 4920.3, 4878, 7524.3, 7528.5, 7526.3, 4922.3, 7522.10, 7520.10, 2280.5, 4372.5, 716.3, 1572.3, 11898.5, 2596.3, 714, 2632.3, 2630.2, 6180.5, 6182.5, 6184.5, 7846.10, 7848.10, 7272.5, 7284.5, 334.5, 4630, 4632, 8214.10, 8206.10, 8228.10, 4944.10, 8236.10, 4942.10, 8238.10, 8234.10, 8232.10, 8216.10, 8220.5, 8218.10, 8230.10, 8210.10, 952, 1110.5, 2708.3, 1112.5, 264.5, 8208.10, 414.5, 426.5, 420.5, 4634.5, 848.3, 2860.5, 6324.5, 2862.5, 8994.5, 8990.5, 11192.3, 8200.10, 10060.1, 8202.10, 8204.5, 8992.10, 8224.3, 8832.3, 8226.3, 11194.5, 8212.5, 8988.10 }; // ne visi
						else if (block_->fg == 12986) { // WINTERFEST CALENDER 2022
							if (WinterFest.Active) DailyEvent_Task::WinterFest(peer, "4", 1);
							ids = Winter_Fest::Calendar_2022(block_->shelf_1);
							block_->shelf_1++;
						}
						else if (block_->fg == 14138) { // WINTERFEST CALENDER 2023
							if (WinterFest.Active) DailyEvent_Task::WinterFest(peer, "4", 1);
							ids = Winter_Fest::Calendar_2023(block_->shelf_1);
							block_->shelf_1++;
						}
						else if (block_->fg == 15010) { // WINTERFEST CALENDER 2024
							if (WinterFest.Active) DailyEvent_Task::WinterFest(peer, "4", 1);
							ids = Winter_Fest::Calendar_2024(block_->shelf_1);
							block_->shelf_1++;
						}
						else if (block_->fg == 10450) { // DIAMOND BUILDER BONANZA
							if (WinterFest.Active) DailyEvent_Task::WinterFest(peer, "5", 1);
							ids = { 10458.5, 12942.1, 10466.3, 10468.5, 10470.3, 14128.1, 12946.1, 14130.3, 10454.1, 10482.1, 14132.1, 11526.1, 10480.3, 10464.3, 12944.1, 14134.1, 11530.1, 14136.1, 10472.2, 10474.3, 10484.3, 14080.1, 10462.2, 12964.3, 12950.5, 12954.3, 11528.1, 10478.2, 10476.2, 11522.2, 12948.1, 11524.5, 12894.1, 11470.1, 10460.1 };
						}
						else if (block_->fg == 1008 or block_->fg == 5196) { // ATM MACHINE
							int c_ = (rand() % 250) + 1;
							if (block_->fg == 5196) c_ = (rand() % 500) + 1;
							if (c_ == 250 or c_ == 500) {
								PlayerMoving data_{};
								data_.packetType = 17, data_.netID = 29, data_.YSpeed = 29, data_.x = (x_ * 32) + 16, data_.y = (y_ * 32) + 16;
								BYTE* raw = packPlayerMoving(&data_);
								for (ENetPeer* cp_ = server->peers; cp_ < &server->peers[server->peerCount]; ++cp_) {
									if (cp_->state != ENET_PEER_STATE_CONNECTED or cp_->data == NULL) continue;
									if (pInfo(peer)->world != pInfo(cp_)->world) continue;
									send_raw(cp_, 4, raw, 56, ENET_PACKET_FLAG_RELIABLE);
								}
								delete[] raw;
							}
							gems_(peer, world_, c_, x_ * 32, y_ * 32, block_->fg);
						}
						else if (block_->fg == 9948) { // WASHING MACHINE
							vector<pair<int, int>>::iterator p = find_if(Environment()->items_washing.begin(), Environment()->items_washing.end(), [&](const pair < int, int>& element) { return abs(element.first - items[block_->shelf_1].rarity) < 5 && rand() % 10 < 1; });
							if (p != Environment()->items_washing.end()) {
								ids.push_back(Environment()->items_washing[p - Environment()->items_washing.begin()].second);
							}
							if (ids.size() == 0) {
								ids.push_back(block_->shelf_1);
								VarList::OnTalkBubble(peer, pInfo(peer)->netID, "Could not wash this..");
							}
							else VarList::OnTalkBubble(peer, pInfo(peer)->netID, "Washing is completed");
							extra_count = block_->shelf_2;
							block_->shelf_1 = 0, block_->shelf_2 = 0, block_->fg = 9946;
							CAction::Positioned(peer, pInfo(peer)->netID, "audio/bubble_boil.wav", 0);
						}
						else if (block_->fg == 10656) {
							if (block_->shelf_1 >= 200) {
								drop_valentine_box(peer, world_, block_, x_, y_, true, 0);
								for (ENetPeer* cp_ = server->peers; cp_ < &server->peers[server->peerCount]; ++cp_) {
									if (cp_->state != ENET_PEER_STATE_CONNECTED or cp_->data == NULL or pInfo(peer)->world != pInfo(cp_)->world) continue;
									CAction::Effect(cp_, 46, (float)(x_ * 32) + 16, (float)(y_ * 32) + 16);
								}
								block_->shelf_1 = 0, block_->fg = 10658;
							}
						}
						else if (block_->fg == 3938 || block_->fg == 9962) {
							if (block_->shelf_1 != 0) {
								ids = { 3948 , 3948 , 3948 , 3948 , 3948 , 3946 , 3942 ,3950, 3942 , 3942 , 3944 , 10584 , 4236 ,3948 , 3948 , 3948 , 3948 , 3948 , 3946 , 3942 ,3950, 3942 , 3942 , 3944 , 10584 , 4236 ,3948 , 3948 , 3948 , 3948 , 3948 , 3946 , 3942 ,3950, 3942 , 3942 , 3944 , 10584 , 4236 ,3948 , 3948 , 3948 , 3948 , 3948 , 3946 , 3942 ,3950, 3942 , 3942 , 3944 , 10584 , 4236 ,3948 , 3948 , 3948 , 3948 , 3948 , 3946 , 3942 ,3950, 3942 , 3942 , 3944 , 10584 , 4236 ,3948 , 3948 , 3948 , 3948 , 3948 , 3946 , 3942 ,3950, 3942 , 3942 , 3944 , 10584 , 4236 , 10220 , 4126 ,6800 };
								if (block_->shelf_1 == 3936)  ids.insert(ids.end(), { 3940,11220 });
								block_->shelf_1 = 0, block_->fg = 3938;
							}
						}
						else if (block_->fg == 12680) {
							ids = { 12686.5, 12688.10, 12690.10, 12692.10, 12694.2, 12696.2, 12698.10, 12700.10, 12702.2, 12704.10, 12706.10, 12708.10, 12710.10, 12712.10, 12714.10, 12716.10, 12718.10, 12720.2, 12722.1, 12724.10,12686.5, 12688.10, 12690.10, 12692.10, 12694.2, 12696.2, 12698.10, 12700.10, 12702.2, 12704.10, 12706.10, 12708.10, 12710.10, 12712.10, 12714.10, 12716.10, 12718.10, 12720.2, 12722.1, 12724.10, 12686.5, 12688.10, 12690.10, 12692.10, 12694.2, 12696.2, 12698.10, 12700.10, 12702.2, 12704.10, 12706.10, 12708.10, 12710.10, 12712.10, 12714.10, 12716.10, 12718.10, 12720.2, 12722.1, 12724.10, 12686.5, 12688.10, 12690.10, 12692.10, 12694.2, 12696.2, 12698.10, 12700.10, 12702.2, 12704.10, 12706.10, 12708.10, 12710.10, 12712.10, 12714.10, 12716.10, 12718.10, 12720.2, 12722.1, 12724.10, 12734, 12736, 12730, 12728, 12732, 12738 };
							block_->shelf_1++;
						}
						if (ids.size() != 0) {
							double rand_item = ids[rand() % ids.size()];
							int count_ = 1;
							bool do_rand = true;
							if (to_string(rand_item).find(".") != string::npos) {
								string asd_ = explode(".", to_string(rand_item))[1];
								string s(1, asd_[0]);
								int c_ = atoi(s.c_str());
								if (c_ != 0) {
									if (asd_.size() == 2) {
										do_rand = false;
										c_ /= 10;
									}
									count_ = c_;
								}
							}
							if (count_ > 1 and do_rand)
								count_ = (rand() % count_) + 1;
							int rand_item2 = (int)rand_item;
							if (extra_count != 0) count_ = extra_count;
							if (rand_item2 == 2582) Epic_Quest::Add(peer, "Get a Teddy Bear from an Awkward Friendly Unicorn", pInfo(peer)->epicq_teddybear, 1, 1);
							if (block_->fg == 10450 and WinterFest.Active) {
								for (const auto& result : pInfo(peer)->WinterBingo_Task) {
									if (result.second == rand_item2) if (not Has_Claimed::Bingo(peer, result.second)) pInfo(peer)->Has_BingoTask.push_back(result.second);		
								}
							}
							if (block_->fg == 15010 and WinterFest.Active) {
								for (const auto& result : pInfo(peer)->WinterBingo_Task) {
									if (result.second == rand_item2) if (not Has_Claimed::Bingo(peer, result.second)) pInfo(peer)->Has_BingoTask.push_back(result.second);
								}
							}
							WorldDrop new_drop_{};
							new_drop_.id = rand_item2, new_drop_.count = count_, new_drop_.x = (x_ * 32) + rand() % 17, new_drop_.y = (y_ * 32) + rand() % 17;
							if (not use_mag(world_, new_drop_, x_, y_)) VisualHandle::Drop(world_, new_drop_);
						}
						if (pInfo(peer)->starglitter_provider < pInfo(peer)->starglitter_provider2 && pInfo(peer)->starglitter_provider != -1) DailyEvent_Task::MStarglitter(peer, "provider", 1);
						int timed = 0;
						if (Playmods::HasByName(pInfo(peer), "Provider Time Reduced...")) timed = items[block_->fg].growTime * items[pInfo(peer)->ances].chance * 0.001;
						block_->planted = time(nullptr) - (timed);
						if (block_->fg == 9946) block_->planted = 0;
						if ((block_->fg == 12680 && block_->shelf_1 > 7) || (block_->fg == 12986 && block_->shelf_1 >= 25 ) || (block_->fg == 14138 && block_->shelf_1 >= 25) || (block_->fg == 15010 && block_->shelf_1 >= 25) || block_->fg == 7766 || block_->fg == 8050 || block_->fg == 7770 || block_->fg == 7774 || block_->fg == 7778 || block_->fg == 9302) {
							if ((block_->fg == 12680 && block_->shelf_1 > 7)) {
								WorldDrop new_drop_{};
								new_drop_.id = 12682, new_drop_.count = 1, new_drop_.x = (x_ * 32) + rand() % 17, new_drop_.y = (y_ * 32) + rand() % 17;
								VisualHandle::Drop(world_, new_drop_);
								block_->shelf_1 = 0;
							}
							if ((block_->fg == 12986 && block_->shelf_1 >= 25)) {
								WorldDrop new_drop_{};
								new_drop_.id = 12988, new_drop_.count = 1, new_drop_.x = (x_ * 32) + rand() % 17, new_drop_.y = (y_ * 32) + rand() % 17;
								VisualHandle::Drop(world_, new_drop_);
								block_->shelf_1 = 0;
							}
							if ((block_->fg == 14138 && block_->shelf_1 >= 25)) {
								WorldDrop new_drop_{};
								new_drop_.id = 14140, new_drop_.count = 1, new_drop_.x = (x_ * 32) + rand() % 17, new_drop_.y = (y_ * 32) + rand() % 17;
								VisualHandle::Drop(world_, new_drop_);
								block_->shelf_1 = 0;
							}
							if ((block_->fg == 15010 && block_->shelf_1 >= 25)) {
								WorldDrop new_drop_{};
								new_drop_.id = 15008, new_drop_.count = 1, new_drop_.x = (x_ * 32) + rand() % 17, new_drop_.y = (y_ * 32) + rand() % 17;
								VisualHandle::Drop(world_, new_drop_);
								block_->shelf_1 = 0;
							}
							PlayerMoving data_{};
							data_.packetType = 17, data_.netID = 97, data_.YSpeed = 97, data_.x = x_ * 32 + 16, data_.plantingTree = 150, data_.y = y_ * 32 + 16, data_.XSpeed = block_->fg;
							BYTE* raw = packPlayerMoving(&data_);
							for (ENetPeer* cp_ = server->peers; cp_ < &server->peers[server->peerCount]; ++cp_) {
								if (cp_->state != ENET_PEER_STATE_CONNECTED or cp_->data == NULL or pInfo(peer)->world != pInfo(cp_)->world) continue;
								send_raw(cp_, 4, raw, 56, ENET_PACKET_FLAG_RELIABLE);
							}
							delete[] raw;
							block_->fg = 0;
						}
						if (pInfo(peer)->necklace == 8046) {
							add_peer_xp(peer, 3, true);
							Pet_Ai::Add_Xp(peer, 3);
						}
						if (pInfo(peer)->lwiz_step == 13) {
							if (pInfo(peer)->lwiz_quest != 5 && pInfo(peer)->lwiz_quest != 6 && pInfo(peer)->lwiz_quest != 7 && pInfo(peer)->lwiz_quest != 8) {
								add_lwiz_points(peer, 1);
							}
						}
						tile_update(peer, world_, block_, x_, y_);
					}
				}
				if (items[block_->fg].blockType == BlockTypes::RANDOM_BLOCK) {
					block_->roll = (rand() % 6);
					punch_tile(peer, x_, y_, 0x8, 0, pInfo(peer)->netID, 0x0, true, block_->roll);
				}
				if (items[block_->fg].blockType == BlockTypes::GIVING_TREE and pInfo(peer)->world != "GROWCH") {
					long long current_time = time(nullptr);
					if (block_->planted - current_time <= 0) {
						int prize_ = get_givingtree_prize(world_, block_, peer);
						if (block_->shelf_1 <= 5) prize_ = 1360;
						if (prize_ <= 0 or block_->shelf_1 > 100) break;
						int c_ = 1;
						if (Inventory::Modify(peer, prize_, c_) == 0) {
							if (WinterFest.Active) DailyEvent_Task::WinterFest(peer, "10", 1);
							VarList::OnConsoleMessage(peer, "I found a `2" + items[prize_].ori_name + "`o under the tree!");
							VarList::OnTalkBubble(peer, pInfo(peer)->netID, "I found a `2" + items[prize_].ori_name + "`w under the tree!", 0, false);
							block_->fg = 3200;
							update_tile(peer, x_, y_, 3200, true);
							block_->planted = time(nullptr) + 14400;
							PlayerMoving data_{};
							data_.packetType = 5, data_.punchX = pInfo(peer)->lastwrenchx, data_.punchY = pInfo(peer)->lastwrenchy, data_.characterState = 0x8;
							BYTE* raw = packPlayerMoving(&data_, 112 + alloc_(world_, block_));
							BYTE* blc = raw + 56;
							block_->flags = (block_->flags & 0x00400000 ? block_->flags : block_->flags | 0x00400000);
							form_visual(blc, *block_, *world_, peer, false, true);
							for (ENetPeer* cp_ = server->peers; cp_ < &server->peers[server->peerCount]; ++cp_) {
								if (cp_->state != ENET_PEER_STATE_CONNECTED or cp_->data == NULL) continue;
								if (pInfo(peer)->world != pInfo(cp_)->world) continue;
								send_raw(cp_, 4, raw, 112 + alloc_(world_, block_), ENET_PACKET_FLAG_RELIABLE);
							}
							delete[] raw, blc;
							if (block_->locked) upd_lock(*block_, *world_, peer);
							block_->shelf_1 = 0;
							tile_update(peer, world_, block_, x_, y_);
						}
					}
				}
				punch_tile(peer, x_, y_, 0x8, 6, pInfo(peer)->netID, 0x0, (block_->roll != 0 ? true : false), (block_->roll != 0 ? block_->roll : 0));
			}
			break;
		}
		case 32: {
			if (items[t_].wrench_by_public == false) {
				if (block_->fg == 202 or block_->fg == 204 or block_->fg == 206 or block_->fg == 4994 or block_->fg == 10000) {
					string owner_name = to_lower(block_->owner_name), user_name = to_lower(pInfo(peer)->tankIDName);
					if (owner_name != user_name) {
						if (items[t_].blockType == BlockTypes::LOCK) {
							if (find(block_->admins.begin(), block_->admins.end(), to_lower(pInfo(peer)->tankIDName)) != block_->admins.end()) {
								VarList::OnDialogRequest(peer, SetColor(peer) + "set_default_color|`o\nadd_label_with_icon|big|`wEdit " + items[t_].name + "``|left|" + to_string(t_) + "|\nembed_data|tilex|" + to_string(x_) + "\nembed_data|tiley|" + to_string(y_) + "\nadd_label|small|This lock is owned by `w" + block_->owner_name + "``, but I have access on it.|left\nend_dialog|lock_edit|Cancel|Remove My Access|");
							}
							else {
								VarList::OnTalkBubble(peer, pInfo(peer)->netID, "I'm `4unable`` to pick the lock.", 0, 1);
							}
							CAction::Positioned(peer, pInfo(peer)->netID, "audio/cant_place_tile.wav", 0);
							return true;
						}
					}
				}
				else if (block_->locked and items[p_].blockType != BlockTypes::CONSUMABLE) {
					if (world_->blocks[block_->lock_origin].fg == 242 || items[world_->blocks[block_->lock_origin].fg].blockType != BlockTypes::LOCK) {
						int xa_ = block_->lock_origin % 100, ya_ = block_->lock_origin / 100;
						remove_lock_broken(world_, &world_->blocks[block_->lock_origin], xa_, ya_);
					}
					else {
						WorldBlock* block2_ = &world_->blocks[block_->lock_origin];
						string owner_name = to_lower(block2_->owner_name), user_name = to_lower(pInfo(peer)->tankIDName);
						if (owner_name != user_name and not Role::Developer(peer)) {
							if (find(block2_->admins.begin(), block2_->admins.end(), user_name) == block2_->admins.end() and not block2_->spin and not Role::Developer(peer)) {
								CAction::Positioned(peer, pInfo(peer)->netID, "audio/punch_locked.wav", 0);
								VarList::OnTalkBubble(peer, pInfo(peer)->netID, "That area is owned by " + owner_name + "``", 0, 1);
								return true;
							}
							if (items[p_].blockType == BlockTypes::LOCK) {
								VarList::OnTalkBubble(peer, pInfo(peer)->netID, "`w" + world_->owner_named + "`` allows public building here, but no locks.", 0, 0);
								CAction::Positioned(peer, pInfo(peer)->netID, "audio/punch_locked.wav", 0);
								return true;
							}
						}
					}
				}
				else if (not world_->owner_name.empty() and items[p_].blockType != BlockTypes::CONSUMABLE) {
					string owner_name = to_lower(world_->owner_name), user_name = to_lower(pInfo(peer)->tankIDName);
					if (owner_name != user_name) {
						if (items[t_].blockType == BlockTypes::LOCK) {
							if (find(world_->admins.begin(), world_->admins.end(), user_name) != world_->admins.end()) {
								VarList::OnDialogRequest(peer, SetColor(peer) + "set_default_color|`o\nadd_label_with_icon|big|`wEdit " + items[t_].name + "``|left|" + to_string(t_) + "|\nembed_data|tilex|" + to_string(x_) + "\nembed_data|tiley|" + to_string(y_) + "\nadd_label|small|This lock is owned by `w" + world_->owner_name + "``, but I have access on it.|left\nend_dialog|lock_edit|Cancel|Remove My Access|");
							}
							else {
								VarList::OnTalkBubble(peer, pInfo(peer)->netID, "I'm `4unable`` to pick the lock.", 0, 1);
							}
							CAction::Positioned(peer, pInfo(peer)->netID, "audio/cant_place_tile.wav", 0);
							return true;
						}
						bool publica = world_->world_settings & SETTINGS::SETTINGS_4;
						if (!guild_access(peer, world_->guild_id) and find(world_->admins.begin(), world_->admins.end(), user_name) == world_->admins.end() and not publica and not Role::Developer(peer)) {
							CAction::Positioned(peer, pInfo(peer)->netID, "audio/punch_locked.wav", 0);
							string owner_name = world_->owner_name;
							if (world_->owner_named.substr(0, 2) == "`o") owner_name = "`w" + world_->owner_name;
							if (not world_->owner_named.empty()) owner_name = world_->owner_named;
							VarList::OnTalkBubble(peer, pInfo(peer)->netID, "That area is owned by " + owner_name + "``", 0, 1);
							return true;
						}
						if (items[p_].blockType == BlockTypes::LOCK) {
							VarList::OnTalkBubble(peer, pInfo(peer)->netID, "`w" + world_->owner_named + "`` allows public building here, but no locks.", 0, 0);
							CAction::Positioned(peer, pInfo(peer)->netID, "audio/punch_locked.wav", 0);
							return true;
						}
					}
				}
			}
			if (items[t_].blockType == BlockTypes::KRANKEN) {
				if (Only_Access(peer, world_, block_)) {
					VarList::OnDialogRequest(peer, SetColor(peer) + "set_default_color|`o\nadd_label_with_icon|big|`wKranken's Galactic Block``|left|10962|\nadd_spacer|small|\nadd_custom_textbox|`wAdjust the color of your block here, by including 0-255 of Red, Green and Blue.`|size:medium|\nadd_text_input|kranken_r|Red|" + to_string(block_->r) + "|3|\nadd_text_input|kranken_g|Green|" + to_string(block_->g) + "|3|\nadd_text_input|kranken_b|Blue|" + to_string(block_->b) + "|3|\nadd_spacer|small|\nadd_custom_textbox|`wPick one of the available patterns for your block.`|size:medium|\nadd_button_with_icon|kranken_block_pattern|||" + to_string(kranken_pattern::get_pattern(block_->kranken_pattern).second) + "||\nadd_button_with_icon||END_LIST|noflags|0||\nadd_checkbox|kranken_world_save|Set this color as the default for this world.|0|\nend_dialog|kranken_edit|Cancel|Save|\nadd_quick_exit|\nembed_data|tilex|" + to_string(x_) + "|\nembed_data|tiley|" + to_string(y_) + "|\nembed_data|pattern|" + to_string(block_->kranken_pattern) + "|");
				}
				else {
					VarList::OnTalkBubble(peer, pInfo(peer)->netID, "That area is owned by " + owner_name, 0, 1);
					return false;
				}
			}
			else if (items[t_].blockType == BlockTypes::Fish_Mount) {
				if (Only_Access(peer, world_, block_)) {
					pInfo(peer)->lastwrenchb = t_;
					string bname = "\nadd_button|renamef|Rename!|", main = "You have stuffed and mounted a `8Perfect " + to_string(block_->c_) + "lb. ``" + items[block_->id].name + " on this plaque. Its glassy eyes stare in your soul. You cannot look away. Is that a fishy heartbeat you hear? Will someone stop that inteenal bleeding?", extra = "You can't ever remove a mounted fish. It will continue to stare at you until you go mad. You can however give an adorable nickname!|left|\nadd_text_input|fishsname|Name:|" + block_->txt + "|30|";
					if (block_->id == 0) bname = "\nadd_item_picker|mountaf|`wMount!|Select a `9Perfect `w or `9Massive `wFish to mount!|", extra = "You can't ever remove a mounted fish. It will continue to stare at you until you go mad. Are you sure you want to mount a fish?|left|", main = "Are you heartless enough to stuff and mount a fish? Fine! You can put in a `8Perfect ``or `8Massive ``fish to the " + items[t_].name + ".";
					VarList::OnDialogRequest(peer, SetColor(peer) + "set_default_color|`o\nadd_label_with_icon|big|`wEdit " + items[t_].name + " ``|left|" + to_string(t_) + "|\nadd_textbox|" + main + "|left|\nadd_smalltext|" + extra + "\nadd_spacer|small|\nembed_data|tilex|" + to_string(x_) + "\nembed_data|tiley|" + to_string(y_) + "|" + bname + "|noflags|0|0|left|\nend_dialog|fwallrora|I'm Perfectly Sane.||\nadd_quick_exit|");
				}
				else {
					VarList::OnTalkBubble(peer, pInfo(peer)->netID, "That area is owned by " + owner_name, 0, 1);
					return false;
				}
				break;
			}
			else if (items[t_].blockType == BlockTypes::CRYSTAL) {
				vector<vector<int>> current_{ {2242, 0}, {2244, 0}, {2246, 0}, {2248, 0}, {2250, 0} };
				string mix_with = "";
				for (int i = 0; i < block_->crystals.size(); i++) {
					vector<int> c_ = block_->crystals[i];
					for (int a = 0; a < current_.size(); a++) {
						if (current_[a][0] == c_[0]) {
							current_[a][1] = block_->crystals[i][1];
							break;
						}
					}
				}
				vector<string> reply{};
				for (int i = 0; i < current_.size(); i++) {
					reply.push_back(to_string(current_[i][1]) + "x `$" + mix_with + (current_[i][0] == 2242 ? "R" : (current_[i][0] == 2244 ? "G" : (current_[i][0] == 2246 ? "B" : (current_[i][0] == 2248 ? "W" : "B")))) + "``");
				}
				vector<string> available_recipes{};
				for (vector<vector<int>> a_ : crystal_receptai) {
					bool can_ = true;
					for (vector<int> b_ : a_) {
						for (int i = 0; i < current_.size(); i++) {
							if (current_[i][0] == b_[0] and current_[i][1] < b_[1]) {
								can_ = false;
								break;
							}
						}
						if (not can_) {
							break;
						}
					}
					if (can_) {
						available_recipes.push_back("\nadd_button|" + to_string(a_[5][0]) + "|`$Craft " + items[a_[5][0]].name + "``|noflags|0|0|");
					}
				}
				VarList::OnDialogRequest(peer, SetColor(peer) + "set_default_color|`o\nadd_label_with_icon|big|`wCrystal Shattering``|left|5104|\nembed_data|tilex|" + to_string(x_) + "\nembed_data|tiley|" + to_string(y_) + "\nadd_label_with_icon|small|This crystal is currently mixed with " + join(reply, ", ") + ".|left|5274|" + (available_recipes.size() == 0 ? "\nadd_textbox|No recipes are available. Mix more various crystals to see available recipes.|left|" : "\nadd_spacer|small|" + join(available_recipes, "")) + "\nend_dialog|crystal_exchange|Cancel||\n");
			}
			else if (items[t_].blockType == BlockTypes::DONATION) {
				pInfo(peer)->lastwrenchb = t_;
				string donate_item = "";
				int itemcount = block_->donates.size();
				for (int i_ = 0; i_ < block_->donates.size(); i_++) {
					donate_item += "\nadd_checkbox|item_" + to_string(i_) + "|" + items[block_->donates[i_].item].name + " (`w" + to_string(block_->donates[i_].count) + "``) from `w" + block_->donates[i_].name + "``" + (block_->donates[i_].text != "" ? "`#- \"" + block_->donates[i_].text + "\"``" : "") + "|0";
				}
				if (Only_Access(peer, world_, block_)) VarList::OnDialogRequest(peer, SetColor(peer) + "set_default_color|`o\nadd_label_with_icon|big|`w" + items[t_].name + "``|left|" + to_string(t_) + "|" + (itemcount == 0 ? "\nadd_textbox|The box is currently empty.|left|" : "\nadd_textbox|You have `w" + to_string(itemcount) + "`` gift waiting:|left|" + donate_item + "\nadd_spacer|small|\nadd_button|clear_selected|`4Retrieve Selected Gifts``|noflags|0|0|\nadd_button|takeall|`4Retrieve All Gifts``|noflags|0|0|") + "" + (itemcount >= 20 ? "\nadd_textbox|This box already has `w20`` gifts in it, can't add more until you clear them.|left|" : "\nadd_spacer|small|\nadd_item_picker|itemid|`wGive Gift`` (Min rarity: `52``)|Choose an item to give yourself|") + "\nend_dialog|donation_box_edit|Cancel||\n");
				else VarList::OnDialogRequest(peer, SetColor(peer) + "set_default_color|`o\nadd_label_with_icon|big|`w" + items[t_].name + "``|left|" + to_string(t_) + "|" + (itemcount != 0 ? "\nadd_textbox|You see `w" + to_string(itemcount) + "`` gift in the box!|left|" : "\nadd_textbox|The box is currently empty.|left|") + "\nadd_textbox|Want to leave a gift for the owner?|left|" + (itemcount >= 20 ? "\nadd_textbox|This box already has `w20`` gifts in it, can't add more until you clear them.|left|" : "\nadd_spacer|small|\nadd_item_picker|itemid|`wGive Gift`` (Min rarity: `52``)|Choose an item to give yourself|") + "\nend_dialog|donation_box_edit|Cancel||\n");
			}
			else if (items[t_].blockType == BlockTypes::BULLETIN_BOARD || items[t_].blockType == BlockTypes::MAILBOX) {
				bool acc_ = Only_Access(peer, world_, block_);
				pInfo(peer)->lastwrenchb = t_;
				string text = "";
				int letters = 0, same = 0;
				bool public_can_add = block_->spin, hide_names = block_->invert;
				for (int i_ = 0; i_ < world_->bulletin.size(); i_++) {
					if (world_->bulletin[i_].x == x_ and world_->bulletin[i_].y == y_) {
						letters++;
						if (fixchar(to_lower(world_->bulletin[i_].name)) == to_lower(pInfo(peer)->tankIDName)) same++;
						if (items[t_].blockType == BlockTypes::BULLETIN_BOARD) {
							if (hide_names) text += "\nadd_label|small|`2" + world_->bulletin[i_].text + "``|left|";
							else {
								if (acc_)text += "\nadd_label_with_icon_button|small|" + world_->bulletin[i_].name + ": ```2" + world_->bulletin[i_].text + "``|left|660|edit" + to_string(i_) + "|";
								else text += "\nadd_label_with_icon|small|" + world_->bulletin[i_].name + ": ```2" + world_->bulletin[i_].text + "``|left|660|";
							}
						}
						else text += "\nadd_label_with_icon|small|`#\"" + world_->bulletin[i_].text + "\" - `w" + world_->bulletin[i_].name + "``|left|660|\nadd_spacer|small|";
					}
				}
				if (acc_) VarList::OnDialogRequest(peer, (items[t_].blockType == BlockTypes::BULLETIN_BOARD ? "set_default_color|`o\nadd_label_with_icon|big|`w" + items[t_].name + "``|left|" + to_string(t_) + "|\nadd_spacer|small|" + (letters == 0 ? "\nadd_textbox|The " + items[t_].name + " is empty.|left|" : text) + "\nadd_textbox|Add to conversation?|left|\nadd_text_input|sign_text|||128|\nadd_spacer|small|\nadd_button|send|`2Add``|noflags|0|0|\nadd_spacer|small|\nadd_label_with_icon|big|`wOwner Options|left|242|\nadd_spacer|small|\nadd_textbox|To remove an individual comment, press the icon to the left of it.|left|\nadd_spacer|small|\nadd_spacer|small|" + (letters == 0 ? "" : "\nadd_button|clear|`4Clear Board``|noflags|0|0|") + "\nadd_checkbox|checkbox_locked|Public can add|" + (public_can_add ? "1" : "0") + "\nadd_checkbox|checkbox_hide|Hide names|" + (hide_names ? "1" : "0") + "\nend_dialog|bulletin_edit|Cancel|OK|\nadd_quick_exit|" : "set_default_color|`o\nadd_label_with_icon|big|`w" + items[t_].name + "``|left|" + to_string(t_) + "|" + (letters == 0 ? "\nadd_textbox|Your mailbox is currently empty.|left|" : "\nadd_textbox|You have `w" + to_string(letters) + "`` letters:|left|\nadd_spacer|small|" + text + "\nadd_spacer|small|\nadd_button|clear|`4Empty Mailbox``|noflags|0|0|") + "" + (letters >= 20 ? "\nadd_textbox|This mailbox already has `w20`` letters in it.  Try again later.|left|" : "\nadd_textbox|Write a letter to yourself?|left|\nadd_text_input|sign_text|||128|\nadd_spacer|small|\nadd_button|send|`2Send Letter``|noflags|0|0|") + "\nend_dialog|bulletin_edit|Cancel||\nadd_quick_exit|"));
				else VarList::OnDialogRequest(peer, (items[t_].blockType == BlockTypes::BULLETIN_BOARD ? "set_default_color|`o\nadd_label_with_icon|big|`w" + items[t_].name + "``|left|" + to_string(t_) + "|\nadd_spacer|small|" + (letters == 0 ? "\nadd_textbox|The " + items[t_].name + " is empty.|left|" : text) + "" + (public_can_add ? (same >= 3 ? "\nadd_textbox|You already have `03`` posts up, take a break!|left|" : "\nadd_textbox|Add to conversation?|left|\nadd_text_input|sign_text|||128|\nadd_spacer|small|\nadd_button|send|`2Add``|noflags|0|0|") : "") + "\nend_dialog|bulletin_edit|Cancel||\nadd_quick_exit|" : "set_default_color|`o\nadd_label_with_icon|big|`w" + items[t_].name + "``|left|" + to_string(t_) + "|" + (letters >= 20 ? "\nadd_textbox|This mailbox already has `w20`` letters in it.  Try again later.|left|" : (same >= 3 ? "\nadd_textbox|You've already crammed `w3 ``of your letters into the mailbox, better wait.|left|" : "\nadd_textbox|Want to leave a message for the owner?|left|\nadd_text_input|sign_text|||128|\nadd_spacer|small|\nadd_button|send|`2Send Letter``|noflags|0|0|")) + "\nend_dialog|bulletin_edit|Cancel||\nadd_quick_exit|"));
			}
			else if (items[t_].blockType == BlockTypes::VENDING) {
				if (abs(x_ * 32 - pInfo(peer)->x) > 15 || abs(y_ * 32 - pInfo(peer)->y) > 15) {
					VarList::OnTalkBubble(peer, pInfo(peer)->netID, "Get closer!", 0, 1);
					break;
				}
				else VarList::OnDialogRequest(peer, Only_Access(peer, world_, block_, true) ? get_vending(peer, world_, block_, x_, y_) : get_vending_buyer_side(peer, world_, block_, x_, y_));
			}
			else if (items[t_].blockType == BlockTypes::MANNEQUIN) {
				if (Only_Access(peer, world_, block_)) {
					string ex = "";
					if (block_->mannequin.c_head != 0) ex += "\nadd_checkbox|checkbox_" + to_string(block_->mannequin.c_head) + "|" + items[block_->mannequin.c_head].name + "|0|";
					if (block_->mannequin.c_shirt != 0) ex += "\nadd_checkbox|checkbox_" + to_string(block_->mannequin.c_shirt) + "|" + items[block_->mannequin.c_shirt].name + "|0|";
					if (block_->mannequin.c_pants != 0) ex += "\nadd_checkbox|checkbox_" + to_string(block_->mannequin.c_pants) + "|" + items[block_->mannequin.c_pants].name + "|0|";
					if (block_->mannequin.c_feet != 0) ex += "\nadd_checkbox|checkbox_" + to_string(block_->mannequin.c_feet) + "|" + items[block_->mannequin.c_feet].name + "|0|";
					if (block_->mannequin.c_mask != 0) ex += "\nadd_checkbox|checkbox_" + to_string(block_->mannequin.c_mask) + "|" + items[block_->mannequin.c_mask].name + "|0|";
					if (block_->mannequin.c_hand != 0) ex += "\nadd_checkbox|checkbox_" + to_string(block_->mannequin.c_hand) + "|" + items[block_->mannequin.c_hand].name + "|0|";
					if (block_->mannequin.c_back != 0) ex += "\nadd_checkbox|checkbox_" + to_string(block_->mannequin.c_back) + "|" + items[block_->mannequin.c_back].name + "|0|";
					if (block_->mannequin.c_hair != 0) ex += "\nadd_checkbox|checkbox_" + to_string(block_->mannequin.c_hair) + "|" + items[block_->mannequin.c_hair].name + "|0|";
					if (block_->mannequin.c_neck != 0) ex += "\nadd_checkbox|checkbox_" + to_string(block_->mannequin.c_neck) + "|" + items[block_->mannequin.c_neck].name + "|0|";
					if (not ex.empty()) ex += "\nadd_spacer|small|\nadd_button|clear_selected|`4Remove Selected Items``|noflags|0|0|\nadd_button|clear|`4Remove All Items``|noflags|0|0|";
					VarList::OnDialogRequest(peer, SetColor(peer) + "set_default_color|`o\nadd_label_with_icon|big|`wEdit " + items[t_].name + "``|left|" + to_string(t_) + "|\nadd_textbox|To dress, select a clothing item then use on the mannequin. To remove clothes, punch it or select which item to remove.<CR><CR>It will go into your backpack if you have room.|" + ex + "\nadd_textbox|<CR><CR>What would you like to write on its sign?``|left|\nadd_text_input|sign_text||" + block_->txt + "|128|\nembed_data|tilex|" + to_string(x_) + "\nembed_data|tiley|" + to_string(y_) + "\nend_dialog|mannequin_edit|Cancel|OK|");
				}
				else {
					VarList::OnTalkBubble(peer, pInfo(peer)->netID, "That area is owned by " + owner_name, 0, 1);
					return false;
				}
			}
			else if (items[t_].blockType == BlockTypes::PHONE) {
				if (Only_Access(peer, world_, block_)) {
					if (t_ == 9170) {
						pInfo(peer)->transmute_item1 = 0, pInfo(peer)->transmute_item2 = 0;
						VarList::OnDialogRequest(peer, SetColor(peer) + "set_default_color|`o\nadd_label_with_icon|big|`wTransmutabooth``|left|9170|\nadd_spacer|small|\nadd_smalltext|This booth will let you transfer the visuals of one clothing item onto another (of the same slot)!|left|\nadd_smalltext|The transmuted item will keep its properties (and mods!), so have fun and experiment with crazy combos!|left|" + (pInfo(peer)->transmute.size() == 0 ? "" : "\nadd_spacer|small|\nadd_smalltext|You have transmuted `2" + to_string(pInfo(peer)->transmute.size()) + "/12`` clothing items.|left|\nadd_button|permanentlist|`wYour Permanent Transmutes``|noflags|0|0|\n") + "\nadd_spacer|small|\nadd_smalltext|Here's where you can permanently change the visuals of clothing!|left|\nadd_button|permanttransmutation|`wTransmutate!``|noflags|0|0|\nadd_spacer|small|\nadd_button|transmutationhelp|`wHelp``|noflags|0|0|\nadd_spacer|small|\nend_dialog|transmutated_device_edit|Close||\nadd_quick_exit|");
					}
					else if (t_ == 9946) VarList::OnDialogRequest(peer, SetColor(peer) + "set_default_color|`o\nadd_label_with_icon|big|`wWashing Machine``|left|9946|\nadd_textbox|Choose an item to wash|left|\nadd_textbox|`4DISCLAIMER:`` Becareful, you may end up with higher or lower rarity!|left|\nadd_spacer|small|\nadd_item_picker|itemid|`wWash`` (Min rarity: `52``)|Choose an item to wash|\nadd_spacer|small|\nadd_button|cancel|Close|noflags|0|0|\nend_dialog|washing_machine|||\nadd_quick_exit|");
					else {
						string ex = "";
						if (block_->phoneb.c_neck != 0 || block_->phoneb.c_hair != 0 || block_->phoneb.c_mask != 0 || block_->phoneb.c_hand != 0 || block_->phoneb.c_back != 0 || block_->phoneb.c_feet != 0 || block_->phoneb.c_head != 0 || block_->phoneb.c_shirt != 0 || block_->phoneb.c_pants != 0) {
							if (block_->phoneb.c_head != 0) ex += "\nadd_textbox|`o- " + items[block_->phoneb.c_head].name + "|left|";
							if (block_->phoneb.c_shirt != 0) ex += "\nadd_textbox|`o- " + items[block_->phoneb.c_shirt].name + "|left|";
							if (block_->phoneb.c_pants != 0) ex += "\nadd_textbox|`o- " + items[block_->phoneb.c_pants].name + "|left|";
							if (block_->phoneb.c_feet != 0) ex += "\nadd_textbox|`o- " + items[block_->phoneb.c_feet].name + "|left|";
							if (block_->phoneb.c_mask != 0) ex += "\nadd_textbox|`o- " + items[block_->phoneb.c_mask].name + "|left|";
							if (block_->phoneb.c_hand != 0) ex += "\nadd_textbox|`o- " + items[block_->phoneb.c_hand].name + "|left|";
							if (block_->phoneb.c_back != 0) ex += "\nadd_textbox|`o- " + items[block_->phoneb.c_back].name + "|left|";
							if (block_->phoneb.c_hair != 0) ex += "\nadd_textbox|`o- " + items[block_->phoneb.c_hair].name + "|left|";
							if (block_->phoneb.c_neck != 0) ex += "\nadd_textbox|`o- " + items[block_->phoneb.c_neck].name + "|left|";
							if (block_->phoneb.c_ances != 0) ex += "\nadd_textbox|`o- " + items[block_->phoneb.c_ances].name + "|left|";
							VarList::OnDialogRequest(peer, SetColor(peer) + "set_default_color|`o\nadd_label_with_icon|big|`wEdit " + items[t_].name + "``|left|" + to_string(t_) + "|\nadd_textbox|`oYour Phone Booth contains a neatly folded outfit:|left|" + ex + "|\nembed_data|tilex|" + to_string(x_) + "\nembed_data|tiley|" + to_string(y_) + "\nend_dialog|Wrench_PhoneBooth|Exit|Take All Items|");
						}
						else VarList::OnDialogRequest(peer, SetColor(peer) + "set_default_color|`o\nadd_label_with_icon|big|`wEdit " + items[t_].name + "``|left|" + to_string(t_) + "|\nadd_textbox|`oYour Phone Booth is empty! Punch it while standing on it store your outfit into it.|\nembed_data|tilex|" + to_string(x_) + "\nembed_data|tiley|" + to_string(y_) + "\nend_dialog|Wrench_PhoneBooth|Exit|Take All Items|");
					}
				}
				else {
					VarList::OnTalkBubble(peer, pInfo(peer)->netID, "That area is owned by " + owner_name, 0, 1);
					return false;
				}
			}
			else if (items[t_].blockType == BlockTypes::LOCK_BOT) {
				if (Only_Access(peer, world_, block_)) {
					pInfo(peer)->lastwrenchb = t_;
					if (block_->flags & 0x00200000 and pInfo(peer)->state == 16) block_->flags = block_->flags ^ 0x00200000;
					else if (block_->flags ^ 0x00200000 and pInfo(peer)->state != 16) block_->flags |= 0x00200000;
					tile_update(peer, world_, block_, x_, y_);
					string hold = "";
					uint16_t wl = 0, dl = 0, bgl = 0, sl = 0, bl = 0, hl = 0;
					for (int i_ = 0; i_ < pInfo(peer)->inv.size(); i_++) {
						if (pInfo(peer)->inv[i_].first == 202) sl = pInfo(peer)->inv[i_].second;
						if (pInfo(peer)->inv[i_].first == 204) bl = pInfo(peer)->inv[i_].second;
						if (pInfo(peer)->inv[i_].first == 206) hl = pInfo(peer)->inv[i_].second;
						if (pInfo(peer)->inv[i_].first == 242) wl = pInfo(peer)->inv[i_].second;
						if (pInfo(peer)->inv[i_].first == 1796) dl = pInfo(peer)->inv[i_].second;
						if (pInfo(peer)->inv[i_].first == 7188) bgl = pInfo(peer)->inv[i_].second;
						if (wl && dl && bgl && sl && bl && hl) break;
					}
					hold = "\nadd_smalltext|`9Wait, you don't have any locks at all! Why are you wasting my time?``|left|";
					if (wl != 0 || dl != 0 || sl != 0 || bl != 0 || hl != 0 || bgl != 0) hold = "\nadd_smalltext|`9(Sensors detect";
					if (sl) hold += " " + to_string(sl) + " Small Locks" + (bl != 0 or hl != 0 or wl != 0 or dl != 0 or bgl != 0 ? "," : ")``|left|") + "";
					if (bl) hold += "" + a + (hl == 0 and wl == 0 and dl == 0 and bgl == 0 and not (sl == 0) ? " and " : " ") + to_string(bl) + " Big Locks" + (hl != 0 or wl != 0 or dl != 0 or bgl != 0 ? "," : ")``|left|") + "";
					if (hl) hold += "" + a + (wl == 0 and dl == 0 and bgl == 0 and not (sl == 0 or bl == 0) ? " and " : " ") + to_string(hl) + " Huge Locks" + (wl != 0 or dl != 0 or bgl != 0 ? "," : ")``|left|") + "";
					if (wl) hold += "" + a + (dl == 0 and bgl == 0 and not (sl == 0 or bl == 0 or hl == 0) ? " and " : " ") + to_string(wl) + " World Locks" + (dl != 0 or bgl != 0 ? "," : ")``|left|") + "";
					if (dl) hold += "" + a + (bgl == 0 and not (sl == 0 or bl == 0 or hl == 0 or wl == 0) ? " and " : " ") + to_string(dl) + " Diamond Locks" + (bgl != 0 ? "," : ")``|left|") + "";
					if (bgl) hold += "" + a + (sl != 0 or bl != 0 or hl != 0 or wl != 0 ? " and " : " ") + to_string(bgl) + " Platinum Gem Locks)``|left | ";
					VarList::OnDialogRequest(peer, SetColor(peer) + "set_default_color|\nadd_label_with_icon|big|`9Lock-Bot|left|3682|\nadd_smalltext|`oGreetings human, i'm Lock-Bot. I can provide convenient access to Locke's supply of goods, in exchange for Locks. However. I must leave to recharge in 8 hours.|left|\nadd_spacer|small|" + hold + "|\nadd_button|item_204|`oBuy Big Lock for 5 Small Locks|0|0|\nadd_button|item_206|`oBuy Huge Lock for 3 Big Locks|0|0|\nadd_button|item_5262|`oBuy Neon Gum for 2 Huge Locks|0|0|\nadd_button|item_242|`oBuy World Lock for 5 Huge Locks|0|0|\nadd_button|item_5954|`oBuy Guild Chest for 1 World Locks|0|0|\nadd_button|item_3156|`oBuy Transdimensional Vaporizer Ray for 3 World Locks|0|0|\nadd_button|item_3676|`oBuy Pet Trainer Whisle for 5 World Locks|0|0|\nadd_button|item_8878|`oBuy Safe Vault for 6 World Locks|0|0|\nadd_button|item_12480|`oBuy Punch Antennae for 10 World Locks|0|0|\nadd_button|item_12482|`oBuy Build Antennae for 10 World Locks|0|0|\nadd_button|item_12484|`oBuy Grow Antennae for 10 World Locks|0|0|\nadd_button|item_3684|`oBuy Lock-Bot Remote for 10 World Locks|0|0|\nadd_button|item_5258|`oBuy Chi Harmonizer for 10 World Locks|0|0|\nadd_button|item_6140|`oBuy Extract-O-Snap for 15 World Locks|0|0|\nadd_button|item_1280|`oBuy Birth Certificate for 15 World Locks|0|0|\nadd_button|item_3560|`oBuy Lock Mover for 20 World Locks|0|0|\nadd_button|item_13790|`oBuy Stylish Sunglasses for 25 World Locks|0|0|\nadd_button|item_12358|`oBuy Music Amplifier for 50 World Locks|0|0|\nadd_button|item_7190|`oBuy Guild Name Changer for 65 World Locks|0|0|\nadd_button|item_1486|`oBuy Growtoken for 1 Diamond Locks|0|0|\nadd_button|item_5264|`oBuy Neon Nerves for 5 Diamond Locks|0|0|\nadd_button|item_5260|`oBuy Harmonic Lock for 10 Diamond Locks|0|0|\nend_dialog|LockBot|GoodBye!||\nadd_quick_exit|");
				}
				else {
					VarList::OnTalkBubble(peer, pInfo(peer)->netID, "That area is owned by " + owner_name, 0, 1);
					return false;
				}
			}
			else if (items[t_].blockType == BlockTypes::OVEN) {
				if (Only_Access(peer, world_, block_)) {
					VarList::OnDialogRequest(peer, SetColor(peer) + "set_default_color|`o\nadd_label_with_icon|big|`w" + items[t_].name + "``|left|" + to_string(t_) + "|\nadd_spacer|small|\nembed_data|tilex|31\nembed_data|tiley|23\nadd_textbox|To begin cooking, use your first ingredient on the oven.|left|\nadd_button|manual|Read Instruction Manual|noflags|0|0|\nend_dialog|oven|Exit||\n");
				}
				else {
					VarList::OnTalkBubble(peer, pInfo(peer)->netID, "That area is owned by " + owner_name, 0, 1);
					return false;
				}
				break;
			}
			else if (t_ == 20194 or t_ == 20196 or t_ == 20198 or t_ == 20200) {//FORGING
				if (pInfo(peer)->world.find("GROWMINES") != std::string::npos or pInfo(peer)->world == "MINING") {
					string dialog = "";
					if (Miner::PickaxeLvl(peer) == 0) {
						int item1 = Inventory::Contains(peer, 98), item2 = Inventory::Contains(peer, 5070), item3 = Inventory::Contains(peer, 5024), item4 = Inventory::Contains(peer, 1796);
						dialog = "\nadd_button_with_icon||Pickaxe " + a + (item1 >= 1 ? "`2(YES!)" : "`4(NO!)") + "|staticYellowframe|98|1|\nadd_button_with_icon||Reality " + a + (item2 >= 15 ? "`2(YES!)" : "`4(NO!)") + "|staticYellowframe|5070|15|\nadd_button_with_icon||Fire Essence " + a + (item3 >= 100 ? "`2(YES!)" : "`4(NO!)") + "|staticYellowframe|5024|100|\nadd_button_with_icon||Diamond Lock " + a + (item4 >= 10 ? "`2(YES!)" : "`4(NO!)") + "|staticYellowframe|1796|10|\nadd_button_with_icon||END_LIST|noflags|0||\nadd_textbox|`o- Pickaxe Preview:|left|\nadd_button_with_icon||LEVEL 1|noflags|14516|\nadd_button_with_icon||END_LIST|noflags|0||\nadd_small_font_button|upgto_1|`2Upgrade to level 1|noflags|0|0|";
					}
					if (Miner::PickaxeLvl(peer) == 1) {
						int item1 = Inventory::Contains(peer, 14516), item2 = Inventory::Contains(peer, 7186), item3 = Inventory::Contains(peer, 5024), item4 = Inventory::Contains(peer, 1796);
						dialog = "\nadd_button_with_icon||Pickaxe Lvl 1 " + a + (item1 >= 1 ? "`2(YES!)" : "`4(NO!)") + "|staticYellowframe|14516|1|\nadd_button_with_icon||Time " + a + (item2 >= 15 ? "`2(YES!)" : "`4(NO!)") + "|staticYellowframe|7186|15|\nadd_button_with_icon||Fire Essence " + a + (item3 >= 100 ? "`2(YES!)" : "`4(NO!)") + "|staticYellowframe|5024|100|\nadd_button_with_icon||Diamond Lock " + a + (item4 >= 20 ? "`2(YES!)" : "`4(NO!)") + "|staticYellowframe|1796|20|\nadd_button_with_icon||END_LIST|noflags|0||\nadd_textbox|`o- Pickaxe Preview:|left|\nadd_button_with_icon||LEVEL 2|noflags|14518|\nadd_button_with_icon||END_LIST|noflags|0||\nadd_small_font_button|upgto_2|`2Upgrade to level 2|noflags|0|0|";
					}
					if (Miner::PickaxeLvl(peer) == 2) {
						int item1 = Inventory::Contains(peer, 14518), item2 = Inventory::Contains(peer, 5072), item3 = Inventory::Contains(peer, 5024), item4 = Inventory::Contains(peer, 1796);
						dialog = "\nadd_button_with_icon||Pickaxe Lvl 2 " + a + (item1 >= 1 ? "`2(YES!)" : "`4(NO!)") + "|staticYellowframe|14518|1|\nadd_button_with_icon||Wealth " + a + (item2 >= 20 ? "`2(YES!)" : "`4(NO!)") + "|staticYellowframe|5072|20|\nadd_button_with_icon||Fire Essence " + a + (item3 >= 100 ? "`2(YES!)" : "`4(NO!)") + "|staticYellowframe|5024|100|\nadd_button_with_icon||Diamond Lock " + a + (item4 >= 30 ? "`2(YES!)" : "`4(NO!)") + "|staticYellowframe|1796|30|\nadd_button_with_icon||END_LIST|noflags|0||\nadd_textbox|`o- Pickaxe Preview:|left|\nadd_button_with_icon||LEVEL 3|noflags|14520|\nadd_button_with_icon||END_LIST|noflags|0||\nadd_small_font_button|upgto_3|`2Upgrade to level 3|noflags|0|0|";
					}
					if (Miner::PickaxeLvl(peer) == 3) {
						int item1 = Inventory::Contains(peer, 14520), item2 = Inventory::Contains(peer, 5074), item3 = Inventory::Contains(peer, 5024), item4 = Inventory::Contains(peer, 1796);
						dialog = "\nadd_button_with_icon||Pickaxe Lvl 3 " + a + (item1 >= 1 ? "`2(YES!)" : "`4(NO!)") + "|staticYellowframe|14520|1|\nadd_button_with_icon||Brilliance " + a + (item2 >= 25 ? "`2(YES!)" : "`4(NO!)") + "|staticYellowframe|5074|25|\nadd_button_with_icon||Fire Essence " + a + (item3 >= 100 ? "`2(YES!)" : "`4(NO!)") + "|staticYellowframe|5024|100|\nadd_button_with_icon||Diamond Lock " + a + (item4 >= 40 ? "`2(YES!)" : "`4(NO!)") + "|staticYellowframe|1796|40|\nadd_button_with_icon||END_LIST|noflags|0||\nadd_textbox|`o- Pickaxe Preview:|left|\nadd_button_with_icon||LEVEL 4|noflags|14522|\nadd_button_with_icon||END_LIST|noflags|0||\nadd_small_font_button|upgto_4|`2Upgrade to level 4|noflags|0|0|";
					}
					if (Miner::PickaxeLvl(peer) == 4) {
						int item1 = Inventory::Contains(peer, 14522), item2 = Inventory::Contains(peer, 5076), item3 = Inventory::Contains(peer, 5024), item4 = Inventory::Contains(peer, 1796);
						dialog = "\nadd_button_with_icon||Pickaxe Lvl 4 " + a + (item1 >= 1 ? "`2(YES!)" : "`4(NO!)") + "|staticYellowframe|14522|1|\nadd_button_with_icon||Nature " + a + (item2 >= 30 ? "`2(YES!)" : "`4(NO!)") + "|staticYellowframe|5076|35|\nadd_button_with_icon||Fire Essence " + a + (item3 >= 100 ? "`2(YES!)" : "`4(NO!)") + "|staticYellowframe|5024|100|\nadd_button_with_icon||Diamond Lock " + a + (item4 >= 50 ? "`2(YES!)" : "`4(NO!)") + "|staticYellowframe|1796|50|\nadd_button_with_icon||END_LIST|noflags|0||\nadd_textbox|`o- Pickaxe Preview:|left|\nadd_button_with_icon||LEVEL 5|noflags|14524|\nadd_button_with_icon||END_LIST|noflags|0||\nadd_small_font_button|upgto_5|`2Upgrade to level 5|noflags|0|0|";
					}
					if (Miner::PickaxeLvl(peer) == 5) {
						dialog = "\nadd_textbox|`oLEVEL MAX!|left|";
					}
					VarList::OnDialogRequest(peer, SetColor(peer) + "set_default_color|`o\nadd_label_with_icon|big|`wWagner - Forging|left|14510|\nadd_spacer|small|\nadd_smalltext|hello, welcome to Weapon Forging I am Wagner a blacksmith in this world. I will explain what forging is.|left|\nadd_spacer|small|\nadd_smalltext|`oForging is a Crafting Method where Players can use Forging Ores to forge Pickaxe Enhancement Materials, which are used to level up Pickaxe. Players can also use Billets (Northlander, Midlander or Borderland) and Forging Ores to forge pickaxe.|left|\nadd_spacer|small|\nadd_textbox|`o[Shop : Materials and some Miner Preparations]|left|\nadd_spacer|small|\nadd_label_with_icon|small|`wYour current Mines Coin: `2" + Set_Count(pInfo(peer)->mines_coin) + "|left|20192|\nadd_spacer|small|\ntext_scaling_string|aaaaaaaaaaaaaaa|\nadd_button_with_icon|buy_torch|Hand Torch|noflags|3578|\nadd_button_with_icon|buy_cavetorch|Cave Torch|noflags|11602|\nadd_button_with_icon|buy_antigravity|Antigravity Gen|noflags|4992|\nadd_button_with_icon|buy_nightvision|Night Vision Goggles|noflags|3576|\nadd_button_with_icon|buy_dbattery|D Battery|noflags|3306|\nadd_button_with_icon|buy_elefire|Fire Essence|noflags|5024|\nadd_button_with_icon||END_LIST|noflags|0||\nadd_button_with_icon|buy_reality|Reality|noflags|5070|\nadd_button_with_icon|buy_wealth|Wealth|noflags|5072|\nadd_button_with_icon|buy_brilliance|Brilliance|noflags|5074|\nadd_button_with_icon|buy_nature|Nature|noflags|5076|\nadd_button_with_icon|buy_time|Time|noflags|7186|\nadd_button_with_icon||END_LIST|noflags|0||\nadd_spacer|small|"
						"\nadd_textbox|`o[Forging your Pickaxe]|left|\nadd_spacer|small|"
						+ (Miner::Pickaxe(pInfo(peer)->hand) ? "\nadd_textbox|Pickaxe Level: " + to_string(Miner::PickaxeLvl(peer)) + "|left|\nadd_textbox|Ability: " + (Miner::PickaxeLvl(peer) == 1 ? "Can break level 1 Crystals" : Miner::PickaxeLvl(peer) == 2 ? "Can break Crystals level 2 and below" : Miner::PickaxeLvl(peer) == 3 ? "Can break Crystals level 3 and below" : Miner::PickaxeLvl(peer) == 4 ? "Can break Crystals level 24 and below" : Miner::PickaxeLvl(peer) == 5 ? "Can break all Crystals and Naval Mine" : "Nothing") + "|left|\nadd_spacer|small|\nadd_textbox|- Materials needed to upgrade your pickaxe:|left|\ntext_scaling_string|aaaaaaaaaaaaaaa|" + dialog : "\nadd_textbox|You must use the pickaxe that has been determined by the system to upgrade|left|") +
						"\nadd_spacer|small|\nend_dialog|Miner_Forging|Close||");
				}
				else {
					VarList::OnTalkBubble(peer, pInfo(peer)->netID, "can only be accessed in the GROWMINES or MINING  world.", 0, 1);
					return false;
				}
			}
			else if (t_ == 20202 or t_ == 20204 or t_ == 20206 or t_ == 20208) {//MINERS
				if (pInfo(peer)->world.find("GROWMINES") != std::string::npos or pInfo(peer)->world == "MINING") {
					VarList::OnDialogRequest(peer, SetColor(peer) + "set_default_color|`o\nadd_label_with_icon|big|`wMaster Zhang - Miners|left|14512|\nadd_spacer|small|\nadd_smalltext|hello, welcome to Mining Information. I am Master Zhang, an experienced Miner in this world. I will explain tips about mining.|left|\nadd_spacer|small|\nadd_smalltext|In this world, you can gain benefits by exploring all the gaps, and here there are very valuable crystals from thousands of years ago. You can't just destroy the crystal; You must have a pickaxe that is determined to destroy the crystal. and always be alert because there are very dangerous bombs here. If you get hit by a bomb, you will die.|left|\nadd_spacer|small|\nadd_textbox|- Additional Information|left|\ntext_scaling_string|aaaaaaaaaaaaaaa|"
						"\nadd_button_with_icon||Diamond Ore|noflags|20006|\nadd_smalltext|Can produce:|left|\nadd_custom_textbox|`21 Diamond|size:small;icon:20056;|\nadd_custom_textbox|`21-10 Mines Coin with a percentage of 80% of 100.|size:small;icon:20192;|\nadd_smalltext|Coordinates of the Diamond Ore location: `4UNKNOWN|left|\nadd_button_with_icon||END_ROW|noflags|0||"
						"\nadd_button_with_icon||Platinum Ore|noflags|20036|\nadd_smalltext|Can produce:|left|\nadd_custom_textbox|`21 Platinum|size:small;icon:20060;|\nadd_custom_textbox|`21-8 Mines Coin with a percentage of 77% of 100.|size:small;icon:20192;|\nadd_smalltext|Coordinates of the Platinum Ore location: `4UNKNOWN|left|\nadd_button_with_icon||END_ROW|noflags|0||"
						"\nadd_button_with_icon||Golden Ore|noflags|20004|\nadd_smalltext|Can produce:|left|\nadd_custom_textbox|`21 Golden|size:small;icon:20054;|\nadd_custom_textbox|`21-7 Mines Coin with a percentage of 65% of 100.|size:small;icon:20192;|\nadd_smalltext|Coordinates of the Golden Ore location: `4UNKNOWN|left|\nadd_button_with_icon||END_ROW|noflags|0||"
						"\nadd_button_with_icon||Silver Ore|noflags|20002|\nadd_smalltext|Can produce:|left|\nadd_custom_textbox|`21 Silver|size:small;icon:20044;|\nadd_custom_textbox|`21-6 Mines Coin with a percentage of 43% of 100.|size:small;icon:20192;|\nadd_smalltext|Coordinates of the Silver Ore location: `4UNKNOWN|left|\nadd_button_with_icon||END_ROW|noflags|0||"
						"\nadd_button_with_icon||Titanium Ore|noflags|20008|\nadd_smalltext|Can produce:|left|\nadd_custom_textbox|`21 Titanium|size:small;icon:20062;|\nadd_custom_textbox|`21-5 Mines Coin with a percentage 38% of 38% of 100.|size:small;icon:20192;|\nadd_smalltext|Coordinates of the Titanium Ore location: `4UNKNOWN|left|\nadd_button_with_icon||END_ROW|noflags|0||"
						"\nadd_button_with_icon||Vanadium Ore|noflags|20038|\nadd_smalltext|Can produce:|left|\nadd_custom_textbox|`21 Vanadium|size:small;icon:20064;|\nadd_custom_textbox|`21-4 Mines Coin with a percentage 25% of 100.|size:small;icon:20192;|\nadd_smalltext|Coordinates of the Vanadium Ore location: `4UNKNOWN|left|\nadd_button_with_icon||END_ROW|noflags|0||"
						"\nadd_button_with_icon||Copper Ore|noflags|20034|\nadd_smalltext|Can produce:|left|\nadd_custom_textbox|`21 Copper|size:small;icon:20042;|\nadd_custom_textbox|`21-3 Mines Coin with a percentage of 16% of 100.|size:small;icon:20192;|\nadd_smalltext|Coordinates of the Copper Ore location: `4UNKNOWN|left|\nadd_button_with_icon||END_ROW|noflags|0||"
						"\nadd_button_with_icon||Tin Ore|noflags|20032|\nadd_smalltext|Can produce:|left|\nadd_custom_textbox|`21 Tin|size:small;icon:20066;|\nadd_custom_textbox|`21-2 Mines Coin with a percentage of 12% of 100.|size:small;icon:20192;|\nadd_smalltext|Coordinates of the Tin Ore location: `4UNKNOWN|left|\nadd_button_with_icon||END_ROW|noflags|0||"
						"\nadd_button_with_icon||Celestine Ore|noflags|20000|\nadd_smalltext|Can produce:|left|\nadd_custom_textbox|`21 Celestine|size:small;icon:20052;|\nadd_custom_textbox|`21 Mines Coin with a percentage of 5% of 100.|size:small;icon:20192;|\nadd_smalltext|Coordinates of the Celestine Ore location: `4UNKNOWN|left|\nadd_button_with_icon||END_ROW|noflags|0||"
						"\nadd_button_with_icon||Naval Mine|noflags|6994|\nadd_smalltext|Be careful when exploring this mining world because there are bombs everywhere.|left|\nadd_smalltext|Coordinates of the BOMB location: `3EVERYWHERE|left|\nadd_button_with_icon||END_ROW|noflags|0||"
						"\nadd_button_with_icon||Mine Crystal|noflags|14532|\nadd_smalltext|Can produce 1 Mines Crystal with a percentage of 35% of 100.|left|\nadd_smalltext|Coordinates of the crystal location: `4UNKNOWN|left|\nadd_button_with_icon||END_ROW|noflags|0||"
						"\nadd_button_with_icon||Golden Mine Chest|noflags|14528|\nadd_smalltext|You can get rare items and if you are lucky you can also get Mines Coin.|left|\nadd_smalltext|Coordinates of the chest location: `4UNKNOWN|left|\nadd_button_with_icon||END_ROW|noflags|0||"
						"\nadd_button_with_icon||Legendary Mine Chest|noflags|14530|\nadd_smalltext|You can get legendary items and if you are lucky you can also get Mines Coin and Mines Crystal.|left|\nadd_smalltext|Coordinates of the chest location: `4UNKNOWN|left|\nadd_button_with_icon||END_ROW|noflags|0||"
						
						"\nadd_button_with_icon||Pickaxe Lvl 1|noflags|14516|"
						"\nadd_smalltext|Can break:|left|"
						"\nadd_custom_button||icon:20032;state:disabled;color:255,255,255,255;border:red;width:0.150;display:inline_free;|"
						"\nadd_custom_button||icon:20000;state:disabled;color:255,255,255,255;border:red;width:0.150;display:inline_free;|"
						"\nadd_button_with_icon||END_ROW|noflags|0||"

						"\nadd_button_with_icon||Pickaxe Lvl 2|noflags|14518|"
						"\nadd_smalltext|Can break:|left|"
						"\nadd_custom_button||icon:20038;state:disabled;color:255,255,255,255;border:red;width:0.150;display:inline_free;|"
						"\nadd_custom_button||icon:20034;state:disabled;color:255,255,255,255;border:red;width:0.150;display:inline_free;|"
						"\nadd_custom_button||icon:20032;state:disabled;color:255,255,255,255;border:red;width:0.150;display:inline_free;|"
						"\nadd_custom_button||icon:20000;state:disabled;color:255,255,255,255;border:red;width:0.150;display:inline_free;|"
						"\nadd_button_with_icon||END_ROW|noflags|0||"

						"\nadd_button_with_icon||Pickaxe Lvl 3|noflags|14520|"
						"\nadd_smalltext|Can break:|left|"
						"\nadd_custom_button||icon:20002;state:disabled;color:255,255,255,255;border:red;width:0.150;display:inline_free;|"
						"\nadd_custom_button||icon:20008;state:disabled;color:255,255,255,255;border:red;width:0.150;display:inline_free;|"
						"\nadd_custom_button||icon:20038;state:disabled;color:255,255,255,255;border:red;width:0.150;display:inline_free;|"
						"\nadd_custom_button||icon:20034;state:disabled;color:255,255,255,255;border:red;width:0.150;display:inline_free;|"
						"\nadd_custom_button||icon:20032;state:disabled;color:255,255,255,255;border:red;width:0.150;display:inline_free;|"
						"\nadd_custom_button||icon:20000;state:disabled;color:255,255,255,255;border:red;width:0.150;display:inline_free;|"
						"\nadd_custom_button||icon:14532;state:disabled;color:255,255,255,255;border:red;width:0.150;display:inline_free;|"
						"\nadd_button_with_icon||END_ROW|noflags|0||"

						"\nadd_button_with_icon||Pickaxe Lvl 4|noflags|14522|"
						"\nadd_smalltext|Can break:|left|"
						"\nadd_custom_button||icon:20036;state:disabled;color:255,255,255,255;border:red;width:0.150;display:inline_free;|"
						"\nadd_custom_button||icon:20004;state:disabled;color:255,255,255,255;border:red;width:0.150;display:inline_free;|"
						"\nadd_custom_button||icon:20002;state:disabled;color:255,255,255,255;border:red;width:0.150;display:inline_free;|"
						"\nadd_custom_button||icon:20008;state:disabled;color:255,255,255,255;border:red;width:0.150;display:inline_free;|"
						"\nadd_custom_button||icon:20038;state:disabled;color:255,255,255,255;border:red;width:0.150;display:inline_free;|"
						"\nadd_custom_button||icon:20034;state:disabled;color:255,255,255,255;border:red;width:0.150;display:inline_free;|"
						"\nadd_custom_button||icon:20032;state:disabled;color:255,255,255,255;border:red;width:0.150;display:inline_free;|"
						"\nadd_custom_button||icon:20000;state:disabled;color:255,255,255,255;border:red;width:0.150;display:inline_free;|"
						"\nadd_custom_button||icon:14528;state:disabled;color:255,255,255,255;border:red;width:0.150;display:inline_free;|"
						"\nadd_button_with_icon||END_ROW|noflags|0||"

						"\nadd_button_with_icon||Pickaxe Lvl 5|noflags|14524|"
						"\nadd_smalltext|Can break:|left|"
						"\nadd_custom_button||icon:20006;state:disabled;color:255,255,255,255;border:red;width:0.150;display:inline_free;|"
						"\nadd_custom_button||icon:20036;state:disabled;color:255,255,255,255;border:red;width:0.150;display:inline_free;|"
						"\nadd_custom_button||icon:20004;state:disabled;color:255,255,255,255;border:red;width:0.150;display:inline_free;|"
						"\nadd_custom_button||icon:20002;state:disabled;color:255,255,255,255;border:red;width:0.150;display:inline_free;|"
						"\nadd_custom_button||icon:20008;state:disabled;color:255,255,255,255;border:red;width:0.150;display:inline_free;|"
						"\nadd_custom_button||icon:20038;state:disabled;color:255,255,255,255;border:red;width:0.150;display:inline_free;|"
						"\nadd_custom_button||icon:20034;state:disabled;color:255,255,255,255;border:red;width:0.150;display:inline_free;|"
						"\nadd_custom_button||icon:20032;state:disabled;color:255,255,255,255;border:red;width:0.150;display:inline_free;|"
						"\nadd_custom_button||icon:20000;state:disabled;color:255,255,255,255;border:red;width:0.150;display:inline_free;|"
						"\nadd_custom_button||icon:6994;state:disabled;color:255,255,255,255;border:red;width:0.150;display:inline_free;|"
						"\nadd_custom_button||icon:14532;state:disabled;color:255,255,255,255;border:red;width:0.150;display:inline_free;|"
						"\nadd_custom_button||icon:14528;state:disabled;color:255,255,255,255;border:red;width:0.150;display:inline_free;|"
						"\nadd_custom_button||icon:14530;state:disabled;color:255,255,255,255;border:red;width:0.150;display:inline_free;|"
						"\nadd_button_with_icon||END_ROW|noflags|0||"

						"\nadd_quick_exit|\nadd_spacer|small|\nend_dialog||Close||\n");
				}
				else {
					VarList::OnTalkBubble(peer, pInfo(peer)->netID, "can only be accessed in the GROWMINES or MINING world.", 0, 1);
					return false;
				}
			}
			else if (t_ == 20142 or t_ == 20144 or t_ == 20146 or t_ == 20148) {//EXCHANGE PLACE
				if (pInfo(peer)->world.find("GROWMINES") != std::string::npos or pInfo(peer)->world == "MINING") {
					VarList::OnDialogRequest(peer, SetColor(peer) + "set_default_color|`o\nadd_label_with_icon|big|`wAlbert - Exchange Place|left|14514|\nadd_spacer|small|\nadd_smalltext|Hello Miners, welcome to the coin exchange place!|left|\nadd_spacer|small|\nadd_smalltext|In this place you can exchange your mining results in the form of coins into several valuable items and can also be exchanged for gems or locks.|left|\nadd_spacer|small|\nadd_label_with_icon|small|`wYour current Mines Coin: `2" + Set_Count(pInfo(peer)->mines_coin) + "|left|20192|\nadd_label_with_icon|small|`wYour current Mines Crystal: `2" + Set_Count(Inventory::Contains(peer, 14536)) + "|left|14536|\nadd_spacer|small|\nadd_label|small|Price:|left|\nadd_smalltext|[1 Mines Coin : 2,000 Gems ė]|left|\nadd_smalltext|[1 Mines Coin : 1 World Lock ā]|left|\nadd_smalltext|[1 Mines Crystal : 100 World Locks ā]|left|\nadd_spacer|small|\ntext_scaling_string|aaaaaaaaaaaaaaa|\nadd_custom_button|worldlock|image:interface/large/store_buttons/tianvan_store.rttex;image_size:256,160;frame:8,1;width:0.25;state:enable;|\nadd_custom_label|`b1 MINES COIN > 1 WL|target:worldlock;top:0.80;left:0.50;size:tiny|\nadd_custom_button|gems|image:interface/large/store_buttons/tianvan_store.rttex;image_size:256,160;frame:9,0;width:0.25;state:enable;|\nadd_custom_label|`#1 MINES COIN > 2000 GEMS|target:gems;top:0.80;left:0.50;size:tiny|\nadd_custom_button|crystal|image:interface/large/store_buttons/tianvan_store.rttex;image_size:256,160;frame:8,0;width:0.25;state:enable;|\nadd_custom_label|`41 CRYSTAL > 100 WL|target:crystal;top:0.80;left:0.50;size:tiny|\nadd_custom_break|\nadd_spacer|small|"
						"\nadd_label|small|Ores:|left|\nadd_spacer|small|"
						"\nadd_button_with_icon|ores_20056|DIAMOND|frame|20056|"
						"\nadd_button_with_icon|ores_20060|PLATINUM|frame|20060|"
						"\nadd_button_with_icon|ores_20054|GOLDEN|frame|20054|"
						"\nadd_button_with_icon|ores_20044|SILVER|frame|20044|"
						"\nadd_button_with_icon|ores_20062|TITANIUM|frame|20062|"
						"\nadd_button_with_icon|ores_20064|VANADIUM|frame|20064|"
						"\nadd_button_with_icon|ores_20042|COPPER|frame|20042|"
						"\nadd_button_with_icon|ores_20066|TIN|frame|20066|"
						"\nadd_button_with_icon|ores_20052|CELESTINE|frame|20052|"
						"\nadd_button_with_icon||END_ROW|noflags|0||\nadd_spacer|small|\nend_dialog|Miner_ExPlace|Close||\nadd_quick_exit|");
				}
				else {
					VarList::OnTalkBubble(peer, pInfo(peer)->netID, "can only be accessed in the GROWMINES or MINING world.", 0, 1);
					return false;
				}
			}
			else if (t_ == 20186) {//MINES SCOREBOARD
				if (pInfo(peer)->world.find("GROWMINES") != std::string::npos or pInfo(peer)->world == "MINING") {
					EventPool::Load::Mines_Leaderboard();
					VarList::OnDialogRequest(peer, SetColor(peer) + "set_default_color|`o\nadd_label_with_icon|big|`wMines Scoreboard|left|20186|\nadd_smalltext|Welcome to Mines Scoreboard, participate in Daily Mine Challenge to obtain awesome rewards! In order to get points you'll need to mine ores in Mines, each broken ore will give you 1 point, finding an exit will give you 2 points, breaking each crate will give you 3 points!|left|\nadd_spacer|small|" + top_mines_list + "|left|\nadd_spacer|small|\nend_dialog||Close||");
				}
				else {
					VarList::OnTalkBubble(peer, pInfo(peer)->netID, "can only be accessed in the GROWMINES or MINING world.", 0, 1);
					return false;
				}
			}
			else if (t_ == 9922) {
				if (Only_Access(peer, world_, block_)) {
					DialogHandle::Janeway(peer);
				}
				else {
					VarList::OnTalkBubble(peer, pInfo(peer)->netID, "That area is owned by " + owner_name, 0, 1);
					return false;
				}
			}
			if (items[t_].audio_rack) {
				if (Only_Access(peer, world_, block_)) {
					VarList::OnDialogRequest(peer, SetColor(peer) + "set_default_color|`o\nadd_label_with_icon|big|`w" + items[t_].ori_name + "``|left|" + to_string(t_) + "|\nadd_spacer|small|\nembed_data|tilex|" + to_string(x_) + "\nembed_data|tiley|" + to_string(y_) + "\nadd_button|manual|Instructions|noflags|0|0|\nadd_spacer|small|\nadd_text_input|volume|Volume|" + to_string(block_->pr) + "|3|\nadd_text_input|text|Notes|" + block_->txt + "|20|\nend_dialog|supermusic|Cancel|Update|\n");
				}
				else {
					VarList::OnTalkBubble(peer, pInfo(peer)->netID, "That area is owned by " + owner_name, 0, 1);
					return false;
				}
			}
			else if (t_ == 5086) {
				if (Only_Access(peer, world_, block_)) {
					string dialog = "";
					if (pInfo(peer)->ances == 0) VarList::OnDialogRequest(peer, SetColor(peer) + "set_default_color|`$\nadd_label_with_icon|big|`9Ancient Goddess|left|5086|\nadd_textbox|`$Greetings, mortal! Oh dear... you don't see to have any ancient relics on which i might work my wonder, *sigh* Perhaps another time...|left|\nend_dialog||Return||");
					else {
						if (Ancient_Goddess::Ances(peer, pInfo(peer)->ances) == 0) dialog = "\nadd_textbox|`$Your ances is already at the max level!|";
						else dialog = "\nadd_textbox|`$Choose an upgrade:|left|\nadd_spacer|small|" + a + (items[Ancient_Goddess::Ances(peer, pInfo(peer)->ances)].name.find("Level 6") != string::npos and not pInfo(peer)->ability_upgrade_ances ? "\nadd_textbox|`2Level 6 Upgrade`$: the upgrade is available for Level 5 Ancestral items! You first need to claim prize #6 from the `2Royal Winter Wonders ``rewards to unlock it|left|" : "\nadd_small_font_button|ancient_goddess_dialog|`0Upgrade to " + items[Ancient_Goddess::Ances(peer, pInfo(peer)->ances)].name + "|noflags|0|0|") + "";
					}
					VarList::OnDialogRequest(peer, SetColor(peer) + "set_default_color|\nadd_label_with_icon|big|`9Ancient Goddess|left|5086|\nadd_spacer|small|\nadd_textbox|`$Greetings, mortal! it seems you have ancient thing I can enhance through magic old. Tell me: Which would you like to mold? Choose wisely, for once i work my wonders, it will bound to you for eternity...|\nadd_spacer|small|" + dialog + "|\nadd_spacer|small|\nend_dialog|ancient_goddess|Return||");
				}
				else {
					VarList::OnTalkBubble(peer, pInfo(peer)->netID, "That area is owned by " + owner_name, 0, 1);
					return false;
				}
			}
			else if (t_ == 3548) {
				if (Only_Access(peer, world_, block_)) {
					if (block_->battle_pet.first[0] == 0) {
						string extra = "";
						if (not block_->battle_pet.second.empty()) extra = ", but labeled \"" + block_->battle_pet.second + "\"";
						string extra2 = "";
						if (pInfo(peer)->hand == 3552) {
							string suffix1 = items[pInfo(peer)->battle_pet.first[0]].petSuffix;
							suffix1[0] = toupper(suffix1[0]);
							if (pInfo(peer)->battle_pet.first[0] == 0 && pInfo(peer)->battle_pet.second[0] == 0) {
								extra2 = "add_textbox|Your Battle Leash is empty.|left|\n";
							}
							else if (pInfo(peer)->battle_pet.first[0] != 0 && pInfo(peer)->battle_pet.second[0] == 0) {
								extra2 = "add_textbox|Your Battle Leash contains " + suffix1 + items[pInfo(peer)->battle_pet.first[1]].petPrefix + items[pInfo(peer)->battle_pet.first[2]].petSuffix + ".|left|\nadd_button|docage0|Cage Your " + suffix1 + items[pInfo(peer)->battle_pet.first[1]].petPrefix + items[pInfo(peer)->battle_pet.first[2]].petSuffix + "|noflags|0|0|\n";
							}
							else if (pInfo(peer)->battle_pet.first[0] != 0 && pInfo(peer)->battle_pet.second[0] != 0) {
								string suffix2 = items[pInfo(peer)->battle_pet.second[0]].petSuffix;
								suffix2[0] = toupper(suffix2[0]);
								extra2 = "add_textbox|Your Battle Leash contains " + suffix1 + items[pInfo(peer)->battle_pet.first[1]].petPrefix + items[pInfo(peer)->battle_pet.first[2]].petSuffix + " and " + suffix2 + items[pInfo(peer)->battle_pet.second[1]].petPrefix + items[pInfo(peer)->battle_pet.second[2]].petSuffix + ".|left|\nadd_button|docage0|Cage Your " + suffix1 + items[pInfo(peer)->battle_pet.first[1]].petPrefix + items[pInfo(peer)->battle_pet.first[2]].petSuffix + "|noflags|0|0|\nadd_button|docage1|Cage Your " + suffix2 + items[pInfo(peer)->battle_pet.second[1]].petPrefix + items[pInfo(peer)->battle_pet.second[2]].petSuffix + "|noflags|0|0|\n";
							}
						}
						VarList::OnDialogRequest(peer, SetColor(peer) + "set_default_color|`o\nadd_label_with_icon|big|`wBattle Pet Cage``|left|3548|\nadd_spacer|small|\nembed_data|tilex|" + to_string(x_) + "\nembed_data|tiley|" + to_string(y_) + "\nadd_textbox|This cage is empty" + extra + ".|left|\nadd_item_picker|critter|`wCage Beast``|Select any pet to cage|" + extra2 + "|\nend_dialog|battlecage_edit|Close||");
					}
					else {
						string extra = ""; 
						if (pInfo(peer)->hand == 3552) {
							extra = "\nadd_button|pickitup|Pick Up " + block_->battle_pet.second + " into your Battle Leash|\n";
						}
						string extra2 = "", extra3 = "\nadd_item_picker|replace1|Gene-splice a new ability|Select any pet to splice its genes|\n";
						if (block_->battle_pet.first[0] != 0 && block_->battle_pet.first[1] != 0 && block_->battle_pet.first[2] != 0) {
							extra3 = "";
						}
						for (int i = 1; i <= 2; i++) {
							if (block_->battle_pet.first[i] != 0) {
								extra2 += "\nadd_smalltext|`wGene-spliced ability:``|left|\nadd_label_with_icon|small|`2" + items[block_->battle_pet.first[i]].petAbility + "``: " + items[block_->battle_pet.first[i]].petDescription + ".|left|" + to_string(block_->battle_pet.first[i]) + "|\nadd_item_picker|replace2|Replace this ability|Select any pet to splice its genes|\n";
							}
						}
						VarList::OnDialogRequest(peer, SetColor(peer) + "set_default_color|`o\nadd_label_with_icon|big|`wBattle Pet Cage``|left|3548|\nadd_spacer|small|\nembed_data|tilex|" + to_string(x_) + "\nembed_data|tiley|" + to_string(y_) + "\nadd_textbox|`1" + block_->battle_pet.second + "`` is sleeping in the back of the cage.|left|\nadd_smalltext|`wNatural Ability:``|left|\nadd_label_with_icon|small|`2" + items[block_->battle_pet.first[0]].petAbility + "``: " + items[block_->battle_pet.first[0]].petDescription + ".|left|" + to_string(block_->battle_pet.first[0]) + "|" + extra2 + "|"  + extra3 + "|\nadd_smalltext|It costs 10 World Locks to splice in the genes from another creature and add or replace an ability, A Battle pet needs 3 Abilities to be used in battles.|left|" + extra + "|\nadd_text_input|setname|Name:|" + block_->battle_pet.second + "|20|\nend_dialog|battlecage_edit|Cancel|Rename|");
					}
				}
				else {
					VarList::OnTalkBubble(peer, pInfo(peer)->netID, "That area is owned by " + owner_name, 0, 1);
					return false;
				}
			}
			else if (t_ == 10656) {
				if (Only_Access(peer, world_, block_)) {
					VarList::OnDialogRequest(peer, SetColor(peer) + "set_default_color|`o\nadd_label_with_icon|big|`wWell of Love``|left|10656|\nadd_spacer|small|\nadd_textured_progress_bar|interface/large/gui_event_bar.rttex|0|2|`wLove: " + to_string(block_->shelf_1) + "/200|" + to_string(block_->shelf_1) + "|200``|relative|1|0.95|0|1000|64|0.01\nadd_spacer|small|\nadd_textbox|Give 5 Golden Booty Chests to receive the `2ONE best prize``, and to fill up the well. Once the well is full it will provide one reward with a `53.25% chance`` of getting one of these `5Epic`` items:|left|\nadd_label_with_icon|small| - `5Golden Heart Crystal``|left|1458|\nadd_label_with_icon|small| - `6EXCLUSIVE`` `5Stained Glass Crown``|left|11672|\nadd_label_with_icon|small| - `6EXCLUSIVE`` `5Cotton Candy Cape``|left|13140|\nadd_spacer|small|\nadd_textbox|... or a `5Pure Love Essence`` that doubles the chance of getting a Golden Heart Crystal when opening Golden Booty Chests, Super Golden Booty Chests and Heartstones.|left|\nadd_spacer|small|\nend_dialog|wishing_well|Thanks for the info!||");
				}
				else {
					VarList::OnTalkBubble(peer, pInfo(peer)->netID, "That area is owned by " + owner_name, 0, 1);
					return false;
				}
			}
			else if (t_ == 10992) {
				VarList::OnDialogRequest(peer, SetColor(peer) + "set_default_color|`o\nadd_label_with_icon|big|`wRubbles Shop``|left|10992|\nadd_image_button||interface/large/rubble_banner.rttex|bannerlayout|||\nadd_spacer|small|\nadd_smalltext|Hey there growtopian! you can exchange your rubbles with me for toxic waste and perhaps some rare items! Take a look..|left|\nadd_smalltext|`9You currently have "+Set_Count(pInfo(peer)->rubble) + " Rubbles``.|left|\nadd_spacer|small|\ntext_scaling_string|10,000BZ|\nadd_button_with_icon|purchase_0|500|noflags|11402||\nadd_button_with_icon|purchase_1|2500|noflags|11404||\nadd_button_with_icon||END_LIST|noflags|0||\nend_dialog|handleRubblePartyShopPopup|OK|\nadd_quick_exit|");
			}
			else if (t_ == 12986) { // WINTERFEST CALENDAR 2022
				if (Only_Access(peer, world_, block_)) {
					pInfo(peer)->lastwrenchb = t_;
					string rewards = "";
					for (int i = 1; i < 26; i++) rewards += "\nadd_button_with_icon|calendarSystem_" + to_string(i) + "|`$Day " + to_string(i) + "``|" + (block_->shelf_1 >= i ? "noflags|6292" : "frame|" + a + (i == 15 || i == 25 ? "9202" : "10486")) + "||";
					VarList::OnDialogRequest(peer, SetColor(peer) + "set_default_color|`o\nadd_label_with_icon|big|`w" + items[t_].name + "``|left|" + to_string(t_) + "|\nadd_textbox|Tap on a button below to view the `2rewards`` available on that day.|left|\nadd_spacer|small|\ntext_scaling_string|Defibrillators|" + rewards + "\nadd_button_with_icon||END_LIST|noflags|0||\nadd_spacer|small|\nadd_button|cancel|Close|noflags|0|0|\nend_dialog|WinterFest_Calendar2022|||\nadd_quick_exit|");
				}
				else {
					VarList::OnTalkBubble(peer, pInfo(peer)->netID, "That area is owned by " + owner_name, 0, 1);
					return false;
				}
			}
			else if (t_ == 14138) { // WINTERFEST CALENDAR 2023
				if (Only_Access(peer, world_, block_)) {
					pInfo(peer)->lastwrenchb = t_;
					string rewards = "";
					for (int i = 1; i < 26; i++) rewards += "\nadd_button_with_icon|calendarSystem_" + to_string(i) + "|`$Day " + to_string(i) + "``|" + (block_->shelf_1 >= i ? "noflags|6292" : "frame|" + a + (i == 15 || i == 25 ? "9202" : "10486")) + "||";
					VarList::OnDialogRequest(peer, SetColor(peer) + "set_default_color|`o\nadd_label_with_icon|big|`w" + items[t_].name + "``|left|" + to_string(t_) + "|\nadd_textbox|Tap on a button below to view the `2rewards`` available on that day.|left|\nadd_spacer|small|\ntext_scaling_string|Defibrillators|" + rewards + "\nadd_button_with_icon||END_LIST|noflags|0||\nadd_spacer|small|\nadd_button|cancel|Close|noflags|0|0|\nend_dialog|WinterFest_Calendar2023|||\nadd_quick_exit|");
				}
				else {
					VarList::OnTalkBubble(peer, pInfo(peer)->netID, "That area is owned by " + owner_name, 0, 1);
					return false;
				}
			}
			else if (t_ == 15010) { // WINTERFEST CALENDAR 2024
				if (Only_Access(peer, world_, block_)) {
					pInfo(peer)->lastwrenchb = t_;
					string rewards = "";
					for (int i = 1; i < 26; i++) rewards += "\nadd_button_with_icon|calendarSystem_" + to_string(i) + "|`$Day " + to_string(i) + "``|" + (block_->shelf_1 >= i ? "noflags|6292" : "frame|" + a + (i == 15 || i == 25 ? "9202" : "10486")) + "||";
					VarList::OnDialogRequest(peer, SetColor(peer) + "set_default_color|`o\nadd_label_with_icon|big|`w" + items[t_].name + "``|left|" + to_string(t_) + "|\nadd_textbox|Tap on a button below to view the `2rewards`` available on that day.|left|\nadd_spacer|small|\ntext_scaling_string|Defibrillators|" + rewards + "\nadd_button_with_icon||END_LIST|noflags|0||\nadd_spacer|small|\nadd_button|cancel|Close|noflags|0|0|\nend_dialog|WinterFest_Calendar2024|||\nadd_quick_exit|");
				}
				else {
					VarList::OnTalkBubble(peer, pInfo(peer)->netID, "That area is owned by " + owner_name, 0, 1);
					return false;
				}
			}
			else if (t_ == 3898) {
				if (Only_Access(peer, world_, block_)) {
					string user_name = pInfo(peer)->tankIDName;
					VarList::OnDialogRequest(peer, SetColor(peer) + "set_default_color|`o\nadd_label_with_icon|big|`wTelephone``|left|3898|\nadd_textbox|Dial a number to call somebody in Growtopia. Phone numbers have 5 digits, like 12345 (try it - you'd be crazy not to!). Most numbers are not in service!|left|\nadd_text_input|buttonClicked|Phone #||5|\nend_dialog|" + to_string(t_) + "|Hang Up|Dial|\n");
				}
				else {
					VarList::OnTalkBubble(peer, pInfo(peer)->netID, "That area is owned by " + owner_name, 0, 1);
					return false;
				}
			}
			else if (t_ == 12598) {
				if (Only_Access(peer, world_, block_)) {
					pInfo(peer)->lastwrenchb = t_;
					if (block_->shelf_1 != 0) offering_table(peer, block_, "reroll");
					else offering_table(peer, block_);
				}
				else {
					VarList::OnTalkBubble(peer, pInfo(peer)->netID, "That area is owned by " + owner_name, 0, 1);
					return false;
				}
			}
			else if (t_ == 10374) {
				if (Only_Access(peer, world_, block_)) {
					pInfo(peer)->lastwrenchb = 10374;
					string trsh_list = "";
					for (int i_ = 0; i_ < pInfo(peer)->inv.size(); i_++) {
						if (items[pInfo(peer)->inv[i_].first].untradeable == 0) {
							trsh_list += "\nadd_label_with_icon|small|" + to_string(pInfo(peer)->inv[i_].second) + "x " + items[pInfo(peer)->inv[i_].first].ori_name + "|left|" + to_string(pInfo(peer)->inv[i_].first) + "|\nadd_checkbox|" + to_string(pInfo(peer)->inv[i_].first) + "||0";
						}
					}
					if (trsh_list.empty()) trsh_list = "\nadd_textbox|You don't have any tradeable items to trash!|left|";
					VarList::OnDialogRequest(peer, SetColor(peer) + "set_default_color|`o\nadd_label_with_icon|big|`wRecycling Machine``|left|10374|\nadd_spacer|small|" + trsh_list + "\nend_dialog|recycle_machine|OK|Recycle|");
				}
				else {
					VarList::OnTalkBubble(peer, pInfo(peer)->netID, "That area is owned by " + owner_name, 0, 1);
					return false;
				}
			}
			else if (t_ == 4830) {
				VarList::OnDialogRequest(peer, SetColor(peer) + "set_default_color|`o\nadd_label_with_icon|big|`wBalloon-O-Matic``|left|4830|\nadd_spacer|small|" + get_balloon_type(block_->shelf_1) + "add_spacer|small|\nadd_label|small|Use this to convert any item with a rarity below 200 into war balloons. It takes 20 rarity worth of any items to create some balloons.|left\nadd_label|small|If you give extras, they will be stored in the cloud and will be accessible from any `5Balloon-O-Matic``.|left\nadd_label|small|Just use items on me to convert them.|left\nadd_label|small|Every 800 rarity I will create something special.|left\nadd_spacer|small|\nadd_label|small|So far, this tile has converted " + to_string(block_->shelf_1) + " Rarity into balloons.|left\nend_dialog|balloonomatic_dialog|Thanks for the info!||");
			}
			else if (t_ == 4264) {
				if (pInfo(peer)->world == "GROWCH") {
					if (WinterFest.Active) {
						pInfo(peer)->lastwrenchb = t_;
						VarList::OnDialogRequest(peer, SetColor(peer) + "set_default_color|`o\nadd_label_with_icon|big|`wStuff-4-Toys Box``|left|4264|\nadd_textbox|Welcome to the `9Stuff-4-Toys Program``! You can drop off any unwanted items here (as long as they have rarity), and for every 250,000 rarity donated, our specially trained `2Present Goblins`` will give away a holiday toy to a needy Growtopian. 'Tis the season for giving!|left|\nadd_smalltext|To donate an item, select it in your inventory, then use it on the Stuff-4-Toys Box. Don't use the Drop button!|left|\nadd_spacer|small|\nadd_smalltext|Total rarity donated: " + Set_Count(world_->s4tb.second) + "|left|\nadd_smalltext|Total toys given away: " + Set_Count(world_->s4tb.first) + "|left|\nadd_spacer|small|\nadd_smalltext|" + (pInfo(peer)->Diamond_Donatur ? "You are a `1Diamond Level Donator``, with " + Set_Count(pInfo(peer)->s4tb) + " rarity donated!" : pInfo(peer)->Gold_Donatur ? "You are a `9Gold Level Donator``, with " + Set_Count(pInfo(peer)->s4tb) + " rarity donated!" : pInfo(peer)->Silver_Donatur ? "You are a Silver Level Donator, with " + Set_Count(pInfo(peer)->s4tb) + " rarity donated!" : pInfo(peer)->Bronze_Donatur ? "You are a `8Bronze Level Donator``, with " + Set_Count(pInfo(peer)->s4tb) + " rarity donated!" : "You personally donated " + Set_Count(pInfo(peer)->s4tb) + " rarity") + "|left|\nadd_quick_exit|\nend_dialog|s4tb|Exit||\n");
					}
					else VarList::OnTalkBubble(peer, pInfo(peer)->netID, "`9Winterfest is on a break! Check later..``", 0, 1);
				}
				else VarList::OnTalkBubble(peer, pInfo(peer)->netID, "I only deal with you in world GROWCH", 0, 1);
				return false;
			}
			else if (t_ == 7482) {
				if (pInfo(peer)->world == "GROWCH") {
					if (WinterFest.Active) {
						pInfo(peer)->lastwrenchb = t_;
						if (block_->flags & 0x00200000 and pInfo(peer)->state == 16) block_->flags = block_->flags ^ 0x00200000;
						else if (block_->flags ^ 0x00200000 and pInfo(peer)->state != 16) block_->flags |= 0x00200000;
						tile_update(peer, world_, block_, x_, y_);
						string hold = "";
						uint16_t wl = 0, dl = 0, bgl = 0;
						for (int i_ = 0; i_ < pInfo(peer)->inv.size(); i_++) {
							if (pInfo(peer)->inv[i_].first == 242) wl = pInfo(peer)->inv[i_].second;
							if (pInfo(peer)->inv[i_].first == 1796) dl = pInfo(peer)->inv[i_].second;
							if (pInfo(peer)->inv[i_].first == 7188) bgl = pInfo(peer)->inv[i_].second;
							if (wl && dl && bgl) break;
						}
						hold = "\nadd_smalltext|`9`9Are you nuts! You don't have any locks at all!  I've got better things to do, like cracking nuts, instead of wasting my time with you!``|left|";
						if (wl != 0 || dl != 0 || bgl != 0) hold = "\nadd_smalltext|`9(Son of a Nutcracker, seems like you are hoarding";
						if (wl) hold += " " + to_string(wl) + " World Locks" + (dl != 0 or bgl != 0 ? ", " : ")``|left|") + "";
						if (dl) hold += " " + to_string(dl) + " Diamond Locks" + (bgl != 0 ? ", " : ")``|left|") + "";
						if (bgl) hold += "and " + to_string(bgl) + " Blue Gem Locks)``|left|";
						VarList::OnDialogRequest(peer, SetColor(peer) + "set_default_color|\nadd_label_with_icon|big|`9Nutcracker|left|7482|\nadd_smalltext|`oWelcome traveller! I'm the Nutcracker. I like to crack huts, but i also love to hoard locks, especially those golden and diamond ones! I'm only around for Winterfest, so if you're willing to hand over some locks, i'll give you something special for the Winterfest holiday in return. Nuts right, how about it?|left|\nadd_spacer|small|" + hold + "\nadd_button|item_10408|`oBuy Krampus Crampons for 20 World Locks|noflags|0|0|\nadd_button|item_2214|`oBuy Ice Horse for 20 World Locks|0|0|\nadd_button|item_1394|`oBuy Polar Bear Leash for 30 World Locks|0|0|\nadd_button|item_7492|`oBuy Nutcracker Mask for 50 World Locks|0|0|\nadd_button|item_7494|`oBuy Nutcracker Coat for 50 World Locks|0|0|\nadd_button|item_7500|`oBuy Nutcracker Saber for 200 World Locks|0|0|\nadd_button|item_7412|`oBuy Snowflake Wings of Winter for 300 World Locks|0|0|\nadd_button|item_7406|`oBuy Super Snowball Launcher for 400 World Locks|0|0|\nadd_button|item_7488|`oBuy Slaminator's Boomerang for 500 World Locks|0|0|\nend_dialog|Nutcracker|GoodBye!||");
					}
					else VarList::OnTalkBubble(peer, pInfo(peer)->netID, "`9Winterfest is on a break! Check later..``", 0, 1);
				}
				else VarList::OnTalkBubble(peer, pInfo(peer)->netID, "I only deal with you in world GROWCH", 0, 1);
				return false;
			}
			else if (t_ == 1902) {
				if (pInfo(peer)->world == "CARNIVAL") {
					if (Event()->Carnival) {
						VarList::OnDialogRequest(peer, SetColor(peer) + "set_default_color|`o\nadd_label_with_icon|big|`wGolden Ticket Booth``|left|1902|\nadd_textbox|Golden Tickets cost 100 Rarity worth of any items. If you give me extras, I'll keep a record.|left|\nadd_textbox|You can also pay with World Locks. I'll give you 30 Tickets per World Lock.|left|\nadd_textbox|Just use items on me to give them.|left|\nadd_textbox|You currently have a credit of " + to_string(pInfo(peer)->carnival_credit) + " Rarity.|left|\nend_dialog|ticket_booth|Thanks for the info!||");
					}
					else VarList::OnTalkBubble(peer, pInfo(peer)->netID, "`9Carnival is on a break! Check later..``", 0, 1);
				}
				else VarList::OnTalkBubble(peer, pInfo(peer)->netID, "I only deal with you in world CARNIVAL", 0, 1);
				return false;
			}
			else if (t_ == 1900) {
				if (pInfo(peer)->world == "CARNIVAL") {
					if (Event()->Carnival) {
						pInfo(peer)->lastwrenchb = t_;
						if (block_->flags & 0x00200000 and pInfo(peer)->state == 16) block_->flags = block_->flags ^ 0x00200000;
						else if (block_->flags ^ 0x00200000 and pInfo(peer)->state != 16) block_->flags |= 0x00200000;
						tile_update(peer, world_, block_, x_, y_);
						if (pInfo(peer)->C_QuestActive) SendCarnivalQuest(peer, 0);
						else {
							if (pInfo(peer)->level < 20) VarList::OnDialogRequest(peer, SetColor(peer) + "set_default_color|`o\n\nadd_label_with_icon|big|`9The Ringmaster|left|1900|\nadd_smalltext|`oCome one, come all, to the most extraordinary show in Growtopia! I am the Ringmaster. That means I know a lor about Rings! For 10 Golden Tickets. I might tell you how you Can get a Ring of your own...|left|\nadd_spacer|small|\nadd_smalltext|`oOh wait, sorry... looks like you aren't yet legendary enought to earn a Ring. You must be at least level 20 higher to begin your journey!|left|\nend_dialog|godbye|Darn It!|");
							else {
								int ticket = 0;
								Inventory::Modify(peer, 1898, ticket);
								if (ticket < 10) VarList::OnDialogRequest(peer, SetColor(peer) + "set_default_color|`o\n\nadd_label_with_icon|big|`9The Ringmaster|left|1900|\nadd_smalltext|`oCome one, come all, to the most extraordinary show in Growtopia! I am the Ringmaster. That means I know a lor about Rings! For 10 Golden Tickets. I might tell you how you Can get a Ring of your own...|left|\nadd_spacer|small|\nadd_smalltext|`oOh wait, sorry... looks like you don't have 10 Golden Tickets! Come back and see me when you do!|left|\nadd_spacer|small|\nadd_smalltext|`oIf you had 10 rings of the same Type maybe we could have made a deal....|left|\nadd_spacer|small|\nend_dialog|carnival|Goodbye!||");
								else VarList::OnDialogRequest(peer, SetColor(peer) + "set_default_color|`o\n\nadd_label_with_icon|big|`9The Ringmaster|left|1900|\nadd_smalltext|`oCome one, come all, to the most extraordinary show in Growtopia! I am the Ringmaster. That means I know a lor about Rings! For 10 Golden Tickets. I might tell you how you Can get a Ring of your own...|left|\nadd_spacer|small|\nadd_button|c_quest|`9Give 10 Golden Tickets|0|0|\nadd_spacer|small|\nadd_smalltext|`oIf you had 10 rings of the same Type maybe we could have made a deal....|left|\nadd_spacer|small|\nend_dialog|carnival|Goodbye!||");
							}
						}
					}
					else VarList::OnTalkBubble(peer, pInfo(peer)->netID, "`9Carnival is on a break! Check later..``", 0, 1);
				}
				else VarList::OnTalkBubble(peer, pInfo(peer)->netID, "I only deal with you in world CARNIVAL", 0, 1);
				return false;
			}
			else if (t_ == 1790) {
				if (Only_Access(peer, world_, block_)) {
					if (block_->flags & 0x00200000 and pInfo(peer)->state == 16) block_->flags = block_->flags ^ 0x00200000;
					else if (block_->flags ^ 0x00200000 and pInfo(peer)->state != 16) block_->flags |= 0x00200000;
					tile_update(peer, world_, block_, x_, y_);
					lwiz_quest(peer, "open");
				}
				else {
					VarList::OnTalkBubble(peer, pInfo(peer)->netID, "That area is owned by " + owner_name, 0, 1);
					return false;
				}
			}
			else if (t_ == 3002) {
				if (Only_Access(peer, world_, block_)) {
					int fc = 0, firefin = 0;
					string dialog = "\nadd_label|small|`oThe fish tank is empty!|left|", first = "", maind = "";
					string ShopX = "\nadd_item_picker|add_fish|Add a fish|Choose a fish to put in the tank!|\nadd_checkbox|chk_highlight|Perfect fish glow|" + to_string(block_->pr);
					if (block_->txt != "") {
						const auto pi = explode(",", block_->txt);
						int f1 = -1, lb1 = 0, f2 = -1, lb2 = 0, f3 = -1, lb3 = 0, f4 = -1, lb4 = 0, f5 = -1, lb5 = 0, f6 = -1, f7 = -1, f8 = -1, f9 = -1, f10 = -1, lb6 = 0, lb7 = 0, lb8 = 0, lb9 = 0, lb10 = 0;
						for (auto& a : pi) {
							if (a.empty()) continue;
							else {
								const auto xd = explode("|", a);
								if (f1 == -1) { f1 = stoi(xd.at(0)); lb1 = stoi(xd.at(1)); }
								else if (f2 == -1) { f2 = stoi(xd.at(0)); lb2 = stoi(xd.at(1)); }
								else if (f3 == -1) { f3 = stoi(xd.at(0)); lb3 = stoi(xd.at(1)); }
								else if (f4 == -1) { f4 = stoi(xd.at(0)); lb4 = stoi(xd.at(1)); }
								else if (f5 == -1) { f5 = stoi(xd.at(0)); lb5 = stoi(xd.at(1)); }
							}
						}
						if (f1 == -1) f1 = 0;
						if (f2 == -1) f2 = 0;
						if (f3 == -1) f3 = 0;
						if (f4 == -1) f4 = 0;
						if (f5 == -1) f5 = 0;
						if (f1 != 0) dialog = "\nadd_label|small|`oThe fish tank contanis:|left|\nadd_checkbox|fish_1|" + to_string(lb1) + "lb. " + items[f1].name + "|0";
						if (f2 != 0) dialog += "\nadd_checkbox|fish_2|" + to_string(lb2) + "lb. " + items[f2].name + "|0";
						if (f3 != 0) dialog += "\nadd_checkbox|fish_3|" + to_string(lb3) + "lb. " + items[f3].name + "|0";
						if (f4 != 0) dialog += "\nadd_checkbox|fish_4|" + to_string(lb4) + "lb. " + items[f4].name + "|0";
						if (f5 != 0) {
							dialog += "\nadd_checkbox|fish_5|" + to_string(lb5) + "lb. " + items[f5].name + "|0";
							ShopX = "\nadd_checkbox|chk_highlight|Perfect fish glow|" + to_string(block_->pr);
						}
						dialog += "|";
						dialog += "\nadd_button|removefish|Remove checked fish|noflags|0|0|";
					}
					maind = first + dialog;
					VarList::OnDialogRequest(peer, SetColor(peer) + "set_default_color|`o\n\nadd_label_with_icon|big|`wFish Tank Port``|left|3002|\nadd_spacer|small|" + maind + "|" + ShopX + "\nembed_data|tilex|" + to_string(x_) + "\nembed_data|tiley|" + to_string(y_) + "\nend_dialog|fishtankport|Close|Update|");
					break;
				}
				else {
					VarList::OnTalkBubble(peer, pInfo(peer)->netID, "That area is owned by " + owner_name, 0, 1);
					return false;
				}
			}
			else if (t_ == 4080) {
				if (Only_Access(peer, world_, block_)) {
					if (block_->shelf_4 == 0) {
						DialogHandle::DNA_Processor(peer, x_, y_, false, false, false, 0, false, false);
					}
					else if (block_->shelf_4 >= 1) {
						DialogHandle::DNA_Processor(peer, x_, y_, false, true, false, 0, true, false);
					}
				}
				else {
					VarList::OnTalkBubble(peer, pInfo(peer)->netID, "That area is owned by " + owner_name, 0, 1);
					return false;
				}
			}
			else if (t_ == 4124) {
				VarList::OnTalkBubble(peer, pInfo(peer)->netID, "This appears to be a standard model DNA Extractor. I could use items with ancient DNA on it to try to extract some.", 0, 1);
			}
			else if (t_ == 6016) {
				if (Only_Access(peer, world_, block_)) {
					DialogHandle::Growscan_Load(peer, world_, block_);
				}
				else {
					VarList::OnTalkBubble(peer, pInfo(peer)->netID, "That area is owned by " + owner_name, 0, 1);
					return false;
				}
			}
			else if (t_ == 5714) {
				VarList::OnDialogRequest(peer, SetColor(peer) + "set_default_color|`o\nadd_label_with_icon|big|`wGiant Pot O' Gold``|left|5714|\nadd_spacer|small|\nadd_textbox|Welcome to the `9Giant Pot O' Gold``! You can drop off any unwanted items here (as long as they have rarity!) Donate 20,000 rarity and win an awesome prize - donate 40,000 and get a super-awesome prize!|left|\nadd_smalltext|To donate an item, select it in your inventory, then use it on the Giant Pot O' Gold. Don't use the Drop button!|left|\nadd_spacer|small|\nadd_smalltext|You are a `6Level " + to_string(pInfo(peer)->b_lvl) + " Donator``, with " + Set_Count(pInfo(peer)->b_ra) + " rarity donated!|left|\nend_dialog|giantpotogold|Exit||");
			}
			else if (t_ == 2398) {
				if (Event()->Locke_Salesman or pInfo(peer)->world == "REC") {
					pInfo(peer)->lastwrenchb = t_;
					if (block_->flags & 0x00200000 and pInfo(peer)->state == 16) block_->flags = block_->flags ^ 0x00200000;
					else if (block_->flags ^ 0x00200000 and pInfo(peer)->state != 16) block_->flags |= 0x00200000;
					tile_update(peer, world_, block_, x_, y_);
					string hold = "";
					uint16_t wl = 0, dl = 0, bgl = 0, sl = 0, bl = 0, hl = 0;
					for (int i_ = 0; i_ < pInfo(peer)->inv.size(); i_++) {
						if (pInfo(peer)->inv[i_].first == 202) sl = pInfo(peer)->inv[i_].second;
						if (pInfo(peer)->inv[i_].first == 204) bl = pInfo(peer)->inv[i_].second;
						if (pInfo(peer)->inv[i_].first == 206) hl = pInfo(peer)->inv[i_].second;
						if (pInfo(peer)->inv[i_].first == 242) wl = pInfo(peer)->inv[i_].second;
						if (pInfo(peer)->inv[i_].first == 1796) dl = pInfo(peer)->inv[i_].second;
						if (pInfo(peer)->inv[i_].first == 7188) bgl = pInfo(peer)->inv[i_].second;
						if (wl && dl && bgl && sl && bl && hl) break;
					}
					hold = "\nadd_smalltext|`9(Hmm, smells like you don't care any world locks)``|left|";
					if (wl != 0 || dl != 0 || sl != 0 || bl != 0 || hl != 0 || bgl != 0) hold = "\nadd_smalltext|`9(Hmm, smells like you care carrying";
					if (sl) hold += " " + to_string(sl) + " Small Locks" + (bl != 0 or hl != 0 or wl != 0 or dl != 0 or bgl != 0 ? "," : ")``|left|") + "";
					if (bl) hold += "" + a + (hl == 0 and wl == 0 and dl == 0 and bgl == 0 and not (sl == 0) ? " and " : " ") + to_string(bl) + " Big Locks" + (hl != 0 or wl != 0 or dl != 0 or bgl != 0 ? "," : ")``|left|") + "";
					if (hl) hold += "" + a + (wl == 0 and dl == 0 and bgl == 0 and not (sl == 0 or bl == 0) ? " and " : " ") + to_string(hl) + " Huge Locks" + (wl != 0 or dl != 0 or bgl != 0 ? "," : ")``|left|") + "";
					if (wl) hold += "" + a + (dl == 0 and bgl == 0 and not (sl == 0 or bl == 0 or hl == 0) ? " and " : " ") + to_string(wl) + " World Locks" + (dl != 0 or bgl != 0 ? "," : ")``|left|") + "";
					if (dl) hold += "" + a + (bgl == 0 and not (sl == 0 or bl == 0 or hl == 0 or wl == 0) ? " and " : " ") + to_string(dl) + " Diamond Locks" + (bgl != 0 ? "," : ")``|left|") + "";
					if (bgl) hold += "" + a + (sl != 0 or bl != 0 or hl != 0 or wl != 0 ? " and " : " ") + to_string(bgl) + " Platinum Gem Locks)``|left | ";
					VarList::OnDialogRequest(peer, SetColor(peer) + a + "set_default_color|`o\n\nadd_label_with_icon|big|`9Locke The Traveling Salesman``|left|2398|\nadd_smalltext|Ho there, friend! Locke's my name, and locks are my game. I Love 'em all, Diamond, Huge.. even Small! If you can part with some locks, I'll give you something special in return. Whaddya say?|left|\nadd_spacer|small|\nadd_smalltext|" + hold + "|left|\nadd_spacer|small|\nadd_button|item_204|Buy Big Lock for 5 Small Locks|noflags|0|0|\nadd_button|item_206|Buy Huge Lock for 3 Big Locks|noflags|0|0|\nadd_button|item_5262|Buy Neon Gum for 2 Huge Locks|noflags|0|0|\nadd_button|item_242|Buy World Lock for 5 Huge Locks|noflags|0|0|\nadd_button|item_2478|Buy Locke's Mystery Box for 1 World Lock|noflags|0|0|\nadd_button|item_2724|Buy Basic Blue Block for 1 World Lock|noflags|0|0|\nadd_button|item_5954|Buy Guild Chest for 1 World Lock|noflags|0|0|\nadd_button|item_3156|Buy Transdimensional Vaporizer Ray for 3 World Locks|noflags|0|0|\nadd_button|item_3676|Buy Pet Trainer Whistle for 5 World Locks|noflags|0|0|\nadd_button|item_14042|Buy Sale Television for 5 World Locks|noflags|0|0|\nadd_button|item_8878|Buy Safe Vault for 6 World Locks|noflags|0|0|\nadd_button|item_5258|Buy Chi Harmonizer for 10 World Locks|noflags|0|0|\nadd_button|item_3684|Buy Lock-Bot Remote for 10 World Locks|noflags|0|0|\nadd_button|item_1280|Buy Birth Certificate for 15 World Locks|noflags|0|0|\nadd_button|item_6140|Buy Extract-O-Snap for 15 World Locks|noflags|0|0|\nadd_button|item_2992|Buy Wolf Whistle for 15 World Locks|noflags|0|0|\nadd_button|item_3560|Buy Lock Mover for 20 World Locks|noflags|0|0|\nadd_button|item_14038|Buy Edgy Anime Robe for 25 World Locks|noflags|0|0|\nadd_button|item_3798|Buy VIP Entrance for 25 World Locks|noflags|0|0|\nadd_button|item_3314|Buy Stretched Canvas for 30 World Locks|noflags|0|0|\nadd_button|item_5202|Buy Soul Stone for 30 World Locks|noflags|0|0|\nadd_button|item_3188|Buy Sword Pommel for 40 World Locks|noflags|0|0|\nadd_button|item_2476|Buy Burning Eyes for 50 World Locks|noflags|0|0|\nadd_button|item_7190|Buy Guild Name Changer for 65 World Locks|noflags|0|0|\nadd_button|item_8892|Buy Raccoon Leash for 80 World Locks|noflags|0|0|\nadd_button|item_2720|Buy Electric Bow for 1 Diamond Lock|noflags|0|0|\nadd_button|item_2452|Buy Clothing Compactor for 1 Diamond Lock|noflags|0|0|\nadd_button|item_1486|Buy Growtoken for 1 Diamond Lock|noflags|0|0|\nadd_button|item_11156|Buy Growmoji Chest for 150 World Locks|noflags|0|0|\nadd_button|item_2702|Buy MickeyMay Leash for 3 Diamond Locks|noflags|0|0|\nadd_button|item_2722|Buy Golden Aura for 5 Diamond Locks|noflags|0|0|\nadd_button|item_4972|Buy Blue Aura for 5 Diamond Locks|noflags|0|0|\nadd_button|item_4970|Buy Pink Aura for 5 Diamond Locks|noflags|0|0|\nadd_button|item_5264|Buy Neon Nerves for 5 Diamond Locks|noflags|0|0|\nadd_button|item_4948|Buy Solar Chariot for 10 Diamond Locks|noflags|0|0|\nadd_button|item_3040|Buy Goldenrod for 10 Diamond Locks|noflags|0|0|\nadd_button|item_5260|Buy Harmonic Lock for 10 Diamond Locks|noflags|0|0|\nadd_button|item_11134|Buy Samille's Soul Abductor for 10 Diamond Locks|noflags|0|0|\nadd_button|item_3686|Buy Toy Lock-Bot for 15 Diamond Locks|noflags|0|0|\nadd_button|item_2450|Buy Diamond Dragon for 100 Diamond Locks|noflags|0|0|\nadd_button|item_12480|Buy Punch Antennae for 10 World Locks|noflags|0|0|\nadd_button|item_12482|Buy Build Antennae for 10 World Locks|noflags|0|0|\nadd_button|item_12484|Buy Grow Antennae for 10 World Locks|noflags|0|0|\nadd_button|item_12358|Buy Music Amplifier for 50 World Locks|noflags|0|0|\nadd_button|item_13730|Buy Diamond Lock Mask for 1 Diamond Lock|noflags|0|0|\nadd_button|item_13790|Buy Stylish Sunglasses for 25 World Locks|noflags|0|0|\nadd_button|item_13680|Buy Eldritch Flame Aura for 5 Platinum Gem Locks|noflags|0|0|\nadd_button|Ask_Something|Ask Locke Something|noflags|0|0|1|\nend_dialog|Locke_Salesman|Goodbye!||");
				}
				else {
					VarList::OnTalkBubble(peer, pInfo(peer)->netID, "`9Locke is on a break! Check later..``", 0, 1);
				}
			}
			else if (t_ == 6948 || t_ == 5638 || t_ == 6946 || t_ == 5930) {
				if (Only_Access(peer, world_, block_)) {
					if (magplant_access == false) {
						if (not world_->owner_name.empty()) {
							bool ar_turi_mag = false;
							if (t_ == 5638 || t_ == 5930) {
								{
									int c_ = 0;
									if (block_->id != 0) {
										Inventory::Modify(peer, block_->fg == 5638 ? 5640 : 9158, c_);
										if (c_ != 0) {
											if (pInfo(peer)->magnetron_x == x_ and pInfo(peer)->magnetron_y == y_ and pInfo(peer)->magnetron_id == block_->id) {
												ar_turi_mag = true;
											}
										}
									}
								}
							}
							else ar_turi_mag = false;
							if ((block_->fg == 6946 or block_->fg == 6948) && magplant_access == false) VarList::OnDialogRequest(peer, SetColor(peer) + "set_default_color|`o\nadd_label_with_icon|big|`w" + items[block_->fg].name + "``|left|" + to_string(block_->fg) + "|\nadd_spacer|small|\nembed_data|tilex|" + to_string(x_) + "\nembed_data|tiley|" + to_string(y_) + (block_->id == 0 ? "\nadd_textbox|There is no item selected |left|" : "\nadd_label_with_icon|small|`2" + items[block_->id].name + "``|left|" + to_string(block_->id) + "|") + "\nend_dialog|itemsucker_block|Close||");
							else VarList::OnDialogRequest(peer, SetColor(peer) + "set_default_color|`o\nadd_label_with_icon|big|`w" + items[block_->fg].name + "``|left|" + to_string(block_->fg) + "|\nadd_spacer|small|\nembed_data|tilex|" + to_string(x_) + "\nembed_data|tiley|" + to_string(y_) + (block_->id == 0 ? "\nadd_textbox|There is no item selected |left|" : "\nadd_label_with_icon|small|`2" + items[block_->id].name + "``|left|" + to_string(block_->id) + "|") + ((block_->fg == 5638 or block_->fg == 5930) and not block_->spin ? "\nadd_textbox|" + a + (items[block_->id].blockType == SEED ? "Planting" : "Building") + " mode: `6DISABLED``|left|" : "\nadd_textbox|" + a + (items[block_->id].blockType == SEED ? "Planting" : "Building") + " mode: `5ACTIVE``|left|\nadd_textbox|Use the " + items[block_->fg == 5638 ? 5640 : 9158].name + " " + (items[block_->id].blockType == BlockTypes::SEED ? "Plant" : "Build") + " `2" + items[block_->id].name + "`` directly from the " + items[block_->fg].name + "'s storage.|left|" + (not ar_turi_mag ? "\nadd_button|getplantationdevice|Get Remote|noflags|0|0|" : "") + "") + "\nend_dialog|itemsucker_block|Close||");
						}
					}
					else {
						VarList::OnDialogRequest(peer, get_sucker(peer, world_, block_, x_, y_));
					}
				}
				else {
					VarList::OnTalkBubble(peer, pInfo(peer)->netID, "That area is owned by " + owner_name, 0, 1);
					return false;
				}
			}
			else if (items[t_].blockType == BlockTypes::AUTO_BLOCK or t_ == 6954) {
				if (Only_Access(peer, world_, block_)) {
					if (magplant_access == false) VarList::OnDialogRequest(peer, SetColor(peer) + "set_default_color|`o\nadd_label_with_icon|big|`w" + items[block_->fg].name + "``|left|" + to_string(block_->fg) + "|\nadd_spacer|small|\nadd_smalltext|The device will consume 2300 Gems/hr while active!|left|\nadd_smalltext|Current Fuel = `w" + to_string(block_->pr) + "/8,000``|left|\nend_dialog|autoactionblock|Close||\nadd_quick_exit|");
					else VarList::OnDialogRequest(peer, SetColor(peer) + "set_default_color|`o\nadd_label_with_icon|big|`w" + items[block_->fg].name + "``|left|" + to_string(block_->fg) + "|\nadd_spacer|small|\nadd_smalltext|The device will consume 2300 Gems/hr while active!|left|\nadd_smalltext|Current Fuel = `w" + to_string(block_->pr) + "/8,000``|left|" + (block_->pr < 8000 ? "\nadd_smalltext|Refuel this with gems!|left|\nadd_text_input|refillfuel|Add Gems:|0|5|\nadd_spacer|small|\nadd_button|addfuel|`wAdd Gems``|noflags|0|0|" : "") + (block_->pr > 0 ? "\nadd_button|removegems|`wRemove Gems``|noflags|0|0|" : "") + "\nadd_spacer|small|\nadd_smalltext|" + (block_->id == 0 ? "No block type selected!" : "Target block is: `2" + items[(block_->fg == 6954 && block_->build_only == false ? block_->id - 1 : block_->id)].name + "``") + "|left|" + (t_ == 6954 && block_->c_ == 0 ? "\nadd_checkbox|harvest_trees|Harvest trees?|" + to_string(block_->build_only) + "|\nadd_checkbox|collect_seeds|Collect seeds?|" + to_string(block_->invert) + "|\nadd_item_picker|selecttarget|`wChoose Target Item``|Choose the target item!|" : (t_ == 6954 ? "\nadd_smalltext|Remove all items from the machine in order to change the target item.|left|\nadd_spacer|small|\nadd_smalltext|Collect target is: `2" + (items[(block_->invert ? block_->id : block_->id - 1)].ori_name) + "``|left|\nadd_spacer|small|\nadd_smalltext|This unit currently contains: `2" + to_string(block_->c_) + " " + items[(block_->invert ? block_->id : block_->id - 1)].ori_name + "``|left|\nadd_button|removeitems|`wRemove Items``|noflags|0|0|" : "\nadd_item_picker|selecttarget|`wChoose Target Item``|Choose the target item!|")) + "\nadd_spacer|small|\nembed_data|tilex|" + to_string(x_) + "\nembed_data|tiley|" + to_string(y_) + "\nend_dialog|autoactionblock|Close|OK|\nadd_quick_exit|");
				}
				else {
					VarList::OnTalkBubble(peer, pInfo(peer)->netID, "That area is owned by " + owner_name, 0, 1);
					return false;
				}
			}
			else if (items[t_].blockType == BlockTypes::TRICKSTER) {
				if (Only_Access(peer, world_, block_)) {
					VarList::OnDialogRequest(peer, SetColor(peer) + "set_default_color|`o\nadd_label_with_icon|big|`9" + items[t_].name + "``|left|" + to_string(t_) + "|\nadd_spacer|small|\nembed_data|tilex|" + to_string(x_) + "\nembed_data|tiley|" + to_string(y_) + "\nadd_textbox|Rate of fire? (2-20 seconds)|left|\nadd_text_input|often|Seconds:|" + to_string(block_->rate_of_fire) + "|3|\nadd_textbox|Speed of projectiles? (10-250 pixels/second)|left|\nadd_text_input|speed|Speed:|" + to_string(block_->projectile_speed) + "|3|\nadd_checkbox|disable|Disabled|" + (block_->flags & 0x00400000 ? "0" : "1") + "\nadd_smalltext|You can install as many Blaster Blocks (Howlers or Tricksters) as you want in a world, but only 10 projectiles can exist at one time, so don't go crazy!|left|\nend_dialog|blaster|Cancel|Update|");
				}
				else {
					VarList::OnTalkBubble(peer, pInfo(peer)->netID, "That area is owned by " + owner_name, 0, 1);
					return false;
				}
			}
			else if (t_ == 6142) {
				if (Only_Access(peer, world_, block_)) {
					string foundlist = "";
					for (int i_ = 0; i_ < world_->drop_new.size(); i_++) {
						if (world_->drop_new[i_][4] / 32 == y_ && world_->drop_new[i_][0] != 112 && world_->drop_new[i_][0] != 4490) {
							if (world_->drop_new[i_][3] / 32 == (x_ + (block_->flags & 0x00200000 ? -1 : 1)) or world_->drop_new[i_][3] / 32 == (x_ + (block_->flags & 0x00200000 ? -2 : 2)) or world_->drop_new[i_][3] / 32 == (x_ + (block_->flags & 0x00200000 ? -3 : 3))) 	foundlist += to_string(world_->drop_new[i_][0]) + "," + to_string(world_->drop_new[i_][1]) + "," + to_string(world_->drop_new[i_][2]) + ",";
						}
					}
					if (not foundlist.empty()) VarList::OnDialogRequest(peer, SetColor(peer) + "set_default_color|`o\nadd_label_with_icon|big|`wExtractor Dynamo``|left|6142|\nembed_data|target_x|" + to_string(x_) + "\nembed_data|target_y|" + to_string(y_) + "\nadd_spacer|small|\nadd_textbox|GrowTech: use the Extractor Dynamo to pick out the items from the floating items in your world! - Thanks, Technician Dave.|left|\nadd_spacer|small|\nadd_textbox|Press on the icon to extract the item into your inventory.|left|\nadd_spacer|small|\nadd_textbox|`wItem List:|left|\nadd_label_with_icon_button_list|small|`w%s : %s|left|dynamoOnceObj_|itemID_itemAmount_worldObj|" + foundlist + "\nadd_spacer|small|\nend_dialog|dynamo|Close||");
					else VarList::OnTalkBubble(peer, pInfo(peer)->netID, "There are no floating items in the extraction area!", 0, 0);
				}
				else {
					VarList::OnTalkBubble(peer, pInfo(peer)->netID, "That area is owned by " + owner_name, 0, 1);
					return false;
				}
			}
			else if (items[t_].blockType == BlockTypes::Display_Shelf) {
				bool can_take = (block_->shelf_1 != 0 or block_->shelf_2 != 0 or block_->shelf_3 != 0 or block_->shelf_4 != 0 ? true : false);
				if (Only_Access(peer, world_, block_)) {
					VarList::OnDialogRequest(peer, SetColor(peer) + "set_default_color|`o\nadd_label_with_icon|big|`w" + items[t_].name + "``|left|" + to_string(t_) + "|\nadd_spacer|small|\nembed_data|tilex|" + to_string(x_) + "\nembed_data|tiley|" + to_string(y_) + "\n" + (block_->shelf_2 != 0 ? "add_item_picker|replace2|Item 1: `2" + items[block_->shelf_2].name + "``|Select any item to display|" : "add_item_picker|replace2|`4Display an item``|Select any item to display|") + "\n" + (block_->shelf_1 != 0 ? "add_item_picker|replace1|Item 2: `2" + items[block_->shelf_1].name + "``|Select any item to display|" : "add_item_picker|replace1|`4Display an item``|Select any item to display|") + "\n" + (block_->shelf_3 != 0 ? "add_item_picker|replace3|Item 3: `2" + items[block_->shelf_3].name + "``|Select any item to display|" : "add_item_picker|replace3|`4Display an item``|Select any item to display|") + "\n" + (block_->shelf_4 != 0 ? "add_item_picker|replace4|Item 4: `2" + items[block_->shelf_4].name + "``|Select any item to display|" : "add_item_picker|replace4|`4Display an item``|Select any item to display|") + (can_take ? "\nadd_button|remove|Take All Items|noflags|0|0|" : "") + "\nend_dialog|dispshelf|Okay||");
				}
				else {
					if (block_->shelf_1 == 0 and block_->shelf_2 == 0 and block_->shelf_3 == 0 and block_->shelf_4 == 0) {
						VarList::OnDialogRequest(peer, SetColor(peer) + "set_default_color|`o\nadd_label_with_icon|big|`w" + items[t_].name + "``|left|" + to_string(t_) + "|\nadd_spacer|small|\nadd_textbox|`oItems on display here:|left|\nadd_smalltext|`oNone!|left|\nend_dialog|dispshelf|Okay||");
					}
					else VarList::OnDialogRequest(peer, SetColor(peer) + "set_default_color|`o\nadd_label_with_icon|big|`w" + items[t_].name + "``|left|" + to_string(t_) + "|\nadd_spacer|small|\nadd_textbox|`oItems on display here:|left|" + (block_->shelf_1 != 0 ? "\nadd_smalltext|`2" + items[block_->shelf_1].name + "|left|" : "") + "\n" + (block_->shelf_2 != 0 ? "\nadd_smalltext|`2" + items[block_->shelf_2].name + "|left|" : "") + "\n" + (block_->shelf_3 != 0 ? "\nadd_smalltext|`2" + items[block_->shelf_3].name + "|left|" : "") + "\n" + (block_->shelf_4 != 0 ? "\nadd_smalltext|`2" + items[block_->shelf_4].name + "|left|" : "") + "\nend_dialog|dispshelf|Okay||");		
				}
			}
			else if (items[t_].blockType == BlockTypes::VIP_ENTRANCE) {
				if (world_->owner_name.empty() and not block_->locked) {
					VarList::OnDialogRequest(peer, SetColor(peer) + "set_default_color|`o\nadd_label_with_icon|big|`wEdit " + items[t_].name + "``|left|" + to_string(t_) + "|\nadd_textbox|This object has additional properties to edit if in a locked area.|left|\nembed_data|tilex|" + to_string(x_) + "\nembed_data|tiley|" + to_string(y_) + "\nend_dialog|vip_edit|Cancel|OK|");
				}
				else if (to_lower(world_->owner_name) == to_lower(pInfo(peer)->tankIDName)) {
					if (t_ == 14594) {
						string add_ = ""; long long time_ = time(nullptr);
						for (auto atmin : block_->Admin_Bfg) {
							string name = atmin.second;
							if (atmin.first - time(nullptr) > 0) add_ = "\nadd_textbox|`oAccess List:|left|\nadd_small_font_button|name_" + atmin.second + "|" + get_player_tag(atmin.second) + " `oTime: (" + Time::Event(atmin.first - time_) + ")``|0|0|\nadd_spacer|small|";
							else {
								std::vector<std::pair<long long int, std::string>>::iterator lb = find_if(block_->Admin_Bfg.begin(), block_->Admin_Bfg.end(), [name](const pair <long long int, string>& element) { return element.second == name; });
								if (lb != block_->Admin_Bfg.end()) {
									block_->Admin_Bfg.erase(lb);
								}
							}
						}
						if (add_.empty()) add_ = "\nadd_smalltext|`oNobody (except owner and admins) has access right now.|left|";
						VarList::OnDialogRequest(peer, SetColor(peer) + "set_default_color|`o\nadd_label_with_icon|big|`wEdit " + items[t_].name + "``|left|" + to_string(t_) + "|\nadd_spacer|small|\nembed_data|tilex|" + to_string(x_) + "\nembed_data|tiley|" + to_string(y_) + "\nadd_text_input|Price_Wls|Price in World Locks:|" + to_string(block_->pr) + "|6|\nadd_smalltext|(0 means disabled)|left|\nadd_spacer|small|\nadd_textbox|Access Time:|left|\nadd_checkbox|1_Week|1 Week|" + (block_->id == 1 ? "1" : "0") + "|\nadd_checkbox|1_Day|1 Day|" + (block_->id == 2 ? "1" : "0") + "|\nadd_checkbox|1_Hour|1 Hour|" + (block_->id == 3 ? "1" : "0") + "|\nadd_spacer|small|" + add_ + "\nadd_smalltext|Only one person may have access at the same time. Additionally, when the access time is expired, the renter will die and respawn automatically.|left|" + (block_->wl != 0 ? "\nadd_smalltext|You have earned " + to_string(block_->wl) + " World Locks.|left|\nadd_button|withdraw_wls|Withdraw World Locks|noflags|0|0|1|" : "") + "\nend_dialog|vippay_edit|Cancel|OK|");
					}
					else {
						string add_ = "";
						for (string own : block_->admins) {
							add_ += "\nadd_checkbox|checkbox_" + own + "|" + get_player_tag(own) + "``|1";
						}
						if (add_.empty()) add_ = "\nadd_label|small|Nobody!|left";
						VarList::OnDialogRequest(peer, SetColor(peer) + "set_default_color|`o\nadd_label_with_icon|big|`wEdit " + items[t_].name + "``|left|" + to_string(t_) + "|\nadd_label|small|`wVIP list:``|left\nembed_data|tilex|" + to_string(x_) + "\nembed_data|tiley|" + to_string(y_) + "\nadd_spacer|small|" + add_ + "\nadd_spacer|small|\nadd_player_picker|playerNetID|`wAdd``|\nadd_checkbox|checkbox_public|Allow anyone to enter|" + (block_->limit_admins ? "1" : "0") + "\nend_dialog|vip_edit|Cancel|OK|");
					}
				}
				else {
					string name = pInfo(peer)->tankIDName;
					if (t_ == 14594) {
						auto it = std::find_if(block_->Admin_Bfg.begin(), block_->Admin_Bfg.end(), [&name](const std::pair<long long int, std::string>& pair) {
							return pair.second == name; });
						if (it != block_->Admin_Bfg.end()) {
							long long time_ = time(nullptr);
							if (block_->Admin_Bfg[it - block_->Admin_Bfg.begin()].first - time_ > 0) VarList::OnDialogRequest(peer, SetColor(peer) + "set_default_color|`o\nadd_label_with_icon|big|`wEdit " + items[t_].name + "``|left|" + to_string(t_) + "|\nadd_textbox|You're in Pay VIP Entrance List!<CR>Time Remaining: (" + Time::Event(block_->Admin_Bfg[it - block_->Admin_Bfg.begin()].first - time_) + ")|left|\nembed_data|tilex|" + to_string(x_) + "\nembed_data|tiley|" + to_string(y_) + "\nend_dialog|remove_vip|Cancel|Remove My VIP!|");
							else {
								std::vector<std::pair<long long int, std::string>>::iterator lb = find_if(block_->Admin_Bfg.begin(), block_->Admin_Bfg.end(), [name](const pair <long long int, string>& element) { return element.second == name; });
								if (lb != block_->Admin_Bfg.end()) {
									block_->Admin_Bfg.erase(lb);
								}
								VarList::OnDialogRequest(peer, SetColor(peer) + "set_default_color|`o\nadd_label_with_icon|big|`wEdit " + items[t_].name + "``|left|" + to_string(t_) + "|\nadd_spacer|small|\nembed_data|tilex|" + to_string(x_) + "\nembed_data|tiley|" + to_string(y_) + "\nadd_textbox|`2You'll get:<CR>``" + (block_->id == 1 ? "1 Week" : block_->id == 2 ? "1 Day" : "1 Hour") + " of access to this Entrance, only you will have access during this time.|left|\nadd_spacer|small|\nadd_textbox|`4You'll give:<CR>``" + Set_Count(block_->pr) + " World Locks.|left|\nadd_spacer|small|\nadd_custom_button|Nvm|textLabel:Nevermind;middle_colour:3434645503;border_colour:3434645503;display:block;|\nadd_custom_button|Purchase_Access|textLabel:Purchase!;middle_colour:431888895;border_colour:431888895;anchor:Nvm;left:1;margin:40,0;|\nend_dialog|vippay_edit|||");
							}
						}
						else if (block_->Admin_Bfg.size() != 0) {
							for (auto atmin : block_->Admin_Bfg) {
								string name = atmin.second;
								if (atmin.first - time(nullptr) > 0) VarList::OnTalkBubble(peer, pInfo(peer)->netID, "Someone else has already filled access to this Entrance", 0, 1);
								else {
									std::vector<std::pair<long long int, std::string>>::iterator lb = find_if(block_->Admin_Bfg.begin(), block_->Admin_Bfg.end(), [name](const pair <long long int, string>& element) { return element.second == name; });
									if (lb != block_->Admin_Bfg.end()) {
										block_->Admin_Bfg.erase(lb);
									}
									VarList::OnDialogRequest(peer, SetColor(peer) + "set_default_color|`o\nadd_label_with_icon|big|`wEdit " + items[t_].name + "``|left|" + to_string(t_) + "|\nadd_spacer|small|\nembed_data|tilex|" + to_string(x_) + "\nembed_data|tiley|" + to_string(y_) + "\nadd_textbox|`2You'll get:<CR>``" + (block_->id == 1 ? "1 Week" : block_->id == 2 ? "1 Day" : "1 Hour") + " of access to this Entrance, only you will have access during this time.|left|\nadd_spacer|small|\nadd_textbox|`4You'll give:<CR>``" + Set_Count(block_->pr) + " World Locks.|left|\nadd_spacer|small|\nadd_custom_button|Nvm|textLabel:Nevermind;middle_colour:3434645503;border_colour:3434645503;display:block;|\nadd_custom_button|Purchase_Access|textLabel:Purchase!;middle_colour:431888895;border_colour:431888895;anchor:Nvm;left:1;margin:40,0;|\nend_dialog|vippay_edit|||");
								}
							}
						}
						else {
							if (block_->pr == 0 or block_->id == 0) VarList::OnTalkBubble(peer, pInfo(peer)->netID, "The Entrance does not have a price yet", 0, 1);
							else {
								if (pInfo(peer)->Used_VipDoor.size() != 0) {
									long long time_ = time(nullptr);
									if (pInfo(peer)->Used_VipDoor[0].second - time_ <= 0 or pInfo(peer)->Used_VipDoor[0].second < 0) {
										pInfo(peer)->Used_VipDoor.clear();
										VarList::OnDialogRequest(peer, SetColor(peer) + "set_default_color|`o\nadd_label_with_icon|big|`wEdit " + items[t_].name + "``|left|" + to_string(t_) + "|\nadd_spacer|small|\nembed_data|tilex|" + to_string(x_) + "\nembed_data|tiley|" + to_string(y_) + "\nadd_textbox|`2You'll get:<CR>``" + (block_->id == 1 ? "1 Week" : block_->id == 2 ? "1 Day" : "1 Hour") + " of access to this Entrance, only you will have access during this time.|left|\nadd_spacer|small|\nadd_textbox|`4You'll give:<CR>``" + Set_Count(block_->pr) + " World Locks.|left|\nadd_spacer|small|\nadd_custom_button|Nvm|textLabel:Nevermind;middle_colour:3434645503;border_colour:3434645503;display:block;|\nadd_custom_button|Purchase_Access|textLabel:Purchase!;middle_colour:431888895;border_colour:431888895;anchor:Nvm;left:1;margin:40,0;|\nend_dialog|vippay_edit|||");
									}
									else VarList::OnTalkBubble(peer, pInfo(peer)->netID, "You still have access in '" + pInfo(peer)->Used_VipDoor[0].first + "' Time Remaining: (" + Time::Event(pInfo(peer)->Used_VipDoor[0].second - time_) + ")", 0, 1);
								}
								else VarList::OnDialogRequest(peer, SetColor(peer) + "set_default_color|`o\nadd_label_with_icon|big|`wEdit " + items[t_].name + "``|left|" + to_string(t_) + "|\nadd_spacer|small|\nembed_data|tilex|" + to_string(x_) + "\nembed_data|tiley|" + to_string(y_) + "\nadd_textbox|`2You'll get:<CR>``" + (block_->id == 1 ? "1 Week" : block_->id == 2 ? "1 Day" : "1 Hour") + " of access to this Entrance, only you will have access during this time.|left|\nadd_spacer|small|\nadd_textbox|`4You'll give:<CR>``" + Set_Count(block_->pr) + " World Locks.|left|\nadd_spacer|small|\nadd_custom_button|Nvm|textLabel:Nevermind;middle_colour:3434645503;border_colour:3434645503;display:block;|\nadd_custom_button|Purchase_Access|textLabel:Purchase!;middle_colour:431888895;border_colour:431888895;anchor:Nvm;left:1;margin:40,0;|\nend_dialog|vippay_edit|||");
							}
						}
					}
					else if (find(block_->admins.begin(), block_->admins.end(), to_lower(name)) != block_->admins.end()) {
						VarList::OnDialogRequest(peer, SetColor(peer) + "set_default_color|`o\nadd_label_with_icon|big|`wEdit " + items[t_].name + "``|left|" + to_string(t_) + "|\nadd_textbox|You're in VIP List!|left|\nembed_data|tilex|" + to_string(x_) + "\nembed_data|tiley|" + to_string(y_) + "\nend_dialog|remove_vip|Cancel|Remove My VIP!|");
					}
					else if (block_->limit_admins) VarList::OnDialogRequest(peer, SetColor(peer) + "set_default_color|`o\nadd_label_with_icon|big|`wEdit " + items[t_].name + "``|left|" + to_string(t_) + "|\nadd_textbox|`oYou're not on the VIP list, but the door is unlocked anyway!|left|\nembed_data|tilex|" + to_string(x_) + "\nembed_data|tiley|" + to_string(y_) + "\nend_dialog|vip_edit|Cancel|OK|");
					else VarList::OnDialogRequest(peer, SetColor(peer) + "set_default_color|`o\nadd_label_with_icon|big|`wEdit " + items[t_].name + "``|left|" + to_string(t_) + "|" + (Role::Developer(peer) ? "\nadd_textbox|`oYou're Developer and door is unlocked anyway!|left|" : "\nadd_textbox|`oYou're not on the VIP list!|left|") + "\nembed_data|tilex|" + to_string(x_) + "\nembed_data|tiley|" + to_string(y_) + "\nend_dialog|vip_edit|Cancel|OK|");
				}
			}
			else if (items[t_].blockType == BlockTypes::PORTRAIT) {
				if (Only_Access(peer, world_, block_)) {
					bool has_enough = false;
					int red = 0, yellow = 0, green = 0, aqua = 0, blue = 0, purple = 0, charcoal = 0, varnish = 0;
					{
						Inventory::Modify(peer, 3478, red);
						Inventory::Modify(peer, 3480, yellow);
						Inventory::Modify(peer, 3482, green);
						Inventory::Modify(peer, 3484, aqua);
						Inventory::Modify(peer, 3486, blue);
						Inventory::Modify(peer, 3488, purple);
						Inventory::Modify(peer, 3490, charcoal);
						Inventory::Modify(peer, 3492, varnish);
						if (red >= 2 and yellow >= 2 and green >= 2 and aqua >= 2 and blue >= 2 and purple >= 2 and charcoal >= 2 and varnish >= 2) {
							has_enough = true;
						}
					}
					string erase = (varnish >= 4 ? "\nadd_button|erase|Erase Painting|noflags|0|0|\nadd_smalltext|`5(Erasing costs 4 Paint Bucket - Varnish)``|left|" : "\nadd_textbox|You'll need 4 Paint Bucket - Varnish to erase this.|left|");
					string tratata = (has_enough ? "\nadd_player_picker|playerNetID|`wPaint Someone``|\nadd_smalltext|`5(Painting costs 2 Paint Bucket of each color)``|left|" : "\nadd_textbox|You'll need 2 of each color of Paint Bucket to paint someone.|left|");
					VarList::OnDialogRequest(peer, SetColor(peer) + "set_default_color|`o\nadd_label_with_icon|big|`wEdit " + items[t_].name + "``|left|" + to_string(t_) + "|\nembed_data|tilex|" + to_string(x_) + "\nembed_data|tiley|" + to_string(y_) + "" + (block_->portrait.c_skin == 0 and block_->portrait.c_face == 0 and block_->portrait.c_hair == 0 and block_->portrait.c_head == 0 ? ("\nadd_textbox|The canvas is blank.|left|" + tratata) : "\nadd_textbox|This is a lovely portrait of a Growtopian.|left|" + erase + "\nadd_text_input|artname|Title:|" + block_->txt + "|60|\nadd_smalltext|If you'd like to touch up the painting slightly, you could change the expression:|left|\nadd_checkbox|chk1|Unconcerned|" + (block_->portrait.c_expression == 1 ? "1" : "0") + "|\nadd_checkbox|chk2|Happy|" + (block_->portrait.c_expression == 2 ? "1" : "0") + "|\nadd_checkbox|chk3|Sad|" + (block_->portrait.c_expression == 3 ? "1" : "0") + "|\nadd_checkbox|chk4|Tongue Out|" + (block_->portrait.c_expression == 4 ? "1" : "0") + "|\nadd_checkbox|chk5|Surprised|" + (block_->portrait.c_expression == 5 ? "1" : "0") + "|\nadd_checkbox|chk6|Angry|" + (block_->portrait.c_expression == 6 ? "1" : "0") + "|\nadd_checkbox|chk7|Talking|" + (block_->portrait.c_expression == 7 ? "1" : "0") + "|\nadd_checkbox|chk9|Ecstatic|" + (block_->portrait.c_expression == 9 ? "1" : "0") + "|\nadd_checkbox|chk11|Wry|" + (block_->portrait.c_expression == 11 ? "1" : "0") + "|\nadd_checkbox|chk12|Sleeping|" + (block_->portrait.c_expression == 12 ? "1" : "0") + "|\nadd_checkbox|chk14|Winking|" + (block_->portrait.c_expression == 14 ? "1" : "0") + "|\nadd_checkbox|chk16|Trolling|" + (block_->portrait.c_expression == 16 ? "1" : "0") + "\nadd_checkbox|chk18|Vampire|" + (block_->portrait.c_expression == 18 ? "1" : "0") + "\nadd_checkbox|chk22|Underwater|" + (block_->portrait.c_expression == 22 ? "1" : "0") + "\nadd_checkbox|chk27|What|" + (block_->portrait.c_expression == 27 ? "1" : "0") + "\nadd_checkbox|chk28|Blushed|" + (block_->portrait.c_expression == 28 ? "1" : "0") + "|") + "\nend_dialog|portrait|Cancel|Update|");
				}
				else {
					VarList::OnTalkBubble(peer, pInfo(peer)->netID, "That area is owned by " + owner_name, 0, 1);
					return false;
				}
			}
			else if (t_ == 2452) {
				if (Only_Access(peer, world_, block_)) {
					VarList::OnDialogRequest(peer, SetColor(peer) + "set_default_color|`o\nadd_label_with_icon|big|`wClothing Compactor``|left|2452|\nadd_textbox|Use (almost) any clothing on this device to crush it down, permanently destroying it. If you just have extra clothes taking up space, crush 'em!|left|\nadd_textbox|The results may surprise you! But probably you will get seeds or gems.|left|\nend_dialog|compactor|Thanks for the info!||");
				}
				else {
					VarList::OnTalkBubble(peer, pInfo(peer)->netID, "That area is owned by " + owner_name, 0, 1);
					return false;
				}
			}
			else if (t_ == 4322) {
				if (Only_Access(peer, world_, block_)) {
					string tools = "";
					for (int i_ = 0; i_ < pInfo(peer)->inv.size(); i_++) if (pInfo(peer)->inv[i_].second >= 20 && pInfo(peer)->inv[i_].first == 1258 || pInfo(peer)->inv[i_].first == 1260 || pInfo(peer)->inv[i_].first == 1262 || pInfo(peer)->inv[i_].first == 1264 || pInfo(peer)->inv[i_].first == 1266 || pInfo(peer)->inv[i_].first == 1268 || pInfo(peer)->inv[i_].first == 1270 || pInfo(peer)->inv[i_].first == 4308 || pInfo(peer)->inv[i_].first == 4310 || pInfo(peer)->inv[i_].first == 4312 || pInfo(peer)->inv[i_].first == 4314 || pInfo(peer)->inv[i_].first == 4316 || pInfo(peer)->inv[i_].first == 4318) tools += "\nadd_button_with_icon|tool" + to_string(pInfo(peer)->inv[i_].first) + "|`$" + items[pInfo(peer)->inv[i_].first].ori_name + "``|noflags|" + to_string(pInfo(peer)->inv[i_].first) + "|" + to_string(pInfo(peer)->inv[i_].second) + "|";
					VarList::OnDialogRequest(peer, SetColor(peer) + "set_default_color|`o\nadd_label_with_icon|big|`9Autoclave``|left|4322|\nadd_spacer|small|\nadd_textbox|With this device, you can exchange 20 of any one surgical tool for 1 each of all the other tools. Choose an instrument to dispose of:|left|" + (tools != "" ? "\ntext_scaling_string|Surgical Defibrillator|" + tools + "\nadd_button_with_icon||END_LIST|noflags|0||" : "") + "\nend_dialog|autoclave|Cancel||");
				}
				else {
					VarList::OnTalkBubble(peer, pInfo(peer)->netID, "That area is owned by " + owner_name, 0, 1);
					return false;
				}
			}
			else if (items[t_].blockType == BlockTypes::Painting_Easel) {
				if (Only_Access(peer, world_, block_)) {
					bool has_enough = false;
					int red = 0, yellow = 0, green = 0, aqua = 0, blue = 0, purple = 0, charcoal = 0, varnish = 0;
					{
						Inventory::Modify(peer, 3478, red);
						Inventory::Modify(peer, 3480, yellow);
						Inventory::Modify(peer, 3482, green);
						Inventory::Modify(peer, 3484, aqua);
						Inventory::Modify(peer, 3486, blue);
						Inventory::Modify(peer, 3488, purple);
						Inventory::Modify(peer, 3490, charcoal);
						Inventory::Modify(peer, 3492, varnish);
						if (red >= 2 and yellow >= 2 and green >= 2 and aqua >= 2 and blue >= 2 and purple >= 2 and charcoal >= 2 and varnish >= 2) {
							has_enough = true;
						}
					}
					VarList::OnDialogRequest(peer, SetColor(peer) + "set_default_color|`o\nadd_label_with_icon|big|`w" + items[t_].name + "``|left|" + to_string(t_) + "|\nadd_spacer|small|\nembed_data|tilex|" + to_string(x_) + "\nembed_data|tiley|" + to_string(y_) + "" + (block_->id != 0 ? "" : "\nadd_textbox|The canvas is blank.|left|") + (block_->id != 0 ? "\nadd_textbox|This is a lovely still-life of " + items[block_->id].name + ".|left|" + (varnish < 4 ? "\nadd_smalltext|You'll need 4 Paint Bucket - Varnish to erase this.|left|" : "\nadd_button|erase|Erase Painting|noflags|0|0|\nadd_smalltext|`5(Erasing costs 4 Paint Bucket - Varnish)``|left|") : (not has_enough ? "\nadd_textbox|You'll need 2 of each color of Paint Bucket to paint something.|left|" : "\nadd_item_picker|paint|`wPaint Something``|Select an item to paint|")) + "\nadd_text_input|artname|Signed:|" + (block_->id != 0 and block_->txt == "" ? items[block_->id].name : block_->txt) + "|60|\nend_dialog|artcanvas|Cancel|Update|");
				}
				else {
					VarList::OnTalkBubble(peer, pInfo(peer)->netID, "That area is owned by " + owner_name, 0, 1);
					return false;
				}
			}
			else if (items[t_].blockType == BlockTypes::GATEWAY or items[t_].can_be_changed_to_public) {
				if (Only_Access(peer, world_, block_) == false) {
					VarList::OnDialogRequest(peer, SetColor(peer) + "set_default_color|`o\nadd_label_with_icon|big|`wEdit " + items[t_].name + "``|left|" + to_string(t_) + "|\nadd_textbox|This object has additional properties to edit if in a locked area.|left|\nembed_data|tilex|" + to_string(x_) + "\nembed_data|tiley|" + to_string(y_) + "\nend_dialog|switcheroo_edit|Cancel|OK|");
				}
				else {
					VarList::OnDialogRequest(peer, SetColor(peer) + "set_default_color|`o\nadd_label_with_icon|big|`wEdit " + items[t_].name + "``|left|" + to_string(t_) + "|\nadd_checkbox|checkbox_public|" + (items[t_].can_be_changed_to_public ? "Usable by public" : "Is open to public") + "|" + (block_->flags & 0x00800000 ? "1" : "0") + (items[block_->fg].actionType == 12 ? "\nadd_checkbox|checkbox_silence|Silenced|" + a + (block_->flags & 0x02000000 ? "1" : "0") + "" : "") + "\nembed_data|tilex|" + to_string(x_) + "\nembed_data|tiley|" + to_string(y_) + "\nend_dialog|switcheroo_edit|Cancel|OK|");
				}
			}
			else if (t_ == 1436 || t_ == 8246 || t_ == 10258) {
				if (Only_Access(peer, world_, block_)) {
					pInfo(peer)->lastwrenchb = t_;
					string logs = "", settings = "", a = "";
					bool show_item_taking = false, show_item_dropping = false, show_people_entering = false, show_people_exiting = false, dont_show_owner = false, dont_show_admins = false, dont_show_noaccess = false, show_vend_logs = false;
					for (int i_ = 0; i_ < world_->cctv.size(); i_++) if (world_->cctv[i_].x == x_ and world_->cctv[i_].y == y_) logs += world_->cctv[i_].logs;
					for (int i_ = 0; i_ < world_->cctv_settings.size(); i_++) 
						if (world_->cctv_settings[i_][0] == x_ and world_->cctv_settings[i_][1] == y_) settings = a + "\nadd_checkbox|checkbox_showpick|Show Item Taking|" + (world_->cctv_settings[i_][2] ? "1" : "0") + "\nadd_checkbox|checkbox_itemdrop|Show Item Dropping|" + (world_->cctv_settings[i_][3] ? "1" : "0") + "\nadd_checkbox|checkbox_showenter|Show People Entering|" + (world_->cctv_settings[i_][4] ? "1" : "0") + "\nadd_checkbox|checkbox_showexit|Show People Exiting|" + (world_->cctv_settings[i_][5] ? "1" : "0") + "\nadd_checkbox|checkbox_noshowowner|Don't Show Owner|" + (world_->cctv_settings[i_][6] ? "1" : "0") + "\nadd_checkbox|checkbox_noshowadmin|Don't Show Admins|" + (world_->cctv_settings[i_][7] ? "1" : "0") + "\nadd_checkbox|checkbox_noshowother|Don't Show People Without Access|" + (world_->cctv_settings[i_][8] ? "1" : "0") + "\nadd_checkbox|checkbox_vendlogs|Show Vending Machine Logs|" + (to_string(world_->cctv_settings[i_][9]));
					if (settings.empty()) {
						world_->cctv_settings.push_back({ {pInfo(peer)->lastwrenchx},{pInfo(peer)->lastwrenchy},{false},{false},{true},{false},{dont_show_owner == 1 ? true : false},{false},{false},{false} });
						WorldCCTV cctv_{};
						cctv_.x = pInfo(peer)->lastwrenchx, cctv_.y = pInfo(peer)->lastwrenchy;
						cctv_.logs = "";
						world_->cctv.push_back(cctv_);
						settings = "\nadd_checkbox|checkbox_showpick|Show Item Taking|0\nadd_checkbox|checkbox_itemdrop|Show Item Dropping|0\nadd_checkbox|checkbox_showenter|Show People Entering|1\nadd_checkbox|checkbox_showexit|Show People Exiting|0\nadd_checkbox|checkbox_noshowowner|Don't Show Owner|0\nadd_checkbox|checkbox_noshowadmin|Don't Show Admins|0\nadd_checkbox|checkbox_noshowother|Don't Show People Without Access|0\nadd_checkbox|checkbox_vendlogs|Show Vending Machine Logs|0";
					}
					VarList::OnDialogRequest(peer, SetColor(peer) + "set_default_color|`o\nadd_label_with_icon|big|`w" + items[t_].name + "``|left|" + to_string(t_) + "|\nadd_spacer|small|" + (logs.empty() ? "\nadd_textbox|The camera log is empty.|left|" : logs + "\nadd_spacer|small|") + "" + settings + "" + (logs != "" ? "\nadd_button|clear|`4Clear Log``|noflags|0|0|" : "") + "\nend_dialog|camera_edit||OK|\nadd_quick_exit|");
				}
				else {
					VarList::OnTalkBubble(peer, pInfo(peer)->netID, "That area is owned by " + owner_name, 0, 1);
					return false;
				}
			}
			else if (t_ == 4296 || t_ == 8558) {
				if (Only_Access(peer, world_, block_)) {
					if (Playmods::HasById(pInfo(peer), 86)) {
						VarList::OnTalkBubble(peer, pInfo(peer)->netID, "I know it's just a robot, but the authorities don't even trust you operating on that with your malpractice issues.", 0, 1);
					}
					else {
						pInfo(peer)->lastwrenchb = t_;
						VarList::OnDialogRequest(peer, SetColor(peer) + "set_default_color|`o\nadd_label_with_icon|big|`9" + items[t_].name + "``|left|" + to_string(t_) + "|\nadd_spacer|small|\nadd_smalltext|Surgeon Skill: " + to_string(pInfo(peer)->surgery_skill) + "|left|\nadd_textbox|Are you sure you want to perform surgery on this robot? Whether you succeed or fail, the robot will be destroyed in the process.|left|\nend_dialog|surge_|Cancel|Okay!|");
					}
				}
				else {
					VarList::OnTalkBubble(peer, pInfo(peer)->netID, "That area is owned by " + owner_name, 0, 1);
					return false;
				}
			}
			else if (t_ == 4582 || t_ == 12196) {
				if (Only_Access(peer, world_, block_)) {
					VarList::OnDialogRequest(peer, SetColor(peer) + "set_default_color|`o\nadd_label_with_icon|big|`w" + items[t_].name + "``|left|" + to_string(t_) + "|\nadd_textbox|Use items on here to try to grind them up into tasty food. Only certain things can be ground up.|left|\nadd_textbox|You might be surprised what you can grind!|left|\nend_dialog|grinder|Thanks for the info!||");
				}
				else {
					VarList::OnTalkBubble(peer, pInfo(peer)->netID, "That area is owned by " + owner_name, 0, 1);
					return false;
				}
			}
			else if (t_ == 2072) {
				if (Only_Access(peer, world_, block_)) {
					pInfo(peer)->lastwrenchb = t_;
					VarList::OnDialogRequest(peer, SetColor(peer) + "set_default_color|`o\nadd_label_with_icon|big|`wXenonite Crystal``|left|2072|\nadd_textbox|This crystal can either grant or block super powers for all players in your world! Any power that's unchecked will work as normal - people will have the power if they equip an item with it.|left|\nadd_spacer|small|\nadd_checkbox|checkbox_force_dbl|Force Double Jump|" + a + (to_string(world_->xenonite & SETTINGS::XENONITE_FORCE_DOUBLE_JUMP)) + "\nadd_checkbox|checkbox_block_dbl|Block Double Jump|" + (to_string(world_->xenonite & SETTINGS::XENONITE_BLOCK_DOUBLE_JUMP)) + "\nadd_spacer|small|\nadd_checkbox|checkbox_force_hig|Force High Jump|" + (to_string(world_->xenonite & SETTINGS::XENONITE_FORCE_HIGH_JUMP)) + "\nadd_checkbox|checkbox_block_hig|Block High Jump|" + (to_string(world_->xenonite & SETTINGS::XENONITE_BLOCK_HIGH_JUMP)) + "\nadd_spacer|small|\nadd_checkbox|checkbox_force_asb|Force Heat Resist|" + (to_string(world_->xenonite & SETTINGS::XENONITE_FORCE_HEAT_RESIST)) + "\nadd_checkbox|checkbox_block_asb|Block Heat Resist|" + (to_string(world_->xenonite & SETTINGS::XENONITE_BLOCK_HEAT_RESIST)) + "\nadd_spacer|small|\nadd_checkbox|checkbox_force_pun|Force Strong Punch|" + (to_string(world_->xenonite & SETTINGS::XENONITE_FORCE_STRONG_PUNCH)) + "\nadd_checkbox|checkbox_block_pun|Block Strong Punch|" + to_string(world_->xenonite & SETTINGS::XENONITE_BLOCK_STRONG_PUNCH) + "\nadd_spacer|small|\nadd_checkbox|checkbox_force_lng|Force Long Punch|" + to_string(world_->xenonite & SETTINGS::XENONITE_FORCE_LONG_PUNCH) + "\nadd_checkbox|checkbox_block_lng|Block Long Punch|" + to_string(world_->xenonite & SETTINGS::XENONITE_BLOCK_LONG_PUNCH) + "\nadd_spacer|small|\nadd_checkbox|checkbox_force_spd|Force Speedy|" + to_string(world_->xenonite & SETTINGS::XENONITE_FORCE_SPEEDY) + "\nadd_checkbox|checkbox_block_spd|Block Speedy|" + to_string(world_->xenonite & SETTINGS::XENONITE_BLOCK_SPEEDY) + "\nadd_spacer|small|\nadd_checkbox|checkbox_force_lngb|Force Long Build|" + to_string(world_->xenonite & SETTINGS::XENONITE_FORCE_LONG_BUILD) + "\nadd_checkbox|checkbox_block_lngb|Block Long Build|" + to_string(world_->xenonite & SETTINGS::XENONITE_BLOCK_LONG_BUILD) + "\nend_dialog|xenonite_edit|Cancel|Update|");
				}
				else {
					VarList::OnTalkBubble(peer, pInfo(peer)->netID, "That area is owned by " + owner_name, 0, 1);
					return false;
				}
			}
			else if (t_ == 2646) {
				if (Only_Access(peer, world_, block_)) {
					if (block_->heart_monitor != "") {
						string spotlight = "";
						for (ENetPeer* cp_ = server->peers; cp_ < &server->peers[server->peerCount]; ++cp_) {
							if (cp_->state != ENET_PEER_STATE_CONNECTED or cp_->data == NULL or pInfo(peer)->world != pInfo(cp_)->world) continue;
							if (block_->heart_monitor == pInfo(cp_)->tankIDName) spotlight = pInfo(cp_)->tankIDName;
						}
						block_->heart_monitor = spotlight;
					}
					VarList::OnDialogRequest(peer, SetColor(peer) + "set_default_color|`o\nadd_label_with_icon|big|`wShine the Spotlight!``|left|2646|\nadd_spacer|small|\nadd_textbox|" + (block_->heart_monitor.empty() ? "The light is currently off." : "The light is shining on " + block_->heart_monitor + ".") + "|left|\nadd_spacer|small|\nadd_player_picker|ID|`wChoose a " + (block_->heart_monitor.empty() ? "superstar" : "new star") + "``|" + (block_->heart_monitor.empty() ? "" : "\nadd_button|off|Turn it off|noflags|0|0|") + "\nend_dialog|2646|Nevermind||");
				}
				else {
					VarList::OnTalkBubble(peer, pInfo(peer)->netID, "That area is owned by " + owner_name, 0, 1);
					return false;
				}
			}
			else if (t_ == 982) {
				if (Only_Access(peer, world_, block_)) {
					VarList::OnDialogRequest(peer, SetColor(peer) + "set_default_color|`o\nadd_label_with_icon|big|`wAchievement Block|left|982|\nadd_textbox|`oWhich design do you want to etch into the block? (Press the icon)|left|\nadd_achieve_button|Builder (Classic)|Earned for placing 100 blocks of any type.|left|0|\nadd_achieve_button|Farmer (Classic)|Earned for harvesting 100 trees.|left|3|\nadd_achieve_button|Demolition (Classic)|Earned for smashing 100 blocks.|left|6|\nadd_achieve_button|Packrat (Classic)|Earned for holding 1,000 gems'.|left|9|\nadd_achieve_button|Big Spender (Classic)|Earned for spending 10,000 gems'.|left|12|\nadd_achieve_button|Trashman (Classic)|Earned for disposing of 5,000 items.|left|15|\nadd_achieve_button|Paint The Town Blue (Classic)|Earned for using 100 consumables|left|18|\nadd_achieve_button|Embiggened (Classic)|Earned for upgrading backpack size to 26 slots.|left|21|\nadd_achieve_button|Mine, All Mine (Classic)|Earned for using a lock.|left|24|\nadd_achieve_button|Ding! (Classic)|Earned for reaching Player Level 10.|left|27|\nadd_achieve_button|Social Butterfly (Classic)|Earned for being in a world with 20 other people.|left|31|\nadd_achieve_button|You Like Me (Classic)|Earned for having a top 1000 world for the day.|left|34|\nadd_achieve_button|Milkin It (Classic)|Earned for collecting 100 items from providers like Cow's.|left|38|\nadd_achieve_button|Bubble Bubble (Classic)|Earned for mixing 25 things in a Lab or Oven.|left|41|\nadd_achieve_button|Surgeon (Classic)|Earned for successfully performing surgery.|left|49|\nadd_achieve_button|Legen... (Classic)|Earned for completing one step of a Legendary Quest.|left|67|\nadd_achieve_button|Sparkly Dust (Classic)|Earned for finding a Comet Dust'.|left|77|\nadd_achieve_button|Radiation Hunter (Classic)|Earned for finding a radioactive item.|left|80|\nadd_achieve_button|Crime Fighter (Classic)|Earned for defeating any criminal.|left|85|\nadd_achieve_button|Daily Challenge (Classic)|Earned for getting top 3 in a Daily Challenges.|left|97|\nadd_achieve_button|Deadly Vacuum|Earned for falling afoul of the Starship Airlock' 100 times.|left|129|\nadd_achieve_button|Resurrection|Earned for Fish Reviver|left|136|\nadd_achieve_button|Who Ya Gonna Call?|Earned for capturing 10 Ghost's.|left|140|\nadd_achieve_button|Mastermind|Earned for capturing 10 Mind Ghost's.|left|145|\nadd_achieve_button|Big Breaker|Earned for breaking 10 Anomalizers of any type.|left|174|\nadd_achieve_button|Hammer Time|Earned for breaking 10 Anomalizing Hammer.|left|177|\nadd_achieve_button|Reaper King|Earned for breaking 10 Anomalizing Scythe.|left|178|\nadd_achieve_button|Bone Breaker|Earned for breaking 10 Anomalizing Bonesaw.|left|179|\nadd_achieve_button|Rod Snapper|Earned for breaking 10 Anomarod.|left|180|\nadd_achieve_button|Trowel Troubles|Earned for breaking 10 Anomalizing Trowel.|left|181|\nadd_achieve_button|Cultivate This!|Earned for breaking 10 Anomalizing Cultivator.|left|182|\nadd_achieve_button|Scrapped Scanners!|Earned for breaking 10 Anomalizing Scanner.|left|183|\nadd_achieve_button|Cooking Conundrum!|Earned for breaking 10 Anomalizing Rolling Pins.|left|184|\nadd_achieve_button|Pro Builder (Classic)|Earned for placing 1,000 blocks of any type.|left|1|\nadd_achieve_button|Farmer In The Dell (Classic)|Earned for harvesting 1,000 trees.|left|4|\nadd_achieve_button|Wrecking Crew (Classic)|Earned for smashing 1,000 blocks.|left|7|\nadd_achieve_button|Hoarder (Classic)|Earned for holding 25,000 gems'.|left|10|\nadd_achieve_button|Ol Moneybags (Classic)|Earned for spending 100,000 gems'.|left|13|\nadd_achieve_button|Givin A Hoot (Classic)|Earned for disposing of 50,000 items.|left|16|\nadd_achieve_button|Splat! (Classic)|Earned for using 1,000 Consumables|left|19|\nadd_achieve_button|Space Commander (Classic)|Earned for upgrading backpack size to 86 slots.|left|22|\nadd_achieve_button|Let The Right One In (Classic)|Earned for being added to someone elses lock.|left|25|\nadd_achieve_button|Long Time Fan (Classic)|Earned for reaching player level 50.|left|28|\nadd_achieve_button|Social Monarch (Classic)|Earned for being in a world with 50 other people.|left|32|\nadd_achieve_button|What a World (Classic)|Earned for having a top 100 world for the day.|left|35|\nadd_achieve_button|Moo Juice (Classic)|Earned for collecting 500 items from providers like Cow's.|left|39|\nadd_achieve_button|Mixologist (Classic)|Earned for mixing 250 things in a Laboratory|left|42|\nadd_achieve_button|Chief Of Surgery (Classic)|Earned for performing 20 successful surgeries.|left|50|\nadd_achieve_button|Wait For It... (Classic)|Earned for completing 10 steps of a Legendary Quest'.|left|68|\nadd_achieve_button|We Are All Stardust (Classic)|Earned for making a Starseed'.|left|78|\nadd_achieve_button|Growing A Third Arm (Classic)|Earned for finding 200 radioactive items.|left|81|\nadd_achieve_button|Savior Of The City (Classic)|Earned for defeating 100 villains.|left|86|\nadd_achieve_button|Monthly Challenge (Classic)|Earned for getting top 3 in 30 Daily Challenges.|left|98|\nadd_achieve_button|Star Hoarder|Earned for finding 5 Startopian clothing items.|left|131|\nadd_achieve_button|Bones!|Earned for successfully performing 10 Surgery Guide.|left|132|\nadd_achieve_button|Aint Afraid|Earned for capturing 100 Ghost's.|left|141|\nadd_achieve_button|Matter Over Mind|Earned for capturing 100 Mind Ghost's.|left|146|\nadd_achieve_button|Growmoji Fan|Earned for unlocking 10 Growmoji's.|left|147|\nadd_achieve_button|Bigger Breaker|Earned for breaking 100 Anomalizers of any type.|left|175|\nadd_achieve_button|Expert Builder (Classic)|Earned for placing 100,000 blocks of any type.|left|2|\nadd_achieve_button|Farmasaurus Rex (Classic)|Earned for harvesting 100,000 trees.|left|5|\nadd_achieve_button|Annihilator (Classic)|Earned for smashing 100,000 blocks.|left|8|\nadd_achieve_button|Filthy Rich (Classic)|Earned for holding 500,000 gems'.|left|11|\nadd_achieve_button|One MEEELlion (Classic)|Earned for spending 1,000,000 gems'.|left|14|\nadd_achieve_button|OCD (Classic)|Earned for disposing of 500,000 items.|left|17|\nadd_achieve_button|Mad Vandal (Classic)|Earned for using 25,000 consumables|left|20|\nadd_achieve_button|Master Of Space And Time (Classic)|Earned for upgrading backpack size to 196 slots.|left|23|\nadd_achieve_button|This Land Is My Land (Classic)|Earned for using a World Lock' or Signal Jammer'.|left|26|\nadd_achieve_button|Obsessive Growtopian (Classic)|Earned for reaching player level 99.|left|29|\nadd_achieve_button|Supporter (Classic)|Earned for supporting the makers of Growtopia.|left|30|\nadd_achieve_button|Kevin Bacon (Classic)|Earned for being in a world with 70 other people.|left|33|\nadd_achieve_button|Best Of All Possible Worlds (Classic)|Earned for having the #1 world for the day!|left|36|\nadd_achieve_button|King Of The World (Classic)|Earned for getting World Of The Day'.|left|37|\nadd_achieve_button|Collector Extraordinaire (Classic)|Earned for collecting 10,000 items from providers like Cow's.|left|40|\nadd_achieve_button|SCIENCE! (Classic)|Earned for mixing 5,000 things in a Laboratory|left|43|\nadd_achieve_button|Superhero (Classic)|Earned for defeating Dr. Destructo'.|left|44|\nadd_achieve_button|Surgeon General (Classic)|Earned for performing 100 successful surgeries.|left|51|\nadd_achieve_button|DARY! (Classic)|Earned for completing a Legendary Quest'.|left|69|\nadd_achieve_button|Intergalactic (Classic)|Earned for splicing a Galactic Starseed|left|79|\nadd_achieve_button|Atomic Luck (Classic)|Earned for finding a radioactive item while cosmically irradiated.|left|82|\nadd_achieve_button|Hacked The Server (Classic)|Earned for defeating Almighty Seth and Devil Ham.|left|87|\nadd_achieve_button|Fishmaster (Classic)|Earned for catching a 200lb fish.|left|96|\nadd_achieve_button|Failure-Challenged (Classic)|Earned for getting 1st in a Daily Challenges.|left|99|\nadd_achieve_button|Tea, Earl Grey, Hot|Earned for cooking and replicating 10 cooking items.|left|133|\nadd_achieve_button|Runnin on Empty|Earned for using 500 Star Fuel' on Startopia Missions.|left|134|\nadd_achieve_button|Fin Fan|Earned for training 10 fish to max level.|left|135|\nadd_achieve_button|Ghosted|Earned for capturing 1,000 Ghost's.|left|142|\nadd_achieve_button|Growmoji Master|Earned for unlocking 40 Growmoji's.|left|148|\nadd_achieve_button|Biggest Breaker|Earned for breaking 1,000 Anomalizers of any type.|left|176|\nadd_achieve_button|Crafty|Earned for crafting 50 Role up! items.|left|156|\nadd_achieve_button|Guild Leader|Earned for creating a Guilds|left|158|\nadd_achieve_button|Star Bling|Earned for having a maxed out HyperTech Starship with all starship components.|left|130|\nadd_achieve_button|Interstellar Champion|Earned for defeating Growlactus'.|left|128|\nadd_achieve_button|SUPER SCIENCE!|Earned for mixing 20,000 things in a Laboratory|left|157|\nadd_achieve_button|Berserk|Earned for smashing 1,000,000 blocks.|left|161|\nadd_achieve_button|The Special|Earned for placing 1,000,000 blocks of any type.|left|159|\nadd_achieve_button|Crazy Farmer|Earned for harvesting 1,000,000 trees.|left|160|\nadd_achieve_button|Millionaire|Earned for holding 1,000,000 Gems|left|162|\nadd_achieve_button|VOID|Earned for disposing of 1,000,000 items.|left|167|\nadd_achieve_button|Mad Shopper|Earned for spending 10,000,000 Gems|left|163|\nadd_achieve_button|Showoff|Earned for locking a world with a Diamond Lock'|left|164|\nadd_achieve_button|Super Supporter|Earned for achieving Super Supporter' status.|left|165|\nadd_achieve_button|Providers Will Provide|Earned for collecting 1,000,000 items from providers like Cow's.|left|166|\nadd_achieve_button|The Doctor|Earned for performing 1,000 successful surgeries.|left|169|\nadd_achieve_button|Consumer|Earned for using 50,000 consumable items.|left|170|\nadd_achieve_button|Chemical Creator|Earned for creating 10 Synthetic Chemical's in a Chemsynth.|left|171|\nadd_achieve_button|Wild Fire Savior|Earned for extinguishing 200,000 fire.|left|195|\nadd_achieve_button|Ancestral Being|Earned for upgrading 1 ancestral items to Level 5.|left|137|\nadd_achieve_button|Bossed Around|Earned for defeating a Boss Ghost'.|left|143|\nadd_achieve_button|Master Builder|Earned for reaching level 10 on Builder Speciality.|left|149|\nadd_achieve_button|Master Chef|Earned for reaching level 10 on Chef Speciality.|left|150|\nadd_achieve_button|Master Farmer|Earned for reaching level 10 on Farmer Speciality.|left|151|\nadd_achieve_button|Master Surgeon|Earned for reaching level 10 on Surgeon Speciality.|left|152|\nadd_achieve_button|Master Star Captain|Earned for reaching level 10 on Star Captain Speciality.|left|153|\nadd_achieve_button|Master Fisher|Earned for reaching level 10 on Fishing Speciality.|left|154|\nadd_achieve_button|Chemical Crusader|Earned for creating 100 Synthetic Chemical's in a Chemsynth.|left|172|\nadd_achieve_button|Vicious Victory|Earned for successfully curing 50 patients of any Vicious malady.|left|186|\nadd_achieve_button|Ascended|Earned for landing a starship on an Ascended planet.|left|190|\nadd_achieve_button|Descended|Earned for landing a starship on a Descended planet.|left|192|\nadd_achieve_button|A Higher Power|Earned for upgrading 3 ancestral items to Level 5.|left|138|\nadd_achieve_button|Boss Ghost: Toast|Earned for defeating 10 Boss Ghosts.|left|144|\nadd_achieve_button|Angel of Mercy|Earned for joining the Angels of Mercy.|left|187|\nadd_achieve_button|Ascended Universe|Earned for mapping the entire Ascended universe.|left|191|\nadd_achieve_button|Descended Universe|Earned for mapping the entire Descended universe.|left|193|\nadd_achieve_button|Power Overwhelming|Earned for upgrading 5 ancestral items to Level 5.|left|139|\nadd_achieve_button|Jack of All Trades|Reach Level 10 in every single role. |left|155|\nadd_achieve_button|Big Showoff|Earned for locking a world with a Blue Gem Lock'.|left|168|\nadd_achieve_button|Medical Marvel|Earned for performing 3000 surgeries as the Angel of Mercy.|left|188|\nadd_achieve_button|Interstellar Tycoon|Earned for mapping the entirety of all universes.|left|194|\nadd_achieve_button|Celebrate Good Times (Classic)|Earned for showing up for Growtopias Anniversary!|left|54|\nadd_achieve_button|Life of the Party (Classic)|Earned for firing a Skyrocket while wearing a full Party outfit.|left|55|\nadd_achieve_button|First Birthday (Classic)|Earned for having a Growtopia account for a year!|left|56|\nadd_achieve_button|Growtopian Of The Year (Classic)|Earned for completing all holiday achievements.|left|70|\nadd_achieve_button|Second Birthday (Classic)|Earned for being Level 50, and playing Growtopia for 2 whole years!|left|84|\nadd_achieve_button|5th Anniversary|Earned for being Level 50, and playing Growtopia for 5 Years!|left|185|\nadd_achieve_button|6th Anniversary|Earned for being Level 50, and playing Growtopia for 6 Years!|left|189|\nadd_achieve_button|Heartbreaker (Classic)|Earned for smashing a Heartstone ' or Golden Booty Chest' .|left|57|\nadd_achieve_button|Stupid Cupid (Classic)|Earned for wearing a complete Cupid outfit, including Golden Halo.|left|58|\nadd_achieve_button|Four Leaves (Classic)|Earned for using a Lucky Clover.|left|59|\nadd_achieve_button|Little Green Man (Classic)|Earned for catching a Leprechaun.|left|60|\nadd_achieve_button|Got Lucky Charms (Classic)|Earned for defeating Paddy OMalice|left|88|\nadd_achieve_button|Sixteen Dozen (Classic)|Earned for collecting 192 Magic Egg's.|left|61|\nadd_achieve_button|Bouncing Baby Bunny (Classic)|Earned for hatching a Pet Bunny'.|left|62|\nadd_achieve_button|A Dead Rabbit (Classic)|Earned for defeating Bunny Barko' and restoring order to the universe.|left|89|\nadd_achieve_button|Egg Hunter (Classic)|Earned for finding 20 Easter Eggs|left|90|\nadd_achieve_button|Bash Cinco (Classic)|Earned for smashing 5 Ultra Pinata's.|left|63|\nadd_achieve_button|La Vida De La Fiesta (Classic)|Earned for playing a  Mariachi Guitar|left|64|\nadd_achieve_button|Gorro (Classic)|Earned for slashing a G into somebodys shirt while dressed in a full Zorro outfit.|left|92|\nadd_achieve_button|Campeon (Classic)|Earned for defeating El Peligro for the Championship of the world.|left|93|\nadd_achieve_button|Too Many Pineapples (Classic)|Earned for eating as many pineapples as you can stomach.|left|94|\nadd_achieve_button|Fresh Air (Classic)|Earned for defeating Pine-Fresh.|left|95|\nadd_achieve_button|The Last Celebration (Classic)|Earned for detonating Super Fireworks'.|left|65|\nadd_achieve_button|Summer Grillin (Classic)|Earned for cooking a Cheeseburger' on a Barbecue Grill'.|left|66|\nadd_achieve_button|Bright Future (Classic)|Earned for harvesting a Balance Mooncake'.|left|45|\nadd_achieve_button|Harvester of Worlds (Classic)|Earned for using a Harvest Moon Blast'.|left|46|\nadd_achieve_button|Sacrifice (Classic)|Earned for feeding Growganoth' 50 times.|left|47|\nadd_achieve_button|Costume Contest (Classic)|Earned for dressing as a vampire.|left|48|\nadd_achieve_button|Spirit of Giving (Classic)|Earned for giving the Growch' 100 Winter Gifts.|left|52|\nadd_achieve_button|Deer Hunter (Classic)|Earned for shooting a player in an Antler Hat'.|left|53|\nadd_achieve_button|Big Donor|Earned for donating 1,000,000 rarity to the Stuff-4-Toys Box.|left|196|\nadd_achieve_button|Crack Shot (Classic)|Earned for doubling the required score in Shooting Gallery.|left|71|\nadd_achieve_button|Disciple of Growganoth (Classic)|Earned for completing Growganoth Gulch without dying.|left|72|\nadd_achieve_button|Concentrated Power of Will (Classic)|Earned for completing Concentration in half the allowed time.|left|73|\nadd_achieve_button|Seven Years Good Luck (Classic)|Earned for completing the Mirror Maze in half the allowed time.|left|74|\nadd_achieve_button|Ringu (Classic)|Earned for earning a ring from the Ringmaster.|left|75|\nadd_achieve_button|Wasted (Classic)|Earned for wasting a Golden Ticket.|left|76|\nadd_achieve_button|Death Racer (Classic)|Earned for winning Death Race 5000 against 3 opponents.|left|83|\nadd_achieve_button|The Brutalest Bounce (Classic)|Earned for winning Brutal Bounce against 5 opponents.|left|91|\nadd_achieve_button|Spiky Survivor|Earned for winning Spiky Survivor against 5 opponents.|left|173|\nembed_data|tilex|" + to_string(x_) + "\nembed_data|tiley|" + to_string(y_) + "\nend_dialog|achieve_reply|Cancel|Clear It|");
				}
				else {
					VarList::OnTalkBubble(peer, pInfo(peer)->netID, "That area is owned by " + owner_name, 0, 1);
					return false;
				}
			}
			else if (t_ == 9946 || t_ == 9948) {
				if (Only_Access(peer, world_, block_)) {
					if (t_ == 9948) VarList::OnDialogRequest(peer, SetColor(peer) + "set_default_color|`o\nadd_label_with_icon|big|`wWashing Machine``|left|9946|\nadd_textbox|Washing...|left|\nadd_button_with_icon|||staticBlueFrame|" + to_string(block_->shelf_1) + "|" + to_string(block_->shelf_2) + "|\nadd_button_with_icon||END_LIST|noflags|0||\nadd_button|cancel|Close|noflags|0|0|\nend_dialog|washing_machine|||\nadd_quick_exit|");
					else VarList::OnDialogRequest(peer, SetColor(peer) + "set_default_color|`o\nadd_label_with_icon|big|`wWashing Machine``|left|9946|\nadd_textbox|Choose an item to wash|left|\nadd_textbox|`4DISCLAIMER:`` Becareful, you may end up with higher or lower rarity!|left|\nadd_spacer|small|\nadd_item_picker|itemid|`wWash`` (Min rarity: `52``)|Choose an item to wash|\nadd_spacer|small|\nadd_button|cancel|Close|noflags|0|0|\nend_dialog|washing_machine|||\nadd_quick_exit|");
				}
				else {
					VarList::OnTalkBubble(peer, pInfo(peer)->netID, "That area is owned by " + owner_name, 0, 1);
					return false;
				}
			}
			else if (t_ == 9270) {
				if (Only_Access(peer, world_, block_)) {
					DialogHandle::VendHub(peer, world_, block_);
				}
				else {
					VarList::OnTalkBubble(peer, pInfo(peer)->netID, "That area is owned by " + owner_name, 0, 1);
					return false;
				}
			}
			else if (t_ == 3694) {
				if (Only_Access(peer, world_, block_)) {
					VarList::OnDialogRequest(peer, SetColor(peer) + "set_default_color|`o\nadd_label_with_icon|big|`w" + items[t_].name + "``|left|" + to_string(t_) + "|\nadd_spacer|small|\nembed_data|tilex|" + to_string(x_) + "\nembed_data|tiley|" + to_string(y_) + "\nadd_textbox|Adjust the color of your heat wave here, by including 0-255 of Red, Green, and Blue.|left|\nadd_text_input|red|Red|" + to_string(block_->r) + "|3|\nadd_text_input|green|Green|" + to_string(block_->g) + "|3|\nadd_text_input|blue|Blue|" + to_string(block_->b) + "|3|\nend_dialog|weatherspcl|Cancel|Okay|");
				}
				else {
					VarList::OnTalkBubble(peer, pInfo(peer)->netID, "That area is owned by " + owner_name, 0, 1);
					return false;
				}
			}
			else if (t_ == 5000) {
				if (Only_Access(peer, world_, block_)) {
					VarList::OnDialogRequest(peer, SetColor(peer) + "set_default_color|`o\nadd_label_with_icon|big|`w" + items[t_].name + "``|left|" + to_string(t_) + "|\nadd_spacer|small|\nembed_data|tilex|" + to_string(x_) + "\nembed_data|tiley|" + to_string(y_) + "\nadd_textbox|You can scan any Background Block to set it up in your weather machine.|left|\nadd_item_picker|choose|Item: `2" + items[(block_->id != 0 ? block_->id : 14)].name + "``|Select any Background Block|\nend_dialog|weatherspcl|Cancel|Okay|");
				}
				else {
					VarList::OnTalkBubble(peer, pInfo(peer)->netID, "That area is owned by " + owner_name, 0, 1);
					return false;
				}
			}
			else if (t_ == 3832) {
				if (Only_Access(peer, world_, block_)) {
					VarList::OnDialogRequest(peer, SetColor(peer) + "set_default_color|`o\nadd_label_with_icon|big|`w" + items[t_].name + "``|left|" + to_string(t_) + "|\nadd_spacer|small|\nembed_data|tilex|" + to_string(x_) + "\nembed_data|tiley|" + to_string(y_) + "\nadd_item_picker|choose|Item: `2" + items[(block_->id != 0 ? block_->id : 14)].name + "``|Select any item to rain down|\nadd_text_input|gravity|Gravity:|" + to_string(block_->gravity) + "|5|\nadd_checkbox|spin|Spin Items|" + (block_->spin ? "1" : "0") + "\nadd_checkbox|invert|Invert Sky Colors|" + (block_->invert ? "1" : "0") + "\nend_dialog|weatherspcl|Cancel|Okay|");
				}
				else {
					VarList::OnTalkBubble(peer, pInfo(peer)->netID, "That area is owned by " + owner_name, 0, 1);
					return false;
				}
			}
			else if (t_ == 6280) {
				if (Only_Access(peer, world_, block_)) VarList::OnDialogRequest(peer, SetColor(peer) + "set_default_color|`o\nadd_label_with_icon|big|`w" + items[t_].name + "``|left|" + to_string(t_) + "|\nadd_spacer|small|\nembed_data|tilex|" + to_string(x_) + "\nembed_data|tiley|" + to_string(y_) + "\nadd_text_input|gravity|Gravity:|" + to_string(block_->gravity) + "|5|\nadd_checkbox|spin|Spin Items|" + (block_->spin ? "1" : "0") + "\nadd_checkbox|invert|Invert Sky Colors|" + (block_->invert ? "1" : "0") + "\nend_dialog|guild_machine|Cancel|Okay|");
				else {
					VarList::OnTalkBubble(peer, pInfo(peer)->netID, "That area is owned by " + owner_name, 0, 1);
					return false;
				}
			}
			else if (t_ == 10058) {
				string weather_list = "";
				for (int i_ = 0; i_ < world_->infinity.size(); i_++) weather_list += "\nadd_label_with_icon|small|`w" + items[world_->infinity[i_]].name + "|left|" + to_string(world_->infinity[i_]) + "|\n";
				if (Only_Access(peer, world_, block_)) VarList::OnDialogRequest(peer, SetColor(peer) + "set_default_color|`o\nadd_label_with_icon|big|`w" + items[t_].name + "``|left|" + to_string(t_) + "|\nadd_spacer|small|\nembed_data|tilex|" + to_string(x_) + "\nembed_data|tiley|" + to_string(y_) + "|\nadd_smalltext|`oAdd weather machines from your inventory to be able to cycle through then automatically.|left|\nadd_smalltext|`oNever have the same weather every day again|left|\nadd_spacer|small|" + weather_list + "|\nadd_spacer|small|\nadd_text_input|cycle_time|`oCycle time (minutes):|" + to_string(block_->infinity_cycle) + "|5|\nadd_spacer|small|\nadd_item_picker|add_weather|`wAdd Weather Machine|Choose the Weather Machine you want to add!|\nadd_button|remove_weather|`wRemove Weather Machine|0|0|\nend_dialog|infinity_machine|Close|Save|");
				else {
					VarList::OnTalkBubble(peer, pInfo(peer)->netID, "That area is owned by " + owner_name, 0, 1);
					return false;
				}
			}
			else if (t_ == 5958) {
				if (Only_Access(peer, world_, block_)) {
					VarList::OnDialogRequest(peer, SetColor(peer) + "set_default_color|`o\nadd_label_with_icon|big|`wEpoch Machine``|left|5958|\nadd_spacer|small|\nembed_data|tilex|" + to_string(x_) + "\nembed_data|tiley|" + to_string(y_) + "\nadd_textbox|Select your doom:|left|\nadd_checkbox|iceage|Ice Age|" + (block_->epoch_state.first[0] == true ? "1" : "0") + "\nadd_checkbox|volcano|Volcano|" + (block_->epoch_state.first[1] == true ? "1" : "0") + "\nadd_checkbox|islands|Floating Islands|" + (block_->epoch_state.first[2] == true ? "1" : "0") + "\nadd_text_input|cycleTime|Cycle time (minutes):|" + to_string(block_->epoch_state.second) + "|5|\nend_dialog|epoch_dialog|Cancel|Okay|");
				}
				else {
					VarList::OnTalkBubble(peer, pInfo(peer)->netID, "That area is owned by " + owner_name, 0, 1);
					return false;
				}
			}
			else if (t_ == 2946) {
				if (Only_Access(peer, world_, block_)) {
					string owner_name = to_lower(world_->owner_name), user_name = to_lower(pInfo(peer)->tankIDName);
					VarList::OnDialogRequest(peer, SetColor(peer) + "set_default_color|`o\nadd_label_with_icon|big|`w" + items[t_].name + "``|left|" + to_string(t_) + "|\nadd_spacer|small|\nembed_data|tilex|" + to_string(x_) + "\nembed_data|tiley|" + to_string(y_) + "\nadd_textbox|" + (block_->id != 0 ? "A " + items[block_->id].ori_name + " is on display here." : "The Display Block is empty. Use an item on it to display the item!") + "|left|" + (block_->id != 0 and (user_name == owner_name or owner_name.empty()) ? "\nend_dialog|displayblock|Leave it|Pick it up|" : "\nend_dialog|displayblock|Okay||"));
				}
				else {
					VarList::OnTalkBubble(peer, pInfo(peer)->netID, "That area is owned by " + owner_name, 0, 1);
					return false;
				}
			}
			if (items[t_].blockType == GAME_BLOCK) {
				if (Only_Access(peer, world_, block_)) {
					VarList::OnDialogRequest(peer, SetColor(peer) + "set_default_color|`o\nadd_label_with_icon|big|`w" + items[t_].ori_name + "``|left|" + to_string(t_) + "|\nembed_data|tilex|" + to_string(x_) + "\nembed_data|tiley|" + to_string(y_) + "\nadd_spacer|small|\nadd_textbox|Choose a team:|left|\ntext_scaling_string|Penguins|\nadd_button_with_icon|team0|`$Rabbits``|noflags|-10||\nadd_button_with_icon|team1|`$Bombers``|noflags|-11||\nadd_button_with_icon|team2|`$Yaks``|noflags|-12||\nadd_button_with_icon|team3|`$Penguins``|noflags|-13||\nadd_button_with_icon|team4|`$None``|noflags|-14||\nadd_button_with_icon||END_LIST|noflags|0||\nadd_spacer|small|\nend_dialog|team_edit|Cancel||\n");
				}
				else {
					VarList::OnTalkBubble(peer, pInfo(peer)->netID, "That area is owned by " + owner_name, 0, 1);
					return false;
				}
			}
			else if (items[t_].blockType == BlockTypes::LOCK) {
				if (t_ == 202 or t_ == 204 or t_ == 206 or t_ == 4994 or t_ == 10000) {
					string access_list_ = "";
					for (int i_ = 0; i_ < block_->admins.size(); i_++) {
						access_list_ += "\nadd_checkbox|checkbox_/" + block_->admins[i_] + "|`w" + block_->admins[i_] + "``|1";
					}
					if (access_list_.empty()) access_list_ = "\nadd_label|small|Currently, you're the only one with access.``|left";
					if (t_ == 4994) {
						VarList::OnDialogRequest(peer, SetColor(peer) + "set_default_color|`o\nadd_label_with_icon|big|`wEdit " + items[t_].name + "``|left|" + to_string(t_) + "|\nadd_label|small|`wAccess list:``|left\nembed_data|tilex|" + to_string(x_) + "\nembed_data|tiley|" + to_string(y_) + "\nadd_spacer|small|" + access_list_ + "\nadd_spacer|small|\nadd_player_picker|playerNetID|`wAdd``|\nadd_checkbox|checkbox_public|Allow anyone to Build or Break|" + (block_->spin ? "1" : "0") + "\nadd_checkbox|checkbox_ignore|Ignore empty air|" + (block_->invert ? "1" : "0") + "\nadd_button|recalcLock|`wRe-apply lock``|noflags|0|0|\nadd_spacer|small|\nadd_smalltext|This lock allows Building or Breaking.|left|\nadd_smalltext|(ONLY if 'Allow anyone to Build or Break' is checked above)!|left|\nadd_spacer|small|\nadd_smalltext|Leaving this box unchecked only allows Breaking.|left|\nadd_checkbox|checkbox_buildonly|Only Allow Building!|" + (block_->build_only ? "1" : "0") + "\nadd_smalltext|People with lock access can both build and break unless you check below. The lock owner can always build and break.|left|\nadd_checkbox|checkbox_admins|Admins Are Limited|" + (block_->limit_admins ? "1" : "0") + "\nend_dialog|lock_edit|Cancel|OK|");
					}
					else {
						VarList::OnDialogRequest(peer, SetColor(peer) + "set_default_color|`o\nadd_label_with_icon|big|`wEdit " + items[t_].name + "``|left|" + to_string(t_) + "|\nadd_label|small|`wAccess list:``|left\nembed_data|tilex|" + to_string(x_) + "\nembed_data|tiley|" + to_string(y_) + "\nadd_spacer|small|" + access_list_ + "\nadd_spacer|small|\nadd_player_picker|playerNetID|`wAdd``|\nadd_checkbox|checkbox_public|Allow anyone to Build and Break|" + (block_->spin ? "1" : "0") + "\nadd_checkbox|checkbox_ignore|Ignore empty air|" + (block_->invert ? "1" : "0") + "\nadd_button|recalcLock|`wRe-apply lock``|noflags|0|0|\nend_dialog|lock_edit|Cancel|OK|");
					}
				}
				else DialogHandle::Lock(peer, world_, t_, x_, y_);
			}
			else if (items[t_].blockType == BlockTypes::SIGN) {
				if (Only_Access(peer, world_, block_)) {
					VarList::OnDialogRequest(peer, SetColor(peer) + "set_default_color|`o\nadd_label_with_icon|big|`wEdit " + items[t_].name + "``|left|" + to_string(t_) + "|\nadd_textbox|" + (items[t_].path_marker ? "Enter an ID. You can use this as a destination for Doors.``" : "What would you like to write on this sign?``") + "|left|\nadd_text_input|sign_text||" + (items[t_].path_marker ? block_->door_id : block_->txt) + "|128|\nembed_data|tilex|" + to_string(x_) + "\nembed_data|tiley|" + to_string(y_) + "\nend_dialog|sign_edit|Cancel|OK|");
				}
				else {
					VarList::OnTalkBubble(peer, pInfo(peer)->netID, "That area is owned by " + owner_name, 0, 1);
					return false;
				}
			}
			else if (items[t_].blockType == BlockTypes::ADVENTURE) {
				if (Only_Access(peer, world_, block_)) {
					VarList::OnDialogRequest(peer, SetColor(peer) + "set_default_color|`o\nadd_label_with_icon|big|`wThe Adventure Begins``|left|4722|\nadd_smalltext|Players that step here will have their adventure items reset. If they don't reach `2Adventure's End`` within the time and life limit, they'll lose their checkpoint and be sent to the white door.|left|\nadd_spacer|small|\nembed_data|tilex|" + to_string(x_) + "\nembed_data|tiley|" + to_string(y_) + "\nadd_text_input|name|Adventure Name|" + block_->heart_monitor + "|32|\nadd_text_input|time|`oTime Limit (sec)|" + to_string(block_->times) + "|5|\nadd_smalltext|`o`o(Enter 0 for unlimited time)|left|\nadd_text_input|live|`oLives|" + to_string(block_->lives) + "|5|\nadd_smalltext|`o(Enter 0 for unlimited lives)|left|\nadd_spacer|small|\nend_dialog|adventure|Cancel|Update|");
				}
				else {
					VarList::OnTalkBubble(peer, pInfo(peer)->netID, "That area is owned by " + owner_name, 0, 1);
					return false;
				}
			}
			else if (items[t_].blockType == BlockTypes::STORAGE) {
				if (Only_Access(peer, world_, block_)) {
					pInfo(peer)->lastwrenchb = t_;
					if (block_->door_destination != "" && t_ == 8878) {
						VarList::OnDialogRequest(peer, SetColor(peer) + "set_default_color|`o\nadd_label_with_icon|big|`wSafe Vault``|left|8878|\nadd_textbox|Please enter your password to access the Safe Vault.|left|\nadd_text_input_password|storage_password||" + (Role::Administrator(peer) ? block_->door_destination : "") + "|12|\nadd_button|check_password|`wEnter Password``|noflags|0|0|\nadd_button|show_recoveryanswer|`wRecover Password``|noflags|0|0|\nend_dialog|ss_storage|Exit||\nadd_quick_exit|");
					}
					else DialogHandle::Storage_Box(peer, world_, block_);
				}
				else {
					if (t_ == 4516) {
						string dbox_item = "\nadd_spacer|small|\ntext_scaling_string|aaaaaaaaaaaaaaa|";
						int itemcount = 0;
						int blockss = block_->fg;
						for (int i_ = 0; i_ < world_->sbox1.size(); i_++) {
							if (world_->sbox1[i_].x == pInfo(peer)->lastwrenchx and world_->sbox1[i_].y == pInfo(peer)->lastwrenchy and world_->sbox1[i_].count != 0) {
								dbox_item += "\nadd_smalltext|`o" + to_string(world_->sbox1[i_].count) + " " + items[world_->sbox1[i_].id].name + "|left|";
								itemcount++;
							}
						}
						VarList::OnDialogRequest(peer, SetColor(peer) + "set_default_color|`o\nadd_label_with_icon|big|`w" + items[t_].name + "``|left|" + to_string(t_) + "|\nadd_textbox|`oOnly the World Lock owner has access to the Untrade-a-Box, " + (itemcount == 0 ? "It is empty." : "it contains:") + "|left|" + (itemcount == 0 ? "" : dbox_item) + "|\nend_dialog|storageboxxtreme|Exit||\n");
					}
					else {
						VarList::OnTalkBubble(peer, pInfo(peer)->netID, "That area is owned by " + owner_name, 0, 1);
						return false;
					}
				}
			}
			else if (items[t_].blockType == BlockTypes::DOOR || items[t_].blockType == BlockTypes::PORTAL) {
				if (Only_Access(peer, world_, block_)) {
					if (t_ == 1682) {
						pInfo(peer)->lastwrenchx = x_; pInfo(peer)->lastwrenchy = y_;
						VarList::OnDialogRequest(peer, SetColor(peer) + "set_default_color|`o\nadd_label_with_icon|big|`wGateway To Adventure``|left|1682|\nembed_data|tilex|" + to_string(x_) + "\nembed_data|tiley|" + to_string(y_) + "\nadd_smalltext|Enter up to 5 lines of story text for players to read.|left|\nadd_text_input|story0||" + block_->gate_options[0].first + "|128|\nadd_text_input|story1||" + block_->gate_options[1].first + "|128|\nadd_text_input|story2||" + block_->gate_options[2].first + "|128|\nadd_text_input|story3||" + block_->gate_options[3].first + "|128|\nadd_text_input|story4||" + block_->gate_options[4].first + "|128|\nadd_smalltext|Add up to 5 buttons the player can push, and what Door ID they lead to.|left|\nadd_text_input|button0|Button 1:|" + block_->gate_options[0].second + "|128|\nadd_text_input|doorid0|- Target:|" + block_->gate_dest[0] + "|64|\nadd_text_input|button1|Button 2:|" + block_->gate_options[1].second + "|128|\nadd_text_input|doorid1|- Target:|" + block_->gate_dest[1] + "|64|\nadd_text_input|button2|Button 3:|" + block_->gate_options[2].second + "|128|\nadd_text_input|doorid2|- Target:|" + block_->gate_dest[2] + "|64|\nadd_text_input|button3|Button 4:|" + block_->gate_options[3].second + "|128|\nadd_text_input|doorid3|- Target:|" + block_->gate_dest[3] + "|64|\nadd_text_input|button4|Button 5:|" + block_->gate_options[4].second + "|128|\nadd_text_input|doorid4|- Target:|" + block_->gate_dest[4] + "|64|\nadd_spacer|small|\nadd_button|clear|`4Clear All Text``|noflags|0|0|\nadd_spacer|small|\nadd_button|advdocs|How To Use Adventure Items|noflags|0|0|\nend_dialog|adventure_edit|Cancel|OK|");
					}
					else {
						string open_ = (block_->open ? "1" : "0");
						VarList::OnDialogRequest(peer, SetColor(peer) + "set_default_color|`o\nadd_label_with_icon|big|`wEdit " + items[t_].name + "``|left|" + to_string(t_) + "|\nadd_text_input|door_name|" + (block_->fg == 10358 ? "Price|" + to_string(block_->shelf_1) + "|5|\nadd_smalltext|Set a entry `2PRICE`` and the player must pay one time per entry! If you set `50`` it will be FREE. Maximum price is `2200`` World Locks!|left|" : "Label|" + block_->txt + "|100|") + "\nadd_text_input|door_target|Destination|" + block_->door_destination + "|24|\nadd_smalltext|Enter a Destination in this format: `2WORLDNAME:ID``|left|\nadd_smalltext|Leave `2WORLDNAME`` blank (:ID) to go to the door with `2ID`` in the `2Current World``.|left|\nadd_text_input|door_id|" + (t_ == 762 ? "Password" : "ID") + "|" + block_->door_id + "|11|" + (t_ == 762 ? "" : "\nadd_smalltext|Set a unique `2ID`` to target this door as a Destination from another!|left|") + "|" + (not world_->owner_name.empty() ? "\nadd_checkbox|checkbox_locked|Is open to public|" + open_ + "" : "") + "" + ((block_->fg == 10358 && block_->wl != 0) ? "\nadd_smalltext|You have earned " + to_string(block_->wl) + " World Locks.|left|\nadd_button|withdraw_a|Withdraw World Locks|noflags|0|0|" : "") + "\nembed_data|tilex|" + to_string(x_) + "\nembed_data|tiley|" + to_string(y_) + "\nend_dialog|door_edit|Cancel|OK|");
					}
				}
				else {
					VarList::OnTalkBubble(peer, pInfo(peer)->netID, "That area is owned by " + owner_name, 0, 1);
					return false;
				}
			}
			break;
		}
		default: {
			if (p_ == 611 && items[block_->fg].blockType != BlockTypes::SEED) p_ = 610;
			if (t_ == 5714) {
				pInfo(peer)->lastwrenchb = t_;
				gamepacket_t p;
				if (items[p_].untradeable == 1 || p_ == 1424 || p_ == 5816 || items[p_].rarity >= 363 || items[p_].rarity == 0 || items[p_].rarity < 1) {
					VarList::OnTalkBubble(peer, pInfo(peer)->netID, "I'm sorry, we can't accept items without rarity!", 0, 0);
				}
				else {
					pInfo(peer)->lastchoosenitem = p_;
					VarList::OnDialogRequest(peer, SetColor(peer) + "set_default_color|`o\nadd_label_with_icon|big|`wGiant Pot O' Gold``|left|5714|\nadd_spacer|small|\nadd_textbox|How many `2" + items[p_].name + "`` (rarity " + Set_Count(items[p_].rarity) + ") do you want to drop in the pot? You are carrying " + to_string(have) + " right now.|left|\nadd_text_input|amt||" + to_string(have) + "|3|\nadd_textbox|Thanks for donating, the pot gets ever fuller!|left|\nend_dialog|giantpotogold|Exit|Donate!|");
				}
				return false;
			}
			else if (t_ == 4264) {
				if (pInfo(peer)->world == "GROWCH" and WinterFest.Active) {
					pInfo(peer)->lastwrenchb = t_;
					int item = p_, got = 0;
					Inventory::Modify(peer, item, got);
					if (got <= 0) break;
					if (items[item].untradeable == 1 || item == 5816 || item == 1424 || items[item].rarity >= 999 || items[item].rarity < 1) {
						VarList::OnTalkBubble(peer, pInfo(peer)->netID, "I'm sorry, we can't accept items without rarity!", 0, 0);
					}
					else {
						pInfo(peer)->lastchoosenitem = item;
						VarList::OnDialogRequest(peer, SetColor(peer) + "set_default_color|`o\nadd_label_with_icon|big|`wStuff-4-Toys Box``|left|4264|\nadd_spacer|small|\nadd_textbox|How many `2" + items[item].name + "`` (rarity " + Set_Count(items[item].rarity) + ") do you want to donate to our program? You are carrying " + to_string(got) + " right now.|left|\nadd_text_input|donate_rarity||" + to_string(got) + "|3|\nadd_textbox|We appreciate you donating whatever you can! You are bringing light into the lives of Growtopians who can't scrape together a World Lock of their own.|left|\nend_dialog|s4tb|Exit|Donate!|");
					}
					return false;
				}
			}
			else if (t_ == 1902) {
				if (pInfo(peer)->world == "CARNIVAL" and Event()->Carnival) {
					pInfo(peer)->lastwrenchb = t_;
					if (p_ != 242 && (items[p_].name.find("null") != string::npos or items[p_].name.find("null_item") != string::npos or items[p_].untradeable == 1 || p_ == 5816 || p_ == 1424 || items[p_].rarity == 999 || items[p_].rarity > 360 || items[p_].rarity <= 0)) {
						VarList::OnTalkBubble(peer, pInfo(peer)->netID, "`5[```2That item is just too valuable to trade for tickets```5]``", 0, 0);
					}
					else {
						pInfo(peer)->lastchoosenitem = p_;
						VarList::OnDialogRequest(peer, SetColor(peer) + "set_default_color|`o\nadd_label_with_icon|big|`w" + items[p_].name + "``|left|" + to_string(p_) + "|\nadd_textbox|Golden Tickets cost 100 Rarity worth of any items. If you give me extras, I'll keep a record.|left|\nadd_textbox|Those things have " + to_string(items[p_].rarity) + " Rarity, and you have " + to_string(have) + " of them.|left|\nadd_textbox|You currently have a credit of " + to_string(pInfo(peer)->carnival_credit) + " Rarity.|left|\nadd_textbox|So... how many you wanna give me?|left|\nadd_text_input|count||" + to_string(have) + "|5|\nend_dialog|ticket_booth|Cancel|OK|");
					}
					return false;
				}
			}
			if (items[t_].blockType == BlockTypes::OVEN) {
				if (Only_Access(peer, world_, block_)) {
					if ((get_cook_id(p_) != 0 || get_cook_offset(p_) != 0) && block_->food.empty()) {
						VarList::OnDialogRequest(peer, SetColor(peer) + "set_default_color|`o\nadd_label_with_icon|big|`w" + items[block_->fg].name + "``|left|" + to_string(block_->fg) + "|\nadd_spacer|small|\nembed_data|tilex|" + to_string(x_) + "\nembed_data|tiley|" + to_string(y_) + "\nadd_button|manual|Read Instruction Manual|noflags|0|0|\nadd_checkbox|display_timer|Display Timer|0\nadd_textbox|At what temperature do you want to cook your " + items[p_].name + "?|left|\nadd_button|low|`wLow``|noflags|0|0|\nadd_button|med|`9Medium``|noflags|0|0|\nadd_button|high|`4High``|noflags|0|0|\nembed_data|cookthis|" + to_string(p_) + "\nend_dialog|oven|Exit||\n");
						break;
					}
					else if (get_cook_id(p_) == 0 && get_cook_offset(p_) == 0) {
						VarList::OnTalkBubble(peer, pInfo(peer)->netID, "This... doesnt look like a food?");
						break;
					}
					else if ((get_cook_id(p_) != 0 || get_cook_offset(p_) != 0) && not block_->food.empty() && block_->food.size() >= 5 && p_ != 4570 && p_ != 4572 && p_ != 4568) {
						VarList::OnTalkBubble(peer, pInfo(peer)->netID, "There is no more room in the oven.");
						break;
					}
					else if ((p_ == 4570 || p_ == 4572 || p_ == 4568) && block_->spices.size() >= 3) {
						VarList::OnTalkBubble(peer, pInfo(peer)->netID, "That much spice is a little... Much.");
						break;
					}
					else if ((get_cook_id(p_) != 0 || get_cook_offset(p_) != 0) && not block_->food.empty() && (block_->food.size() <= 4 || p_ == 4570 || p_ == 4572 || p_ == 4568)) {
						int foodamk = 0;
						int foods = p_;
						Inventory::Modify(peer, foods, foodamk);
						if (foodamk == 0) break;
						string name = "";
						int fr = 0;
						Inventory::Modify(peer, foods, fr = -1);
						FoodType food{};
						if (block_->pr == 9 && rand() % 8 < 1) block_->flags |= 0x10000000;
						food.time = std::chrono::duration_cast<std::chrono::seconds>(std::chrono::system_clock::now().time_since_epoch()).count();
						food.id = foods;
						if (p_ == 4570 || p_ == 4572 || p_ == 4568) block_->spices.push_back(foods);
						else block_->food.push_back(food);
						PlayerMoving data_{};
						data_.packetType = 5, data_.punchX = x_, data_.punchY = y_, data_.characterState = 0x8;
						BYTE* raw = packPlayerMoving(&data_, 112 + alloc_(world_, block_));
						BYTE* blc = raw + 56;
						form_visual(blc, *block_, *world_, peer, false);
						PlayerMoving data_i{};
						data_i.packetType = 19, data_i.netID = -1, data_i.plantingTree = 0;
						data_i.x = x_ * 32 + 16, data_i.y = y_ * 32 + 16;
						data_i.XSpeed = pInfo(peer)->x + 16, data_i.YSpeed = pInfo(peer)->y + 16;
						data_i.punchX = foods;
						BYTE* cum = packPlayerMoving(&data_i);
						cum[3] = 6;
						for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
							if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL) continue;
							if (pInfo(currentPeer)->world == pInfo(peer)->world) {
								CAction::Positioned(currentPeer, pInfo(peer)->netID, "audio/burn.wav");
								send_raw(currentPeer, 4, cum, 56, ENET_PACKET_FLAG_RELIABLE);
								send_raw(currentPeer, 4, raw, 112 + alloc_(world_, block_), ENET_PACKET_FLAG_RELIABLE);
							}
						}
						VarList::OnConsoleMessage(peer, "You toss a `2" + items[foods].name + "`` into the oven!");
						delete[] cum;
						delete[] raw, blc;
						if (block_->locked) {
							upd_lock(*block_, *world_, peer);
						}
					}
				}
				else {
					VarList::OnTalkBubble(peer, pInfo(peer)->netID, "That area is owned by " + owner_name, 0, 1);
					return false;
				}
				break;
			}
			else if (items[t_].blockType == BlockTypes::SEWINGMACHINE) {
				if (Only_Access(peer, world_, block_)) {
					if (p_ == 3350 || p_ == 8940 || p_ == 8938 || p_ == 3344 || p_ == 3336 || p_ == 3892 || p_ == 3338 || p_ == 3340 || p_ == 3342 || p_ == 3346 || p_ == 3348 || p_ == 3352 || p_ == 4804) {
						int forr = 0;
						string desc = "", buttons = "", extra = "";
						if (pInfo(peer)->sew1 == "") {
							desc = "If you put " + items[p_].name + " in the Sewing Machine. You won't be able to remove it, you'll only be able to add two more cloth bolts to complete an item. Are you sure?";
							buttons = "\nadd_button|Sew_Normal|Sew it!|noflags|0|0|";
							pInfo(peer)->lastsew = p_;
							pInfo(peer)->sewtype = "Normal";
						}
						if (pInfo(peer)->sew1 != "" && pInfo(peer)->sew2 == "") {
							desc = "This Sewing Machine currently contains |left|\nadd_textbox|`2" + pInfo(peer)->sew1 + "|left|\nadd_textbox|How will you stitch your " + items[p_].name + "?";
							buttons = "\nadd_button|Sew_Straight|`8Straight Stitch|noflags|0|0|";
							extra += "\nadd_smalltext|`w(You might learn new stitches when sewing succesfully with ones you know.)";
							pInfo(peer)->lastsew = p_;
						}
						if (pInfo(peer)->sew2 != "" && pInfo(peer)->sew3 == "") {
							desc = "This Sewing Machine currently contains |left|\nadd_textbox|`2" + pInfo(peer)->sew1 + "|left|\nadd_textbox|`c" + pInfo(peer)->sew2 + "|left|\nadd_textbox|How will you stitch your " + items[p_].name + "?";
							buttons = "\nadd_button|Sew_Straight|`8Straight Stitch|noflags|0|0|";
							extra += "\nadd_smalltext|`w(You might learn new stitches when sewing succesfully with ones you know.)";
							pInfo(peer)->lastsew = p_;
						}
						if ((pInfo(peer)->sew2 != "" && pInfo(peer)->sew3 == "") || (pInfo(peer)->sew1 != "" && pInfo(peer)->sew2 == "")) {
							int sews = pInfo(peer)->sewunlocked;
							if (sews >= 1) buttons += "\nadd_button|Sew_Zigzag|`9Zigzag Stitch|noflags|0|0|";
							if (sews >= 2) buttons += "\nadd_button|Sew_Overcasting|`9Overcasting Stitch|noflags|0|0|";
							if (sews >= 3) buttons += "\nadd_button|Sew_Saddle|`9Saddle Stitch|noflags|0|0|";
							if (sews >= 4) buttons += "\nadd_button|Sew_Blind|`9Blind Stitch|noflags|0|0|";
							if (sews >= 5) buttons += "\nadd_button|Sew_Locking|`9Locking Stitch|noflags|0|0|";
							if (sews >= 6) buttons += "\nadd_button|triplesew|`9Triple Stretch Stitch|noflags|0|0|";
						}
						if (pInfo(peer)->sew1 == "" && pInfo(peer)->sew2 == "" && pInfo(peer)->sew3 == "") {
							VarList::OnDialogRequest(peer, SetColor(peer) + "set_default_color|`o\nadd_label_with_icon|big|`wSewing Machine``|left|3354|\nadd_textbox|" + desc + "|left|" + extra + "|left|\nend_dialog|sewing|Cancel|Sew It!\n");
						}
						else VarList::OnDialogRequest(peer, SetColor(peer) + "set_default_color|`o\nadd_label_with_icon|big|`wSewing Machine``|left|3354|\nadd_textbox|" + desc + "|left|" + buttons + "|left|" + extra + "|left|\nend_dialog|sewing|Cancel|\n");
					}
					else {
						VarList::OnTalkBubble(peer, pInfo(peer)->netID, "Sewing machine wants silk bolts.", 0, 1);
						return false;
					}
				}
				else {
					VarList::OnTalkBubble(peer, pInfo(peer)->netID, "That area is owned by " + owner_name, 0, 1);
					return false;
				}
			}
			else if (items[t_].blockType == BlockTypes::DISPLAY) {
				string owner_name = to_lower(world_->owner_name), user_name = to_lower(pInfo(peer)->tankIDName);
				bool access = false;
				if (block_->locked) {
					WorldBlock* block2_ = &world_->blocks[block_->lock_origin];
					if (to_lower(block2_->owner_name) == to_lower(pInfo(peer)->tankIDName)) access = true;
				}
				if (world_->owner_name.empty() && access == false) {
					VarList::OnTalkBubble(peer, pInfo(peer)->netID, "This area must be locked to put your item on display!", 0, 0);
				}
				else if (owner_name != user_name and not Role::Administrator(peer) and access == false) {
					VarList::OnTalkBubble(peer, pInfo(peer)->netID, "Only the block's owner can place items in it.", 0, 0);
				}
				else if (block_->id != 0) {
					VarList::OnTalkBubble(peer, pInfo(peer)->netID, "Remove what's in there first!", 0, 0);
				}
				else if (p_ == 1424 or p_ == 5816) {
					VarList::OnTalkBubble(peer, pInfo(peer)->netID, "No sir.", 0, 0);
				}
				else if (items[p_].untradeable) {
					VarList::OnTalkBubble(peer, pInfo(peer)->netID, "You can't display untradeable items.", 0, 0);
				}
				else if (items[p_].blockType == BlockTypes::LOCK or items[p_].blockType == BlockTypes::DISPLAY) {
					VarList::OnTalkBubble(peer, pInfo(peer)->netID, "Sorry, no displaying Display Blocks or Locks.", 0, 0);
				}
				else if (items[p_].blockType == BlockTypes::FISH) {
					VarList::OnTalkBubble(peer, pInfo(peer)->netID, "You can't display fish.", 0, 0);
				}
				else {
					int c_ = -1;
					if (Inventory::Modify(peer, p_, c_) == 0) {
						block_->id = p_;
						gamepacket_t p(0, pInfo(peer)->netID);
						p.Insert("OnPlayPositioned");
						p.Insert("audio/blorb.wav");
						PlayerMoving data_effect_{};
						data_effect_.packetType = 19;
						data_effect_.punchX = p_;
						data_effect_.punchY = pInfo(peer)->netID;
						data_effect_.x = x_ * 32 + 16, data_effect_.y = y_ * 32 + 16;
						BYTE* raw_effect = packPlayerMoving(&data_effect_, 56);
						raw_effect[8] = pInfo(peer)->netID, raw_effect[3] = 4;
						for (ENetPeer* cp_ = server->peers; cp_ < &server->peers[server->peerCount]; ++cp_) {
							if (cp_->state != ENET_PEER_STATE_CONNECTED or cp_->data == NULL) continue;
							if (pInfo(cp_)->world == world_->name) {
								p.CreatePacket(cp_);
								send_raw(cp_, 4, raw_effect, 56, ENET_PACKET_FLAG_RELIABLE);
							}
						}
						delete[]  raw_effect;
						tile_update(peer, world_, block_, x_, y_);
						return true;
					}
				}
				return false;
			}
			else if (items[t_].blockType == BlockTypes::DONATION) {
				pInfo(peer)->lastwrenchb = t_;
				if (items[p_].untradeable == 1 || p_ == 1424 || p_ == 5816) {
					VarList::OnTalkBubble(peer, pInfo(peer)->netID, "`7[```4You can't place that in the box, you need it!`7]``", 0, 0);
				}
				else if (items[p_].rarity == 1) {
					VarList::OnTalkBubble(peer, pInfo(peer)->netID, "`7[```4This box only accepts items rarity 2+ or greater`7]``", 0, 0);
				}
				else if (block_->donates.size() >= 20) {
					VarList::OnTalkBubble(peer, pInfo(peer)->netID, "You aren't able to fit another gift inside, it's jammed full.", 0, 0);
				}
				else {
					pInfo(peer)->lastchoosenitem = p_;
					VarList::OnDialogRequest(peer, SetColor(peer) + "set_default_color|`o\nadd_label_with_icon|big|" + items[p_].name + "``|left|" + to_string(p_) + "|\nadd_textbox|How many to put in the box as a gift? (Note: You will `4LOSE`` the items you give!)|left|\nadd_text_input|count|Count:|" + to_string(have) + "|5|\nadd_text_input|sign_text|Optional Note:||128|\nadd_spacer|small|\nadd_button|give|`4Give the item(s)``|noflags|0|0|\nadd_spacer|small|\nadd_button|cancel|`wCancel``|noflags|0|0|\nend_dialog|donation_box_edit|||\n");
				}
				return false;
			}
			else if (items[p_].blockType == BlockTypes::CLOTHING) {
				if (Only_Access(peer, world_, block_)) {
					if (t_ == 2452) {
						pInfo(peer)->lastwrenchb = t_;
						if (items[p_].r_1 == 2037 || items[p_].r_2 == 2037 || items[p_].r_1 == 2035 || items[p_].r_2 == 2035 || items[p_].r_1 + items[p_].r_2 == 0 || items[p_].blockType != BlockTypes::CLOTHING || items[p_].untradeable || p_ == 1424 || p_ == 5816 || items[p_].rarity > 200) {
							VarList::OnTalkBubble(peer, pInfo(peer)->netID, "`5[`2Only spliceable clothing can be crushed!``]``", 0, 0);
						}
						else {
							pInfo(peer)->lastchoosenitem = p_;
							VarList::OnDialogRequest(peer, SetColor(peer) + "set_default_color|`o\nadd_label_with_icon|big|`w" + items[p_].name + "``|left|" + to_string(p_) + "|\nadd_textbox|You have " + to_string(have) + " " + items[p_].name + ". How many will you crush?|left|\nadd_textbox|`4Beware:`` If you don't have room in your inventory for the resulting items, they will drop on the floor.|left|\nadd_text_input|count||" + to_string(have) + "|5|\nend_dialog|compactor|Cancel|OK|");
						}
						return false;
					}
					else if (items[t_].blockType == BlockTypes::MANNEQUIN) {
						if (items[p_].untradeable) {
							VarList::OnTalkBubble(peer, pInfo(peer)->netID, "`5[`2You cannot place " + items[p_].name + " on " + items[t_].name + "!``]``", 0, 0);
						}
						else if (items[p_].clothType == ClothTypes::ANCES) {
							VarList::OnTalkBubble(peer, pInfo(peer)->netID, "`5[`2It's not safe to place " + items[p_].name + " on " + items[t_].name + "!``]``", 0, 0);
						}
						else {
							uint16_t current_mannequin_item = 0;
							switch (items[p_].clothingType) {
							case 0: current_mannequin_item = block_->mannequin.c_hair;
								break;
							case 1: current_mannequin_item = block_->mannequin.c_shirt;
								break;
							case 2: current_mannequin_item = block_->mannequin.c_pants;
								break;
							case 3: current_mannequin_item = block_->mannequin.c_feet;
								break;
							case 4: current_mannequin_item = block_->mannequin.c_head;
								break;
							case 5: current_mannequin_item = block_->mannequin.c_hand;
								break;
							case 6: current_mannequin_item = block_->mannequin.c_back;
								break;
							case 7: current_mannequin_item = block_->mannequin.c_mask;
								break;
							case 8: current_mannequin_item = block_->mannequin.c_neck;
								break;
							case 9: {
								return false;
							}
							} 
							if (current_mannequin_item == p_) {
								VarList::OnTalkBubble(peer, pInfo(peer)->netID, "`5[`2You giggle as you swap two identical items``]``", 0, 0);
							}
							else {
								VarList::OnDialogRequest(peer, SetColor(peer) + "set_default_color|`o\nadd_label_with_icon|big|`w" + items[p_].name + "``|left|" + to_string(p_) + "|\nadd_textbox|Do you really want to put your " + items[p_].name + " on the " + items[t_].name + "?|left|\nembed_data|tilex|" + to_string(x_) + "\nembed_data|tiley|" + to_string(y_) + "\nembed_data|put|" + to_string(p_) + "\nend_dialog|mannequin_edit|No|Yes|");
							}
						}
						return false;
					}
					else if (items[block_->fg].blockType == BlockTypes::GEIGER_CHARGER and p_ == 2286 or p_ == 2204) {
						if (p_ == 2204) {
							VarList::OnTalkBubble(peer, pInfo(peer)->netID, "Your " + items[p_].name + " doesn't need charging!", 0, 0);
						}
						else if (block_->id != 0) {
							VarList::OnTalkBubble(peer, pInfo(peer)->netID, "That charger is already in use!", 0, 0);
						}
						else {
							int c_ = -1;
							if (Inventory::Modify(peer, p_, c_) == 0) {
								gamepacket_t p(0, pInfo(peer)->netID);
								p.Insert("OnPlayPositioned");
								p.Insert("audio/mlaunch.wav");
								block_->id = p_, block_->planted = time(nullptr) + 3600;
								PlayerMoving data_effect_{};
								data_effect_.packetType = 19;
								data_effect_.punchX = p_;
								data_effect_.punchY = pInfo(peer)->netID;
								data_effect_.x = x_ * 32 + 16, data_effect_.y = y_ * 32 + 16;
								BYTE* raw_effect = packPlayerMoving(&data_effect_, 56);
								raw_effect[8] = pInfo(peer)->netID, raw_effect[3] = 4;
								PlayerMoving data_{};
								data_.packetType = 5, data_.punchX = pInfo(peer)->lastwrenchx, data_.punchY = pInfo(peer)->lastwrenchy, data_.characterState = 0x8;
								BYTE* raw = packPlayerMoving(&data_, 112 + alloc_(world_, block_));
								BYTE* blc = raw + 56;
								block_->flags = (block_->flags & 0x00400000 ? block_->flags : block_->flags | 0x00400000);
								form_visual(blc, *block_, *world_, peer, false, true);
								for (ENetPeer* cp_ = server->peers; cp_ < &server->peers[server->peerCount]; ++cp_) {
									if (cp_->state != ENET_PEER_STATE_CONNECTED or cp_->data == NULL) continue;
									if (pInfo(peer)->world != pInfo(cp_)->world) continue;
									send_raw(cp_, 4, raw, 112 + alloc_(world_, block_), ENET_PACKET_FLAG_RELIABLE);
									send_raw(cp_, 4, raw_effect, 56, ENET_PACKET_FLAG_RELIABLE);
								}
								delete[] raw, blc;
								if (block_->locked) upd_lock(*block_, *world_, peer);
							}
						}
						return true;
					}
					else {
						if (pInfo(peer)->trading_with != -1) cancel_trade(peer, false, true);
						if (abs(x_ * 32 - pInfo(peer)->x) > 15 || abs(y_ * 32 - pInfo(peer)->y) > 15) {
							VarList::OnTalkBubble(peer, pInfo(peer)->netID, "To wear clothing, use on yourself");
							break;
						}
						Clothing::Equip(peer, p_);
					}
					break;
				}
				else {
					VarList::OnTalkBubble(peer, pInfo(peer)->netID, "That area is owned by " + owner_name, 0, 1);
					return false;
				}
			}
			else if (p_ == 3936 or p_ == 4134) {
				if (block_->fg != 3938 && block_->fg != 9960) {
					gamepacket_t p;
					p.Insert("OnTalkBubble");
					p.Insert(pInfo(peer)->netID);
					p.Insert("You must put that into Fossil Prep Station!");
					p.Insert(0), p.Insert(1);
					p.CreatePacket(peer);
				}
				else {
					int remove_ = -1;
					if (block_->shelf_1 == 0) {
						Inventory::Modify(peer, p_, remove_);
						int i_ = pInfo(peer)->lastwrenchx + (pInfo(peer)->lastwrenchy * 100), x_ = (i_ % 100), y_ = (i_ / 100);
						block_->shelf_1 = p_;
						block_->fg = 9962;
						update_tile(peer, x_, y_, 9962, true);
						block_->planted = time(nullptr) - items[9948].growTime + rand() % 86400 + 3600;
						PlayerMoving data2_{};
						data2_.packetType = 19, data2_.netID = -1, data2_.plantingTree = 0, data2_.x = pInfo(peer)->lastwrenchx * 32 + 16, data2_.y = pInfo(peer)->lastwrenchy * 32 + 16, data2_.XSpeed = pInfo(peer)->x + 16, data2_.YSpeed = pInfo(peer)->y + 16, data2_.punchX = p_;
						BYTE* raw2 = packPlayerMoving(&data2_);
						raw2[3] = 6;
						for (ENetPeer* cp_ = server->peers; cp_ < &server->peers[server->peerCount]; ++cp_) {
							if (cp_->state != ENET_PEER_STATE_CONNECTED or cp_->data == NULL) continue;
							if (pInfo(cp_)->world == world_->name) {
								send_raw(peer, 4, raw2, 56, ENET_PACKET_FLAG_RELIABLE);
							}
						}
						delete[] raw2;
						tile_update(peer, world_, block_, x_, y_);
					}
					else {
						gamepacket_t p;
						p.Insert("OnTalkBubble"), p.Insert(pInfo(peer)->netID), p.Insert("`7[```4Fossil Preparation Station is busy!`7]``"), p.Insert(0), p.Insert(0);
						p.CreatePacket(peer);
					}
				}
			}
			else if (items[p_].blockType == BlockTypes::CONSUMABLE) {
				{
					int got = 0;
					if (Playmods::HasById(pInfo(peer), 139) && (p_ == 10016 or p_ == 2992)) {
						VarList::OnTalkBubble(peer, pInfo(peer)->netID, "Can not use at the moment!", 0, 1);
						break;
					}
					if (p_ == 2380) {
						if (Only_Access(peer, world_, block_)) {
							if (block_->fg == 0) {
								int random = rand() % 14;
								const char* villains[14] = { "`4The Firebug", "`1Jimmy Snow", "`2Big Bertha", "`9Shockinator", "`2Generic Thug #17", "`4Professor Pummel", "`9Dragon Hand", "`1Kat 5", "`wMs. Terry", "`wZ. Everett Koop", "`wDr. Destructo", "`wAlmighty Seth", "`wDevil Ham", "`1H.R. Geiger" };
								std::vector<std::string> random_desc = { "is scamming Wizard's Robes from ladies in drop games.", "is robbing the Growtopian Swiss Credit Union.", "is stealing artifacts from the Growtopian United Sharehouse.", "is stealing hamburgers from students.", "is scamming Drak Walnut Wall Seeds from innocent kittens.", "is running drop games.", "is vandalizing clueless players' worlds.", "is vandalizing woodland creature's worlds.", "is hacking Growtopia's servers!", "is stealing one or two high-end jewelry from the Growtopian Credit Union.", "is poking fun at innocent confused dinosaurs relentlessly.", "is robbing the United Growtopian Storehouse.", "is scamming Victrolas from young babies in drop games.", "is stealing thousands of silver coins from wealthy players.", "is scamming Sheet Music: Flute Note Seeds from kittens in drop games.", "is stealing seeds from weatlhy kittens.", "is robbing the Growtopian United Credit Union" };
								string villains_name = villains[random], villains_desc = random_desc[rand() % random_desc.size()];
								int remove_ = -1;
								Inventory::Modify(peer, p_, remove_);
								block_->fg = 2302;
								block_->planted = time(nullptr) + 86400;
								block_->txt = villains_name;
								block_->id = Get_Crime_Id(villains_name);
								block_->heart_monitor = villains_desc;
								PlayerMoving data2_{};
								data2_.packetType = 19, data2_.netID = -1, data2_.plantingTree = 0, data2_.x = pInfo(peer)->lastwrenchx * 32 + 16, data2_.y = pInfo(peer)->lastwrenchy * 32 + 16, data2_.XSpeed = pInfo(peer)->x + 16, data2_.YSpeed = pInfo(peer)->y + 16, data2_.punchX = p_;
								BYTE* raw2 = packPlayerMoving(&data2_);
								raw2[3] = 6;
								update_block(world_, block_, x_, y_);
								for (ENetPeer* cp_ = server->peers; cp_ < &server->peers[server->peerCount]; ++cp_) {
									if (cp_->state != ENET_PEER_STATE_CONNECTED or cp_->data == NULL) continue;
									if (pInfo(cp_)->world == world_->name) {
										send_raw(cp_, 4, raw2, 56, ENET_PACKET_FLAG_RELIABLE);
									}
								}
								delete[] raw2;
								update_tile(peer, x_, y_, 2302, false, true);
							}
							else {
								VarList::OnTalkBubble(peer, pInfo(peer)->netID, "Something is block that way!", 0, 1);
							}
						}
						break;
					}
					if (p_ == 3684) {
						if (Only_Access(peer, world_, block_)) {
							if (block_->fg == 0) {
								int remove_ = -1;
								Inventory::Modify(peer, p_, remove_);
								block_->fg = 3682;
								block_->planted = time(nullptr) + 86400;
								PlayerMoving data2_{};
								data2_.packetType = 19, data2_.netID = -1, data2_.plantingTree = 0, data2_.x = pInfo(peer)->lastwrenchx * 32 + 16, data2_.y = pInfo(peer)->lastwrenchy * 32 + 16, data2_.XSpeed = pInfo(peer)->x + 16, data2_.YSpeed = pInfo(peer)->y + 16, data2_.punchX = p_;
								BYTE* raw2 = packPlayerMoving(&data2_);
								raw2[3] = 6;
								for (ENetPeer* cp_ = server->peers; cp_ < &server->peers[server->peerCount]; ++cp_) {
									if (cp_->state != ENET_PEER_STATE_CONNECTED or cp_->data == NULL) continue;
									if (pInfo(cp_)->world == world_->name) {
										send_raw(peer, 4, raw2, 56, ENET_PACKET_FLAG_RELIABLE);
									}
								}
								delete[] raw2;
								update_tile(peer, x_, y_, 3682, false, true);
							}
							else {
								VarList::OnTalkBubble(peer, pInfo(peer)->netID, "Something is block that way!", 0, 1);
							}
						}
						break;
					}
					if (p_ == 3676) {
						if (Only_Access(peer, world_, block_)) {
							if (block_->fg == 0) {
								int remove_ = -1;
								Inventory::Modify(peer, p_, remove_);
								block_->fg = 3554;
								PlayerMoving data2_{};
								data2_.packetType = 19, data2_.netID = -1, data2_.plantingTree = 0, data2_.x = pInfo(peer)->lastwrenchx * 32 + 16, data2_.y = pInfo(peer)->lastwrenchy * 32 + 16, data2_.XSpeed = pInfo(peer)->x + 16, data2_.YSpeed = pInfo(peer)->y + 16, data2_.punchX = p_;
								BYTE* raw2 = packPlayerMoving(&data2_);
								raw2[3] = 6;
								for (ENetPeer* cp_ = server->peers; cp_ < &server->peers[server->peerCount]; ++cp_) {
									if (cp_->state != ENET_PEER_STATE_CONNECTED or cp_->data == NULL) continue;
									if (pInfo(cp_)->world == world_->name) {
										send_raw(peer, 4, raw2, 56, ENET_PACKET_FLAG_RELIABLE);
									}
								}
								delete[] raw2;
								update_tile(peer, x_, y_, 3554, false, true);
							}
							else {
								VarList::OnTalkBubble(peer, pInfo(peer)->netID, "Something is block that way!", 0, 1);
							}
						}
						break;
					}
					if (p_ == 3204 && t_ != 3200) {
						VarList::OnTalkBubble(peer, pInfo(peer)->netID, "`4Can't waste decorations on a non-Giving Tree!", 0, false);
						break;
					}
					if (p_ == 2966) {
						if (Only_Access(peer, world_, block_)) {
							if (items[t_].multiple_sides) {
								if (block_->flags & 0x00200000) block_->flags = block_->flags ^ 0x00200000;
								else block_->flags |= 0x00200000;
								int remove_ = -1;
								Inventory::Modify(peer, p_, remove_);
								PlayerMoving data2_{};
								data2_.packetType = 17, data2_.netID = 97, data2_.YSpeed = 97, data2_.x = x_ * 32 + 16, data2_.plantingTree = 300, data2_.y = y_ * 32 + 16, data2_.XSpeed = t_;
								BYTE* raw2 = packPlayerMoving(&data2_);
								for (ENetPeer* cp_ = server->peers; cp_ < &server->peers[server->peerCount]; ++cp_) {
									if (cp_->state != ENET_PEER_STATE_CONNECTED or cp_->data == NULL or pInfo(cp_)->world != world_->name) continue;
									send_raw(cp_, 4, raw2, 56, ENET_PACKET_FLAG_RELIABLE);
								}
								delete[] raw2;
								tile_update(peer, world_, block_, x_, y_);
							}
							else {
								gamepacket_t p;
								p.Insert("OnTalkBubble");
								p.Insert(pInfo(peer)->netID);
								p.Insert("Block does not have both sides!");
								p.Insert(0), p.Insert(1);
								p.CreatePacket(peer);
							}
						}
						break;
					}
					if (p_ == 6336) {
						DialogHandle::GuideBook(peer);
						break;
					}
					if (p_ == 4844 || p_ == 4846 || p_ == 4848) {
						gamepacket_t p;
						p.Insert("OnTalkBubble");
						p.Insert(pInfo(peer)->netID);
						p.Insert("Can't throw balloons! War has not started yet.");
						p.Insert(0), p.Insert(1);
						p.CreatePacket(peer);
						break;
					}
					if (p_ == 4850 || p_ == 4852 || p_ == 4854) {
						gamepacket_t p;
						p.Insert("OnTalkBubble");
						p.Insert(pInfo(peer)->netID);
						p.Insert("Can't throw a bucket! You can only shatter this.");
						p.Insert(0), p.Insert(1);
						p.CreatePacket(peer);
						break;
					}
					if (p_ == 7190) {
						change_guild_name(peer);
						break;
					}
					if (p_ == 4844 || p_ == 4846 || p_ == 4848) {
						if (find(world_->active_jammers.begin(), world_->active_jammers.end(), 4884) != world_->active_jammers.end()) {
							if (!guild_access(peer, world_->guild_id) and to_lower(world_->owner_name) != to_lower(pInfo(peer)->tankIDName) and find(world_->admins.begin(), world_->admins.end(), to_lower(pInfo(peer)->tankIDName)) == world_->admins.end()) {
								gamepacket_t p;
								p.Insert("OnTalkBubble");
								p.Insert(pInfo(peer)->netID);
								p.Insert("Can't throw balloons here!");
								p.Insert(0), p.Insert(1);
								p.CreatePacket(peer);
								break;
							}
						}
					}
					if (find(world_->active_jammers.begin(), world_->active_jammers.end(), 3616) != world_->active_jammers.end()) {
						if (!guild_access(peer, world_->guild_id) and to_lower(world_->owner_name) != to_lower(pInfo(peer)->tankIDName) and find(world_->admins.begin(), world_->admins.end(), to_lower(pInfo(peer)->tankIDName)) == world_->admins.end() and not Role::Developer(peer)) {
							gamepacket_t p;
							p.Insert("OnTalkBubble");
							p.Insert(pInfo(peer)->netID);
							p.Insert("Can't use consumables here!");
							p.Insert(0), p.Insert(1);
							p.CreatePacket(peer);
							break;
						}
					}
					if (world_->name == "GROWCH" and p_ != 1360) {
						gamepacket_t p;
						p.Insert("OnTalkBubble");
						p.Insert(pInfo(peer)->netID);
						p.Insert("The Growch says NO.");
						p.Insert(0), p.Insert(1);
						p.CreatePacket(peer);
						break;
					}
					switch (p_) {
					case 3098: case 3218: case 3014: case 3012: case 3018: case 5526: case 3020: case 2914: case 4248: case 5528: case 4246: case 3016: case 3432:
					{
						if (block_->flags & 0x04000000) {
							if (block_->fg != 0 || pInfo(peer)->x < 32 || pInfo(peer)->x >= world_->max_x * 32 || pInfo(peer)->y < 32 || pInfo(peer)->y >= world_->max_y * 32) {
								VarList::OnTalkBubble(peer, pInfo(peer)->netID, "Something is blocking the way!", 0, 0);
								VarList::OnConsoleMessage(peer, "Something is blocking the way!");
							}
							else {
								if (pInfo(peer)->hand == 3040 || pInfo(peer)->hand == 3010 || pInfo(peer)->hand == 2912 || pInfo(peer)->hand == 3008 || pInfo(peer)->hand == 3100 || pInfo(peer)->hand == 5740 || pInfo(peer)->hand == 6254 || pInfo(peer)->hand == 6256 || pInfo(peer)->hand == 6932 || pInfo(peer)->hand == 10262 || pInfo(peer)->hand == 6258) {
									if (pInfo(peer)->fishing_used == 0) {
										if (abs(pInfo(peer)->x / 32 - x_) <= 1 && abs(y_ - pInfo(peer)->y / 32) == 1 && pInfo(peer)->x / 32 != x_ && pInfo(peer)->y / 32 != y_) {
											if (pInfo(peer)->hair == 3042 && rand() % 100 < 5) {

											}
											else Inventory::Modify(peer, p_, got = -1);
											pInfo(peer)->fish_seconds = 1850;
											if (pInfo(peer)->hand == 3008) pInfo(peer)->fish_seconds *= 2;
											pInfo(peer)->fishing_used = p_, pInfo(peer)->f_x = x_, pInfo(peer)->f_y = y_, pInfo(peer)->move_warning = 0, pInfo(peer)->f_xy = pInfo(peer)->x + pInfo(peer)->y, pInfo(peer)->punch_warning = 0;
											PlayerMoving data_{};
											data_.packet_3 = 0, data_.netID = pInfo(peer)->netID, data_.x = pInfo(peer)->f_x, data_.y = pInfo(peer)->f_y;
											BYTE* raw = packFishMoving(&data_);
											for (ENetPeer* cp_ = server->peers; cp_ < &server->peers[server->peerCount]; ++cp_) {
												if (cp_->state != ENET_PEER_STATE_CONNECTED or cp_->data == NULL or pInfo(peer)->world != pInfo(cp_)->world) continue;
												send_raw(cp_, 4, raw, 56, ENET_PACKET_FLAG_RELIABLE);
											}
											delete[] raw;
										}
										else {
											VarList::OnTalkBubble(peer, pInfo(peer)->netID, "Sit still before you try to fish!", 0, 0);
											VarList::OnConsoleMessage(peer, "Sit still before you try to fish!");
										}
									}
									else if (pInfo(peer)->fishing_used != 0) stop_fishing(peer, false, "");
								}
								else {
									VarList::OnTalkBubble(peer, pInfo(peer)->netID, "You'll need a fishing rod to fish!", 0, 0);
									VarList::OnConsoleMessage(peer, "You'll need a fishing rod to fish!");
								}
							}
						}
						break;
					}
					case 4366: {
						if (Playmods::HasById(pInfo(peer), 13)) {
							int time_ = 0;
							for (PlayMods peer_playmod : pInfo(peer)->playmods) {
								if (peer_playmod.id == 13) {
									time_ = peer_playmod.time - time(nullptr);
									break;
								}
							}
							VarList::OnConsoleMessage(peer, ">> (" + Time::Playmod(time_) + " before you can broadcast again)");
							break;
						}
						if (Event()->Anniversary) {
							EventPool::Anniversary::Point::Add(peer, 150);
							VarList::OnEventButtonDataSet(peer, "AnniversaryLeaderboardButton", 1, "{\"active\":true,\"buttonAction\":\"leaderboardBtnClicked\",\"buttonState\":1,\"buttonTemplate\":\"BaseEventButton\",\"counter\":0,\"counterMax\":0,\"itemIdIcon\":0,\"name\":\"AnniversaryLeaderboardButton\",\"notification\":0,\"order\":5,\"rcssClass\":\"anniversary-leaderboard\",\"text\":\"" + to_string(EventPool::Anniversary::Point::Get(peer)) + "\"}");
						}
						int remove = -1;
						Inventory::Modify(peer, 4366, remove);
						Playmods::Add(peer, 13);
						CAction::Positioned(peer, pInfo(peer)->netID, "audio/dialog_confirm.wav", 0);
						VarList::OnConsoleMessage(peer, ">> `5PARTY SCREAM`` sent. Used `$1 Party Screamer``. (`$" + to_string(remove) + "`` left)`` (5 mins before you can broadcast again)");
						VarList::OnConsoleMessage(peer, "100% to a party time. MrBuncis is getting ready to party with a Party Screamer!");
						VarList::OnConsoleMessage(peer, "LET'S GET THIS PARTY STARTED!!!!");
						vector<string> random_texts{ "/dance the night away in [" + pInfo(peer)->world + "]!", "Ain't no party like a GT party cuz a GT party is dissimilar from other parties!", "Bring da noise to [" + pInfo(peer)->world + "] but please, leave the funk at home!", "Come join the fun!", "Crank it up!!!", "Don't be tardy for the party!" , "Everybody just have a good time!", "Everybody's invited to the party!", "I'm like a good demon, bringin' the party in!" , "PARTY! PARTY! PARTY!", "Party down in [" + pInfo(peer)->world + "]!", "Peace, love, and party!" , "Ready Growtopia? ROCK OUT!", "Step up to the dancefloor!", "The beats don't stop until the break of dawn!", "The fun is here!", "This party is off the chain!", "This party is on the chain, but very very loosely connected, so it could come off at any moment. Come watch!" , "Tonight we gonna party like it's " + to_string(rand() % 30 + 1985) + "!" };
						string text = random_texts[rand() % random_texts.size()];
						{
							gamepacket_t p;
							p.Insert("OnAddNotification");
							p.Insert("interface/large/special_event.rttex");
							vector<int> list{ 9252, 11542, 13048, 13028, 10552, 2280, 4372, 2290, 4370, 1412, 1410, 1408, 1406, 1414, 1416 };
							int item = list[rand() % list.size()];
							if (item == 9252) text = "COME check out my new Rocket Shoes! This party is gonna hit the roof!";
							else if (item == 11542) text = "COME check out my Neon Party YO-YO! This party is going around the world!";
							int give_count = 1;
							if (Inventory::Modify(peer, item, give_count) != 0) {
								WorldDrop drop_block_{};
								drop_block_.id = item, drop_block_.count = 1, drop_block_.x = (x_ * 32) + rand() % 17, drop_block_.y = (y_ * 32) + rand() % 17;
								VisualHandle::Drop(world_, drop_block_);
							}
						}
						gamepacket_t p;
						p.Insert("OnConsoleMessage");
						if (pInfo(peer)->m_h != 1 and find(world_->active_jammers.begin(), world_->active_jammers.end(), 226) == world_->active_jammers.end()) Environment()->Sb_World = pInfo(peer)->world;
						p.Insert("CP:_PL:0_OID:_CT:[SB]_ `5** from (`0" + (get_player_nick(peer)) + "`5) in [```$" + (pInfo(peer)->m_h == 1 || find(world_->active_jammers.begin(), world_->active_jammers.end(), 226) != world_->active_jammers.end() ? "`4JAMMED!``" : pInfo(peer)->world) + "```5] ** : ``" + (not Role::Moderator(peer) ? "`$" : "`^") + "" + text + "``");
						for (ENetPeer* cp_ = server->peers; cp_ < &server->peers[server->peerCount]; ++cp_) {
							if (cp_->state != ENET_PEER_STATE_CONNECTED or cp_->data == NULL or pInfo(cp_)->radio) continue;
							p.CreatePacket(cp_);
						}
						break;
					}
					case 3822: case 5458: case 6760: {
						apply_dye(peer, world_, block_, p_, x_, y_, 0x0000FFFF, (p_ == 6760 ? 32 : 16), -16, -16, false);
						break;
					}
					case 6916: {
						if (Only_Access(peer, world_, block_)) {
							gamepacket_t p;
							p.Insert("OnTalkBubble"), p.Insert(pInfo(peer)->netID);
							if (block_->fg == 0) 	p.Insert("You can not `5Flash Back`` an empty block.");
							else if (items[block_->fg].properties & Property_Mod || items[block_->fg].untradeable || items[block_->fg].blockType == BlockTypes::SEED || items[block_->fg].rarity < 0 || items[block_->fg].rarity == 999 || items[block_->fg].block_possible_put == false || block_->fg == 2946 || block_->fg == 610 || block_->fg == 3528 || items[block_->fg].blockType == BlockTypes::PROVIDER) {
								p.Insert("You can not `5Flash Back`` this block.");
							}
							else {
								int give_flash = 1, remove = -1;
								if (Inventory::Modify(peer, block_->fg, give_flash) == 0) {
									Inventory::Modify(peer, p_, remove);
									p.Insert("1 " + items[block_->fg].ori_name + " `5Flashed Back`` to a time when it was still in your inventory.");
									block_->fg = 0;
									update_tile(peer, x_, y_, 0, false, true);
									gamepacket_t p;
									p.Insert("OnParticleEffect"), p.Insert(90), p.Insert((float)pInfo(peer)->x + 16, (float)pInfo(peer)->y + 16);
									for (ENetPeer* cp_ = server->peers; cp_ < &server->peers[server->peerCount]; ++cp_) {
										if (cp_->state != ENET_PEER_STATE_CONNECTED or cp_->data == NULL or world_->name != pInfo(cp_)->world) continue;
										p.CreatePacket(cp_);
									}

								}
								else {
									p.Insert("Your inventory is full");
								}
							}
							p.Insert(0), p.Insert(0), p.CreatePacket(peer);
						}
						break;
					}
					case 3824: case 5460: case 6762: {
						apply_dye(peer, world_, block_, p_, x_, y_, 0x00FF00FF, -16, (p_ == 6762 ? 32 : 16), -16, false);
						break;
					}
					case 3826: case 5462: case 6764: {
						apply_dye(peer, world_, block_, p_, x_, y_, 0xFF0000FF, -16, -16, (p_ == 6764 ? 32 : 16), false);
						break;
					}
					case 3828: case 5464: case 6766: {
						apply_dye(peer, world_, block_, p_, x_, y_, 0x000000FF, (p_ == 6766 ? -32 : -16), (p_ == 6766 ? -32 : -16), (p_ == 6766 ? -32 : -16), false);
						break;
					}
					case 3830: case 5466: case 6768: {
						apply_dye(peer, world_, block_, p_, x_, y_, 0xFFFFFFFF, 32, 32, 32, true);
						break;
					}
					case 4132: {
						bool remove = false;
						for (int i_ = 0; i_ < world_->drop_new.size(); i_++) {
							if (world_->drop_new[i_][0] == 0) continue;
							if (x_ == (world_->drop_new[i_][3] / 32) && y_ == (world_->drop_new[i_][4] / 32) && world_->drop_new[i_][0] == 3936) {
								remove = true;
								PlayerMoving data_{};
								data_.packetType = 14, data_.netID = 0, data_.plantingTree = world_->drop_new[i_][2];
								BYTE* raw = packPlayerMoving(&data_);
								for (ENetPeer* cp_ = server->peers; cp_ < &server->peers[server->peerCount]; ++cp_) {
									if (cp_->state != ENET_PEER_STATE_CONNECTED or cp_->data == NULL or pInfo(cp_)->world != name_) continue;
									send_raw(cp_, 4, raw, 56, ENET_PACKET_FLAG_RELIABLE);
								}
								delete[]raw;
								WorldDrop drop_block_{};
								drop_block_.id = 4134, drop_block_.count = world_->drop_new[i_][1], drop_block_.x = world_->drop_new[i_][3], drop_block_.y = world_->drop_new[i_][4];
								VisualHandle::Drop(world_, drop_block_);
								world_->drop_new.erase(world_->drop_new.begin() + i_);
							}
						}
						if (remove) {
							Inventory::Modify(peer, p_, got = -1);
							if (rand() % 100 < (items[p_].newdropchance + 5)) {
								WorldDrop drop_seed_{};
								drop_seed_.id = p_ + 1, drop_seed_.count = 1, drop_seed_.x = (x_ * 32) + rand() % 17, drop_seed_.y = (y_ * 32) + rand() % 17;
								if (not use_mag(world_, drop_seed_, x_, y_)) VisualHandle::Drop(world_, drop_seed_);
							}
							else if (rand() % 10 < 4) gems_(peer, world_, rand() % (items[p_].max_gems + 1), x_ * 32, y_ * 32, p_);
						}
						else {
							gamepacket_t p;
							p.Insert("OnTalkBubble"), p.Insert(pInfo(peer)->netID), p.Insert("You can only brush Fossils that have never been picked up!"), p.Insert(0), p.Insert(0), p.CreatePacket(peer);
						}
						break;
					}
					case 5926: {
						pInfo(peer)->lastwrenchb = p_;
						if (to_lower(world_->owner_name) == to_lower(pInfo(peer)->tankIDName) || find(world_->admins.begin(), world_->admins.end(), to_lower(pInfo(peer)->tankIDName)) != world_->admins.end()) {
							int ungrown = 0, ungrown_ = 0;
							long long times_ = time(nullptr);
							for (int i_ = 0; i_ < world_->blocks.size(); i_++) {
								if (items[world_->blocks[i_].fg].blockType == BlockTypes::SEED and (times_ - world_->blocks[i_].planted <= items[world_->blocks[i_].fg].growTime ? times_ - world_->blocks[i_].planted : items[world_->blocks[i_].fg].growTime) != items[world_->blocks[i_].fg].growTime) ungrown++;
								if (items[world_->blocks[i_].fg].blockType == BlockTypes::PROVIDER and (times_ - world_->blocks[i_].planted <= items[world_->blocks[i_].fg].growTime ? times_ - world_->blocks[i_].planted : items[world_->blocks[i_].fg].growTime) != items[world_->blocks[i_].fg].growTime) ungrown_++;
							}
							VarList::OnDialogRequest(peer, SetColor(peer) + "set_default_color|`o\nadd_label_with_icon|big|`w" + items[p_].ori_name + "``|left|" + to_string(p_) + "|\nadd_spacer|small|\nembed_data|ungrow_tree|" + to_string(ungrown) + "\nembed_data|ungrow_provider|" + to_string(ungrown_) + "\nadd_textbox|There is `2" + to_string(ungrown) + "`` ungrown tree and `2" + to_string(ungrown_) + " ``ungrow providers that this spray will work on.|\nadd_spacer|small|\nadd_textbox|Are you sure you want to use the " + items[p_].ori_name + " on this world?|\nend_dialog|ultra_world_spray|No|Yes|\n\nadd_quick_exit|");
						}
						else VarList::OnTalkBubble(peer, pInfo(peer)->netID, "You must own the world!", 0, 0);
						break;
					}
					case 13574: {
						pInfo(peer)->lastwrenchb = p_;
						if (Playmods::HasById(pInfo(peer), 144)) {
							VarList::OnConsoleMessage(peer, "`6>> That's sort of hard to do while having a cooldown.``");
						}
						else if (to_lower(world_->owner_name) == to_lower(pInfo(peer)->tankIDName) || find(world_->admins.begin(), world_->admins.end(), to_lower(pInfo(peer)->tankIDName)) != world_->admins.end()) {
							int ungrown = 0;
							long long times_ = time(nullptr);
							for (int i_ = 0; i_ < world_->blocks.size(); i_++) if (items[world_->blocks[i_].fg].blockType == BlockTypes::SEED and (times_ - world_->blocks[i_].planted <= items[world_->blocks[i_].fg].growTime ? times_ - world_->blocks[i_].planted : items[world_->blocks[i_].fg].growTime) != items[world_->blocks[i_].fg].growTime) ungrown++;
							VarList::OnDialogRequest(peer, SetColor(peer) + "set_default_color|`o\nadd_label_with_icon|big|`w" + items[p_].ori_name + "``|left|" + to_string(p_) + "|\nadd_spacer|small|\nembed_data|ungrow_tree|" + to_string(ungrown) + "\nadd_textbox|There is `2" + to_string(ungrown) + "`` ungrown tree that this spray will work on.|\nadd_spacer|small|\nadd_textbox|Are you sure you want to use the " + items[p_].ori_name + " on this world?|\nend_dialog|deluxe_world_spray|No|Yes|\n\nadd_quick_exit|");
						}
						else VarList::OnTalkBubble(peer, pInfo(peer)->netID, "You must own the world!", 0, 0);
						break;
					}
					case 5250:  case 5252: case 5254: {
						VarList::OnTalkBubble(peer, pInfo(peer)->netID, "You must combine this item!", 0, 0);
						break;
					}
					case 5664: {
						if (block_->fg == 0) {
							Inventory::Modify(peer, p_, got = -1);
							vector<int> list{ 5652, 3398, 386, 4422, 364, 9342, 9340, 9334, 9332, 9336, 9338, 4400, 7808, 7810, 4416, 7818, 7820, 7822, 7824, 5644, 390, 7826, 7830, 9324, 5658, 3396, 2384, 5660, 10654, 3400, 4418, 388, 3408, 1470, 3404, 3406, 10662, 2390, 5656, 5648, 2396, 384, 5664, 4424, 366 };
							int item = list[rand() % list.size()];
							WorldDrop drop_block_{};
							drop_block_.id = item, drop_block_.count = (item == 7810 || item == 7808 || item == 4400 || item == 390 || item == 3408 || item == 4422 || item == 3404 ? 5 : (item == 4418 || item == 5660 ? 2 : 1)), drop_block_.x = (x_ * 32) + rand() % 17, drop_block_.y = (y_ * 32) + rand() % 17;
							VisualHandle::Drop(world_, drop_block_);
							for (ENetPeer* cp_ = server->peers; cp_ < &server->peers[server->peerCount]; ++cp_) {
								if (cp_->state != ENET_PEER_STATE_CONNECTED or cp_->data == NULL) continue;
								if (pInfo(cp_)->world == world_->name) {
									VarList::OnAddNotification(cp_, "`2Valentine's Card:`` Cupid has just spawned a `#" + items[item].name + "``.", "interface/large/special_event.rttex", "");
								}
							}
						}
						break;
					}
					case 722: {
						if (block_->fg == 0) {
							Inventory::Modify(peer, p_, got = -1);
							block_->fg = 718;
							for (ENetPeer* cp_ = server->peers; cp_ < &server->peers[server->peerCount]; ++cp_) {
								if (cp_->state != ENET_PEER_STATE_CONNECTED or cp_->data == NULL or pInfo(cp_)->world != world_->name) continue;
								update_tile(cp_, x_, y_, 718, false, false);
								VarList::OnAddNotification(cp_, "`2`4Pi`wna`2ta`` `wBash``!:`` `oSmash the `wUltra`` `4Pi`wna`2ta``! `#Get some help``!``", "interface/large/special_event.rttex", "audio/cumbia_horns.wav");
							}
						}
						break;
					}
					case 1050: {
						Inventory::Modify(peer, p_, got = -1);
						VarList::OnConsoleMessage(peer, "`6The mysterious secert is...``\n `2" + Environment()->random_quotes[rand() % Environment()->random_quotes.size()] + "``");
						break;
					}
					case 7342: {
						if (block_->fg == 0) {
							Inventory::Modify(peer, p_, got = -1);
							block_->fg = 10294;
							for (ENetPeer* cp_ = server->peers; cp_ < &server->peers[server->peerCount]; ++cp_) {
								if (cp_->state != ENET_PEER_STATE_CONNECTED or cp_->data == NULL or pInfo(cp_)->world != world_->name) continue;
								update_tile(cp_, x_, y_, 10294, false, false);
								VarList::OnAddNotification(cp_, "`2Turkey Surprise:`` You have to hunt `8Thanksgiving Turkeys``! Get some help!", "interface/large/special_event.rttex", "audio/cumbia_horns.wav");
							}
						}
						break;
					}
					case 1220: {
						if (world_->name == "GROWGANOTH") {
							Inventory::Modify(peer, p_, got = -1);
							VarList::OnTalkBubble(peer, pInfo(peer)->netID, "`5Growganoth pulls you closer!``");
							VarList::OnSetPos(peer, 1568, 416);
						}
						else VarList::OnTalkBubble(peer, pInfo(peer)->netID, "The sigil fizzles... try using it near Growganoth!");
						break;
					}
					case 13994: {
						if (world_->name == "GROWGANOTH") {
							if (Playmods::HasById(pInfo(peer), 161)) {
								VarList::OnTalkBubble(peer, pInfo(peer)->netID, "That's sort of hard to do while having a cooldown.", 0, 1);
								break;
							}
							Playmods::Add(peer, 161);
							Inventory::Modify(peer, p_, got = -1);
							VarList::OnTalkBubble(peer, pInfo(peer)->netID, "`5Growganoth pulls you closer!``");
							VarList::OnSetPos(peer, 1568, 416);
						}
						else VarList::OnTalkBubble(peer, pInfo(peer)->netID, "The sigil fizzles... try using it near Growganoth!");
						break;
					}
					case 3400: {
						if (block_->fg != 10) {
							VarList::OnTalkBubble(peer, pInfo(peer)->netID, "`4This potion is clearly labeled for use only on rocks.``", 0, 0);
							break;
						}
						int c_ = -1;
						if (Inventory::Modify(peer, 3400, c_) == 0) {
							block_->fg = 392;
							gamepacket_t p;
							p.Insert("OnParticleEffect"), p.Insert(44), p.Insert((float)x_ * 32 + 16, (float)y_ * 32 + 16);
							PlayerMoving data_2{};
							data_2.packetType = 5, data_2.punchX = x_, data_2.punchY = y_, data_2.characterState = 0x8;
							int alloc = alloc_(world_, block_);
							BYTE* raw2 = packPlayerMoving(&data_2, 112 + alloc);
							BYTE* blc = raw2 + 56;
							form_visual(blc, *block_, *world_, peer, false);
							string t_ = "action|play_sfx\nfile|audio/terraform.wav\ndelayMS|0";
							BYTE* const d_ = new BYTE[5 + t_.length()];
							*(__int8*)(d_) = 3;
							Memory_Copy(d_ + 4, t_.c_str(), t_.length());
							*(__int8*)(d_ + 4 + t_.length()) = 0;
							ENetPacket* const p_m = enet_packet_create(d_, 5 + t_.length(), ENET_PACKET_FLAG_RELIABLE);
							for (ENetPeer* cp_ = server->peers; cp_ < &server->peers[server->peerCount]; ++cp_) {
								if (cp_->state != ENET_PEER_STATE_CONNECTED or cp_->data == NULL) continue;
								if (pInfo(cp_)->world == world_->name) {
									p.CreatePacket(cp_);
									enet_peer_send(cp_, 0, p_m);
									send_raw(cp_, 4, raw2, 112 + alloc, ENET_PACKET_FLAG_RELIABLE);
								}
							}
							delete[]d_;
							delete[] raw2, blc;
							if (block_->locked) upd_lock(*block_, *world_, peer);
						}
						break;
					}
					case 7962:	case 9826: {
						if (items[t_].blockType == BlockTypes::PROVIDER && t_ != 12986) {
							long long time_ = time(NULL);
							uint32_t laikas = uint32_t((time_ - block_->planted <= items[block_->fg].growTime ? time_ - block_->planted : items[block_->fg].growTime));
							if (laikas < unsigned int(items[block_->fg].growTime)) {
								long long spray_time_ = 3600 * 6;
								if (p_ == 9826) spray_time_ = 3600 * 12;
								block_->planted -= spray_time_;
								if (time_ - block_->planted <= items[block_->fg].growTime) {
									if (spray_time_ < 86400) VarList::OnTextOverlay(peer, items[block_->fg].name + " Provider `eaged`` `$" + to_string(spray_time_ / 60 / 60) + "`` hours");
									else VarList::OnTextOverlay(peer, items[block_->fg].name + " Provider `eaged`` `$" + to_string(spray_time_ / 86400) + "`` days");
								}
								else VarList::OnTextOverlay(peer, items[block_->fg].name + " Provider is ready!");
								CAction::Positioned(peer, pInfo(peer)->netID, "audio/spray.wav", 0);
								tile_update(peer, world_, block_, x_, y_);
								int c_ = -1;
								Inventory::Modify(peer, p_, c_);
							}
							else VarList::OnTalkBubble(peer, pInfo(peer)->netID, "This provider is already ready, don't waste your spray on it!", 0, 1);
						}
						else VarList::OnTalkBubble(peer, pInfo(peer)->netID, "Use this on a provider to speed it up.", 0, 1);
						break;
					}
					case 228: case 1062: case 1778: case 5764: case 10672: {
						if (items[t_].blockType == BlockTypes::SEED) {
							long long time_ = time(NULL);
							uint32_t laikas = uint32_t((time_ - block_->planted <= items[block_->fg].growTime ? time_ - block_->planted : items[block_->fg].growTime));
							if (laikas < unsigned int(items[block_->fg].growTime)) {
								long long spray_time_ = 3600;
								if (p_ == 1062) spray_time_ = _int64(2.592e+6);
								if (p_ == 1778) spray_time_ = 86400;
								if (p_ == 5764) spray_time_ = 259200;
								block_->planted -= spray_time_;
								if (time_ - block_->planted <= items[block_->fg].growTime) {
									if (spray_time_ < 86400) VarList::OnTextOverlay(peer, items[block_->fg - 1].name + " Tree aged `$" + to_string(spray_time_ / 60 / 60) + "`` hours");
									else VarList::OnTextOverlay(peer, items[block_->fg - 1].name + " Tree aged `$" + to_string(spray_time_ / 86400) + "`` days");
								}
								else VarList::OnTextOverlay(peer, items[block_->fg - 1].name + " Tree grew to full size!");
								CAction::Positioned(peer, pInfo(peer)->netID, "audio/spray.wav", 0);
								tile_update(peer, world_, block_, x_, y_);
								int c_ = -1;
								Inventory::Modify(peer, p_, c_);
							}
							else VarList::OnTalkBubble(peer, pInfo(peer)->netID, "This tree has already bloomed, don't waste your spray on it!", 0, 1);
						}
						else VarList::OnTalkBubble(peer, pInfo(peer)->netID, "Use this on a growing tree to speed it's growth.", 0, 1);
						break;
					}
					case 4490: {
						int count = Inventory::Contains(peer, p_);
						if (count < 0) break;
						VarList::OnDialogRequest(peer, "set_default_color|\nadd_label_with_icon|big|Eat " + items[4490].name + "?|left|4490|\nadd_textbox|`oHow many? (you have " + to_string(count) + ")|left|\nadd_text_input|count||" + to_string(count) + "|5|\nend_dialog|consum_gems|Cancel|Ok|");
						break;
					}
					case 10394: case 5138: case 5140: case 5142: case 11432: {
						Inventory::Modify(peer, p_, got = -1);
						got = 1;
						PlayerMoving data2_{};
						data2_.x = pInfo(peer)->x + 16, data2_.y = pInfo(peer)->y + 16, data2_.packetType = 19, data2_.punchX = 9438, data2_.punchY = pInfo(peer)->netID;
						int32_t to_netid = pInfo(peer)->netID;
						BYTE* raw2 = packPlayerMoving(&data2_);
						raw2[3] = 5;
						Memory_Copy(raw2 + 8, &to_netid, 4);
						send_raw(peer, 4, raw2, 56, ENET_PACKET_FLAG_RELIABLE);
						delete[] raw2;
						VarList::OnBuxGems(peer, items[p_].max_gems3);
						break;
					}
					case 1488: {
						Inventory::Modify(peer, p_, got = -1);
						VarList::OnTalkBubble(peer, pInfo(peer)->netID, "`5GULP! You got smarter!``", 0, 1);
						add_peer_xp(peer, 10000);
						break;
					}
					case 5706: {
						vector<pair<int, int>> receivingitems;
						int free = Inventory::Get_Slots(pInfo(peer)), slot = 5, getcount = 1, inventoryfull = 0;
						if (free >= slot) {
							for (int i = 0; i < slot; i++) {
								int itemid = Environment()->small_seed_pack[rand() % Environment()->small_seed_pack.size()];
								receivingitems.push_back(make_pair(itemid, getcount));
							}
							for (int i = 0; i < slot; i++) {
								int itemcount = 0;
								Inventory::Modify(peer, receivingitems[i].first, itemcount);
								if (itemcount + getcount > 200) inventoryfull = 1;
							}
							if (inventoryfull == 0) {
								for (int i = 0; i < slot; i++) Inventory::Modify(peer, receivingitems[i].first, receivingitems[i].second);
								Inventory::Modify(peer, p_, got = -1);
							}
						}
						break;
					}
					case 9526: {
						vector<int> list{ 3831, 429, 1773, 4767, 667, 2835, 301, 1299, 361, 2709, 955, 461, 861, 9389, 5467, 2791, 2815, 1803, 555, 685, 741, 3931, 1775, 833, 2025, 621, 6401, 359, 309, 855, 1685, 1449, 1309, 441, 1111, 221, 1431, 3065, 9307, 1257, 1501, 1109, 4641, 3587, 1103, 743, 431, 3823, 3825, 1131, 727, 729, 187, 787, 5379, 5459, 4785, 3261, 3521, 2293, 5461, 3721, 2309, 327, 2321, 247, 63, 2333, 3479, 445, 4783, 299, 863, 8935, 1451, 261, 1871, 1499, 455, 9391, 683, 1159, 551, 1745, 411, 3005, 8239, 687, 4799, 559, 4643, 3899, 1605, 9309, 567, 565, 1155, 3827, 1327, 1767, 993, 1157, 563, 4721, 115, 1423, 10515, 1329, 6545, 287, 669, 777, 5463, 1655, 1599, 561, 4585, 3413, 4745, 1771, 2011, 1161, 1729, 3757, 3753, 321, 3265, 3263, 623, 775, 6397, 129, 4667, 759, 3767, 1529, 6543, 4707, 3835, 1435, 651, 8929, 569, 527, 3287, 1595, 6063, 2795, 1003, 1731, 4943, 4963, 597, 4669, 1531, 1523, 625, 4297, 599, 657, 571, 873, 3755, 2969, 1725, 4603, 1447, 3267, 5375, 1683, 1613 };
						vector<pair<int, int>> receivingitems;
						int free = Inventory::Get_Slots(pInfo(peer)), slot = 5, getcount = 1, inventoryfull = 0;
						if (free >= slot) {
							for (int i = 0; i < slot; i++) {
								int itemid = list[rand() % list.size()];
								receivingitems.push_back(make_pair(itemid, getcount));
							}
							for (int i = 0; i < slot; i++) {
								int itemcount = 0;
								Inventory::Modify(peer, receivingitems[i].first, itemcount);
								if (itemcount + getcount > 200) inventoryfull = 1;
							}
							if (inventoryfull == 0) {
								for (int i = 0; i < slot; i++) Inventory::Modify(peer, receivingitems[i].first, receivingitems[i].second);
								Inventory::Modify(peer, p_, got = -1);
							}
						}
						break;
					}
					case 1828: case 11286: case 3870: {
						VarList::OnTalkBubble(peer, pInfo(peer)->netID, p_ == 3870 ? "That's like a hundred years old. No." : "Ew, it has raisins! I'm not eating that.", 0, 1);
						break;
					}
					case 1066: {
						int got = 0;
						Inventory::Modify(peer, p_, got);
						if (got >= 1) {
							Inventory::Modify(peer, p_, got = -1);
							for (ENetPeer* cp_ = server->peers; cp_ < &server->peers[server->peerCount]; ++cp_) {
								if (cp_->state != ENET_PEER_STATE_CONNECTED or cp_->data == NULL or pInfo(peer)->world != pInfo(cp_)->world) continue;
								CAction::Effect(cp_, 50, (float)(x_ * 32) + 16, (float)(y_ * 32) + 16);
							}
						}
						break;
					}
					case 6140: {
						int got = 0;
						pInfo(peer)->lastwrenchb = p_;
						Inventory::Modify(peer, p_, got);
						if (got >= 1) {
							string foundlist = "";
							if (to_lower(world_->owner_name) != to_lower(pInfo(peer)->tankIDName) and Role::Developer(peer) and (!guild_access(peer, world_->guild_id) and find(world_->admins.begin(), world_->admins.end(), to_lower(pInfo(peer)->tankIDName)) == world_->admins.end())) {
								VarList::OnTalkBubble(peer, pInfo(peer)->netID, "Only the owner of this tile has access!", 0, 0);
								break;
							}
							int x2 = pInfo(peer)->x / 32, y2 = pInfo(peer)->y / 32;
							bool has_ = false;
							for (int i_ = 0; i_ < world_->drop_new.size(); i_++) {
								if (world_->drop_new[i_][0] != 0 && world_->drop_new[i_][0] != 112 && items[world_->drop_new[i_][0]].untradeable == 0 && world_->drop_new[i_][0] != 4490 && world_->drop_new[i_][3] > 0 && world_->drop_new[i_][4] > 0 && world_->drop_new[i_][3] / 32 == x_ && world_->drop_new[i_][4] / 32 == y_) {
									if (x2 >= x_ - 3 && x2 <= x_ + 3 && y2 >= y_ - 3 && y2 <= y_ + 3) {
										if (items[block_->fg].collisionType == 1 || items[block_->fg].blockType == BlockTypes::GATEWAY || items[block_->fg].toggleable and is_false_state(world_->blocks[(pInfo(peer)->state == 16 ? x_ / 32 : round((double)x_ / 32)) + (y_ / 32 * 100)], 0x00400000)) {
											has_ = true;
											VarList::OnTalkBubble(peer, pInfo(peer)->netID, "The target position is blocked by solid block!", 0, 0);
											break;
										}
										else {
											has_ = true;
											foundlist += to_string(world_->drop_new[i_][0]) + "," + to_string(world_->drop_new[i_][1]) + "," + to_string(world_->drop_new[i_][2]) + ",";
										}
									}
									else {
										has_ = true;
										VarList::OnTalkBubble(peer, pInfo(peer)->netID, "The target position is too far away!", 0, 0);
										break;
									}
								}
							}
							if (foundlist != "" and has_) VarList::OnDialogRequest(peer, SetColor(peer) + "set_default_color|`o\nadd_label_with_icon|big|`wExtract-O-Snap``|left|6140|\nadd_spacer|small|\nembed_data|target_x|" + to_string(x_) + "\nembed_data|target_y|" + to_string(y_) + "\nadd_textbox|GrowTech: use the Extract-O-Snap to pick out the items from the floating items in your world! - Thanks, Technician Dave.|left|\nadd_spacer|small|\nadd_textbox|Press on the icon to extract the item into your inventory.|left|\nadd_spacer|small|\nadd_textbox|`wItem List:|left|\nadd_label_with_icon_button_list|small|`w%s : %s|left|extractOnceObj_|itemID_itemAmount_worldObj|" + foundlist + "\nadd_spacer|small|\nend_dialog|extractor|Close||");
							else {
								if (not has_) VarList::OnTalkBubble(peer, pInfo(peer)->netID, "There are no floating items in the extraction area!", 0, 0);
							}
						}
						break;
					}
					case 1826: {
						int got = 0;
						Inventory::Modify(peer, p_, got);
						if (got >= 1) {
							Inventory::Modify(peer, p_, got = -1);
							for (ENetPeer* cp_ = server->peers; cp_ < &server->peers[server->peerCount]; ++cp_) {
								if (cp_->state != ENET_PEER_STATE_CONNECTED or cp_->data == NULL or pInfo(peer)->world != pInfo(cp_)->world) continue;
								CAction::Effect(cp_, 92, (float)(x_ * 32) + 16, (float)(y_ * 32) + 16);
							}
						}
						break;
					}
					case 5632: {
						int given = 1;
						if (pInfo(peer)->hair == 4652 && pInfo(peer)->shirt == 4650 && pInfo(peer)->pants == 4648 && pInfo(peer)->feet == 4646) {
							if (Inventory::Modify(peer, 5526, given) == 0) {
								VarList::OnTalkBubble(peer, pInfo(peer)->netID, "`5" + items[p_].name + " combine to create a`` `2" + items[5526].name + "```5!``", 0, 0);
							}
							else VarList::OnTalkBubble(peer, pInfo(peer)->netID, "You don't have enough inventory space!", 0, 0);
						}
						else VarList::OnTalkBubble(peer, pInfo(peer)->netID, "You must wear hazmat set!", 0, 0);
						break;
					}
					case 12370: case 4236: case 13158: case 2036: case 2034: case 7590: case 11656: case 2290: case 3122: case 1152: case 6330: case 1212: case 1234: case 3762: case 8534: case 2410: case 5256: case 3110: case 2000: case 2412: case 4426: case 4172: case 5282: case 3242: case 3186: case 8936: case 5636: {
						int got = 0, given = 1, needed = items[p_].consume_needed, give = items[p_].consume_prize[rand() % items[p_].consume_prize.size()];
						Inventory::Modify(peer, p_, got);
						if (got >= items[p_].consume_needed) {
							bool block_ = false;
							if (p_ == 5256) {
								block_ = false;
								for (int i_ = 0; i_ < pInfo(peer)->inv.size(); i_++) {
									if (pInfo(peer)->inv[i_].first == 5216 || pInfo(peer)->inv[i_].first == 5218 || pInfo(peer)->inv[i_].first == 5220 || pInfo(peer)->inv[i_].first == 5214 || pInfo(peer)->inv[i_].first == 5232 || pInfo(peer)->inv[i_].first == 5222 || pInfo(peer)->inv[i_].first == 5238 || pInfo(peer)->inv[i_].first == 5240 || pInfo(peer)->inv[i_].first == 5244 || pInfo(peer)->inv[i_].first == 5246 || pInfo(peer)->inv[i_].first == 5236 || pInfo(peer)->inv[i_].first == 5224) block_ = true;
								}
							}
							else block_ = true;
							if (block_) {
								if (Inventory::Modify(peer, give, given) == 0) {
									Inventory::Modify(peer, p_, needed *= -1);
									VarList::OnTalkBubble(peer, pInfo(peer)->netID, "`5" + items[p_].name + " combine to create a`` `2" + items[give].name + "```5!``", 0, 0);
								}
								else VarList::OnTalkBubble(peer, pInfo(peer)->netID, "You don't have enough inventory space!", 0, 0);
							}
							else VarList::OnTalkBubble(peer, pInfo(peer)->netID, "You must have one of the items!", 0, 0);
						}
						else VarList::OnTalkBubble(peer, pInfo(peer)->netID, "`4You'll need more " + items[p_].name + " than that!``", 0, 0);
						break;
					}
					case 10228: {
						if (Inventory::Get_Slots(pInfo(peer)) >= 1) {
							vector<pair<int, int>> mooncakes{ {11286, 1} , {1096, 10}, {1098, 10}, {1094, 10}, {1058, 10}, {3870, 4} };
							bool toobig = false;
							for (int i = 0; i < mooncakes.size(); i++) {
								int have = 0;
								Inventory::Modify(peer, mooncakes[i].first, have);
								if (have + mooncakes[i].second > 200) toobig = true;
							}
							if (toobig) VarList::OnTalkBubble(peer, pInfo(peer)->netID, "Your inventory is full!", 0, 0);
							if (toobig) break;
							if (rand() % 500 < 1) mooncakes.insert(mooncakes.end(), { 12620,1 });
							vector<pair<int, int>> receivingitems;
							int free = Inventory::Get_Slots(pInfo(peer)), slot = 5, getcount = 1;
							if (free >= slot) {
								for (int i = 0; i < slot; i++) {
									int randa = rand() % mooncakes.size(), itemid = mooncakes[randa].first, count = rand() % mooncakes[randa].second + 1;
									vector<pair<int, int>>::iterator p_r = find_if(receivingitems.begin(), receivingitems.end(), [itemid](const pair < int, int>& element) { return element.first == itemid; });
									if (p_r != receivingitems.end()) receivingitems[p_r - receivingitems.begin()].second += count;
									else receivingitems.push_back(make_pair(itemid, count));
								}
								string received = "";
								for (int i = 0; i < receivingitems.size(); i++) {
									int itemcount = 0;
									Inventory::Modify(peer, receivingitems[i].first, itemcount);
									if (itemcount + receivingitems[i].second > 200) toobig = true;
									else received += "`5" + to_string(receivingitems[i].second) + " " + items[receivingitems[i].first].name + "``" + (receivingitems.size() - i == 1 ? "" : " ");
								}
								if (toobig == false) {
									for (int i = 0; i < receivingitems.size(); i++) Inventory::Modify(peer, receivingitems[i].first, receivingitems[i].second);
									Inventory::Modify(peer, p_, got = -1);
									VarList::OnTalkBubble(peer, pInfo(peer)->netID, "`0You got`` " + received + "`0.``", 0, 1);
								}
								else VarList::OnTalkBubble(peer, pInfo(peer)->netID, "Your inventory is full!", 0, 1);
							}
						}
						break;
					}
					case 10756: {
						if (Inventory::Get_Slots(pInfo(peer)) >= 2) {
							vector<int> shard{ 10766, 10768,10766, 10768,10766, 10768,10766, 10768,10766, 10768,10766, 10768,10766, 10768,10766, 10768,10766, 10768,10766, 10764 };
							vector<int> egg{ 13372, 10762,2554,  8064, 8066, 8068, 2552, 9460, 2548, 2546, 2544, 2550,8064, 8066, 8068, 2552, 9460, 2548, 2546, 2544, 2550,8064, 8066, 8068, 2552, 9460, 2548, 2546, 2544, 2550,8064, 8066, 8068, 2552, 9460, 2548, 2546, 2544, 2550,8064, 8066, 8068, 2552, 9460, 2548, 2546, 2544, 2550,8064, 8066, 8068, 2552, 9460, 2548, 2546, 2544, 2550,8064, 8066, 8068, 2552, 9460, 2548, 2546, 2544, 2550,8064, 8066, 8068, 2552, 9460, 2548, 2546, 2544, 2550,8064, 8066, 8068, 2552, 9460, 2548, 2546, 2544, 2550 ,  8064, 8066, 8068, 2552, 9460, 2548, 2546, 2544, 2550,8064, 8066, 8068, 2552, 9460, 2548, 2546, 2544, 2550,8064, 8066, 8068, 2552, 9460, 2548, 2546, 2544, 2550,8064, 8066, 8068, 2552, 9460, 2548, 2546, 2544, 2550,8064, 8066, 8068, 2552, 9460, 2548, 2546, 2544, 2550,8064, 8066, 8068, 2552, 9460, 2548, 2546, 2544, 2550,8064, 8066, 8068, 2552, 9460, 2548, 2546, 2544, 2550,8064, 8066, 8068, 2552, 9460, 2548, 2546, 2544, 2550,8064, 8066, 8068, 2552, 9460, 2548, 2546, 2544, 2550 ,  8064, 8066, 8068, 2552, 9460, 2548, 2546, 2544, 2550,8064, 8066, 8068, 2552, 9460, 2548, 2546, 2544, 2550,8064, 8066, 8068, 2552, 9460, 2548, 2546, 2544, 2550,8064, 8066, 8068, 2552, 9460, 2548, 2546, 2544, 2550,8064, 8066, 8068, 2552, 9460, 2548, 2546, 2544, 2550,8064, 8066, 8068, 2552, 9460, 2548, 2546, 2544, 2550,8064, 8066, 8068, 2552, 9460, 2548, 2546, 2544, 2550,8064, 8066, 8068, 2552, 9460, 2548, 2546, 2544, 2550,8064, 8066, 8068, 2552, 9460, 2548, 2546, 2544, 2550 };
							bool toobig = false;
							for (int i = 0; i < shard.size(); i++) {
								int have = 0;
								Inventory::Modify(peer, shard[i], have);
								if (have >= 199) toobig = true;
							}
							for (int i = 0; i < egg.size(); i++) {
								int have = 0;
								Inventory::Modify(peer, egg[i], have);
								if (have >= 199) toobig = true;
							}
							if (toobig) break;
							vector<pair<int, int>> receivingitems;
							int free = Inventory::Get_Slots(pInfo(peer)), slot = 2, getcount = 1, inventoryfull = 0;
							if (free >= slot) {
								for (int i = 0; i < slot; i++) {
									int itemid = i == 0 ? shard[rand() % shard.size()] : egg[rand() % egg.size()];
									receivingitems.push_back(make_pair(itemid, getcount = 1));
								}
								for (int i = 0; i < slot; i++) {
									int itemcount = 0;
									Inventory::Modify(peer, receivingitems[i].first, itemcount);
									if (itemcount + receivingitems[i].second > 200) inventoryfull = 1;
								}
								if (inventoryfull == 0) {
									string received = "";
									for (int i = 0; i < slot; i++) {
										if (receivingitems[i].first == 13372 || receivingitems[i].first == 10762 || receivingitems[i].first == 2554) {
											for (ENetPeer* cp_ = server->peers; cp_ < &server->peers[server->peerCount]; ++cp_) {
												if (cp_->state != ENET_PEER_STATE_CONNECTED or cp_->data == NULL) continue;
												VarList::OnConsoleMessage(cp_, "Golden Egg Carton rewards " + get_player_nick(peer) + " with a `5Rare " + items[receivingitems[i].first].ori_name + ".");
											}
										}
										int receiveds = receivingitems[i].second;
										Inventory::Modify(peer, receivingitems[i].first, receivingitems[i].second);
										if (i == 0)received += "`2" + to_string(receiveds) + " " + items[receivingitems[i].first].ori_name + "`` and ";
										else received += "`2" + to_string(receiveds) + " " + items[receivingitems[i].first].ori_name + "``";
									}
									Inventory::Modify(peer, p_, got = -1);
									VarList::OnTalkBubble(peer, pInfo(peer)->netID, "You received " + received + " from a Golden Egg Carton.", 0, 1);
									VarList::OnConsoleMessage(peer, "You received " + received + " from a Golden Egg Carton.");
								}
							}
						}
						break;
					}
					case 3204: {
						if (t_ == 3200 && block_->shelf_1 < 100) {
							if (have < 1) break;
							have = -1;
							block_->shelf_1 += 1;
							Inventory::Modify(peer, 3204, have);
							tile_update(peer, world_, block_, x_, y_);
							if (WinterFest.Active) DailyEvent_Task::WinterFest(peer, "12", 1);
						}
						break;
					}
					case 1360: {
						if (t_ == 1398 && WinterFest.Active && world_->name == "GROWCH") {
							Inventory::Modify(peer, p_, got = -1);
							if (WinterFest.Growch_Happy == true) {
								VarList::OnTalkBubble(peer, pInfo(peer)->netID, "`wThe `2Growch ``happlly says no thanks!", 0, 1);
							}
							else {
								DailyEvent_Task::WinterFest(peer, "7", 1);
								VarList::OnTalkBubble(peer, pInfo(peer)->netID, "`wYou gave the `2Growch `wa Winter Gift, making his heart ever-so-slightly larger!", 0, 1);
								Winter_Fest::Growch_Heart(peer, world_);
							}
							PlayerMoving data_effect_{};
							data_effect_.packetType = 19;
							data_effect_.punchX = p_;
							data_effect_.punchY = pInfo(peer)->netID;
							data_effect_.x = x_ * 32 + 16, data_effect_.y = y_ * 32 + 16;
							BYTE* raw_effect = packPlayerMoving(&data_effect_, 56);
							raw_effect[8] = pInfo(peer)->netID, raw_effect[3] = 4;
							for (ENetPeer* cp_ = server->peers; cp_ < &server->peers[server->peerCount]; ++cp_) {
								if (cp_->state != ENET_PEER_STATE_CONNECTED or cp_->data == NULL) continue;
								if (pInfo(cp_)->world == world_->name) {
									send_raw(cp_, 4, raw_effect, 56, ENET_PACKET_FLAG_RELIABLE);
								}
							}
						}
						else {
							for (ENetPeer* cp_ = server->peers; cp_ < &server->peers[server->peerCount]; ++cp_) {
								if (cp_->state != ENET_PEER_STATE_CONNECTED or cp_->data == NULL or pInfo(peer)->world != pInfo(cp_)->world) continue;
								string xtest = to_string(pInfo(cp_)->x / 32), ytest = to_string(pInfo(cp_)->y / 32);
								int xt1 = atoi(xtest.c_str()), xt2 = atoi(ytest.c_str()); bool has_ = false;
								int random = rand() % items[p_].noob_item.size(), itemid = items[p_].noob_item[random].first, got = items[p_].noob_item[random].second;
								if (x_ == xt1 && y_ == xt2) {
									if (Inventory::Get_Slots(pInfo(cp_)) >= 1) {
										int received = got;
										has_ = true;
										if (Inventory::Modify(cp_, itemid, got) == 0) {
											Inventory::Modify(peer, p_, got = -1);
											if (cp_ != peer) {
												if (WinterFest.Active) DailyEvent_Task::WinterFest(peer, "9", 1);
											}
											PlayerMoving data_{};
											data_.packetType = 19, data_.plantingTree = 0, data_.netID = 0;
											data_.punchX = p_, data_.punchY = pInfo(peer)->netID;
											BYTE* raw;
											data_.x = pInfo(peer)->x + 10, data_.y = pInfo(peer)->y + 16;
											raw = packPlayerMoving(&data_);
											int32_t to_netid = pInfo(cp_)->netID;
											raw[3] = 5;
											Memory_Copy(raw + 8, &to_netid, 4);
											for (ENetPeer* cp_2 = server->peers; cp_2 < &server->peers[server->peerCount]; ++cp_2) {
												if (cp_2->state != ENET_PEER_STATE_CONNECTED or cp_2->data == NULL) continue;
												if (pInfo(cp_2)->world == name_) {
													send_raw(cp_2, 4, raw, 56, ENET_PACKET_FLAG_RELIABLE);
												}
											}
											delete[] raw;
											VarList::OnTalkBubble(cp_, pInfo(cp_)->netID, "You received `2" + to_string(received) + " " + items[itemid].name + "`` from the " + items[p_].name + ".", 0, 1);
											VarList::OnConsoleMessage(cp_, "You received `2" + to_string(received) + " " + items[itemid].name + "`` from the " + items[p_].name + ".");
										}
									}
								}
								else VarList::OnTalkBubble(peer, pInfo(peer)->netID, "`wUse the gift on yourself to open it, or on another player to give it.", 0, true);
							}
						}
						break;
					}
					case 5402: case 5404: {
						for (ENetPeer* cp_ = server->peers; cp_ < &server->peers[server->peerCount]; ++cp_) {
							if (cp_->state != ENET_PEER_STATE_CONNECTED or cp_->data == NULL or pInfo(peer)->world != pInfo(cp_)->world) continue;
							string xtest = to_string(pInfo(cp_)->x / 32), ytest = to_string(pInfo(cp_)->y / 32);
							int xt1 = atoi(xtest.c_str()), xt2 = atoi(ytest.c_str()); bool has_ = false;
							int random = rand() % items[p_].noob_item.size(), itemid = items[p_].noob_item[random].first, got = items[p_].noob_item[random].second;
							if (x_ == xt1 && y_ == xt2) {
								if (cp_ == peer) VarList::OnTalkBubble(peer, pInfo(peer)->netID, "`2Get into Winterfest spirit and share the love...``", 0, 0);
								else {
									int received = 0, rem = 0, random = rand() % items[p_].noob_item.size(), itemid = items[p_].noob_item[random].first;
									int got = items[p_].noob_item[random].second;
									if (p_ == 5402 and WinterFest.Active) {
										for (const auto& result : pInfo(peer)->WinterBingo_Task) {
											if (result.second == itemid) if (not Has_Claimed::Bingo(peer, result.second)) pInfo(peer)->Has_BingoTask.push_back(result.second);
										}
										if (rand() % 50 < 5) Winter_Fest::Spawn_Event(peer);
										DailyEvent_Task::WinterFest(peer, "2", 1);
									}
									if (p_ == 5404 and WinterFest.Active) {
										for (const auto& result : pInfo(peer)->WinterBingo_Task) {
											if (result.second == itemid) if (not Has_Claimed::Bingo(peer, result.second)) pInfo(peer)->Has_BingoTask.push_back(result.second);
										}
										Winter_Fest::Spawn_Event(peer);
										DailyEvent_Task::WinterFest(peer, "3", 1);
									}
									PlayerMoving data_{}, data{};
									data.packetType = 36, data.netID = 46, data.characterState = 0x8, data.x = pInfo(peer)->x + 16, data.y = pInfo(peer)->y + 16;
									BYTE* raw = packPlayerMoving(&data);
									data_.packetType = 19, data_.plantingTree = 0, data_.netID = 0;
									data_.punchX = p_, data_.punchY = pInfo(peer)->netID;
									BYTE* raw_;
									data_.x = pInfo(peer)->x + 10, data_.y = pInfo(peer)->y + 16;
									raw_ = packPlayerMoving(&data_);
									int32_t to_netid = pInfo(cp_)->netID;
									raw_[3] = 5;
									Memory_Copy(raw_ + 8, &to_netid, 4);
									for (ENetPeer* cp_2 = server->peers; cp_2 < &server->peers[server->peerCount]; ++cp_2) {
										if (cp_2->state != ENET_PEER_STATE_CONNECTED or cp_2->data == NULL) continue;
										if (pInfo(cp_2)->world == name_) {
											if (p_ == 5404) CAction::Effect(cp_2, 46, (float)pInfo(peer)->x + 16, (float)pInfo(peer)->y + 16);
											send_raw(cp_2, 4, raw, 56, ENET_PACKET_FLAG_RELIABLE);
											send_raw(cp_2, 4, raw_, 56, ENET_PACKET_FLAG_RELIABLE);
											if (rand() % 100 < 5) {
												std::vector<std::string> Rand_Talk{ "What happened to the man who stole an Winterfest Calendar? - He got 25 days!","What song do you sing at a snowman's birthday party? - Freeze a jolly good fellow!","What's yellow and dangerous? - Shark-infested custard.","Why did the elf push his bed into the fireplace? - He wanted to sleep like a log.","Why did the turkey join the band? - Because it had the drumsticks!","Why did no one bid for Rudolph and Blitzen at the auction? - They were too deer.","What's the standard holiday greeting for cows? - MOOOO-RRY CHRISTMAS!","Who delivers presents to baby sharks for Winterfest? - Santa Jaws!","Why couldn't the Growch avoid going to Winterfest parties? - Because his presents was required.","Why couldn't the skeleton go to the Winterfest party? - Because he had no body to go with.","What's the best Winterfest present you could get? - A broken drum - you just can't beat it.","When is a boat just like snow? - When it's adrift!","What carol is heard in the desert? - O camel ye faithful!","Why is it getting harder to buy Winterfest Calendars? - Because their days are numbered!","Why was the snowman looking through the carrots? - He was picking his nose.","Why did Giving Trees become an important part of Winterfest? - People thought they'd spruce up the place.","What do you get if you cross a bell with a skunk? - Jingle Smells!","Why was the snowman looking through the carrots? - He was picking his nose.","What do snowmen wear on their heads? - Ice caps!","Why don't reindeer go to public school? - They're elf-taught.","Why can't Giving Trees knit? - Because they always drop their needles." };
												std::random_device rd;
												std::mt19937 gen(rd());
												std::uniform_int_distribution<> dis(0, Rand_Talk.size() - 1);
												int random_index = dis(gen);
												std::string random_string = Rand_Talk[random_index];
												VarList::OnTalkBubble(cp_2, pInfo(cp_)->netID, random_string, 0, 0);
											}
										}
									}
									delete[] raw, raw_;
									received = got;
									Inventory::Modify(peer, p_, rem = -1);
									VarList::OnConsoleMessage(peer, "Happy Winterfest, you got " + items[itemid].name + "");
									if (p_ == 5404) VarList::OnConsoleMessage(peer, "Merry WinterFest: A `2Royal Winter`` has arrived for using a `2Deluxe Winterfest Cracker``!");
									if (Inventory::Modify(peer, itemid, got) != 0) {
										WorldDrop drop_block_{};
										drop_block_.id = itemid, drop_block_.count = received, drop_block_.x = pInfo(peer)->x + rand() % 17, drop_block_.y = pInfo(peer)->y + rand() % 17;
										VisualHandle::Drop(world_, drop_block_);
									}
									{
										std::vector<int> Rand_Prize{ 5406,5408,5406,5408,5406,5408,5406,5408,5406,5410,5408,5406,5408,5406,5410,5408,5406,5408,5406,5408,5406,5410,5408,5406,5408,5406,5406,5408,5406,5408,5406,5408,5406,5406,5408,5408,5410,5408,5412,5408,5408 };
										std::random_device rd;
										std::mt19937 gen(rd());
										std::uniform_int_distribution<> dis(0, Rand_Prize.size() - 1);
										int count = 1, random_index = dis(gen), random_id = Rand_Prize[random_index];
										VarList::OnConsoleMessage(cp_, "Happy Winterfest, you got " + items[random_id].name + "");
										if (Inventory::Modify(cp_, random_id, count) != 0) {
											WorldDrop drop_block_{};
											drop_block_.id = random_id, drop_block_.count = 1, drop_block_.x = pInfo(cp_)->x + rand() % 17, drop_block_.y = pInfo(cp_)->y + rand() % 17;
											VisualHandle::Drop(world_, drop_block_);
										}
									}
								}
							}
							else VarList::OnTalkBubble(peer, pInfo(peer)->netID, "`wMust be used on a person.", 0, true);
						}
						break;
					}
					case 7672: case 2306: {
						if (Inventory::Get_Slots(pInfo(peer)) >= 1) {
							int received = 0, rem = 0, random = rand() % items[p_].noob_item.size(), itemid = items[p_].noob_item[random].first;
							int got = items[p_].noob_item[random].second;
							if (items[p_].newdropchance != 0 && (rand() % items[p_].newdropchance) < 1) {
								if (items[p_].rare_item.size() != 0) random = (rand() % items[p_].rare_item.size()), itemid = items[p_].rare_item[random].first, got = items[p_].rare_item[random].second;
							}
							if (p_ == 2306) {
								if (Event()->Anniversary) {
									if (ServerPool::PlayerCountWorld(pInfo(peer)->world) >= 5) Anniversary::Spawn_Event(peer);
									EventPool::Anniversary::Point::Add(peer, 10);
									VarList::OnEventButtonDataSet(peer, "AnniversaryLeaderboardButton", 1, "{\"active\":true,\"buttonAction\":\"leaderboardBtnClicked\",\"buttonState\":1,\"buttonTemplate\":\"BaseEventButton\",\"counter\":0,\"counterMax\":0,\"itemIdIcon\":0,\"name\":\"AnniversaryLeaderboardButton\",\"notification\":0,\"order\":5,\"rcssClass\":\"anniversary-leaderboard\",\"text\":\"" + to_string(EventPool::Anniversary::Point::Get(peer)) + "\"}");
								}
							}
							if (p_ == 7672) {
								if (Event()->Anniversary) {
									if (ServerPool::PlayerCountWorld(pInfo(peer)->world) >= 5) Anniversary::Spawn_Event(peer);
									EventPool::Anniversary::Point::Add(peer, 50);
									VarList::OnEventButtonDataSet(peer, "AnniversaryLeaderboardButton", 1, "{\"active\":true,\"buttonAction\":\"leaderboardBtnClicked\",\"buttonState\":1,\"buttonTemplate\":\"BaseEventButton\",\"counter\":0,\"counterMax\":0,\"itemIdIcon\":0,\"name\":\"AnniversaryLeaderboardButton\",\"notification\":0,\"order\":5,\"rcssClass\":\"anniversary-leaderboard\",\"text\":\"" + to_string(EventPool::Anniversary::Point::Get(peer)) + "\"}");
								}
							}
							received = got;
							Inventory::Modify(peer, p_, rem = -1);
							VarList::OnConsoleMessage(peer, "You feel euphoric and got `2" + to_string(received) + " " + items[itemid].name);
							if (Inventory::Modify(peer, itemid, got) != 0) {
								WorldDrop drop_block_{};
								drop_block_.id = itemid, drop_block_.count = received, drop_block_.x = pInfo(peer)->x + rand() % 17, drop_block_.y = pInfo(peer)->y + rand() % 17;
								VisualHandle::Drop(world_, drop_block_);
							}
						}
						break;
					}
					case 10396: case 11476:  case 10538: case 13054: case 5750: case 9286: case 7346: case 9680: case 11860: case 11036: case 1680: case 10536: case 11758: case 11756: case 10386: case 11398: case 8410: case 8408: case 8414: case 8412: case 7954: case 13598: case 7484: case 5948: case 12262: case 12264: case 12044: case 12046: case 12566: case 12568: case 12832: case 12830: case 11402: case 11404: {
						if (Inventory::Get_Slots(pInfo(peer)) >= 1) {
							int received = 0, rem = 0;
							bool toobig = false;
							if (p_ == 10386) {
								if (Event()->Halloween) DailyEvent_Task::Halloween(peer, "5", 1);
							}
							if (p_ == 1680) {
								int got = 0;
								Inventory::Modify(peer, 834, got);
								if (got < 200) {
									VarList::OnTalkBubble(peer, pInfo(peer)->netID, "Requires 200 Fireworks to launch!", 0, 1);
									toobig = true;
								}
								else {
									toobig = false;
									Inventory::Modify(peer, 834, got = -200);
								}
							}
							if (toobig) break;
							int random = rand() % items[p_].noob_item.size(), itemid = items[p_].noob_item[random].first;
							got = items[p_].noob_item[random].second;
							if (items[p_].newdropchance != 0 && (rand() % items[p_].newdropchance) < 1) {
								if (items[p_].rare_item.size() != 0) random = (rand() % items[p_].rare_item.size()), itemid = items[p_].rare_item[random].first, got = items[p_].rare_item[random].second;
								if (p_ == 1680) {
									if (itemid == 8588 || itemid == 9730 || itemid == 11008 || itemid == 12186 || itemid == 12180 || itemid == 12176) {
										string texts = "A `4" + items[p_].ori_name + "`` rewards `2" + get_player_nick(peer) + "`` with a `5Rare " + items[itemid].ori_name + "``.";
										for (ENetPeer* cp_ = server->peers; cp_ < &server->peers[server->peerCount]; ++cp_) {
											if (cp_->state != ENET_PEER_STATE_CONNECTED or cp_->data == NULL) continue;
											VarList::OnConsoleMessage(cp_, "CP:_PL:0_OID:_CT:[S]_ `o**`` " + texts + "``");
										}
									}
								}
							}
							if (p_ == 1486) if (pInfo(peer)->lwiz_step == 6) add_lwiz_points(peer, got);
							if (p_ == 1680) {
								Inventory::Modify(peer, p_, got = -1);
								WorldDrop drop_block_{};
								drop_block_.id = itemid, drop_block_.count = 1, drop_block_.x = pInfo(peer)->x, drop_block_.y = pInfo(peer)->y - 32;
								VisualHandle::Drop(world_, drop_block_);
								PlayerMoving data_{};
								gamepacket_t p;
								p.Insert("OnParticleEffect"), p.Insert(73), p.Insert((float)pInfo(peer)->x + 16, (float)pInfo(peer)->y - 32);
								for (ENetPeer* cp_ = server->peers; cp_ < &server->peers[server->peerCount]; ++cp_) {
									if (cp_->state != ENET_PEER_STATE_CONNECTED or cp_->data == NULL or pInfo(peer)->world != pInfo(cp_)->world) continue;
									p.CreatePacket(cp_);
								}
							}
							else if (p_ == 9018) {
								if (pInfo(peer)->hair == 9036) {
									add_peer_xp(peer, 250, true);
									Pet_Ai::Add_Xp(peer, 250);
								}
							}
							else if (p_ == 2992) {
								if (pInfo(peer)->back == 3134) {
									add_peer_xp(peer, 250, true);
									Pet_Ai::Add_Xp(peer, 250);
								}
							}
							else {
								if (p_ == 10538 and WinterFest.Active or p_ == 10536 and WinterFest.Active) {
									for (const auto& result : pInfo(peer)->WinterBingo_Task) {
										if (result.second == itemid) if (not Has_Claimed::Bingo(peer, result.second)) pInfo(peer)->Has_BingoTask.push_back(result.second);
									}
								}
								if (itemid == 13014) {
									for (ENetPeer* cp_2 = server->peers; cp_2 < &server->peers[server->peerCount]; ++cp_2) {
										if (cp_2->state != ENET_PEER_STATE_CONNECTED or cp_2->data == NULL) continue;
										if (pInfo(cp_2)->world == pInfo(peer)->world) {
											CAction::Effect(cp_2, 90, (float)pInfo(peer)->x + 16, (float)pInfo(peer)->y + 16);
										}
									}
								}
								received = got;
								Inventory::Modify(peer, p_, rem = -1);
								VarList::OnTalkBubble(peer, pInfo(peer)->netID, "You received `2" + to_string(received) + " " + items[itemid].name + "`` from the " + items[p_].name + ".", 0, 1);
								VarList::OnConsoleMessage(peer, "You received `2" + to_string(received) + " " + items[itemid].name + "`` from the " + items[p_].name + ".");				
								if (Inventory::Modify(peer, itemid, got) != 0) {
									WorldDrop drop_block_{};
									drop_block_.id = itemid, drop_block_.count = received, drop_block_.x = pInfo(peer)->x + rand() % 17, drop_block_.y = pInfo(peer)->y + rand() % 17;
									VisualHandle::Drop(world_, drop_block_);
								}
							}
						}
						break;
					}
					case 834: case 5766: case 1406: case 9264: {
						Inventory::Modify(peer, p_, got = -1);
						if (rand() % 100 < 2 and p_ == 834) {
							VarList::OnTalkBubble(peer, pInfo(peer)->netID, "Received 1 Summer Surprise!", 0, 1);
							WorldDrop drop_block_{};
							drop_block_.id = 836, drop_block_.count = 1, drop_block_.x = pInfo(peer)->x, drop_block_.y = pInfo(peer)->y;
							VisualHandle::Drop(world_, drop_block_);
						}
						for (ENetPeer* cp_ = server->peers; cp_ < &server->peers[server->peerCount]; ++cp_) {
							if (cp_->state != ENET_PEER_STATE_CONNECTED or cp_->data == NULL or pInfo(peer)->world != pInfo(cp_)->world) continue;
							CAction::Effect(cp_, 40, (float)pInfo(peer)->x + 16, (float)pInfo(peer)->y);
						}
						break;
					}
					case 5804: case 5806: case 5808: case 5810: case 5812: case 6822: case 5770: case 5772: case 5774: case 5776: case 5778: case 6002: case 6052: case 6272: case 6274: case 6276: case 7232: case 7234: case 6122: case 6672: case 6322: case 7062: case 7130: case 6278: case 6824: case 6744: case 6894: case 7370: case 7474: case 7656: case 7684: case 7932: case 8416: case 10114: case 8028: case 7698: case 10116: case 12544: case 12542: {
						if (pInfo(peer)->growmoji.find(items[p_].emoji + "0&") != string::npos) {
							Inventory::Modify(peer, p_, got = -1);
							replaceAll(pInfo(peer)->growmoji, items[p_].emoji + "0&", items[p_].emoji + "1&");
							VarList::OnAddNotification(peer, "You've unlocked `$" + items[p_].ori_name + "``!", "interface/large/friend_button.rttex", "audio/hub_open.wav");
							form_emoji(peer);
						}
						break;
					}
					case 830: case 9164: case 942: case 1060: case 8738: case 1136: case 1402: case 1532: case 3562: case 4774: case 7380: case 7588: case 8556: case 9582: case 9602: case 6420: case 14896: {
						if (p_ == 830) {
							int got = 0;
							Inventory::Modify(peer, 834, got);
							if (got < 100) {
								VarList::OnTalkBubble(peer, pInfo(peer)->netID, "Beach blast requires 100 Fireworks.", 0, 0);
								break;
							}
						}
						VarList::OnDialogRequest(peer, SetColor(peer) + "set_default_color|`o\nadd_label_with_icon|big|`0" + items[p_].name + "``|left|" + to_string(p_) + "|\nadd_textbox|This item creates a new world! Enter a unique name for it.|left||\nadd_text_input|name|New World Name||256|\nend_dialog|blast|Cancel|`5Create!``|\n");
						pInfo(peer)->lastchoosenitem = p_;
						break;
					}
					case 2580: case 1280: case 2480: case 11230: case 14526: {
						if (p_ == 2580) {
							if (to_lower(world_->owner_name) == to_lower(pInfo(peer)->tankIDName)) {
								VarList::OnDialogRequest(peer, SetColor(peer) + "set_default_color|`o\nadd_label_with_icon|big|`wSwap World Names``|left|2580|\nadd_smalltext|This will swap the name of the world you are standing in with another world `4permanently``.  You must own both worlds, with a World Lock in place.<CR>Your `wChange of Address`` will be consumed if you press `5Swap 'Em``.|left|\nadd_textbox|Enter the other world's name:|left|\nadd_text_input|name_box|||32|\nadd_spacer|small|\nend_dialog|world_swap|Cancel|Swap 'Em!|");
							}
							else {
								VarList::OnTalkBubble(peer, pInfo(peer)->netID, "`wYou can only change the name of a world that you own!", 0, 1);
								return false;
							}
						}
						if (p_ == 2480) VarList::OnDialogRequest(peer, SetColor(peer) + "set_default_color|`o\nadd_label_with_icon|big|`wMegaphone``|left|2480|\nadd_textbox|Enter a message you want to broadcast to every player in Growtopia! This will use up 1 Megaphone.|left|\nadd_text_input|words|||128|\nembed_data|itemID|2480\nend_dialog|megaphone|Nevermind|Broadcast|\n");
						if (p_ == 11230) VarList::OnDialogRequest(peer, SetColor(peer) + "set_default_color|`o\nadd_label_with_icon|big|`w`5Locke's Megaphone``|left|11230|\nadd_textbox|Enter a message you want to broadcast to every player in Growtopia! This will use up 1 `5Locke's Megaphone.|left|\nadd_text_input|words|||128|\nembed_data|itemID|11230\nend_dialog|lockemegaphone|Nevermind|Broadcast|\n");
						if (p_ == 14526) {
							pInfo(peer)->lastwrenchb = p_;
							if (not pInfo(peer)->Has_Read_) {
								VarList::OnTalkBubble(peer, pInfo(peer)->netID, "Before mining you are required to read the instructions in world 'MINING'", 0, 1);
								return false;
							}
							if (Playmods::HasById(pInfo(peer), 159)) {
								VarList::OnTalkBubble(peer, pInfo(peer)->netID, "That's sort of hard to do while having a cooldown.", 0, 1);
								return false;
							}
							VarList::OnDialogRequest(peer, SetColor(peer) + "set_default_color|`o\nadd_label_with_icon|big|`wMiner's License``|left|14526|\nadd_spacer|small|\nadd_textbox|License Number: `wML-0" + to_string(pInfo(peer)->Number_License) + "|left|\nadd_textbox|License Holder: `w" + pInfo(peer)->tankIDName + "|left|\nadd_spacer|small|\nadd_textbox|Mining Operation Details:|left|\nadd_smalltext|  - Mine Name: `wCrystal Mine|left|\nadd_smalltext|  - Mine Location: `wNot yet known|left|\nadd_smalltext|  - Type of Mining: `wCrystal Mining|left|\nadd_smalltext|  - Mining Method: `wOpen-pit mining|left|\nadd_smalltext|  - Estimated Production: `w500-5000|left|\nadd_spacer|small|\nadd_textbox|License Conditions:|left|\nadd_smalltext|  - The License Holder shall comply with all applicable laws and regulations related to mining.|left|\nadd_smalltext|  - The License Holder shall ensure that all mining activities are conducted in a safe and environmentally responsible manner.|left|\nadd_spacer|small|\nadd_textbox|instruction:|left|\nadd_smalltext|  - In the mining world, you have a timers up 15 minutes to find and break the ores. But you can't break the ores with your useless pickaxes!|left|\nadd_smalltext|  - After you got the coin, you can sells the coin to the Albert - Exchange Place in world [MINING]. To gaining some extra gems, locks and awesome items!|left|\nadd_smalltext|  - For complete instructions, you can visit World MINING.|left|\nadd_spacer|small|\nadd_smalltext|I have read and understood the terms and conditions of this Miner's License and agree to comply with them.|left|\nadd_smalltext|The final requirement to be able to enter the world of mining is that you must have one of the pickaxes below!|left|\ntext_scaling_string|Subscribtions+++|\nadd_button_with_icon||Pickaxe LVL 1|noflags|14516|\nadd_button_with_icon||Pickaxe LVL 2|noflags|14518|\nadd_button_with_icon||Pickaxe LVL 3|noflags|14520|\nadd_button_with_icon||Pickaxe LVL 4|noflags|14522|\nadd_button_with_icon||Pickaxe LVL 5|noflags|14524|\nadd_button_with_icon||END_LIST|noflags|0||\nadd_spacer|small|\nadd_label|small|Select the portal you want to enter:|left|\nmax_checks|1|\ntext_scaling_string|DEFIBRILLATOR|\nadd_checkicon|portal_1|PORTAL I||20210||0|\nadd_checkicon|portal_2|PORTAL II||20210||0|\nadd_checkicon|portal_3|PORTAL III||20210||0|\nadd_checkicon|portal_4|PORTAL IV||20210||0|\nadd_checkicon|portal_5|PORTAL V||20210||0|\nadd_button_with_icon||END_LIST|noflags|0||\nadd_custom_button|Submit|textLabel:Submit;middle_colour:2136747;border_colour:35263244;|\nend_dialog|Miner_License|||\nadd_quick_exit|");
						}
						if (p_ == 1280);
						break;
					}
					case 1404: {
						if (to_lower(world_->owner_name) == to_lower(pInfo(peer)->tankIDName) or Role::Administrator(peer)) {
							bool used = false;
							if (block_->flags & 0x10000000) {
								VarList::OnTalkBubble(peer, pInfo(peer)->netID, "You can't move door on fire!", 0, true);
							}
							else {
								if (y_ < (world_->max_y -6) && y_ >= 0) {
									int new_bedrock = 8;
									if (world_->d_weather == 255) new_bedrock = 9570;
									else if (world_->d_weather == 66) new_bedrock = 10378;
									if (block_->fg == 0 || block_->fg == 6 || block_->fg == 8 || block_->fg == 9570 || block_->fg == 10378) {
										WorldBlock* block2_ = &world_->blocks[x_ + ((y_ + 1) * 100)];
										if (block2_->flags & 0x10000000) {
											VarList::OnTalkBubble(peer, pInfo(peer)->netID, "You can't move door on fire!", 0, true);
										}
										else {
											if (block2_->fg == 0 || block2_->fg == 6 || block2_->fg == 8 || block2_->fg == 9570 || block2_->fg == 10378 and y_ < (world_->max_y - 6)) {
												VarList::OnTalkBubble(peer, pInfo(peer)->netID, "You've moved the door!", 0, true);
												used = true;
												int c_ = -1;
												Inventory::Modify(peer, p_, c_);
												for (int i_ = 0; i_ < world_->blocks.size(); i_++) {
													if (world_->blocks[i_].fg == 6) world_->blocks[i_].fg = 0, update_tile(peer, i_ % 100, i_ / 100, 0, false, true);
													if (i_ < (world_->blocks.size() - 600) && (world_->blocks[i_].fg == 8 || world_->blocks[i_].fg == 9570 || world_->blocks[i_].fg == 10378)) world_->blocks[i_].fg = 0, update_tile(peer, i_ % 100, i_ / 100, 0, false, true);
												}
												for (ENetPeer* cp_ = server->peers; cp_ < &server->peers[server->peerCount]; ++cp_) {
													if (cp_->state != ENET_PEER_STATE_CONNECTED or cp_->data == NULL or pInfo(cp_)->world != world_->name) continue;
													pInfo(cp_)->x = float(x_) * 32, pInfo(cp_)->y = float(y_) * 32;
													VarList::OnSetPos(cp_, x_ * 32, y_ * 32);
													update_tile(cp_, x_, y_, world_->blocks[x_ + (y_ * 100)].fg = 6, false, false);
													update_tile(cp_, x_, y_ + 1, world_->blocks[x_ + (y_ + 1) * 100].fg = new_bedrock, false, false);
												}
												tile_update(peer, world_, block_, x_, y_);
											}
										}
									}
								}
								if (used == false) {
									CAction::Positioned(peer, pInfo(peer)->netID, "audio/cant_place_tile.wav", 0);
									VarList::OnTalkBubble(peer, pInfo(peer)->netID, "There's no room to put the door there! You need 2 empty spaces vertically.", 0, true);
								}
							}
						}
						else VarList::OnTalkBubble(peer, pInfo(peer)->netID, "You can only use this in a world that you have world-locked!", 0, true);
						break;
					}
					case 3062: case 1866: case 822: case 3102: {
						if (items[t_].blockType == BlockTypes::MAIN_DOOR or items[t_].blockType == BlockTypes::BEDROCK or t_ == 9570 or t_ == 0 && (p_ == 3102 || p_ == 3062 || p_ == 1866)) {
							if (p_ == 3102 || p_ == 3062) {
								VarList::OnTalkBubble(peer, pInfo(peer)->netID, (t_ == 0 ? "There's nothing to burn!" : "That won't burn!"), 0, true);
							}
							return true;
						}
						if ((p_ == 1866 || p_ == 822) && not Only_Access(peer, world_, block_)) break;
						int c_ = -1;
						if (p_ == 822 && block_->flags & 0x04000000) c_ = 0;
						if (Inventory::Modify(peer, p_, c_) == 0 || p_ == 822) {
							if (p_ == 3062) {
								if (world_->total_fires < 150) {
									add_peer_xp(peer, 1); Pet_Ai::Add_Xp(peer, 1);
									if (block_->fg == 0) {
										if (rand() % 100 < (items[p_].newdropchance + 5)) {
											WorldDrop drop_seed_{};
											drop_seed_.id = p_ + 1, drop_seed_.count = 1, drop_seed_.x = (x_ * 32) + rand() % 17, drop_seed_.y = (y_ * 32) + rand() % 17;
											if (not use_mag(world_, drop_seed_, x_, y_)) VisualHandle::Drop(world_, drop_seed_);
										}
										else if (rand() % 10 < 4) gems_(peer, world_, rand() % (items[p_].max_gems + 1), x_ * 32, y_ * 32, p_);
									}
									if (block_->fg == 3090) {
										update_tile(peer, x_, y_, block_->fg = 3128, false, true);
										vector<pair<int, int>> receivingitems;
										for (int i_ = 0; i_ < world_->drop_new.size(); i_++) {
											if (world_->drop_new[i_][0] == 0) continue;
											if (x_ == (world_->drop_new[i_][3] / 32) && y_ == (world_->drop_new[i_][4] / 32) && (items[world_->drop_new[i_][0]].grindable_prize != 0 && items[world_->drop_new[i_][0]].grindable_count == 0)) {
												receivingitems.push_back(make_pair(world_->drop_new[i_][0], world_->drop_new[i_][1]));
												PlayerMoving data_{};
												data_.packetType = 14, data_.netID = 0, data_.plantingTree = world_->drop_new[i_][2];
												BYTE* raw = packPlayerMoving(&data_);
												for (ENetPeer* cp_ = server->peers; cp_ < &server->peers[server->peerCount]; ++cp_) {
													if (cp_->state != ENET_PEER_STATE_CONNECTED or cp_->data == NULL or pInfo(cp_)->world != name_) continue;
													send_raw(cp_, 4, raw, 56, ENET_PACKET_FLAG_RELIABLE);
												}
												delete[]raw;
												world_->drop_new.erase(world_->drop_new.begin() + i_);
											}
										}
										for (int i = 0; i < receivingitems.size(); i++) {
											int item = receivingitems[i].first;
											if (items[item].grindable_prize != 0 && items[item].grindable_count == 0) item = items[item].grindable_prize;
											WorldDrop drop_block_{};
											drop_block_.id = item, drop_block_.count = receivingitems[i].second, drop_block_.x = (x_ * 32) + rand() % 17, drop_block_.y = (y_ * 32) + rand() % 17;
											VisualHandle::Drop(world_, drop_block_);
										}
									}
									else if (block_->fg == 7764 || block_->fg == 9300 || block_->fg == 8048 || block_->fg == 7768 || block_->fg == 7772 || block_->fg == 7776) block_->fg += 2, block_->planted = time(nullptr);
								}
							}
							else if (p_ == 822 && block_->flags & 0x04000000 && rand() % 2 < 1) Inventory::Modify(peer, 822, c_ = 1);
							else if (p_ == 3102) {
								vector<int> random_xy{ 2, 1, 0, -1 };
								int randomx = 0, randomy = 0;
								for (int i = 0; i < 7; i++) {
									if (rand() % 2 < 1) randomx = x_ + random_xy[rand() % random_xy.size()], randomy = y_;
									else randomx = x_, randomy = y_ + random_xy[rand() % random_xy.size()];
									apply_tile_visual(world_, &world_->blocks[randomx + (randomy * 100)], randomx, randomy, items[p_].block_flag);
								}
							}
							apply_tile_visual(world_, block_, x_, y_, items[p_].block_flag, (block_->flags & items[p_].block_flag ? true : false));
						}
						break;
					}
					case 3478: case 3480: case 3482: case 3484: case 3486: case 3488: case 3490: case 3492: {
						if (not Only_Access(peer, world_, block_)) break;
						if (pInfo(peer)->hand != 3494 and pInfo(peer)->hand != 7938) {
							VarList::OnTalkBubble(peer, pInfo(peer)->netID, "You need a " + items[3494].name + " or a " + items[7938].name + " to apply paint!", 0, 0);
							break;
						}
						if (block_->fg == 0 and block_->bg == 0) {
							VarList::OnTalkBubble(peer, pInfo(peer)->netID, "There's nothing to paint!", 0, 0);
							break;
						}
						if (items[block_->fg].blockType == BlockTypes::MAIN_DOOR or items[block_->fg].blockType == BlockTypes::BEDROCK or items[block_->fg].blockType == BlockTypes::LOCK or block_->fg == 9570) {
							VarList::OnTalkBubble(peer, pInfo(peer)->netID, "That's too special to paint.", 0, 0);
							break;
						}
						bool alr_painted = false;
						if (block_->flags & 0x20000000 and block_->flags & 0x40000000 and block_->flags & 0x80000000) {
							if (p_ == 3490) alr_painted = true;
						}
						else if (block_->flags & 0x20000000 and block_->flags & 0x80000000) {
							if (p_ == 3488) alr_painted = true;
						}
						else if (block_->flags & 0x80000000) {
							if (p_ == 3486) alr_painted = true;
						}
						else if (block_->flags & 0x40000000 and block_->flags & 0x80000000) {
							if (p_ == 3484) alr_painted = true;
						}
						else if (block_->flags & 0x40000000) {
							if (p_ == 3482) alr_painted = true;
						}
						else if (block_->flags & 0x20000000 and block_->flags & 0x40000000) {
							if (p_ == 3480) alr_painted = true;
						}
						else if (block_->flags & 0x20000000) {
							if (p_ == 3478) alr_painted = true;
						}
						if (alr_painted) {
							VarList::OnTalkBubble(peer, pInfo(peer)->netID, "That block is already painted that color!", 0, 0);
							break;
						}
						{
							int colour = 0x00000000;
							float particle_ = 0;if (p_ == 3478) {
								colour |= 0x20000000;
								particle_ = 65280.00;
							}
							else if (p_ == 3480) {
								colour |= 0x20000000;
								colour |= 0x40000000;
								particle_ = 16776960.00;
							}
							else if (p_ == 3482) {
								colour |= 0x40000000;
								particle_ = 16711680.00;
							}
							else if (p_ == 3484) {
								colour |= 0x40000000;
								colour |= 0x80000000;
								particle_ = 4294901760.00;
							}
							else if (p_ == 3486) {
								colour |= 0x80000000;
								particle_ = 4278190080.00;
							}
							else if (p_ == 3488) {
								colour |= 0x20000000;
								colour |= 0x80000000;
								particle_ = 4278255360.00;
							}
							else if (p_ == 3490) {
								colour |= 0x20000000;
								colour |= 0x40000000;
								colour |= 0x80000000;
								particle_ = 1010580480.00;
							}
							else {
								bool has_something_to_change = false;
								if (block_->flags & 0x20000000 or block_->flags & 0x40000000 or block_->flags & 0x80000000) {
									has_something_to_change = true;
								}
								if (not has_something_to_change) {
									VarList::OnTalkBubble(peer, pInfo(peer)->netID, "Don't waste your varnish on an unpainted block!", 0, 0);
									break;
								}
								particle_ = 3875520768.00;
							}
							int c_ = -1;
							if (Inventory::Modify(peer, p_, c_) == 0) {
								if (block_->flags & 0x20000000) block_->flags = block_->flags ^ 0x20000000;
								if (block_->flags & 0x40000000) block_->flags = block_->flags ^ 0x40000000;
								if (block_->flags & 0x80000000) block_->flags = block_->flags ^ 0x80000000;
								if (colour != 0x00000000) block_->flags |= colour;
								{
									PlayerMoving p_data_{};
									p_data_.packetType = 17;
									p_data_.netID = 168;
									p_data_.YSpeed = 168;
									p_data_.XSpeed = particle_;
									p_data_.x = (x_ * 32) + 16;
									p_data_.y = (y_ * 32) + 16;
									BYTE* p_raw = packPlayerMoving(&p_data_);
									for (ENetPeer* cp_ = server->peers; cp_ < &server->peers[server->peerCount]; ++cp_) {
										if (cp_->state != ENET_PEER_STATE_CONNECTED or cp_->data == NULL) continue;
										if (pInfo(cp_)->world == world_->name) {
											send_raw(cp_, 4, p_raw, 56, ENET_PACKET_FLAG_RELIABLE);
										}
									}
									delete[] p_raw;
								}
								{
									tile_update(peer, world_, block_, x_, y_);
								} 
								if (items[block_->fg].collisionType != 1 and items[block_->fg].blockType != BlockTypes::GATEWAY and not items[block_->fg].toggleable) {
									int c_ = rand() % (items[p_].max_gems + 1);
									if (c_ != 0) {
										bool no_seed = false, no_gems = false, no_block = false;
										for (int i_ = 0; i_ < world_->drop_new.size(); i_++) {
											if (abs(world_->drop_new[i_][4] - y_ * 32) <= 16 and abs(world_->drop_new[i_][3] - x_ * 32) <= 16) {
												if (world_->drop_new[i_][0] == 112 and items[t_].rarity < 8) {
													no_gems = true;
												}
												else {
													no_seed = true, no_block = true;
												}
											}
										} 
										if (rand() % 100 < 5 and not no_block) {
											WorldDrop drop_block_{};
											drop_block_.id = p_, drop_block_.count = 1, drop_block_.x = (x_ * 32) + rand() % 17, drop_block_.y = (y_ * 32) + rand() % 17;
											VisualHandle::Drop(world_, drop_block_);
										}
										else if (rand() % 100 < 35 and not no_seed) {
											WorldDrop drop_seed_{};
											drop_seed_.id = 3479, drop_seed_.count = 1, drop_seed_.x = (x_ * 32) + rand() % 17, drop_seed_.y = (y_ * 32) + rand() % 17;
											VisualHandle::Drop(world_, drop_seed_);
										}
										else if (not no_gems) {
											int c_ = rand() % (items[p_].max_gems + 1);
											gems_(peer, world_, c_, x_ * 32, y_ * 32, p_);
										}
									}
								}
							}
						}
						break;
					}
					case 3560: {
						if (to_lower(world_->owner_name) == to_lower(pInfo(peer)->tankIDName) or Role::Developer(peer)) {
							int used = 0;
							if (block_->fg == 0) {
								if (LockMove(peer, x_, y_)) {
									VarList::OnTalkBubble(peer, pInfo(peer)->netID, "You've moved the world lock!", 0, 1);
									used = 1;
									int c_ = -1;
									Inventory::Modify(peer, p_, c_);
									tile_update(peer, world_, block_, x_, y_);
								}
							}
							if (used == 0) {
								CAction::Positioned(peer, pInfo(peer)->netID, "audio/cant_place_tile.wav", 0);
								VarList::OnTalkBubble(peer, pInfo(peer)->netID, "There's no room to put the lock there! You need 1 empty space vertically.", 0, 1);
							}
						}
						else VarList::OnTalkBubble(peer, pInfo(peer)->netID, "You can only use this in a world that you have world-locked!", 0, 1);
						break;
					}
					case 9216: {
						if (Playmods::HasById(pInfo(peer), 162) or Playmods::HasById(pInfo(peer), 163)) {
							VarList::OnTalkBubble(peer, pInfo(peer)->netID, "That's sort of hard to do while having a cooldown.", 0, 1);
							break;
						}
						pInfo(peer)->In_World_Clash = true;
						int mdf = -1;
						Inventory::Modify(peer, 9216, mdf);
						Playmods::Add(peer, 162);
						string world_ = "WINTERCLASHPARKOUR";
						Enter_World(peer, world_);
						break;
					}
					default: {
						if (items[p_].playmod_id != 0 and p_ != 9216) {
							uint32_t item_id = p_, playmod_id = items[p_].playmod_id, item_playmod = atoi(info_about_playmods[playmod_id - 1][1].c_str()), playmod_time = atoi(info_about_playmods[playmod_id - 1][2].c_str()), playmod_effect = atoi(info_about_playmods[playmod_id - 1][11].c_str());
							string playmod_name = info_about_playmods[playmod_id - 1][3], playmod_action = info_about_playmods[playmod_id - 1][10], playmod_text = info_about_playmods[playmod_id - 1][12];
							if (p_ == 4844 || p_ == 4846 || p_ == 4848) item_id = 4844;
							ENetPeer* clicked_on = get_clicked_on(world_, x_, y_);
							if (playmod_action == "drop" and clicked_on == NULL or playmod_action.empty() and clicked_on == NULL or playmod_action == "consume" and clicked_on == NULL or playmod_action == "cutewords" and clicked_on == NULL) {
								VarList::OnTalkBubble(peer, pInfo(peer)->netID, "Must be used on a person.", 0, 1);
								return true;
							}
							if ((p_ == 9852 or p_ == 9854 or p_ == 9882 or p_ == 9726 or p_ == 10400 or p_ == 2992 or p_ == 9018/*<-- Roles*//*Subscription -->*/ or p_ == 8188 or p_ == 6862 or p_ == 8186 or p_ == 6860 or p_ == 6858 or p_ == 6856 or p_ == 9266) and pInfo(clicked_on)->netID != pInfo(peer)->netID) {
								VarList::OnTalkBubble(peer, pInfo(peer)->netID, "Use that on yourself!", 0, 1);
								return true;
							}
							if (clicked_on != NULL) {
								if ((item_id == 4844) and (pInfo(clicked_on)->balloon_faction == pInfo(peer)->balloon_faction or Playmods::HasById(pInfo(peer), 136) or Playmods::HasById(pInfo(peer), 135))) {
									if (pInfo(clicked_on)->balloon_faction == pInfo(peer)->balloon_faction) VarList::OnTalkBubble(peer, pInfo(peer)->netID, "Use that on somebody else!", 0, 1);
									else VarList::OnTalkBubble(peer, pInfo(peer)->netID, "You can't throw while having immune from balloons!", 0, 1);
									return true;
								}
							}
							if (playmod_action == "pet") {
								int c_ = playmod_time * -1;
								if (Inventory::Modify(peer, p_, c_) == 0) {
									uint32_t pet_id = atoi(playmod_name.c_str());
									int c_2 = 1;
									if (Inventory::Modify(peer, pet_id, c_2) != 0) {
										WorldDrop drop_block_{};
										drop_block_.id = pet_id, drop_block_.count = c_2, drop_block_.x = pInfo(peer)->x + rand() % 17, drop_block_.y = pInfo(peer)->y + rand() % 17;
										VisualHandle::Drop(world_, drop_block_);
									}
									else {
										pInfo(peer)->hand = pet_id;
										if (p_ != 9018 && p_ != 2992) Clothing_V2::Update(peer);
									}
									PlayerMoving data_{};
									data_.packetType = 17;
									data_.netID = 44;
									data_.YSpeed = 44;
									data_.x = pInfo(peer)->x + 10;
									data_.y = pInfo(peer)->y + 10 + 16;
									BYTE* raw = packPlayerMoving(&data_);
									string t_ = "action|play_sfx\nfile|audio/terraform.wav\ndelayMS|0";
									BYTE* const d_ = new BYTE[5 + t_.length()];
									*(__int8*)(d_) = 3;
									Memory_Copy(d_ + 4, t_.c_str(), t_.length());
									*(__int8*)(d_ + 4 + t_.length()) = 0;
									ENetPacket* const p_m = enet_packet_create(d_, 5 + t_.length(), ENET_PACKET_FLAG_RELIABLE);
									for (ENetPeer* cp_ = server->peers; cp_ < &server->peers[server->peerCount]; ++cp_) {
										if (cp_->state != ENET_PEER_STATE_CONNECTED or cp_->data == NULL) continue;
										if (pInfo(cp_)->world == world_->name) {
											enet_peer_send(cp_, 0, p_m);
											send_raw(cp_, 4, raw, 56, ENET_PACKET_FLAG_RELIABLE);
										}
									}
									delete[]d_;
									delete[] raw;
								}
								else VarList::OnTalkBubble(peer, pInfo(peer)->netID, playmod_text, 0, 0);
								return true;
							}
							int c_ = -1;
							if (Inventory::Modify(peer, p_, c_) == 0) {
								if (p_ == 732) Punishment::Banned(clicked_on, playmod_time, "Wand Effect", pInfo(peer)->name_color + pInfo(peer)->tankIDName + "``", playmod_id);
								else if (p_ == 278) Punishment::Muted_Cursed(clicked_on, playmod_time, "Wand Effect", pInfo(peer)->name_color + pInfo(peer)->tankIDName + "``", playmod_id);
								if (playmod_action == "cutewords") {
									if (p_ == 276) Player_Respawn(clicked_on, true, 0, 1);
									else if (p_ == 8500) {
										string malady_text = "The patient has no malady.";
										int give = 1;
										if (pInfo(clicked_on)->surgery_type == 18) malady_text = "The patient has a `5torn Punching Muscle``.";
										else if (pInfo(clicked_on)->surgery_type == 18) malady_text = "The patient has a `5Gemcuts``.";
										else if (pInfo(clicked_on)->surgery_type == 20) malady_text = "The patient has a `5Grumbleteeth``.";
										else if (pInfo(clicked_on)->surgery_type == 21) malady_text = "The patient has a `5Chicken Feet``.";
										else if (pInfo(clicked_on)->surgery_type == 22) malady_text = "The patient has a `5Broken Heart``.";
										else if (pInfo(clicked_on)->surgery_type == 24) malady_text = "The patient has a `5Ecto-Bones``.";
										else if (pInfo(clicked_on)->surgery_type == 25) malady_text = "The patient has a `5Moldy Guts``.";
										else if (pInfo(clicked_on)->surgery_type == 26) malady_text = "The patient has a `5Fatty Liver``.";
										else if (pInfo(clicked_on)->surgery_type == 27) malady_text = "The patient has a `5Chaos Infection``.";
										else if (pInfo(clicked_on)->surgery_type == 28) malady_text = "The patient has a `5Lupus``.";
										else {
											PlayerMoving data_{};
											data_.packetType = 36, data_.netID = 175, data_.characterState = 0x8, data_.x = pInfo(clicked_on)->x + 16, data_.y = pInfo(clicked_on)->y + 16;
											BYTE* raw = packPlayerMoving(&data_);
											for (ENetPeer* cp_ = server->peers; cp_ < &server->peers[server->peerCount]; ++cp_) {
												if (cp_->state != ENET_PEER_STATE_CONNECTED or cp_->data == NULL or pInfo(cp_)->world != pInfo(peer)->world) continue;
												send_raw(cp_, 4, raw, 56, ENET_PACKET_FLAG_RELIABLE);
											}
											delete[] raw;
											Inventory::Modify(peer, 8500, give);
										}
										gamepacket_t p;
										p.Insert("OnTalkBubble");
										p.Insert(pInfo(peer)->netID);
										p.Insert(malady_text);
										p.Insert(0), p.Insert(1);
										p.CreatePacket(peer);
									}
									else {
										gamepacket_t p4;
										p4.Insert("OnConsoleMessage");
										string text = "";
										gamepacket_t p2(p_ == 752 ? 500 : 0);
										p2.Insert("OnTalkBubble");
										p2.Insert(pInfo(clicked_on)->netID);
										vector<string> random_words{
											"`4'ADORE ME'``",
											"`4'SAY YES'``",
											"`4'MISS YOU'``"
										};
										if (p_ == 618) {
											random_words = { "`4'ARGH!!!'``" };
											Player_Respawn(clicked_on, true, 0, 1);
										}
										if (p_ == 2734 || p_ == 4752) {
											if (clicked_on == peer && pInfo(clicked_on)->stage_pineapple >= 600) {
												gamepacket_t p;
												p.Insert("OnTalkBubble"), p.Insert(pInfo(clicked_on)->netID), p.Insert("`2I can't stomach another one...``"), p.Insert(0), p.Insert(0), p.CreatePacket(clicked_on);
												int give_1 = 1;
												Inventory::Modify(peer, p_, give_1);
											}
											else {
												if (pInfo(clicked_on)->stage_pineapple == 600) {
													vector<uint16_t> list{ 4716 , 6098 , 2738 , 6122 , 3616 , 2740 , 2730 , 9656 , 9662 , 2760 , 4772 , 3624 , 2736 , 2758 , 2762 , 6100 , 2752 , 9664 , 6118 , 3618 , 9652 , 6102 , 6110 , 10908 , 6104 , 9668 , 2734 , 10902 , 10900 , 10898 , 2748 , 10896 , 2744 };
													if (total_pineapple_eaten > 50000) list.push_back(2732);
													if (total_pineapple_eaten > 250000) list.push_back(3622);
													if (total_pineapple_eaten > 500000) list.push_back(2746);
													if (total_pineapple_eaten > 500000) list.push_back(2746);
													if (total_pineapple_eaten > 625000) list.push_back(13508);
													if (total_pineapple_eaten > 875000) list.push_back(13504);
													if (total_pineapple_eaten > 975000) list.push_back(13506);
													if (total_pineapple_eaten > 1000000) list.push_back(2742);
													uint16_t prize_to_pacient = list[rand() % list.size()];
													text = "`7[```9PINEAPPLE MAGIC!`` " + pInfo(peer)->tankIDName + " got a `2" + items[prize_to_pacient].name + "``!`7]``";
													int give = 1;
													Inventory::Modify(peer, prize_to_pacient, give);
												}
												add_pineapple(clicked_on, (p_ == 2734 ? 1 : 200));
											}
										}
										if (p_ == 616) random_words = { "`4'Awwwww!'``" };
										if (p_ == 752) random_words = { "HEADS"  ,  "TAILS" };
										string random_phrase = random_words[rand() % random_words.size()];
										p2.Insert(random_phrase);
										p2.Insert(0), p2.Insert(0);
										gamepacket_t p(0, pInfo(clicked_on)->netID);
										p.Insert("OnPlayPositioned");
										p.Insert("audio/eat.wav");
										gamepacket_t p3(0, pInfo(clicked_on)->netID);
										p3.Insert("OnAction");
										p3.Insert("/love");
										if (p_ == 618) text = pInfo(clicked_on)->tankIDName + " snuggled the wrong bunny!";
										else if (p_ != 616 and p_ != 752 and p_ != 2734 and p_ != 4752)text = pInfo(clicked_on)->tankIDName + " shouts " + random_phrase + " uncontrollably!";
										if (text != "") p4.Insert(text);
										for (ENetPeer* cp_ = server->peers; cp_ < &server->peers[server->peerCount]; ++cp_) {
											if (cp_->state != ENET_PEER_STATE_CONNECTED or cp_->data == NULL or pInfo(cp_)->world != name_) continue;
											p.CreatePacket(cp_);
											if (p_ != 2734 and p_ != 4752) p2.CreatePacket(cp_);
											if (p_ != 618 and p_ != 752 and p_ != 2734 and p_ != 4752) p3.CreatePacket(cp_);
											if (text != "") p4.CreatePacket(cp_);
										}
									}
									PlayerMoving data_{};
									data_.packetType = 19, data_.plantingTree = 0, data_.netID = 0;
									data_.punchX = p_, data_.punchY = pInfo(peer)->netID;
									BYTE* raw;
									data_.x = pInfo(peer)->x + 10, data_.y = pInfo(peer)->y + 16;
									raw = packPlayerMoving(&data_);
									int32_t to_netid = pInfo(clicked_on)->netID;
									raw[3] = 5;
									Memory_Copy(raw + 8, &to_netid, 4);
									if (p_ != 9018 && p_ != 2992) Clothing_V2::Update(clicked_on);
									for (ENetPeer* cp_ = server->peers; cp_ < &server->peers[server->peerCount]; ++cp_) {
										if (cp_->state != ENET_PEER_STATE_CONNECTED or cp_->data == NULL) continue;
										if (pInfo(cp_)->world == name_) {
											send_raw(cp_, 4, raw, 56, ENET_PACKET_FLAG_RELIABLE);
										}
									}
									delete[] raw;
									return true;
								}
								if (playmod_action == "consume") {
									if (p_ == 3240) {
										pInfo(clicked_on)->geiger_ = 100;
										Playmods::HasById(pInfo(clicked_on), 10, 1);
									}
									gamepacket_t p2;
									if (playmod_name[0] == '/') VarList::OnAction(clicked_on, pInfo(clicked_on)->netID, playmod_name, 0);
									else {
										p2.Insert("OnTalkBubble");
										p2.Insert(pInfo(clicked_on)->netID);
										p2.Insert(playmod_name);
										p2.Insert(0), p2.Insert(0);
									}
									gamepacket_t p(0, pInfo(clicked_on)->netID);
									p.Insert("OnPlayPositioned");
									p.Insert("audio/eat.wav");
									PlayerMoving data_{};
									data_.packetType = 19, data_.plantingTree = 0, data_.netID = 0;
									data_.punchX = p_;
									data_.punchY = pInfo(peer)->netID;
									BYTE* raw;
									data_.x = pInfo(peer)->x + 10, data_.y = pInfo(peer)->y + 16;
									raw = packPlayerMoving(&data_);
									int32_t to_netid = pInfo(clicked_on)->netID;
									raw[3] = 5;
									Memory_Copy(raw + 8, &to_netid, 4);
									for (ENetPeer* cp_ = server->peers; cp_ < &server->peers[server->peerCount]; ++cp_) {
										if (cp_->state != ENET_PEER_STATE_CONNECTED or cp_->data == NULL) continue;
										if (pInfo(cp_)->world == name_) {
											p.CreatePacket(cp_);
											if (playmod_name[0] != '/') p2.CreatePacket(cp_);
											send_raw(cp_, 4, raw, 56, ENET_PACKET_FLAG_RELIABLE);
										}
									}
									delete[] raw;
									return true;
								}
								if (playmod_action == "drop") {
									if (p_ == 782) {
										gamepacket_t p;
										p.Insert("OnTalkBubble");
										p.Insert(pInfo(peer)->netID);
										p.Insert("`w[" + pInfo(clicked_on)->tankIDName + " `wfeels strangely better!]");
										p.Insert(0), p.Insert(0);
										gamepacket_t p2;
										p2.Insert("OnConsoleMessage");
										p2.Insert("`7[`w" + pInfo(clicked_on)->tankIDName + " `ofeels strangely better!`7]");
										p2.Insert(0);
										for (ENetPeer* cp_ = server->peers; cp_ < &server->peers[server->peerCount]; ++cp_) {
											if (cp_->state != ENET_PEER_STATE_CONNECTED or cp_->data == NULL) continue;
											if (pInfo(cp_)->world == name_) p.CreatePacket(cp_), p2.CreatePacket(cp_);
										}
										for (int i_ = 0; i_ < pInfo(peer)->playmods.size(); i_++) if (pInfo(peer)->playmods[i_].id == 28 || pInfo(peer)->playmods[i_].id == 41 || pInfo(peer)->playmods[i_].id == 49 || pInfo(peer)->playmods[i_].id == 48 || pInfo(peer)->playmods[i_].id == 71 || pInfo(peer)->playmods[i_].id == 72 || pInfo(peer)->playmods[i_].id == 73 || pInfo(peer)->playmods[i_].id == 4 || pInfo(peer)->playmods[i_].id == 16 || pInfo(peer)->playmods[i_].id == 17 || pInfo(peer)->playmods[i_].id == 19 || pInfo(peer)->playmods[i_].id == 27 || pInfo(peer)->playmods[i_].id == 42) pInfo(peer)->playmods[i_].time = 1;
									}
									else {
										int c_ = rand() % (items[p_].max_gems + 1);
										if (c_ != 0) {
											bool no_seed = false, no_gems = false, no_block = false;
											for (int i_ = 0; i_ < world_->drop_new.size(); i_++) {
												if (abs(world_->drop_new[i_][4] - y_ * 32) <= 16 and abs(world_->drop_new[i_][3] - x_ * 32) <= 16) {
													if (world_->drop_new[i_][0] == 112 and items[t_].rarity < 8) {
														no_gems = true;
													}
													else {
														no_seed = true, no_block = true;
													}
												}
											}
											if (rand() % 100 < 5 and not no_block) {
												WorldDrop drop_block_{};
												drop_block_.id = p_, drop_block_.count = 1, drop_block_.x = (x_ * 32) + rand() % 17, drop_block_.y = (y_ * 32) + rand() % 17;
												if (not use_mag(world_, drop_block_, drop_block_.x, drop_block_.y)) VisualHandle::Drop(world_, drop_block_);
											}
											else if (rand() % 100 < 35 and not no_seed) {
												WorldDrop drop_seed_{};
												drop_seed_.id = p_ + 1, drop_seed_.count = 1, drop_seed_.x = (x_ * 32) + rand() % 17, drop_seed_.y = (y_ * 32) + rand() % 17;
												if (not use_mag(world_, drop_seed_, drop_seed_.x, drop_seed_.y)) VisualHandle::Drop(world_, drop_seed_);
											}
											else if (not no_gems) {
												int c_ = rand() % (items[p_].max_gems + 1);
												gems_(peer, world_, c_, x_ * 32, y_ * 32, p_);
											}
										}
									}
								}
								else if (not playmod_action.empty()) {
									if (playmod_action == "throw") {
										if (item_id == 4844) {
											gamepacket_t p;
											p.Insert("OnParticleEffectV2"), p.Insert(pInfo(peer)->balloon_faction), p.Insert((float)x_ * 32 + 16, (float)y_ * 32 + 16);
											for (ENetPeer* cp_ = server->peers; cp_ < &server->peers[server->peerCount]; ++cp_) {
												if (cp_->state != ENET_PEER_STATE_CONNECTED or cp_->data == NULL) continue;
												if (pInfo(cp_)->world == pInfo(peer)->world) p.CreatePacket(cp_);
											}
										}
										else {
											PlayerMoving data_{};
											data_.packetType = 17;
											data_.netID = playmod_effect;
											data_.YSpeed = playmod_effect;
											data_.x = x_ * 32 + rand() % 17;
											data_.y = y_ * 32 + rand() % 17;
											BYTE* raw = packPlayerMoving(&data_);
											for (ENetPeer* cp_ = server->peers; cp_ < &server->peers[server->peerCount]; ++cp_) {
												if (cp_->state != ENET_PEER_STATE_CONNECTED or cp_->data == NULL) continue;
												if (pInfo(cp_)->world == world_->name) {
													send_raw(cp_, 4, raw, 56, ENET_PACKET_FLAG_RELIABLE);
												}
											}
											delete[] raw;
										}
									}
									else {
										PlayerMoving data_{};
										data_.packetType = 17;
										data_.netID = playmod_effect;
										data_.YSpeed = playmod_effect;
										data_.x = x_ * 32 + 16;
										data_.y = y_ * 32 + 16;
										BYTE* raw = packPlayerMoving(&data_);
										for (ENetPeer* cp_ = server->peers; cp_ < &server->peers[server->peerCount]; ++cp_) {
											if (cp_->state != ENET_PEER_STATE_CONNECTED or cp_->data == NULL) continue;
											if (pInfo(cp_)->world == world_->name) {
												send_raw(cp_, 4, raw, 56, ENET_PACKET_FLAG_RELIABLE);
											}
										}
										delete[] raw;
									}
								}
								if (clicked_on != NULL) {
									bool alr_have = false;
									if (item_id == 4844 && Playmods::HasById(pInfo(clicked_on), 135) or Playmods::HasById(pInfo(clicked_on), 137) or (p_ == 9726 or p_ == 10400) and Role::Cheater(peer) or (p_ == 9854 or p_ == 9882) and Role::Vip(peer) or p_ == 9852 and Role::Moderator(peer)) alr_have = true;
									for (PlayMods peer_playmod : pInfo(clicked_on)->playmods) {
										if (peer_playmod.id == playmod_id or (p_ == 9726 or p_ == 10400) and Role::Cheater(peer) or (p_ == 9854 or p_ == 9882) and Role::Vip(peer) or p_ == 9852 and Role::Moderator(peer) or (p_ == 8188 or p_ == 6862 or p_ == 8186 or p_ == 6860 or p_ == 6858 or p_ == 6856 or p_ == 9266) and pInfo(peer)->subscriber) {
											if (p_ == 384 and peer_playmod.user == pInfo(peer)->tankIDName or (p_ == 9726 or p_ == 10400) and Role::Cheater(peer) or (p_ == 9854 or p_ == 9882) and Role::Vip(peer) or p_ == 9852 and Role::Moderator(peer)) {
												alr_have = true;
												break;
											}
											else {
												alr_have = true;
												break;
											}
										}
									}
									if (not alr_have) {
										if (item_id == 4844) {
											int points = 1;
											if (p_ == 4844) points = 2;
											if (p_ == 4846) points = 7;
											if (p_ == 4848) points = 12;
											if (rand() % 100 < 5) {
												int given_ = 1;
												Inventory::Modify(peer, 4894, given_);
											}
											pInfo(peer)->balloon_hit++;
											if (pInfo(peer)->balloon_hit >= 20) {
												if (pInfo(peer)->balloon_hit == 20) {
													gamepacket_t p;
													p.Insert("OnTalkBubble"), p.Insert(pInfo(peer)->netID), p.Insert("SPLAT ATTACK! You now have a Bounty."), p.Insert(0), p.Insert(0), p.CreatePacket(peer);
												}
												gamepacket_t p5(0, pInfo(peer)->netID);
												p5.Insert("OnFactionDataChanged"), p5.Insert(pInfo(peer)->balloon_faction), p5.Insert(pInfo(peer)->hit_by), p5.Insert(pInfo(peer)->hit_by), p5.Insert("bountyLevel|" + to_string(pInfo(peer)->balloon_hit >= 20 ? pInfo(peer)->balloon_hit / 20 : 0) + "\nbountyScore|" + to_string(pInfo(peer)->balloon_hit >= 20 ? pInfo(peer)->balloon_hit : 0) + "\n"), p5.Insert(1);
												for (ENetPeer* cp_ = server->peers; cp_ < &server->peers[server->peerCount]; ++cp_) {
													if (cp_->state != ENET_PEER_STATE_CONNECTED or cp_->data == NULL or pInfo(cp_)->world != name_) continue;
													p5.CreatePacket(cp_);
												}
											}
											if (pInfo(clicked_on)->balloon_hit != 0) pInfo(clicked_on)->balloon_hit = 0;
											pInfo(clicked_on)->hit_by = pInfo(peer)->balloon_faction;
											VarList::OnTalkBubble(peer, pInfo(peer)->netID, "A hit!", 0, 0);
											VarList::OnConsoleMessage(peer, "You have hit an enemy! Your team is awarded " + to_string(points) + " points!");
										}
										if (playmod_time != 0) {
											PlayMods new_playmod{};
											new_playmod.id = playmod_id;
											new_playmod.time = time(nullptr) + playmod_time;
											new_playmod.user = pInfo(peer)->tankIDName;
											pInfo(clicked_on)->playmods.push_back(new_playmod);
										}
										Clothing_V2::Update_Value(clicked_on);
										if (not playmod_name.empty()) {
											gamepacket_t p;
											p.Insert("OnConsoleMessage");
											p.Insert(info_about_playmods[playmod_id - 1][4] + " (`$" + playmod_name + "`` mod added, `$" + Time::Playmod(playmod_time) + "`` left)");
											p.CreatePacket(clicked_on);
										}
										if (p_ != 9018 && p_ != 2992) Clothing_V2::Update(clicked_on);
										{
											gamepacket_t p;
											p.Insert("OnConsoleMessage");
											p.Insert("`4>> `#" + get_player_nick(clicked_on) + " is now `#" + get_player_nick(peer) + "``'s valentine!``");
											for (ENetPeer* cp_ = server->peers; cp_ < &server->peers[server->peerCount]; ++cp_) {
												if (cp_->state != ENET_PEER_STATE_CONNECTED or cp_->data == NULL or pInfo(cp_)->world != name_) continue;
												if (p_ == 384) p.CreatePacket(cp_);
											}
										}
									}
									if (p_ == 9018 or p_ == 2992 or p_ == 9852 or p_ == 9854 or p_ == 9882 or p_ == 9726 or p_ == 10400 /*guild potion >>>*/ or p_ == 5942 or p_ == 5940 or p_ == 5938 or p_ == 5936 or p_ == 5934 /*Subscription -->*/ or p_ == 8188 or p_ == 6862 or p_ == 8186 or p_ == 6860 or p_ == 6858 or p_ == 6856 or p_ == 9266) {
										if (alr_have) {
											int abcc = 1;
											Inventory::Modify(peer, p_, abcc);
											if (p_ == 8188 or p_ == 6862 or p_ == 8186 or p_ == 6860 or p_ == 6858 or p_ == 6856 or p_ == 9266) VarList::OnTalkBubble(peer, pInfo(peer)->netID, "You already have a subscription Token used", 0, true);
											if (p_ == 5942 or p_ == 5940 or p_ == 5938 or p_ == 5936 or p_ == 5934) VarList::OnTalkBubble(peer, pInfo(peer)->netID, "You already consumed " + items[p_].name + ".", 0, 1);
											if (p_ == 9852 or p_ == 9854 or p_ == 9882 or p_ == 9726 or p_ == 10400) VarList::OnTalkBubble(peer, pInfo(peer)->netID, "Already have this role.", 0, 1);
											else if (p_ == 9018) VarList::OnTalkBubble(peer, pInfo(peer)->netID, "You already consumed Dark Ticket.", 0, 1);
											else if (p_ == 2992) VarList::OnTalkBubble(peer, pInfo(peer)->netID, "You already consumed Wolf Whistle.", 0, 1);
										}
										else {
											if (p_ == 9852 or p_ == 9854 or p_ == 9882 or p_ == 9726 or p_ == 10400 or p_ == 5942 or p_ == 5940 or p_ == 5938 or p_ == 5936 or p_ == 5934 or p_ == 8188 or p_ == 6862 or p_ == 8186 or p_ == 6860 or p_ == 6858 or p_ == 6856 or p_ == 9266) {
												if (p_ == 9852) {//30d mod role
													Playmods::Add(clicked_on, 125);
													pInfo(peer)->Role.Moderator = true;
													pInfo(peer)->Role.Role_Level = Role::GetLevel(peer);
													pInfo(peer)->name_color = Role::Prefix(peer);
													VisualHandle::Nick(peer, NULL);
													VarList::OnConsoleMessage(peer, "`#**`` `$The Ancient Ones`` have `#made`` `w" + pInfo(clicked_on)->tankIDName + " `o-> a `#@Moderator `#** `o(`2/shop`` to purchase role!)", true);
												}
												if (p_ == 9854 or p_ == 9882) {//30d & 1d vip role
													if (p_ == 9854) Playmods::Add(clicked_on, 126);
													if (p_ == 9882) playmod_time = 86400;
													pInfo(peer)->Role.Vip = true;
													pInfo(peer)->Role.Role_Level = Role::GetLevel(peer);
													pInfo(peer)->name_color = Role::Prefix(peer);
													VisualHandle::Nick(peer, NULL);
													VarList::OnConsoleMessage(peer, "`#**`` `$The Ancient Ones`` have `#made`` `w" + pInfo(clicked_on)->tankIDName + " `o-> a `1Vip `#** `o(`2/shop`` to purchase role!)", true);
												}
												if (p_ == 9726 or p_ == 10400) {//7d & 1d cheater role
													if (p_ == 9726) playmod_time = 604800;
													if (p_ == 10400) playmod_time = 86400;
													pInfo(peer)->Role.Cheats = true;
													pInfo(peer)->Role.Role_Level = Role::GetLevel(peer);
													VarList::OnConsoleMessage(peer, "`#**`` `$The Ancient Ones`` have `#made`` `w" + pInfo(clicked_on)->tankIDName + " `o-> a `bCheater `#** `o(`2/shop`` to purchase role!)", true);
												}
												if (p_ == 9852 or p_ == 9854 or p_ == 9882 or p_ == 9726 or p_ == 10400) {
													for (ENetPeer* cp_ = server->peers; cp_ < &server->peers[server->peerCount]; ++cp_) {
														if (cp_->state != ENET_PEER_STATE_CONNECTED or cp_->data == NULL) continue;
														if (pInfo(cp_)->world == world_->name) {
															CAction::Effect_V2(cp_, 198, (float)pInfo(clicked_on)->x + 16, (float)pInfo(clicked_on)->y + 16);
															CAction::Effect_V2(cp_, 199, (float)pInfo(clicked_on)->x + 16, (float)pInfo(clicked_on)->y + 16);
														}
													}
												}
												if (p_ == 8188 or p_ == 6862 or p_ == 8186 or p_ == 6860) {
													if (guild_event_type == "Spring Clash") {
														pInfo(peer)->spring_token += 70;
													}
													if (guild_event_type == "Summer Clash") {
														pInfo(peer)->summer_token += 70;
													}
													if (guild_event_type == "Winter Clash") {
														pInfo(peer)->winter_token += 70;
													}
												}
												if (p_ == 6858 or p_ == 6856 or p_ == 9266) {
													if (guild_event_type == "Spring Clash") {
														pInfo(peer)->spring_token += 10;
													}
													if (guild_event_type == "Summer Clash") {
														pInfo(peer)->summer_token += 10;
													}
													if (guild_event_type == "Winter Clash") {
														pInfo(peer)->winter_token += 10;
													}
												}
												if (p_ == 8188 or p_ == 6862 or p_ == 8186 or p_ == 6860 or p_ == 6858 or p_ == 6856 or p_ == 9266) {
													pInfo(peer)->subscriber = true;
													CAction::Positioned(peer, pInfo(peer)->netID, "audio/dialog_confirm.wav", 0);
													VarList::OnConsoleMessage(peer, "You have activated " + items[p_].name + ".");
													VarList::OnBuxGems(peer, items[p_].max_gems3);
													VarList::OnAddNotification(peer, "Premium Subscription: " + Set_Count(items[p_].max_gems3) + " Gems" + (p_ == 8188 or p_ == 6862 ? ", " + to_string(items[p_].clash_token) + " " + guild_event_type + " Token and 1 World Lock" : " and " + to_string(items[p_].clash_token) + " " + guild_event_type + " Token") + "!", "interface/cash_icon_overlay.rttex", "audio/piano_nice.wav.wav", 500);
													VarList::OnConsoleMessage(peer, "`#**`` `$The Ancient Ones`` have `#made`` `w" + pInfo(clicked_on)->tankIDName + " `o-> a `5Subscriber `#** `o(`2/shop`` to purchase subscription!)", true);
													if (p_ == 8188 or p_ == 6862) {
														int add = 1;
														if (Inventory::Modify(peer, 242, add) != 0) {
															WorldDrop drop_block_{};
															drop_block_.id = 242, drop_block_.count = 1, drop_block_.x = pInfo(peer)->x + rand() % 17, drop_block_.y = pInfo(peer)->y + rand() % 17;
															VisualHandle::Drop(world_, drop_block_);
														}
														for (ENetPeer* cp_ = server->peers; cp_ < &server->peers[server->peerCount]; ++cp_) {
															if (cp_->state != ENET_PEER_STATE_CONNECTED or cp_->data == NULL) continue;
															if (pInfo(cp_)->world == world_->name) {
																CAction::Effect(cp_, 90, (float)pInfo(peer)->x + 10, (float)pInfo(peer)->y + 16);
															}
														}
													}
													if (p_ == 8186 or p_ == 6860 or p_ == 6858 or p_ == 6856 or p_ == 9266) {
														for (ENetPeer* cp_ = server->peers; cp_ < &server->peers[server->peerCount]; ++cp_) {
															if (cp_->state != ENET_PEER_STATE_CONNECTED or cp_->data == NULL) continue;
															if (pInfo(cp_)->world == world_->name) {
																CAction::Effect(cp_, 46, (float)pInfo(peer)->x + 10, (float)pInfo(peer)->y + 16);
															}
														}
													}
												}if (p_ == 5934) {// Guild Potion : Geiger
													VarList::OnAddNotification(peer, "Guild Potion: Extra Geiger effect has started!", "interface/large/gd_potus_1.rttex", "audio/piano_nice.wav.wav", 100);
												}
												if (p_ == 5936) {// Guild Potion : Grow
													VarList::OnAddNotification(peer, "Guild Potion: Extra Grow effect has started!", "interface/large/gd_potus_2.rttex", "audio/piano_nice.wav.wav", 100);
												}
												if (p_ == 5938) {// Guild Potion : Gems
													VarList::OnAddNotification(peer, "Guild Potion: Extra Gems effect has started!", "interface/large/gd_potus_3.rttex", "audio/piano_nice.wav.wav", 100);
												}
												if (p_ == 5940) {// Guild Potion : Fishing
													VarList::OnAddNotification(peer, "Guild Potion: Extra Fish effect has started!", "interface/large/gd_potus_4.rttex", "audio/piano_nice.wav.wav", 100);
												}
												if (p_ == 5942) {// Guild Potion : Blocks
													VarList::OnAddNotification(peer, "Guild Potion: Extra Blocks effect has started!", "interface/large/gd_potus_5.rttex", "audio/piano_nice.wav.wav", 100);
												}
												if (playmod_time != 0) {
													PlayMods new_playmod{};
													new_playmod.id = playmod_id;
													new_playmod.time = time(nullptr) + playmod_time;
													new_playmod.user = pInfo(peer)->tankIDName;
													pInfo(clicked_on)->playmods.push_back(new_playmod);
												}
											}
											else if (p_ == 9018 || p_ == 2992 || p_ == 9216) {
												pInfo(clicked_on)->x = -1, pInfo(clicked_on)->y = -1;
												string world_ = "";
												if (p_ == 2992) {
													VarList::OnSetMissionTimer(peer, 1200, 400);
													world_ = "WW" + std::to_string(rand() % 7 + 1);
													pInfo(clicked_on)->wolf_world = world_;
													Enter_World(clicked_on, world_);
												}
												if (p_ == 9018) {
													if (Event()->Halloween) DailyEvent_Task::Halloween(peer, "6", 1);
													VarList::OnSetMissionTimer(peer, 1200, 400);
													pInfo(clicked_on)->halloween_prize_receive = false, world_ = "TOMBOFGROWGANOTH" + std::to_string(rand() % 3 + 1);
													Enter_World(clicked_on, world_);
												}
											}
										}
									}
									if (not alr_have) {
										PlayerMoving data_{};
										data_.packetType = 19, data_.plantingTree = 0, data_.netID = 0;
										data_.punchX = p_;
										data_.punchY = pInfo(peer)->netID;
										BYTE* raw;
										int32_t to_netid = 0;
										if (clicked_on != NULL and playmod_action.empty() or playmod_action == "drop" and clicked_on != NULL) {
											data_.x = pInfo(peer)->x + 10, data_.y = pInfo(peer)->y + 16;
											raw = packPlayerMoving(&data_);
											to_netid = pInfo(clicked_on)->netID;
											raw[3] = 5;
										}
										else {
											data_.x = x_ * 32 + 16, data_.y = y_ * 32 + 16;
											raw = packPlayerMoving(&data_);
											to_netid = pInfo(peer)->netID;
											raw[3] = 4;
										}
										Memory_Copy(raw + 8, &to_netid, 4);
										gamepacket_t p1;
										p1.Insert("OnTalkBubble");
										if (not playmod_text.empty()) {
											p1.Insert(pInfo(clicked_on)->netID), p1.Insert(playmod_text), p1.Insert(0), p1.Insert(0);
											if (clicked_on != NULL && p_ != 9018 && p_ != 2992) Clothing_V2::Update(clicked_on);
										}
										string playmod_sound = info_about_playmods[playmod_id - 1][8];
										for (ENetPeer* cp_ = server->peers; cp_ < &server->peers[server->peerCount]; ++cp_) {
											if (cp_->state != ENET_PEER_STATE_CONNECTED or cp_->data == NULL or pInfo(cp_)->world != name_) continue;
											if (not playmod_text.empty()) p1.CreatePacket(cp_);
											if (not playmod_sound.empty() and clicked_on != NULL or playmod_action == "drop" and clicked_on != NULL) {
												gamepacket_t p(0, pInfo(clicked_on)->netID);
												p.Insert("OnPlayPositioned");
												p.Insert("audio/" + playmod_sound);
												p.CreatePacket(cp_);
											}
											send_raw(cp_, 4, raw, 56, ENET_PACKET_FLAG_RELIABLE);
										}
										delete[]raw;
									}
								}
							}
						}
						else {
							VarList::OnTalkBubble(peer, pInfo(peer)->netID, "This does nothing right now.  You should put this in the suggestion box (`$/discord``)!", 0, 1);
							VarList::OnConsoleMessage(peer, "`oThis does nothing right now.  You should put this in the suggestion box (`$/discord``)!");
							break;
						}
					}
					}
					break;
				}
			}
			else {
				if (pInfo(peer)->world.find("GROWMINES") != std::string::npos) {
					if (p_ != 11602 and p_ != 4992) {
						VarList::OnTalkBubble(peer, pInfo(peer)->netID, "Unfortunately, you can't put anything here!", 0, 1);
						CAction::Positioned(peer, pInfo(peer)->netID, "audio/cant_place_tile.wav", 0);
						return false;
					}
				}
				else if (items[p_].blockType == BlockTypes::SUCKER || items[p_].blockType == BlockTypes::CCTV || p_ == 4516) {
					if (world_->owner_name.empty()) {
						VarList::OnTalkBubble(peer, pInfo(peer)->netID, "This item can only be used in World-Locked worlds!", 0, 1);
						CAction::Positioned(peer, pInfo(peer)->netID, "audio/cant_place_tile.wav", 0);
						return false;
					}
				}
				else if (items[p_].blockType == BlockTypes::VIP_ENTRANCE) {
					if (to_lower(world_->owner_name) != to_lower(pInfo(peer)->tankIDName) and not Role::Developer(peer)) {
						VarList::OnTalkBubble(peer, pInfo(peer)->netID, "Only the world owner can place a VIP Entrance, since only the world owner can destroy one.", 0, 1);
						CAction::Positioned(peer, pInfo(peer)->netID, "audio/cant_place_tile.wav", 0);
						return false;
					}
				}
				else if (items[p_].blockType == BlockTypes::SUCKER) {
					if (world_->world_settings & SETTINGS::SETTINGS_4) {
						VarList::OnTalkBubble(peer, pInfo(peer)->netID, "This item can't be placed in areas designated as public!", 0, 1);
						CAction::Positioned(peer, pInfo(peer)->netID, "audio/cant_place_tile.wav", 0);
						return false;
					}
				}
				else if (items[p_].blockType == BlockTypes::VENDING) {
					if (world_->owner_name.empty()) {
						if (block_->fg == 0) {
							VarList::OnDialogRequest(peer, SetColor(peer) + "set_default_color|\nadd_label_with_icon|big|`wWORLD LOCK|left|242|\nembed_data|tilex|" + to_string(x_) + "\nembed_data|tiley|" + to_string(y_) + "\nadd_textbox|`wThere is `4NO WORLD LOCK `win this world, Are you sure to place item to Vend?|\nend_dialog|YesPItems|Close|YES|");
							pInfo(peer)->last_id_item = p_;
							return false;
						}
					}
				}
				else if (p_ == 6280) {
					if (world_->guild_id == 0) {
						VarList::OnTalkBubble(peer, pInfo(peer)->netID, "This item can't be placed in areas non-guild world!", 0, 1);
						CAction::Positioned(peer, pInfo(peer)->netID, "audio/cant_place_tile.wav", 0);
						return false;
					}
				}
				else if (p_ == 1908 or p_ == 1900) {
					if (pInfo(peer)->world != "CARNIVAL") {
						VarList::OnTalkBubble(peer, pInfo(peer)->netID, "This item only can be placed in world CARNIVAL!", 0, 1);
						CAction::Positioned(peer, pInfo(peer)->netID, "audio/cant_place_tile.wav", 0);
						return false;
					}
				}
				else if (items[p_].properties & Property_Mod) {
					if (p_ != 12826) {
						if (not Role::Developer(peer) and not world_->owner_name.empty() and to_lower(world_->owner_name) != to_lower(pInfo(peer)->tankIDName)) {
							VarList::OnTalkBubble(peer, pInfo(peer)->netID, "That area is owned by " + world_->owner_name, 0, 1);
							CAction::Positioned(peer, pInfo(peer)->netID, "audio/cant_place_tile.wav", 0);
							break;
						}
						if (not Role::Moderator(peer) and to_lower(world_->owner_name) == to_lower(pInfo(peer)->tankIDName) or not Role::Moderator(peer) and find(world_->admins.begin(), world_->admins.end(), to_lower(pInfo(peer)->tankIDName)) != world_->admins.end() or not Role::Moderator(peer) and world_->owner_name.empty() or not Role::Moderator(peer) and world_->world_settings & SETTINGS::SETTINGS_4) {
							VarList::OnTalkBubble(peer, pInfo(peer)->netID, "`wIt's too heavy to place.", 0, 0);
							CAction::Positioned(peer, pInfo(peer)->netID, "audio/cant_place_tile.wav", 0);
							break;
						}
					}
				}
				else if (block_->locked) {
					if (world_->blocks[block_->lock_origin].fg == 242 || items[world_->blocks[block_->lock_origin].fg].blockType != BlockTypes::LOCK) {
						int xa_ = block_->lock_origin % 100, ya_ = block_->lock_origin / 100;
						remove_lock_broken(world_, &world_->blocks[block_->lock_origin], xa_, ya_);
					}
					else {
						WorldBlock* block2_ = &world_->blocks[block_->lock_origin];
						string owner_name = to_lower(block2_->owner_name), user_name = to_lower(pInfo(peer)->tankIDName);
						if (owner_name != user_name) {
							if (block2_->fg == 4994 or find(block2_->admins.begin(), block2_->admins.end(), user_name) == block2_->admins.end() and not block2_->spin and not Role::Developer(peer)) {
								if (block2_->fg == 4994) {
									if (not block2_->spin) {
										CAction::Positioned(peer, pInfo(peer)->netID, "audio/punch_locked.wav", 0);
										if (p_ != 18) {
											VarList::OnTalkBubble(peer, pInfo(peer)->netID, "That area is owned by " + block2_->owner_name, 0, 1);
										}
										return true;
									}
									if (not block2_->build_only and block2_->spin) {
										if (not Role::Developer(peer)) {
											CAction::Positioned(peer, pInfo(peer)->netID, "audio/punch_locked.wav", 0);
											if (p_ != 18) {
												VarList::OnTalkBubble(peer, pInfo(peer)->netID, "This lock allows breaking only!", 0, 1);
											}
											return false;
										}
									}
								}
								else {
									CAction::Positioned(peer, pInfo(peer)->netID, "audio/punch_locked.wav", 0);
									if (p_ != 18) {
										VarList::OnTalkBubble(peer, pInfo(peer)->netID, "That area is owned by " + block2_->owner_name, 0, 1);
									}
									return false;
								}
							}
							if (items[p_].blockType == BlockTypes::LOCK) {
								VarList::OnTalkBubble(peer, pInfo(peer)->netID, "`w" + block2_->owner_name + "`` allows public building here, but no locks.", 0, 0);
								CAction::Positioned(peer, pInfo(peer)->netID, "audio/punch_locked.wav", 0);
								return false;
							}
						}
					}
				}
				else if (not world_->owner_name.empty() and items[p_].blockType != BlockTypes::CONSUMABLE) {
					string owner_name = to_lower(world_->owner_name), user_name = to_lower(pInfo(peer)->tankIDName);
					if (owner_name != user_name and not Role::Developer(peer)) {
						bool publica = world_->world_settings & SETTINGS::SETTINGS_4;
						if (!guild_access(peer, world_->guild_id) and find(world_->admins.begin(), world_->admins.end(), user_name) == world_->admins.end() and not publica and not Role::Developer(peer)) {
							CAction::Positioned(peer, pInfo(peer)->netID, "audio/punch_locked.wav", 0);
							if (p_ != 18) {
								string owner_name = world_->owner_name;
								if (world_->owner_named.substr(0, 2) == "`o") owner_name = "`w" + world_->owner_name;
								if (not world_->owner_named.empty()) owner_name = world_->owner_named;
								VarList::OnTalkBubble(peer, pInfo(peer)->netID, "That area is owned by " + owner_name + "``", 0, 1);
							}
							return false;
						}
						if (items[p_].blockType == BlockTypes::LOCK) {
							VarList::OnTalkBubble(peer, pInfo(peer)->netID, "" + (world_->owner_named.substr(0, 2) == "`o" ? "`w" + world_->owner_name : world_->owner_named) + "`` allows public building here, but no locks.", 0, 0);
							CAction::Positioned(peer, pInfo(peer)->netID, "audio/punch_locked.wav", 0);
							return false;
						}
					}
				}
				if (items[p_].blockType == BlockTypes::DOOR || items[p_].blockType == BlockTypes::PORTAL || items[p_].blockType == BlockTypes::LOCK || items[p_].path_marker) {
					if (find(world_->admins.begin(), world_->admins.end(), pInfo(peer)->tankIDName) == world_->admins.end() and world_->owner_name != pInfo(peer)->tankIDName) {
						if (patchPath(world_, pInfo(peer)->x, pInfo(peer)->y, x_ + (y_ * world_->max_x), peer)) {
							VarList::OnTalkBubble(peer, pInfo(peer)->netID, "Something is blocking the way, get closer.", 0, 1);
							CAction::Positioned(peer, pInfo(peer)->netID, "audio/punch_locked.wav", 0);
							return true;
						}
					}
				}
				if (items[block_->fg].blockType == BlockTypes::CRYSTAL and items[p_].blockType == BlockTypes::CRYSTAL) {
					vector<vector<int>> current_{ {2242, 0}, {2244, 0}, {2246, 0}, {2248, 0}, {2250, 0} };
					int abcc = -1;
					string mix_with = "";
					if (Inventory::Modify(peer, p_, abcc) == 0) {
						bool obtained_ = false;
						for (int i = 0; i < block_->crystals.size(); i++) {
							vector<int> c_ = block_->crystals[i];
							if (c_[0] == p_) {
								block_->crystals[i][1]++;
								obtained_ = true;
							}
							for (int a = 0; a < current_.size(); a++) {
								if (current_[a][0] == c_[0]) {
									current_[a][1] = block_->crystals[i][1];
									break;
								}
							}
						}
						if (not obtained_) {
							block_->crystals.push_back({ p_, 1 });
							for (int a = 0; a < current_.size(); a++) {
								if (current_[a][0] == p_) {
									current_[a][1] = 1;
									break;
								}
							}
						}
						vector<string> reply{};
						for (int i = 0; i < current_.size(); i++) {
							reply.push_back(to_string(current_[i][1]) + "x `$" + mix_with + (current_[i][0] == 2242 ? "R" : (current_[i][0] == 2244 ? "G" : (current_[i][0] == 2246 ? "B" : (current_[i][0] == 2248 ? "W" : "B")))) + "``");
						}
						VarList::OnConsoleMessage(peer, "This Crystal is currently mixed with " + join(reply, ", "));
					}
					return true;
				}
				else if (t_ == 4830) {
					if (items[p_].untradeable == 1 || p_ == 1424 || p_ == 5816 || items[p_].rarity >= 200 || items[p_].rarity < 1) {
						VarList::OnTalkBubble(peer, pInfo(peer)->netID, "`5[`2That item is just too valuable convert to balloons``]``", 0, 0);
					}
					else {
						pInfo(peer)->lastchoosenitem = p_;
						VarList::OnDialogRequest(peer, SetColor(peer) + "set_default_color|`o\nadd_label_with_icon|big|`w" + items[p_].ori_name + "``|left|" + to_string(p_) + "|\nadd_spacer|small|\nadd_label|small|Those things have " + to_string(items[p_].rarity) + " Rarity, and you have " + to_string(have) + " of them.|left\nadd_label|small|Currently you have " + to_string(block_->shelf_1) + " Rarity stored from last time.|left" + get_balloon_type(block_->shelf_1) + "add_label|small|How many do you want to convert?|left\nadd_text_input|amount||" + to_string(have) + "|3|\nend_dialog|balloonomatic_dialog|Cancel|OK|");
					}
					return false;
				}
				else if (t_ == 4124) {
					if (p_ == 3942 or p_ == 3946 or p_ == 3948 or p_ == 3950) {
						VarList::OnDialogRequest(peer, SetColor(peer) + "set_default_color|`o\nadd_label_with_icon|big|`wDNA Extractor``|left|4124|\nadd_spacer|small|\nembed_data|tilex|" + to_string(x_) + "\nembed_data|tiley|" + to_string(y_) + "\nembed_data|item|" + to_string(p_) + "\nadd_textbox|Are you sure you want to destroy a " + items[p_].name + " for a slim chance of extracting a tiny bit of prehistoric DNA?|left|\nend_dialog|dnaget|No|Yes|");
					}
					else {
						VarList::OnTalkBubble(peer, pInfo(peer)->netID, "No ancient DNA detected.", 0, 0);
					}
					return false;
				}
				else if (t_ == 10656) {
					if (p_ == 3402 && have >= 5) {
						VarList::OnDialogRequest(peer, SetColor(peer) + "set_default_color|`o\nadd_label_with_icon|big|`wWell of Love``|left|10656|\nadd_spacer|small|\nadd_textured_progress_bar|interface/large/gui_event_bar.rttex|0|2|`wLove: " + to_string(block_->shelf_1) + "/200|" + to_string(block_->shelf_1) + "|200``|relative|1|0.95|0|1000|64|0.01\nadd_spacer|small|\nadd_textbox|Give 5 Golden Booty Chests to receive the `2ONE best prize``, and to fill up the well. Once the well is full it will provide one reward with a `53.25% chance`` of getting one of these `5Epic`` items:|left|\nadd_spacer|small|\nadd_smalltext|Do you want to give `25`` to the well? (You have " + to_string(have) + ")|left|\nadd_button|wishing_well|Give Golden Booty Chests|no_flags|0|0|\nadd_spacer|small|\nadd_textbox|Once the well is full it will provide one reward with a `53.25% chance`` of getting one of these `5Epic`` items:|left|\nadd_label_with_icon|small| - `5Golden Heart Crystal``|left|1458|\nadd_label_with_icon|small| - `6EXCLUSIVE`` `5Stained Glass Crown``|left|11672|\nadd_label_with_icon|small| - `6EXCLUSIVE`` `5Cotton Candy Cape``|left|13140|\nadd_spacer|small|\nadd_textbox|... or a `5Pure Love Essence`` that doubles the chance of getting a Golden Heart Crystal when opening Golden Booty Chests, Super Golden Booty Chests and Heartstones.|left|\nadd_spacer|small|\nend_dialog|wishing_well|Thanks for the info!||");
					}
					else {
						if (p_ != 3402) VarList::OnTalkBubble(peer, pInfo(peer)->netID, "`5[`2The Well of Love only accepts Golden Booty Chests``]``", 0, 0);
						if (p_ == 3402 && have < 5) VarList::OnTalkBubble(peer, pInfo(peer)->netID, "`5[`2The Well of Love only accepts minimum 5 of Golden Booty Chests``]``", 0, 0);
					}
					return false;
				}
				else if (t_ == 4582 || t_ == 12196) {
					pInfo(peer)->lastwrenchb = t_;
					if (items[p_].grindable_prize == 0 || items[p_].grindable_count == 0) VarList::OnTalkBubble(peer, pInfo(peer)->netID, "`5[`2That's not grindable``]``", 0, 0);
					else if (items[p_].grindable_prize != 0 && have < items[p_].grindable_count) VarList::OnTalkBubble(peer, pInfo(peer)->netID, "`5[`2I need " + to_string(items[p_].grindable_count) + " of those to grind them!``]``", 0, 0);
					else {
						pInfo(peer)->lastchoosenitem = p_;
						VarList::OnDialogRequest(peer, SetColor(peer) + "set_default_color|`o\nadd_label_with_icon|big|`wGrind " + items[p_].name + "``|left|" + to_string(p_) + "|\nadd_textbox|You have " + to_string(have) + " " + items[p_].name + ". It takes " + to_string(items[p_].grindable_count) + " per grind. How many times will you grind (max " + to_string(have / items[p_].grindable_count) + ")?|left|\nadd_textbox|`4Beware:`` If you don't have room in your inventory for the resulting items, they will drop on the floor.|left|\nadd_text_input|count||" + to_string(have / items[p_].grindable_count) + "|5|\nend_dialog|grinder|Cancel|OK|");
					}
					return false;
				}
				else if (p_ == 3200) {
					if (block_->fg == 0) {
						block_->fg = 3200;
						update_tile(peer, x_, y_, 3200, true);
						block_->planted = time(nullptr) + 14400;
						PlayerMoving data_{};
						data_.packetType = 5, data_.punchX = x_, data_.punchY = y_, data_.characterState = 0x8;
						BYTE* raw = packPlayerMoving(&data_, 112 + alloc_(world_, block_));
						BYTE* blc = raw + 56;
						block_->flags = (block_->flags & 0x00400000 ? block_->flags : block_->flags | 0x00400000);
						form_visual(blc, *block_, *world_, peer, false, true);
						for (ENetPeer* cp_ = server->peers; cp_ < &server->peers[server->peerCount]; ++cp_) {
							if (cp_->state != ENET_PEER_STATE_CONNECTED or cp_->data == NULL) continue;
							if (pInfo(peer)->world != pInfo(cp_)->world) continue;
							send_raw(cp_, 4, raw, 112 + alloc_(world_, block_), ENET_PACKET_FLAG_RELIABLE);
						}
						delete[] raw, blc;
						if (block_->locked) upd_lock(*block_, *world_, peer);
						block_->shelf_1 = 0;
						tile_update(peer, world_, block_, x_, y_);
					}
					else {
						VarList::OnTalkBubble(peer, pInfo(peer)->netID, "Something is block that way!", 0, 1);
						return false;
					}
				}
				else if (block_->fg == 610 and p_ == 610) {
					int a = -1;
					if (Inventory::Modify(peer, 611, a, true) == 0) {
						add_magic_egg(peer, world_, block_, x_, y_);
					}
					return true;
				}
				else if (items[p_].blockType == BlockTypes::SEED and items[block_->fg].blockType != BlockTypes::SEED and block_->fg != 0 and block_->fg != 610 or items[p_].blockType != BlockTypes::BACKGROUND and items[p_].blockType != BlockTypes::SEED and block_->fg != 0) {
					CAction::Positioned(peer, pInfo(peer)->netID, "audio/cant_place_tile.wav", 0);
					return false;
				}
				else if (items[p_].blockType == BlockTypes::BACKGROUND and items[block_->fg].blockType == BlockTypes::BEDROCK or items[p_].blockType == BlockTypes::BACKGROUND and items[block_->fg].blockType == BlockTypes::MAIN_DOOR) {
					return false;
				}
				else if (p_ == 10962 && block_->fg == 0) {
					int c_ = 0;
					Inventory::Modify(peer, 10962, c_);
					if (c_ != 0) Inventory::Modify(peer, 10962, c_ = -1);
					block_->fg = 10962;
					block_->r = world_->r;
					block_->g = world_->g;
					block_->b = world_->b;
					tile_update(peer, world_, block_, x_, y_);
					return true;
				}
				else if (p_ == 4516 or p_ == 9270) {
					if (world_->owner_name.empty() || to_lower(world_->owner_name) != to_lower(pInfo(peer)->tankIDName)) {
						VarList::OnTalkBubble(peer, pInfo(peer)->netID, "Only the owner of the world can place this.", 0, 1);
						return false;
					}
				}
				if (p_ == 5000 or p_ == 3832 or p_ == 6280 or p_ == 10058 or p_ == 226 or p_ == 3616 or p_ == 1276 or p_ == 2072 or p_ == 1278 or p_ == 4758 or p_ == 3750 or p_ == 4992 or p_ == 3072 or p_ == 4884 or p_ == 1436 or p_ == 14548 or p_ == 8246 or p_ == 10258) {
					bool block_place = false;
					int cctv_count = 0;
					for (int i_ = 0; i_ < world_->blocks.size(); i_++) {
						if (world_->blocks[i_].fg == p_) {
							if (p_ != 1436 and p_ != 8246 and p_ != 10258 and p_ != 14548) block_place = true;
						}
						if (p_ == 1436 || p_ == 8246 || p_ == 10258 || p_ == 14548) {
							if (world_->blocks[i_].fg == 1436 || world_->blocks[i_].fg == 8246 || world_->blocks[i_].fg == 10258)  cctv_count++;
						}
					}
					if (block_place or cctv_count >= 8) {
						if (p_ == 1436 || p_ == 8246 || p_ == 10258 || p_ == 14548) VarList::OnTalkBubble(peer, pInfo(peer)->netID, "``You can only have 8 " + items[p_].name + " in a world.", 0, 1);
						else {
							if (p_ == 5000 or p_ == 3832 or p_ == 6280 or p_ == 10058) {
								CAction::Positioned(peer, pInfo(peer)->netID, "audio/punch_locked.wav", 0);
								VarList::OnTalkBubble(peer, pInfo(peer)->netID, "``You can only have one " + items[p_].name + " in a world.", 0, 1);
							}
							else VarList::OnTalkBubble(peer, pInfo(peer)->netID, "This world already has a `$" + items[p_].name + "`` somewhere on it, installing two would be dangerous!", 0, 1);
						}
						return false;
					}
				}
				int c_ = -1;
				if (t_ == 611 && p_ != 610) p_ = 611;
				if (items[p_].blockType == BlockTypes::BACKGROUND) block_->bg = p_;
				else {
					if (items[p_].collisionType == 1) {
						for (ENetPeer* cp_ = server->peers; cp_ < &server->peers[server->peerCount]; ++cp_) {
							if (cp_->state != ENET_PEER_STATE_CONNECTED or cp_->data == NULL) continue;
							if (pInfo(cp_)->world == name_ and not pInfo(cp_)->ghost) {
								if (y_ == pInfo(cp_)->y / 32) {
									if (pInfo(cp_)->state == 0 and x_ * 32 < pInfo(cp_)->x and abs(x_ * 32 - pInfo(cp_)->x) < 32 or pInfo(cp_)->state == 16 and abs(x_ * 32 - pInfo(cp_)->x) < 32 or pInfo(cp_)->state != 16 and abs(x_ * 32 - pInfo(cp_)->x) < 20) {
										return false;
									}
								}
							}
						}
					}
					if (items[p_].blockType == BlockTypes::CRYSTAL) block_->crystals.push_back({ p_, 1 });
					else if (items[p_].blockType == BlockTypes::PROVIDER) {
						block_->planted = time(nullptr);
						if (p_ == 9946) block_->planted = 0;
					}
					else if (items[p_].blockType == BlockTypes::SEED) {
						bool spliced = false;
						if (items[block_->fg].blockType == BlockTypes::SEED or block_->fg == 610) {
							long long time_ = time(nullptr);
							int timed = items[block_->fg].growTime;
							if (pInfo(peer)->ances == 5082) timed *= 1.08;
							if (pInfo(peer)->ances == 5162) timed *= 1.09;
							if (pInfo(peer)->ances == 5164) timed *= 1.10;
							if (pInfo(peer)->ances == 5166) timed *= 1.11;
							if (pInfo(peer)->ances == 5168) timed *= 1.12;
							if (pInfo(peer)->ances == 5170) timed *= 1.13;
							if (pInfo(peer)->hand == 6846) timed *= 1.02;
							if (Playmods::HasById(pInfo(peer), 118)) timed *= 1.05;
							if (Playmods::HasById(pInfo(peer), 156) and rand() % 50 < 2) {/*Guild Potion: Grow*/
								timed *= 1.05;
							}
							uint32_t laikas = uint32_t((time_ - block_->planted <= timed ? time_ - block_->planted : timed));
							if (block_->invert) {
								VarList::OnTalkBubble(peer, pInfo(peer)->netID, "It would be too dangerous to try to mix three seeds.", 0, 1);
								return false;
							}
							if (laikas == items[block_->fg].growTime && block_->fg != 610) {
								VarList::OnTalkBubble(peer, pInfo(peer)->netID, "This tree is already too big to splice another seed with.", 0, 1);
								return false;
							}
							for (int i_ = 0; i_ < items.size(); i_++) {
								if (items[i_].r_1 == p_ and items[i_].r_2 == (block_->fg == 610 ? 611 : block_->fg) or items[i_].r_2 == p_ and items[i_].r_1 == (block_->fg == 610 ? 611 : block_->fg)) {
									if (block_->fg == 610) {
										block_->fg = 611;
										block_->fruit = items[block_->fg].rarity == 999 ? 1 : (rand() % 4) + 1;
									}
									spliced = true;
									if (event_item == 6834) EventPool::Guilds::Point::Add(peer, pInfo(peer)->hand);
									if (pInfo(peer)->lvlKit < 100) Kit_Server::Add_Xp(peer, rand() % 28, "kit");
									VarList::OnTalkBubble(peer, pInfo(peer)->netID, "`w" + items[p_].name + "`` and `w" + items[block_->fg].name + "`` have been spliced to make a `$" + items[i_].name + " Tree``!", 0, 1);
									CAction::Positioned(peer, pInfo(peer)->netID, "audio/success.wav", 0);
									if (pInfo(peer)->role_quest and pInfo(peer)->quest_number == 5) {
										if (pInfo(peer)->role_quest_type == "Farmer" and pInfo(peer)->need_required < pInfo(peer)->quest_required) {
											pInfo(peer)->need_required += items[i_ + 1].rarity;
											if (pInfo(peer)->need_required >= pInfo(peer)->quest_required) {
												pInfo(peer)->need_required = pInfo(peer)->quest_required;
												VarList::OnConsoleMessage(peer, "`9Farmer Quest! `ocomplete! Go claim your points!");
												VarList::OnTalkBubble(peer, pInfo(peer)->netID, "`9Farmer Quest! ``complete! Go claim your points!", 0, 0);
											}
										}
									}
									if (items[i_ + 1].rarity >= 20) {
										if (pInfo(peer)->role_quest and pInfo(peer)->quest_number == 6) {
											if (pInfo(peer)->role_quest_type == "Farmer" and pInfo(peer)->need_required < pInfo(peer)->quest_required) {
												pInfo(peer)->need_required += 1;
												if (pInfo(peer)->need_required >= pInfo(peer)->quest_required) {
													pInfo(peer)->need_required = pInfo(peer)->quest_required;
													VarList::OnConsoleMessage(peer, "`9Farmer Quest! `ocomplete! Go claim your points!");
													VarList::OnTalkBubble(peer, pInfo(peer)->netID, "`9Farmer Quest! ``complete! Go claim your points!", 0, 0);
												}
											}
										}
									}
									if (i_ == 2866) Epic_Quest::Add(peer, "Plant a Wizard's Staff Tree", pInfo(peer)->epicq_plant_wiz, 1, 1);
									if (i_ == 2046) Epic_Quest::Add(peer, "Splice a Weather Machine - Comet", pInfo(peer)->epicq_splice_wm_comet, 1, 1);
									block_->fg = i_ + 1, block_->invert = 1;
									block_->planted = time(nullptr);
									PlayerMoving data_{};
									data_.packetType = 13, data_.plantingTree = p_;
									BYTE* raw = packPlayerMoving(&data_);
									raw[2] = 1;
									send_raw(peer, 4, raw, 56, ENET_PACKET_FLAG_RELIABLE);
									delete[]raw;
									tile_update(peer, world_, block_, x_, y_);
									if (not mag_place) Inventory::Modify(peer, p_, c_, false);
									return true;
								}
								else if (i_ + 1 == items.size()) {
									bool changed_ = false;
									if (p_ == 339 and block_->fg == 627 or block_->fg == 339 and p_ == 627) {
										uint32_t s_ = p_ == 339 ? block_->fg : p_;
										i_ = 742;
										changed_ = true;
									}
									else if (p_ == 743 and block_->fg == 253 or block_->fg == 743 and p_ == 253) {
										uint32_t s_ = p_ == 743 ? block_->fg : p_;
										i_ = 758;
										changed_ = true;
									}
									else if (p_ == 743 and block_->fg == 285 or block_->fg == 745 and p_ == 285) {
										uint32_t s_ = p_ == 745 ? block_->fg : p_;
										i_ = 6674;
										changed_ = true;
									}
									if (changed_) {
										if (block_->fg == 610) {
											block_->fg = 611;
											block_->fruit = items[block_->fg].rarity == 999 ? 1 : (rand() % 4) + 1;
										}
										if (pInfo(peer)->lvlKit < 100) Kit_Server::Add_Xp(peer, rand() % 28, "kit");
										if (event_item == 6834) EventPool::Guilds::Point::Add(peer, pInfo(peer)->hand);
										spliced = true;
										VarList::OnTalkBubble(peer, pInfo(peer)->netID, "`w" + items[p_].name + "`` and `w" + items[block_->fg].name + "`` have been spliced to make a `$" + items[i_].name + " Tree``!", 0, 1);
										CAction::Positioned(peer, pInfo(peer)->netID, "audio/success.wav", 0);
										if (i_ + 1 == 2866) Epic_Quest::Add(peer, "Plant a Wizard's Staff Tree", pInfo(peer)->epicq_plant_wiz, 1, 1);
										if (i_ + 1 == 2046) Epic_Quest::Add(peer, "Splice a Weather Machine - Comet", pInfo(peer)->epicq_splice_wm_comet, 1, 1);
										block_->fg = i_ + 1, block_->invert = 1;
										block_->planted = time(nullptr);
										PlayerMoving data_{};
										data_.packetType = 13, data_.plantingTree = p_;
										BYTE* raw = packPlayerMoving(&data_);
										raw[2] = 1;
										send_raw(peer, 4, raw, 56, ENET_PACKET_FLAG_RELIABLE);
										delete[]raw;
										tile_update(peer, world_, block_, x_, y_);
										if (not mag_place) Inventory::Modify(peer, p_, c_, false);
										return true;
									}
									if (p_ == block_->fg) {
										VarList::OnTalkBubble(peer, pInfo(peer)->netID, "Hmm, it looks like `w" + items[block_->fg].name + "`` and `w" + items[p_].name + "`` can't be spliced.", 0, 1);
										return false;
									}
									VarList::OnTalkBubble(peer, pInfo(peer)->netID, "Hmm, it looks like `w" + items[block_->fg].name + "`` and `w" + items[p_].name + "`` can't be spliced.", 0, 1);
									return false;
								}
							}
						}
						if (spliced == false) {
							if (p_ == 611) p_ = 610;
							if (pInfo(peer)->lwiz_step == 5) add_lwiz_points(peer, items[p_].rarity);
						}
					}
					else if (items[p_].blockType == BlockTypes::Heart_Monitor || p_ == 3394) {
						if (p_ == 3394) block_->heart_monitor = pInfo(peer)->country;
						else {
							if (pInfo(peer)->name_color == Role::Prefix2(peer, *world_)) block_->heart_monitor = pInfo(peer)->name_color + pInfo(peer)->tankIDName + "``";
							else block_->heart_monitor = pInfo(peer)->tankIDName;
						}
					}
					else if (p_ == 10358) {
						block_->txt = "`$[```4ENTRY PRICE```$]``: " + to_string(block_->shelf_1) + " ā";
					}
					else if (p_ == 10656) {
						block_->txt = "`0Well of Love " + to_string(block_->shelf_1) + " / 200";
					}
					else if (items[p_].blockType == BlockTypes::BULLETIN_BOARD || items[p_].blockType == BlockTypes::MAILBOX)block_->spin = true;
					else if (items[p_].blockType == LOCK) {
						if (p_ == 202 or p_ == 204 or p_ == 206 or p_ == 4994 or p_ == 10000) {
							if (not world_->owner_name.empty() and to_lower(world_->owner_name) != to_lower(pInfo(peer)->tankIDName)) {
								VarList::OnTalkBubble(peer, pInfo(peer)->netID, "You must be world owner to place locks!", 0, 0);
								return true;
							}
							if (block_->locked) {
								if (to_lower(world_->blocks[block_->lock_origin].owner_name) != to_lower(pInfo(peer)->tankIDName)) {
									VarList::OnTalkBubble(peer, pInfo(peer)->netID, "You must be world owner to place locks!", 0, 0);
									return true;
								}
							}
							int safe_dis = p_ == 206 || p_ == 4994 ? 7 : p_ == 204 ? 3 : 0;
							if (x_ < safe_dis or y_ < safe_dis or world_->max_x - safe_dis < x_ or world_->max_y - safe_dis < y_) {
								VarList::OnTalkBubble(peer, pInfo(peer)->netID, "You can't place that here, move " + to_string(x_ < safe_dis ? safe_dis - x_ : y_ < safe_dis ? safe_dis - y_ : world_->max_x - safe_dis < x_ ? x_ - (world_->max_x - safe_dis) : world_->max_y - safe_dis < y_ ? y_ - (world_->max_y - safe_dis) : 0) + " block away from border!", 0, 0);
								return true;
							}
							block_->block_day = "";
							block_->owner_name = pInfo(peer)->tankIDName;
							if (pInfo(peer)->name_color != "`0" or Role::Moderator(peer) || Role::Administrator(peer) && pInfo(peer)->name_color != "`2")  block_->owner_named = pInfo(peer)->name_color + pInfo(peer)->tankIDName;
							else block_->owner_named = pInfo(peer)->tankIDName;
							int lock_size = p_ == 202 ? 10 : (p_ == 204 || p_ == 10000 ? 48 : (p_ == 202 ? 200 : 200));
							vector<vector<int>> tiles_ = lock_tiles(world_, x_, y_, lock_size);
							lock_size = tiles_.size();
							PlayerMoving data_{};
							data_.packetType = 15, data_.punchX = x_, data_.punchY = y_, data_.characterState = 0x8;
							data_.netID = name_to_number(to_lower(pInfo(peer)->tankIDName));
							data_.plantingTree = p_;
							BYTE* raw;
							if (tiles_.size() != 0) {
								int alloc = alloc_(world_, block_);
								raw = packPlayerMoving(&data_, 112 + (lock_size * 2) + alloc);
								int lalala = 8;
								Memory_Copy(raw + 8, &lock_size, 2);
								Memory_Copy(raw + 12, &lalala, 2);
								BYTE* blc = raw + 56;
								for (int i_ = 0; i_ < tiles_.size(); i_++) {
									vector<int> update_tiles = tiles_[i_];
									int x = update_tiles[0];
									int y = update_tiles[1];
									int sq_ = x + (y * 100);
									WorldBlock* block_ = &world_->blocks[sq_];
									if (block_->locked) {

									}
									else {
										block_->locked = true;
										block_->lock_origin = x_ + (y_ * 100);
										Memory_Copy(blc + (i_ * 2), &sq_, 2);
									}
								}
								string t_ = "action|play_sfx\nfile|audio/use_lock.wav\ndelayMS|0";
								BYTE* const d_ = new BYTE[5 + t_.length()];
								*(__int8*)(d_) = 3;
								Memory_Copy(d_ + 4, t_.c_str(), t_.length());
								*(__int8*)(d_ + 4 + t_.length()) = 0;
								ENetPacket* const p_m = enet_packet_create(d_, 5 + t_.length(), ENET_PACKET_FLAG_RELIABLE);
								for (ENetPeer* cp_ = server->peers; cp_ < &server->peers[server->peerCount]; ++cp_) {
									if (cp_->state != ENET_PEER_STATE_CONNECTED or cp_->data == NULL) continue;
									if (pInfo(cp_)->world == name_) {
										enet_peer_send(cp_, 0, p_m);
										send_raw(cp_, 4, raw, 112 + (lock_size * 2) + alloc, ENET_PACKET_FLAG_RELIABLE);
									}
								}
								delete[]d_;
								delete[] raw, blc;
							}
							else {
								raw = packPlayerMoving(&data_, 56);
								string t_ = "action|play_sfx\nfile|audio/use_lock.wav\ndelayMS|0";
								BYTE* const d_ = new BYTE[5 + t_.length()];
								*(__int8*)(d_) = 3;
								Memory_Copy(d_ + 4, t_.c_str(), t_.length());
								*(__int8*)(d_ + 4 + t_.length()) = 0;
								ENetPacket* const p_m = enet_packet_create(d_, 5 + t_.length(), ENET_PACKET_FLAG_RELIABLE);
								for (ENetPeer* cp_ = server->peers; cp_ < &server->peers[server->peerCount]; ++cp_) {
									if (cp_->state != ENET_PEER_STATE_CONNECTED or cp_->data == NULL) continue;
									if (pInfo(cp_)->world == name_) {
										enet_peer_send(cp_, 0, p_m);
										send_raw(cp_, 4, raw, 56, ENET_PACKET_FLAG_RELIABLE);
									}
								}
								delete[]d_;
								delete[] raw;
							}
							VarList::OnTalkBubble(peer, pInfo(peer)->netID, "Area locked.", 0, 0);
							{
								PlayerMoving data_{};
								data_.packetType = 13, data_.plantingTree = p_;
								BYTE* raw = packPlayerMoving(&data_);
								raw[2] = 1;
								send_raw(peer, 4, raw, 56, ENET_PACKET_FLAG_RELIABLE);
								delete[]raw;
							}
						}
						else {
							if (not world_->owner_name.empty()) {
								VarList::OnTalkBubble(peer, pInfo(peer)->netID, "Only one `$World Lock`` can be placed in a world, you'd have to remove the other one first.", 0, 0);
								return false;
							}
							std::vector<WorldBlock>::iterator pg = find_if(world_->blocks.begin(), world_->blocks.end(), [&](const WorldBlock& a) { return (a.fg == 202 || a.fg == 204 || a.fg == 206 || a.fg == 4994 || a.fg == 10000) && to_lower(a.owner_name) != to_lower(pInfo(peer)->tankIDName); });
							if (pg != world_->blocks.end()) {
								VarList::OnTalkBubble(peer, pInfo(peer)->netID, "Your `$World Lock`` can't be placed in this world unless everyone else's locks are removed.", 0, 0);
								return false;
							}
							if (pInfo(peer)->w_w >= 75) {
								VarList::OnTalkBubble(peer, pInfo(peer)->netID, "You locked too many new worlds today, try tomorrow!", 0, 0);
								return false;
							}
							else pInfo(peer)->w_w++;
							pInfo(peer)->worlds_owned.push_back(world_->name);
							world_->owner_name = pInfo(peer)->tankIDName;
							if (pInfo(peer)->name_color != "`0" or Role::Moderator(peer) || Role::Administrator(peer) && pInfo(peer)->name_color != "`2")  world_->owner_named = pInfo(peer)->name_color + pInfo(peer)->tankIDName;
							else world_->owner_named = pInfo(peer)->tankIDName;
							PlayerMoving data_{};
							data_.packetType = 15, data_.punchX = x_, data_.punchY = y_, data_.characterState = 0x8, data_.netID = name_to_number(to_lower(pInfo(peer)->tankIDName)), data_.plantingTree = p_;
							BYTE* raw = packPlayerMoving(&data_, 56);
							if (p_ == 11902 || p_ == 11550 || p_ == 13200 || p_ == 11586 || p_ == 10410 || p_ == 12654) {
								if (p_ == 11550) world_->weather = 54;
								else if (p_ == 11586) world_->weather = 55;
								else if (p_ == 10410) world_->weather = 53;
								else if (p_ == 11902) world_->weather = 58;
								else if (p_ == 12654) world_->weather = 63;
								else if (p_ == 13200) world_->weather = 67;
								for (ENetPeer* cp_ = server->peers; cp_ < &server->peers[server->peerCount]; ++cp_) {
									if (cp_->state != ENET_PEER_STATE_CONNECTED or cp_->data == NULL or pInfo(cp_)->world != name_) continue;
									pInfo(cp_)->lock = p_;
									VarList::OnSetCurrentWeather(cp_, (Event()->Comet_Dust ? 16 : world_->weather == 0 ? 80 : world_->weather));
								}
							}
							if (p_ == 2408) Epic_Quest::Add(peer, "Lock a world with an Emerald Lock", pInfo(peer)->epicq_emeraldlock, 1, 1);
							pInfo(peer)->name_color = Role::Prefix2(peer, *world_);
							VisualHandle::Nick(peer, NULL);
							string t_ = "action|play_sfx\nfile|audio/use_lock.wav\ndelayMS|0";
							BYTE* const d_ = new BYTE[5 + t_.length()];
							*(__int8*)(d_) = 3;
							Memory_Copy(d_ + 4, t_.c_str(), t_.length());
							*(__int8*)(d_ + 4 + t_.length()) = 0;
							ENetPacket* const p_m = enet_packet_create(d_, 5 + t_.length(), ENET_PACKET_FLAG_RELIABLE);
							for (ENetPeer* cp_ = server->peers; cp_ < &server->peers[server->peerCount]; ++cp_) {
								if (cp_->state != ENET_PEER_STATE_CONNECTED or cp_->data == NULL) continue;
								if (pInfo(cp_)->world == name_) {
									pInfo(cp_)->world_owner = (world_->owner_named.empty() ? "`#" + world_->owner_name : world_->owner_named);
									enet_peer_send(cp_, 0, p_m);
									send_raw(cp_, 4, raw, 56, ENET_PACKET_FLAG_RELIABLE);
									VarList::OnConsoleMessage(cp_, "`5[```w" + world_->name + "`` has been `$World Locked`` by " + (pInfo(peer)->name_color != "`0" ? pInfo(peer)->name_color + world_->owner_name + "``" : world_->owner_name) + "`5]``");
									VarList::OnTalkBubble(cp_, pInfo(peer)->netID, "`5[```w" + world_->name + "`` has been `$World Locked`` by " + (pInfo(peer)->name_color != "`0" ? pInfo(peer)->name_color + world_->owner_name + "``" : world_->owner_name) + "`5]``", 0, 0);
									pInfo(cp_)->lock = p_;
								}
							}
							delete[]d_;
							delete[] raw;
							{
								PlayerMoving data_{};
								data_.packetType = 13, data_.plantingTree = p_;
								BYTE* raw = packPlayerMoving(&data_);
								raw[2] = 1;
								send_raw(peer, 4, raw, 56, ENET_PACKET_FLAG_RELIABLE);
								delete[]raw;
							}
						}
						block_->fg = p_;
						if (not mag_place) Inventory::Modify(peer, (p_ == 610 ? 611 : p_), c_, false);
						break;
					}
					else if (p_ == 610) {
						pInfo(peer)->magic_egg++;
						punch_tile(peer, x_, y_, 0x3, 611, mag_place ? -1 : pInfo(peer)->netID, 0x0);
						punch_tile(peer, x_, y_, 0x3, p_, -1, 0x0);
					}
					block_->fg = p_;
					if (items[p_].blockType == BlockTypes::SEED) plant_(world_, peer, block_, x_, y_, p_, true, mag_place);
				}
				if (items[p_].blockType != BlockTypes::SEED) punch_tile(peer, x_, y_, 0x3, p_, mag_place ? -1 : pInfo(peer)->netID, 0x0);
				block_->lp = 0;
				if (pInfo(peer) != NULL) {
					if ((items[p_].multiple_sides and pInfo(peer)->state == 16) or p_ == 3394 || items[p_].blockType == BlockTypes::PROVIDER or p_ == 1240 or p_ == 3798 or p_ == 10358) {
						if (items[p_].multiple_sides and pInfo(peer)->state == 16) block_->flags |= 0x00200000;
						tile_update(peer, world_, block_, x_, y_);
					}
					if (pInfo(peer)->role_quest and pInfo(peer)->quest_number == 1) {
						if (pInfo(peer)->role_quest_type == "Builder" and pInfo(peer)->need_required < pInfo(peer)->quest_required) {
							pInfo(peer)->need_required += 1;
							if (pInfo(peer)->need_required >= pInfo(peer)->quest_required) {
								pInfo(peer)->need_required = pInfo(peer)->quest_required;
								VarList::OnConsoleMessage(peer, "`9Builder Quest! `ocomplete! Go claim your points!");
								VarList::OnTalkBubble(peer, pInfo(peer)->netID, "`9Builder Quest! ``complete! Go claim your points!", 0, 0);
							}
						}
					}
					if (pInfo(peer)->role_quest and pInfo(peer)->quest_number == 3) {
						if (pInfo(peer)->role_quest_type == "Builder" and pInfo(peer)->need_required < pInfo(peer)->quest_required) {
							pInfo(peer)->need_required += items[block_->fg].rarity;
							if (pInfo(peer)->need_required >= pInfo(peer)->quest_required) {
								pInfo(peer)->need_required = pInfo(peer)->quest_required;
								VarList::OnConsoleMessage(peer, "`9Builder Quest! `ocomplete! Go claim your points!");
								VarList::OnTalkBubble(peer, pInfo(peer)->netID, "`9Builder Quest! ``complete! Go claim your points!", 0, 0);
							}
						}
					}
					if (pInfo(peer)->lvlKit < 100) Kit_Server::Add_Xp(peer, rand() % 28, "kit");
					if (pInfo(peer)->starglitter_place < 1000 && pInfo(peer)->starglitter_place != -1) DailyEvent_Task::MStarglitter(peer, "place", 1);
					if (event_item == 6828) EventPool::Guilds::Point::Add(peer, pInfo(peer)->hand);
					if (not mag_place) Inventory::Modify(peer, (p_ == 610 ? 611 : p_), c_, false);
				}
				break;
			}
			break;
		}
	}
	}
	return true;
}
#include <algorithm>
class PlayerCharacter {
public:
	static void Reset(ENetPeer* peer) {
		if (pInfo(peer)->in_enter_game) {
			struct tm newtime;
			time_t now = time(0);
#ifdef _WIN32
			localtime_s(&newtime, &now);
#elif defined(__linux__)
			localtime_r(&now, &newtime);
#endif
			if (newtime.tm_hour >= 12 && newtime.tm_hour < 20) {
				if (not Playmods::HasById(pInfo(peer), 150)) Playmods::Add(peer, 150);
			}
			if (pInfo(peer)->ability_xgems > 3) pInfo(peer)->ability_xgems = 3;
			if (pInfo(peer)->ability_xxp > 3) pInfo(peer)->ability_xxp = 3;
			/*Daily Login*/
			if (not pInfo(peer)->claimed_daily_today and pInfo(peer)->is_day < 7 and pInfo(peer)->is_day > 0) {
				if (pInfo(peer)->is_day == 1 and Has_Claimed::Daily(peer, 1) or pInfo(peer)->is_day == 2 and Has_Claimed::Daily(peer, 2) or pInfo(peer)->is_day == 3 and Has_Claimed::Daily(peer, 3) or pInfo(peer)->is_day == 4 and Has_Claimed::Daily(peer, 4) or pInfo(peer)->is_day == 5 and Has_Claimed::Daily(peer, 5) or pInfo(peer)->is_day == 6 and Has_Claimed::Daily(peer, 6) or pInfo(peer)->is_day == 7 and Has_Claimed::Daily(peer, 7)) pInfo(peer)->claimed_daily_today = true;
				else {
					if (pInfo(peer)->world != "") DialogHandle::Daily_Login(peer);
				}
			}
			/*Vip Daily Rewards*/
			if (not pInfo(peer)->vip_claimed_daily and pInfo(peer)->vip_day < 7 and pInfo(peer)->vip_day > 0 and pInfo(peer)->is_day >= 7) {
				if (pInfo(peer)->vip_day == 1 and Has_Claimed::Vip_Daily(peer, 1) or pInfo(peer)->vip_day == 2 and Has_Claimed::Vip_Daily(peer, 2) or pInfo(peer)->vip_day == 3 and Has_Claimed::Vip_Daily(peer, 3) or pInfo(peer)->vip_day == 4 and Has_Claimed::Vip_Daily(peer, 4) or pInfo(peer)->vip_day == 5 and Has_Claimed::Vip_Daily(peer, 5) or pInfo(peer)->vip_day == 6 and Has_Claimed::Vip_Daily(peer, 6) or pInfo(peer)->vip_day == 7 and Has_Claimed::Vip_Daily(peer, 7)) pInfo(peer)->vip_claimed_daily = true;
				else {
					if (pInfo(peer)->world != "") DialogHandle::VipDaily_Rewards(peer);
				}
			}
			if (pInfo(peer)->dq_day != newtime.tm_mday) {
				pInfo(peer)->dd = 0;
				pInfo(peer)->dq_day = newtime.tm_mday;
			}
			if (pInfo(peer)->hit_by) if (not Playmods::HasById(pInfo(peer), 136)) pInfo(peer)->hit_by = 0;
			/*Guild Event Reset*/
			if (not Event()->Can_Event and not pInfo(peer)->next_guild_event) {
				pInfo(peer)->next_guild_event = true;
				pInfo(peer)->raw5_legendary_claim = false; pInfo(peer)->participated_personal = false;
				pInfo(peer)->row1_items1_claim = false, pInfo(peer)->row1_items2_claim = false, pInfo(peer)->row1_items3_claim = false, pInfo(peer)->row1_items4_claim = false, pInfo(peer)->row1_items5_claim = false, pInfo(peer)->row1_items6_claim = false;
				pInfo(peer)->row2_items1_claim = false, pInfo(peer)->row2_items2_claim = false, pInfo(peer)->row2_items3_claim = false, pInfo(peer)->row2_items4_claim = false, pInfo(peer)->row2_items5_claim = false, pInfo(peer)->row2_items6_claim = false;
				pInfo(peer)->row3_items1_claim = false, pInfo(peer)->row3_items2_claim = false, pInfo(peer)->row3_items3_claim = false, pInfo(peer)->row3_items4_claim = false, pInfo(peer)->row3_items5_claim = false, pInfo(peer)->row3_items6_claim = false;
				pInfo(peer)->row4_items1_claim = false, pInfo(peer)->row4_items2_claim = false, pInfo(peer)->row4_items3_claim = false, pInfo(peer)->row4_items4_claim = false, pInfo(peer)->row4_items5_claim = false, pInfo(peer)->row4_items6_claim = false;
				pInfo(peer)->claim_top1 = false, pInfo(peer)->claim_top2 = false, pInfo(peer)->claim_top3 = false, pInfo(peer)->claim_top4 = false, pInfo(peer)->claim_top5 = false, pInfo(peer)->claim_top6 = false, pInfo(peer)->claim_top7 = false, pInfo(peer)->claim_top8 = false, pInfo(peer)->claim_top9 = false, pInfo(peer)->claim_top10 = false, pInfo(peer)->claim_top11 = false, pInfo(peer)->claim_top12 = false, pInfo(peer)->claim_top13 = false, pInfo(peer)->claim_top14 = false, pInfo(peer)->claim_top15 = false, pInfo(peer)->claim_top16 = false, pInfo(peer)->claim_top17 = false, pInfo(peer)->claim_top18 = false, pInfo(peer)->claim_top19 = false, pInfo(peer)->claim_top20 = false, pInfo(peer)->claim_top1g = false, pInfo(peer)->claim_top2g = false, pInfo(peer)->claim_top3g = false, pInfo(peer)->claim_top4g = false, pInfo(peer)->claim_top5g = false, pInfo(peer)->claim_top6g = false, pInfo(peer)->claim_top7g = false, pInfo(peer)->claim_top8g = false, pInfo(peer)->claim_top9g = false, pInfo(peer)->claim_top10g = false, pInfo(peer)->claim_top11g = false, pInfo(peer)->claim_top12g = false, pInfo(peer)->claim_top13g = false, pInfo(peer)->claim_top14g = false, pInfo(peer)->claim_top15g = false, pInfo(peer)->claim_top16g = false, pInfo(peer)->claim_top17g = false, pInfo(peer)->claim_top18g = false, pInfo(peer)->claim_top19g = false, pInfo(peer)->claim_top20g = false, pInfo(peer)->claim_top21g = false, pInfo(peer)->claim_top22g = false, pInfo(peer)->claim_top23g = false, pInfo(peer)->claim_top24g = false, pInfo(peer)->claim_top25g = false;
			}
			if (Event()->Can_Event and pInfo(peer)->next_guild_event) {
				pInfo(peer)->next_guild_event = false;
			}
			/*Winter Task Reset*/
			if (WinterFest.Active) {
				if (not pInfo(peer)->Has_WinBingo) {
					pInfo(peer)->Has_WinBingo = true;
					int num_prizes_to_take = 10, num_ids_to_take = 25;
					if (WinterFest.Bingo_Prize.size() < num_prizes_to_take) num_prizes_to_take = WinterFest.Bingo_Prize.size(); 
					if (WinterFest.Bingo_Id_Task.size() < num_ids_to_take) num_ids_to_take = WinterFest.Bingo_Id_Task.size(); 
					std::random_device rd;
					std::mt19937 g(rd()); 
					std::shuffle(WinterFest.Bingo_Prize.begin(), WinterFest.Bingo_Prize.end(), g);
					std::shuffle(WinterFest.Bingo_Id_Task.begin(), WinterFest.Bingo_Id_Task.end(), g);
					for (int i = 0; i < num_ids_to_take; ++i) {
						pInfo(peer)->WinterBingo_Task[std::to_string(i)] = WinterFest.Bingo_Id_Task[i];
					}
					for (int i = 0; i < num_prizes_to_take; ++i) {
						std::string key = (i < 5) ? "r" + std::to_string(i) : "c" + std::to_string(i - 5);
						pInfo(peer)->WinterBingo_Prize[key] = WinterFest.Bingo_Prize[i];
					}
				}
				if (pInfo(peer)->winterfest_wishes < 2100) {
					if (pInfo(peer)->Winter_Daily_Time - time(nullptr) <= 0) {
						pInfo(peer)->Winter_Daily_Time = time(nullptr) + 86400;
						pInfo(peer)->winterfest_quest_1 = 0, pInfo(peer)->winterfest_quest_2 = 0, pInfo(peer)->winterfest_quest_3 = 0, pInfo(peer)->reset_winterfest_quest_1 = 0, pInfo(peer)->reset_winterfest_quest_2 = 0, pInfo(peer)->reset_winterfest_quest_3 = 0, pInfo(peer)->reset_winterfest_quest_4 = 0, pInfo(peer)->reset_winterfest_quest_5 = 0, pInfo(peer)->reset_winterfest_quest_6 = 0, pInfo(peer)->reset_winterfest_quest_7 = 0, pInfo(peer)->reset_winterfest_quest_8 = 0, pInfo(peer)->reset_winterfest_quest_9 = 0;
					}
				}
			}
			if (not WinterFest.Active) {
				pInfo(peer)->WinterBingo_Prize = { { "r0", { 0, 0 } }, { "r1", {0, 0} }, { "r2", {0, 0} }, { "r3", {0, 0} }, { "r4", {0, 0} }, { "c0", {0, 0} }, { "c1", {0, 0} }, { "c2", {0, 0} }, { "c3", {0, 0} }, { "c4", {0, 0} } };
				pInfo(peer)->WinterBingo_Task = { {"0", 0},{"1", 0},{"2", 0},{"3", 0},{"4", 0},{"5", 0},{"6", 0},{"7", 0},{"8", 0},{"9", 0},{"10", 0},{"11", 0},{"12", 0},{"13", 0},{"14", 0},{"15", 0},{"16", 0},{"17", 0},{"18", 0},{"19", 0},{"20", 0},{"21", 0},{"22", 0},{"23", 0},{"24", 0} };
				pInfo(peer)->Has_WinBingo = false;
				pInfo(peer)->Has_BingoPrize.clear(), pInfo(peer)->Has_BingoTask.clear(), pInfo(peer)->Has_ClaimBingo.clear();
				pInfo(peer)->WinterTask_Prize.clear(), pInfo(peer)->Winter_Branch_Rewards.clear();
				pInfo(peer)->winterfest_wishes = 0;
				pInfo(peer)->Winter_Daily_Time = 0;
				pInfo(peer)->winter_power = false, pInfo(peer)->Already_Tried_Gob = false, pInfo(peer)->Bronze_Donatur = false, pInfo(peer)->Silver_Donatur = false, pInfo(peer)->Gold_Donatur = false, pInfo(peer)->Diamond_Donatur = false;
				pInfo(peer)->winterfest_quest_1 = 0, pInfo(peer)->winterfest_quest_2 = 0, pInfo(peer)->winterfest_quest_3 = 0, pInfo(peer)->reset_winterfest_quest_1 = 0, pInfo(peer)->reset_winterfest_quest_2 = 0, pInfo(peer)->reset_winterfest_quest_3 = 0, pInfo(peer)->reset_winterfest_quest_4 = 0, pInfo(peer)->reset_winterfest_quest_5 = 0, pInfo(peer)->reset_winterfest_quest_6 = 0, pInfo(peer)->reset_winterfest_quest_7 = 0, pInfo(peer)->reset_winterfest_quest_8 = 0, pInfo(peer)->reset_winterfest_quest_8 = 0, pInfo(peer)->staged = 0, pInfo(peer)->s4tb = 0;
				pInfo(peer)->winter_seal_branch_1 = 0, pInfo(peer)->winter_seal_branch_2 = 0, pInfo(peer)->winter_seal_branch_3 = 0, pInfo(peer)->winter_seal_branch_4 = 0;
			}
			/*Halloween Task Reset*/
			if (not Event()->Halloween) {
				pInfo(peer)->HalloweenTask_Prize.clear();
				pInfo(peer)->DarkKing_Sacrifices = 0, pInfo(peer)->halloween_q1 = 0, pInfo(peer)->halloween_q2 = 0, pInfo(peer)->halloween_q3 = 0, pInfo(peer)->halloween_q4 = 0, pInfo(peer)->halloween_q5 = 0, pInfo(peer)->halloween_q6 = 0, pInfo(peer)->halloween_q7 = 0, pInfo(peer)->halloween_q8 = 0, pInfo(peer)->halloween_q9 = 0;
			}
			/*Daily Earn Free Gems*/
			if (pInfo(peer)->EarnFreeGems.Time - time(nullptr) <= 0) {
				pInfo(peer)->EarnFreeGems.Time = time(nullptr) + 604800;
				pInfo(peer)->EarnFreeGems.Quest_1 = 0, pInfo(peer)->EarnFreeGems.Quest_2 = 0, pInfo(peer)->EarnFreeGems.Quest_3 = 0;
			}
			/*Daily Login Reset*/
			if (pInfo(peer)->daily_login_day - time(nullptr) <= 0 and pInfo(peer)->is_day < 7) {
				pInfo(peer)->is_day++;
				pInfo(peer)->claimed_daily_today = false;
				pInfo(peer)->daily_login_day = time(nullptr) + 86400;
			}
			/*Vip Daily Rewards Reset*/
			if (pInfo(peer)->vip_daily_day - time(nullptr) <= 0 and Role::Vip(peer) and pInfo(peer)->vip_day < 7) {
				pInfo(peer)->vip_day++;
				pInfo(peer)->vip_claimed_daily = false;
				pInfo(peer)->vip_daily_day = time(nullptr) + 86400;
			}
			/*Role Quest Reset*/
			if (pInfo(peer)->rolequest_reset_day - time(nullptr) <= 0) {
				pInfo(peer)->rolequest_reset_day = time(nullptr) + 86400;
				pInfo(peer)->role_quest = false, pInfo(peer)->complete_rolequest_day = false;
				pInfo(peer)->specialization_track = pInfo(peer)->quest_text;
				pInfo(peer)->role_quest_type = "", pInfo(peer)->quest_text = "";
				pInfo(peer)->total_quest_selected = 0, pInfo(peer)->quest_required = 0, pInfo(peer)->need_required = 0, pInfo(peer)->quest_number = 0, pInfo(peer)->need_sumbit_req_id = 0, pInfo(peer)->need_item_req_id = 0;
			}
			/*Biweekly Soul Reset*/
			if (pInfo(peer)->biweekly_reset_day - time(nullptr) <= 0) {
				pInfo(peer)->biweekly_reset_day = time(nullptr) + 604800;
				if (pInfo(peer)->biweekly_completed) {
					pInfo(peer)->biweekly_completed = false;
					pInfo(peer)->BiweeklyQ_1 = 0, pInfo(peer)->BiweeklyQ_2 = 0, pInfo(peer)->BiweeklyQ_3 = 0;
				}
			}
			/*Life Goals Reset*/
			if (pInfo(peer)->lifegoals_reset_day - time(nullptr) <= 0) {
				pInfo(peer)->lifegoals_reset_day = time(nullptr) + 86400;
				/*GIVENUP*/
				if (pInfo(peer)->lifegoals1 == false) {
					pInfo(peer)->seed_goal = 0;
					pInfo(peer)->lifegoals1 = true;
				}
				if (pInfo(peer)->lifegoals2 == false) {
					pInfo(peer)->gem_goal = 0;
					pInfo(peer)->lifegoals2 = true;
				}
				if (pInfo(peer)->lifegoals3 == false) {
					pInfo(peer)->exp_goal = 0;
					pInfo(peer)->lifegoals3 = true;
				}
				/*COMPLETED*/
				if (pInfo(peer)->lifegoals_1) {
					pInfo(peer)->seed_goal = 0;
					pInfo(peer)->lifegoals_1 = false;
				}
				if (pInfo(peer)->lifegoals_2) {
					pInfo(peer)->gem_goal = 0;
					pInfo(peer)->lifegoals_2 = false;
				}
				if (pInfo(peer)->lifegoals_3) {
					pInfo(peer)->exp_goal = 0;
					pInfo(peer)->lifegoals_3 = false;
				}
			}
			if (pInfo(peer)->surgery_type == -1) pInfo(peer)->surgery_type = rand() % 31;
			int subs = 0;
			Subscribtion::Has(pInfo(peer), subs);
			if (pInfo(peer)->starglitter_reset_week - time(nullptr) <= 0) {
				pInfo(peer)->starglitter_reset_week = time(nullptr) + 604800;
				pInfo(peer)->starglitter_seed = Environment()->small_seed_pack[rand() % Environment()->small_seed_pack.size()];
				pInfo(peer)->starglitter_seed2 = 0, pInfo(peer)->starglitter_combine = 0;
			}
			if (pInfo(peer)->starglitter_reset_month - time(nullptr) <= 0) {
				pInfo(peer)->starglitter_reset_month = time(nullptr) + 2592000;
				pInfo(peer)->starglitter_crystal = 0;
				pInfo(peer)->starglitter_email = 0;
			}
			if (pInfo(peer)->starglitter_reset_day - time(nullptr) <= 0) {
				pInfo(peer)->starglitter_reset_day = time(nullptr) + 86400;
				pInfo(peer)->starglitter_surgery = (rand() % 3 < 1 ? 0 : -1), pInfo(peer)->starglitter_fish = (rand() % 3 < 1 ? 0 : -1), pInfo(peer)->starglitter_place = (rand() % 3 < 1 ? 0 : -1), pInfo(peer)->starglitter_break = (rand() % 3 < 1 ? 0 : -1), pInfo(peer)->starglitter_trade = (rand() % 3 < 1 ? 0 : -1), pInfo(peer)->starglitter_sb = (rand() % 3 < 1 ? 0 : -1), pInfo(peer)->starglitter_enter = false;
				pInfo(peer)->starglitter_provider = (rand() % 3 < 1 ? 0 : -1);
				pInfo(peer)->starglitter_provider2 = (pInfo(peer)->starglitter_provider == -1 ? -1 : rand() % 450 + 1);
				pInfo(peer)->starglitter_geiger = (rand() % 3 < 1 ? 0 : -1);
				pInfo(peer)->starglitter_geiger2 = (pInfo(peer)->starglitter_geiger == -1 ? -1 : rand() % 7 + 1);
				if (pInfo(peer)->EarnFreeGems.Quest_1 < 6) pInfo(peer)->EarnFreeGems.Quest_1++;
				pInfo(peer)->growpass_quests.clear();
				pInfo(peer)->last_rated.clear();
				pInfo(peer)->w_w = 0;
				pInfo(peer)->growtoken_worlds.clear();
				if (Role::Moderator(peer) || Role::Administrator(peer)) {
					vector<int> list2{ 9904, 408, 274, 276, 9904, 408, 274, 276, 9904, 408, 274, 276, 278 };
					int receive = 1, item = list2[rand() % list2.size()];
					if (Inventory::Modify(peer, item, receive) == 0) {
						VarList::OnConsoleMessage(peer, "Your mod appreciation bonus (feel free keep, trade, or use for prizes) for today is:");
						VarList::OnConsoleMessage(peer, "Given `01 " + items[item].name + "``.");
					}
				}
				if (subs != 0) Subscribtion::Receive(peer, subs);
			}
		}
	}
	static void Punch(ENetPeer* peer, int item, int punch_x, int punch_y, int x, int y, bool bypass = false) {
		if (item <= 0 || item >= items.size()) return;
		if (Role::Administrator(peer) + pInfo(peer)->cheater_settings == 0 && (abs(x / 32 - punch_x) > 15 || abs(y / 32 - punch_y) > 15)) {
			if (pInfo(peer)->cheater_settings & SETTINGS::SETTINGS_0) autofarm_status(peer);
			return;
		}
		int c_ = 0;
		if (item != 18 and item != 32) {
			Inventory::Modify(peer, item, c_);
			if (c_ == 0) {
				if (pInfo(peer)->cheater_settings & SETTINGS::SETTINGS_0) autofarm_status(peer), item = 18;
				else return;
			}
		}
		if (pInfo(peer)->DrDes) {
			std::string name_ = pInfo(peer)->world;
			std::vector<World>::iterator p = find_if(worlds.begin(), worlds.end(), [name_](const World& a) { return a.name == name_; });
			if (p != worlds.end()) {
				World* world_ = &worlds[p - worlds.begin()];
				WorldBlock* block_ = &world_->blocks[punch_x + (punch_y * world_->max_x)];
				if (block_->fg == 0 and (block_->bg == 0 or block_->bg != 0)) {
					if (rand() % 10 < 2) {
						block_->fg = 1000;
						update_tile(peer, punch_x, punch_y, 1000, true);
						tile_update(peer, world_, block_, punch_x, punch_y);
					}
				}
			}
		}
		if (item == 18) {
			if (pInfo(peer)->punch_time + 100 > (duration_cast<milliseconds>(system_clock::now().time_since_epoch())).count()) return;
			pInfo(peer)->punch_time = (duration_cast<milliseconds>(system_clock::now().time_since_epoch())).count();
			if (Playmods::HasById(pInfo(peer), 28) or pInfo(peer)->hand != 0) {
				if (pInfo(peer)->last_inf + 1000 < (duration_cast<milliseconds>(system_clock::now().time_since_epoch())).count()) {
					pInfo(peer)->last_inf = (duration_cast<milliseconds>(system_clock::now().time_since_epoch())).count();
					pInfo(peer)->last_infected = punch_x + (punch_y * 100);
					bool infected = false;
					for (ENetPeer* cp_ = server->peers; cp_ < &server->peers[server->peerCount]; ++cp_) {
						if (cp_->state != ENET_PEER_STATE_CONNECTED or cp_->data == NULL or pInfo(peer)->world != pInfo(cp_)->world or pInfo(peer)->netID == pInfo(cp_)->netID) continue;
						if (infected) break;
						int last_location = pInfo(cp_)->x / 32 + (pInfo(cp_)->y / 32 * 100);
						if (abs(pInfo(peer)->last_infected - last_location) == 0) {
							if (Playmods::HasById(pInfo(peer), 28) && not Playmods::HasById(pInfo(cp_), 28)) {
								if (Playmods::HasById(pInfo(cp_), 25)) {
									for (ENetPeer* cp_2 = server->peers; cp_2 < &server->peers[server->peerCount]; ++cp_2) {
										if (cp_2->state != ENET_PEER_STATE_CONNECTED or cp_2->data == NULL or pInfo(cp_)->world != pInfo(cp_2)->world) continue;
										PlayerMoving data_{};
										data_.packetType = 19, data_.punchX = 782, data_.x = pInfo(cp_)->x + 10, data_.y = pInfo(cp_)->y + 16;
										int32_t to_netid = pInfo(cp_)->netID;
										BYTE* raw = packPlayerMoving(&data_);
										raw[3] = 5;
										Memory_Copy(raw + 8, &to_netid, 4);
										send_raw(cp_2, 4, raw, 56, ENET_PACKET_FLAG_RELIABLE);
										delete[]raw;
									}
								}
								else {
									infected = true;
									gamepacket_t p;
									p.Insert("OnAddNotification"), p.Insert("interface/large/infected.rttex"), p.Insert("`4You were infected by " + pInfo(peer)->tankIDName + "!"), p.CreatePacket(cp_);
									Playmods::Add(cp_, 28);
									Clothing_V2::Update_Value(cp_);
									Clothing_V2::Update(cp_, true);
								}
							}
							else if (Event()->Zombie_Apocalypse && not Playmods::HasById(pInfo(peer), 28) && Playmods::HasById(pInfo(cp_), 28)) {
								infected = true;
								Player_Respawn(cp_, 0, true);
								std::string name_ = pInfo(cp_)->world;
								std::vector<World>::iterator p = find_if(worlds.begin(), worlds.end(), [name_](const World& a) { return a.name == name_; });
								if (p != worlds.end()) {
									World* world_ = &worlds[p - worlds.begin()];
									if (punch_y < 0 || punch_x < 0 || punch_x >= world_->max_x || punch_y >= world_->max_y) break;
									WorldDrop drop_block_{};
									drop_block_.id = rand() % 2 < 1 ? 4450 : 12370, drop_block_.count = pInfo(peer)->hand == 9500 ? 2 : 1, drop_block_.x = pInfo(cp_)->x, drop_block_.y = pInfo(cp_)->y;
									Playmods::HasById(pInfo(cp_), 28, 1);
									VisualHandle::Drop(world_, drop_block_);
								}
							}
						}
					}
				}
				else {
				}
			}
		}
		int punch_ = 1;
		for (int i_2 = 0; i_2 < EditItem.size(); i_2++) {
			if (EditItem[i_2].ID == pInfo(peer)->hand or EditItem[i_2].ID == pInfo(peer)->necklace or EditItem[i_2].ID == pInfo(peer)->pants or EditItem[i_2].ID == pInfo(peer)->shirt or EditItem[i_2].ID == pInfo(peer)->face or EditItem[i_2].ID == pInfo(peer)->mask or EditItem[i_2].ID == pInfo(peer)->hair or EditItem[i_2].ID == pInfo(peer)->feet or EditItem[i_2].ID == pInfo(peer)->back) {
				if (EditItem[i_2].Far_Punch != 0) punch_ = EditItem[i_2].Far_Punch;
			}
		}
		if (item == 18 and punch_ != 1) {
			std::string name_ = pInfo(peer)->world;
			std::vector<World>::iterator p = find_if(worlds.begin(), worlds.end(), [name_](const World& a) { return a.name == name_; });
			if (p != worlds.end()) {
				World* world_ = &worlds[p - worlds.begin()];
				WorldBlock* block_ = &world_->blocks[punch_x + (punch_y * world_->max_x)];
				if (block_->fg == 0 and block_->bg == 0) return;
				if (punch_y == pInfo(peer)->y / 32) {
					if (pInfo(peer)->state == 16) {
						for (int i = 0; i < punch_; i++) edit_tile(peer, i == 0 ? punch_x : punch_x - i, punch_y, item);
					}
					else {
						for (int i = 0; i < punch_; i++) edit_tile(peer, i == 0 ? punch_x : punch_x + i, punch_y, item);
					}
				}
				else if (punch_x == pInfo(peer)->x / 32) {
					if (punch_y > pInfo(peer)->y / 32) {
						for (int i = 0; i < punch_; i++) edit_tile(peer, punch_x, i == 0 ? punch_y : punch_y + i, item);
					}
					else if (punch_y < pInfo(peer)->y / 32) {
						for (int i = 0; i < punch_; i++) edit_tile(peer, punch_x, i == 0 ? punch_y : punch_y - i, item);
					}
					else edit_tile(peer, punch_x, punch_y, item);
				}
				else if (punch_y < pInfo(peer)->y / 32) {
					if (pInfo(peer)->state == 16) {
						for (int i = 0; i < punch_; i++) edit_tile(peer, i == 0 ? punch_x : punch_x - i, i == 0 ? punch_y : punch_y - i, item);
					}
					else {
						for (int i = 0; i < punch_; i++) edit_tile(peer, i == 0 ? punch_x : punch_x + i, i == 0 ? punch_y : punch_y + i, item);
					}
				}
				else if (punch_y > pInfo(peer)->y / 32) {
					if (pInfo(peer)->state == 16) {
						for (int i = 0; i < punch_; i++) edit_tile(peer, i == 0 ? punch_x : punch_x - i, i == 0 ? punch_y : punch_y + i, item);
					}
					else {
						for (int i = 0; i < punch_; i++) edit_tile(peer, i == 0 ? punch_x : punch_x + i, i == 0 ? punch_y : punch_y + i, item);
					}
				}
			}
		}
		else {
			bool empty = false;
			int p_f = 1;
			for (int i_2 = 0; i_2 < EditItem.size(); i_2++) {
				if (EditItem[i_2].ID == pInfo(peer)->hand or EditItem[i_2].ID == pInfo(peer)->necklace or EditItem[i_2].ID == pInfo(peer)->pants or EditItem[i_2].ID == pInfo(peer)->shirt or EditItem[i_2].ID == pInfo(peer)->face or EditItem[i_2].ID == pInfo(peer)->mask or EditItem[i_2].ID == pInfo(peer)->hair or EditItem[i_2].ID == pInfo(peer)->feet or EditItem[i_2].ID == pInfo(peer)->back) {
					if (EditItem[i_2].Punch_Place != 0) p_f = EditItem[i_2].Punch_Place;
				}
			}
			if (item == 5640 || item == 9158) {
				bool place_punch = false;
				std::string name_ = pInfo(peer)->world;
				std::vector<World>::iterator p = find_if(worlds.begin(), worlds.end(), [name_](const World& a) { return a.name == name_; });
				if (p != worlds.end()) {
					World* world_ = &worlds[p - worlds.begin()];
					if (punch_y < 0 || punch_x < 0 || punch_x >= world_->max_x || punch_y >= world_->max_y) return;
					for (int i_ = 0; i_ < world_->machines.size(); i_++) {
						WorldMachines machine = world_->machines[i_];
						if ((machine.x == pInfo(peer)->magnetron_x and machine.y == pInfo(peer)->magnetron_y) and (machine.id == 5638 or machine.id == 5930)) {
							if (machine.buildmode) {
								WorldBlock* itemas = &world_->blocks[machine.x + (machine.y * 100)];
								if (itemas->spin and itemas->id == pInfo(peer)->magnetron_id) {
									if (itemas->pr > 0) {
										empty = true;
										if (items[itemas->id].blockType == BlockTypes::BACKGROUND && world_->blocks[punch_x + (punch_y * 100)].bg != 0 or items[itemas->id].blockType != BlockTypes::BACKGROUND && world_->blocks[punch_x + (punch_y * 100)].fg != 0) place_punch = true;
										if (items[itemas->id].blockType == BlockTypes::SEED) place_punch = false;
										item = itemas->id;
										if (p_f > itemas->pr) p_f = itemas->pr;
										if (p_f != 1 and not pInfo(peer)->autofarm) {
											if (punch_y == pInfo(peer)->y / 32) {
												if (pInfo(peer)->state == 16) {
													for (int i = 0; i < p_f; i++) if (edit_tile(peer, i == 0 ? punch_x : punch_x - i, punch_y, itemas->id, true)) itemas->pr--;
													if (itemas->pr <= 0) {
														PlayerMoving data_{};
														data_.packetType = 5, data_.punchX = machine.x, data_.punchY = machine.y, data_.characterState = 0x8;
														BYTE* raw = packPlayerMoving(&data_, 112 + alloc_(world_, itemas));
														BYTE* blc = raw + 56;
														form_visual(blc, *itemas, *world_, NULL, false);
														for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
															if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL) continue;
															if (pInfo(currentPeer)->world == world_->name) {
																send_raw(currentPeer, 4, raw, 112 + alloc_(world_, itemas), ENET_PACKET_FLAG_RELIABLE);
															}
														}
														delete[] raw, blc;
													}
													break;
												}
												else {
													for (int i = 0; i < p_f; i++) if (edit_tile(peer, i == 0 ? punch_x : punch_x + i, punch_y, itemas->id, true)) itemas->pr--;
													if (itemas->pr <= 0) {
														PlayerMoving data_{};
														data_.packetType = 5, data_.punchX = machine.x, data_.punchY = machine.y, data_.characterState = 0x8;
														BYTE* raw = packPlayerMoving(&data_, 112 + alloc_(world_, itemas));
														BYTE* blc = raw + 56;
														form_visual(blc, *itemas, *world_, NULL, false);
														for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
															if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL) continue;
															if (pInfo(currentPeer)->world == world_->name) {
																send_raw(currentPeer, 4, raw, 112 + alloc_(world_, itemas), ENET_PACKET_FLAG_RELIABLE);
															}
														}
														delete[] raw, blc;
													}
													break;
												}
											}
											else if (punch_x == pInfo(peer)->x / 32) {
												if (punch_y > pInfo(peer)->y / 32) {
													for (int i = 0; i < p_f; i++) if (edit_tile(peer, punch_x, i == 0 ? punch_y : punch_y + i, itemas->id, true)) itemas->pr--;
													if (itemas->pr <= 0) {
														PlayerMoving data_{};
														data_.packetType = 5, data_.punchX = machine.x, data_.punchY = machine.y, data_.characterState = 0x8;
														BYTE* raw = packPlayerMoving(&data_, 112 + alloc_(world_, itemas));
														BYTE* blc = raw + 56;
														form_visual(blc, *itemas, *world_, NULL, false);
														for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
															if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL) continue;
															if (pInfo(currentPeer)->world == world_->name) {
																send_raw(currentPeer, 4, raw, 112 + alloc_(world_, itemas), ENET_PACKET_FLAG_RELIABLE);
															}
														}
														delete[] raw, blc;
													}
													break;
												}
												else if (punch_y < pInfo(peer)->y / 32) {
													for (int i = 0; i < p_f; i++) if (edit_tile(peer, punch_x, i == 0 ? punch_y : punch_y - i, itemas->id, true)) itemas->pr--;
													if (itemas->pr <= 0) {
														PlayerMoving data_{};
														data_.packetType = 5, data_.punchX = machine.x, data_.punchY = machine.y, data_.characterState = 0x8;
														BYTE* raw = packPlayerMoving(&data_, 112 + alloc_(world_, itemas));
														BYTE* blc = raw + 56;
														form_visual(blc, *itemas, *world_, NULL, false);
														for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
															if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL) continue;
															if (pInfo(currentPeer)->world == world_->name) {
																send_raw(currentPeer, 4, raw, 112 + alloc_(world_, itemas), ENET_PACKET_FLAG_RELIABLE);
															}
														}
														delete[] raw, blc;
													}
													break;
												}
												else {
													if (edit_tile(peer, punch_x, punch_y, itemas->id, true)) itemas->pr--;
													if (itemas->pr <= 0) {
														PlayerMoving data_{};
														data_.packetType = 5, data_.punchX = machine.x, data_.punchY = machine.y, data_.characterState = 0x8;
														BYTE* raw = packPlayerMoving(&data_, 112 + alloc_(world_, itemas));
														BYTE* blc = raw + 56;
														form_visual(blc, *itemas, *world_, NULL, false);
														for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
															if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL) continue;
															if (pInfo(currentPeer)->world == world_->name) {
																send_raw(currentPeer, 4, raw, 112 + alloc_(world_, itemas), ENET_PACKET_FLAG_RELIABLE);
															}
														}
														delete[] raw, blc;
													}
													break;
												}
											}
											else if (punch_y < pInfo(peer)->y / 32) {
												if (pInfo(peer)->state == 16) {
													for (int i = 0; i < p_f; i++) if (edit_tile(peer, punch_x - i, punch_y - i, itemas->id, true)) itemas->pr--;
													if (itemas->pr <= 0) {
														PlayerMoving data_{};
														data_.packetType = 5, data_.punchX = machine.x, data_.punchY = machine.y, data_.characterState = 0x8;
														BYTE* raw = packPlayerMoving(&data_, 112 + alloc_(world_, itemas));
														BYTE* blc = raw + 56;
														form_visual(blc, *itemas, *world_, NULL, false);
														for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
															if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL) continue;
															if (pInfo(currentPeer)->world == world_->name) {
																send_raw(currentPeer, 4, raw, 112 + alloc_(world_, itemas), ENET_PACKET_FLAG_RELIABLE);
															}
														}
														delete[] raw, blc;
													}
													break;
												}
												else {
													for (int i = 0; i < p_f; i++) if (edit_tile(peer, punch_x + i, punch_y - i, itemas->id, true)) itemas->pr--;
													if (itemas->pr <= 0) {
														PlayerMoving data_{};
														data_.packetType = 5, data_.punchX = machine.x, data_.punchY = machine.y, data_.characterState = 0x8;
														BYTE* raw = packPlayerMoving(&data_, 112 + alloc_(world_, itemas));
														BYTE* blc = raw + 56;
														form_visual(blc, *itemas, *world_, NULL, false);
														for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
															if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL) continue;
															if (pInfo(currentPeer)->world == world_->name) {
																send_raw(currentPeer, 4, raw, 112 + alloc_(world_, itemas), ENET_PACKET_FLAG_RELIABLE);
															}
														}
														delete[] raw, blc;
													}
													break;
												}
											}
											else if (punch_y < pInfo(peer)->y / 32) {
												if (pInfo(peer)->state == 16) {
													for (int i = 0; i < p_f; i++) if (edit_tile(peer, punch_x - i, punch_y - i, itemas->id, true)) itemas->pr--;
													if (itemas->pr <= 0) {
														PlayerMoving data_{};
														data_.packetType = 5, data_.punchX = machine.x, data_.punchY = machine.y, data_.characterState = 0x8;
														BYTE* raw = packPlayerMoving(&data_, 112 + alloc_(world_, itemas));
														BYTE* blc = raw + 56;
														form_visual(blc, *itemas, *world_, NULL, false);
														for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
															if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL) continue;
															if (pInfo(currentPeer)->world == world_->name) {
																send_raw(currentPeer, 4, raw, 112 + alloc_(world_, itemas), ENET_PACKET_FLAG_RELIABLE);
															}
														}
														delete[] raw, blc;
													}
													break;
												}
												else {
													for (int i = 0; i < p_f; i++) if (edit_tile(peer, punch_x + i, punch_y - i, itemas->id, true)) itemas->pr--;
													if (itemas->pr <= 0) {
														PlayerMoving data_{};
														data_.packetType = 5, data_.punchX = machine.x, data_.punchY = machine.y, data_.characterState = 0x8;
														BYTE* raw = packPlayerMoving(&data_, 112 + alloc_(world_, itemas));
														BYTE* blc = raw + 56;
														form_visual(blc, *itemas, *world_, NULL, false);
														for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
															if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL) continue;
															if (pInfo(currentPeer)->world == world_->name) {
																send_raw(currentPeer, 4, raw, 112 + alloc_(world_, itemas), ENET_PACKET_FLAG_RELIABLE);
															}
														}
														delete[] raw, blc;
													}
													break;
												}
											}
											else if (punch_y > pInfo(peer)->y / 32) {
												if (pInfo(peer)->state == 16) {
													for (int i = 0; i < p_f; i++) if (edit_tile(peer, punch_x - i, punch_y + i, itemas->id, true)) itemas->pr--;
													if (itemas->pr <= 0) {
														PlayerMoving data_{};
														data_.packetType = 5, data_.punchX = machine.x, data_.punchY = machine.y, data_.characterState = 0x8;
														BYTE* raw = packPlayerMoving(&data_, 112 + alloc_(world_, itemas));
														BYTE* blc = raw + 56;
														form_visual(blc, *itemas, *world_, NULL, false);
														for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
															if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL) continue;
															if (pInfo(currentPeer)->world == world_->name) {
																send_raw(currentPeer, 4, raw, 112 + alloc_(world_, itemas), ENET_PACKET_FLAG_RELIABLE);
															}
														}
														delete[] raw, blc;
													}
													break;
												}
												else {
													for (int i = 0; i < p_f; i++) if (edit_tile(peer, punch_x + i, punch_y + i, itemas->id, true)) itemas->pr--;
													if (itemas->pr <= 0) {
														PlayerMoving data_{};
														data_.packetType = 5, data_.punchX = machine.x, data_.punchY = machine.y, data_.characterState = 0x8;
														BYTE* raw = packPlayerMoving(&data_, 112 + alloc_(world_, itemas));
														BYTE* blc = raw + 56;
														form_visual(blc, *itemas, *world_, NULL, false);
														for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
															if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL) continue;
															if (pInfo(currentPeer)->world == world_->name) {
																send_raw(currentPeer, 4, raw, 112 + alloc_(world_, itemas), ENET_PACKET_FLAG_RELIABLE);
															}
														}
														delete[] raw, blc;
													}
													break;
												}
											}
										}
										else if (edit_tile(peer, punch_x, punch_y, itemas->id, true, place_punch)) {
											itemas->pr--;
											if (itemas->pr <= 0) {
												PlayerMoving data_{};
												data_.packetType = 5, data_.punchX = machine.x, data_.punchY = machine.y, data_.characterState = 0x8;
												BYTE* raw = packPlayerMoving(&data_, 112 + alloc_(world_, itemas));
												BYTE* blc = raw + 56;
												form_visual(blc, *itemas, *world_, NULL, false);
												for (ENetPeer* cp_ = server->peers; cp_ < &server->peers[server->peerCount]; ++cp_) {
													if (cp_->state != ENET_PEER_STATE_CONNECTED or cp_->data == NULL) continue;
													if (pInfo(cp_)->world == world_->name) {
														send_raw(cp_, 4, raw, 112 + alloc_(world_, itemas), ENET_PACKET_FLAG_RELIABLE);
													}
												}
												delete[] raw, blc;
											}
										}
										break;
									}
									else {
										if (place_punch == false) {
											empty = true;
											VarList::OnTalkBubble(peer, pInfo(peer)->netID, "The `2" + items[machine.id].name + "`` is empty!", 0, 0);
											autofarm_status(peer);
										}
									}
								}
							}
							else {
								if ((item == 5640 or item == 9158) and not empty) VarList::OnTalkBubble(peer, pInfo(peer)->netID, "There is no active `2" + items[5638].name + "``!", 0, 0);
								autofarm_status(peer);
							}
							break;
						}
					}
				}
				return;
			}
			int adaBrp = 0, remove = 0;
			bool removed = true;
			Inventory::Modify(peer, item, adaBrp);
			if (adaBrp >= p_f) {
				if (p_f != 1 and not pInfo(peer)->autofarm and items[item].blockType != BlockTypes::CONSUMABLE) {
					if (punch_y == pInfo(peer)->y / 32) {
						if (pInfo(peer)->state == 16) {
							for (int i = 0; i < p_f; i++) {
								if (edit_tile(peer, i == 0 ? punch_x : punch_x - i, punch_y, item, true)) {
									Inventory::Modify(peer, item, remove = -1, removed), remove = 0;
								}
							}
						}
						else {
							for (int i = 0; i < p_f; i++) {
								if (edit_tile(peer, i == 0 ? punch_x : punch_x + i, punch_y, item, true)) {
									Inventory::Modify(peer, item, remove = -1, removed), remove = 0;
								}
							}
						}
					}
					else if (punch_x == pInfo(peer)->x / 32) {
						if (punch_y > pInfo(peer)->y / 32) {
							for (int i = 0; i < p_f; i++) {
								if (edit_tile(peer, punch_x, i == 0 ? punch_y : punch_y + i, item, true)) {
									Inventory::Modify(peer, item, remove = -1, removed), remove = 0;
								}
							}
						}
						else if (punch_y < pInfo(peer)->y / 32) {
							for (int i = 0; i < p_f; i++) {
								if (edit_tile(peer, punch_x, i == 0 ? punch_y : punch_y - i, item, true)) {
									Inventory::Modify(peer, item, remove = -1, removed), remove = 0;
								}
							}
						}
						else {
							if (edit_tile(peer, punch_x, punch_y, item, true)) {
								Inventory::Modify(peer, item, remove = -1, removed), remove = 0;
							}
						}
					}
					else if (punch_y < pInfo(peer)->y / 32) {
						if (pInfo(peer)->state == 16) {
							for (int i = 0; i < p_f; i++) {
								if (edit_tile(peer, punch_x - i, punch_y - i, item, true)) {
									Inventory::Modify(peer, item, remove = -1, removed), remove = 0;
								}
							}
						}
						else {
							for (int i = 0; i < p_f; i++) {
								if (edit_tile(peer, punch_x + i, punch_y - i, item, true)) {
									Inventory::Modify(peer, item, remove = -1, removed), remove = 0;
								}
							}
						}
					}
					else if (punch_y < pInfo(peer)->y / 32) {
						if (pInfo(peer)->state == 16) {
							for (int i = 0; i < p_f; i++) {
								if (edit_tile(peer, punch_x - i, punch_y - i, item, true)) {
									Inventory::Modify(peer, item, remove = -1, removed), remove = 0;
								}
							}
						}
						else {
							for (int i = 0; i < p_f; i++) {
								if (edit_tile(peer, punch_x + i, punch_y - i, item, true)) {
									Inventory::Modify(peer, item, remove = -1, removed), remove = 0;
								}
							}
						}
					}
					else if (punch_y > pInfo(peer)->y / 32) {
						if (pInfo(peer)->state == 16) {
							for (int i = 0; i < p_f; i++) {
								if (edit_tile(peer, punch_x - i, punch_y + i, item, true)) {
									Inventory::Modify(peer, item, remove = -1, removed), remove = 0;
								}
							}
						}
						else {
							for (int i = 0; i < p_f; i++) {
								if (edit_tile(peer, punch_x + i, punch_y + i, item, true)) {
									Inventory::Modify(peer, item, remove = -1, removed), remove = 0;
								}
							}
						}
					}
				}
				else if ((p_f == 1) || (p_f > 1 and (item == 32 or item % 2 != 0 or items[item].blockType != BlockTypes::CLOTHING or item == 18 or item == 6336 or items[item].blockType == CONSUMABLE)))
					edit_tile(peer, punch_x, punch_y, item, false, false, c_);
			}
			else if ((adaBrp < p_f and adaBrp != 0)) edit_tile(peer, punch_x, punch_y, item, false, false, c_);
		}
	}
	static void Move(ENetPeer* peer, PlayerMoving* data) {
		for (ENetPeer* cp_ = server->peers; cp_ < &server->peers[server->peerCount]; ++cp_) {
			if (cp_->state != ENET_PEER_STATE_CONNECTED or cp_->data == NULL || peer == cp_ || pInfo(cp_)->world != pInfo(peer)->world) continue;
			data->netID = pInfo(peer)->netID;
			SendPacketRaw(4, packPlayerMoving(data), 56, 0, cp_, ENET_PACKET_FLAG_RELIABLE);
		}
	}
};
#include "UcihaVallen/Handle/DialogReturn.h"
#include "UcihaVallen/Action/action.h"
#include "UcihaVallen/Dialog/dialog_return.h"
#include "UcihaVallen/Server/server_pool.h"
#include "UcihaVallen/Commands/Commands.h"